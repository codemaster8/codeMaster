<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Solekai" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Dynamic LASP Test Cases"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\StreamCreate - Dynamic LASP Test Cases"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Sanity_TestSuite"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="End_To_End"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\reports"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2E" type="rest" basePath="" definitionUrl="" id="a60a9e2e-e3ba-41b7-ac00-0880bb232d63" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="c5384778-fa15-492e-98d2-cd38b37bca87"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="4236cf89-badd-4da3-be41-212ecb32cd9f"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="fbf0a345-7ac3-439c-a9eb-0973ad3dae25" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="a4cc87d9-ae80-4e46-a00f-712a23d6055a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateUser" method="POST" id="f0f2e4f0-1ce8-4cfb-afbb-ede68bf7f618"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="cc17343d-c656-4b2b-8269-776e6ce4386d" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyCreateAccount" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="46f65468-d068-470e-8552-c4ff2859c054"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="PolicyCreateAccount" method="POST" id="70eaefb7-c66a-4aa5-9b72-73c018dae09d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" basePath="" definitionUrl="" id="2b3704da-bbbb-4106-b88e-5756034fd704" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="7c15b9b1-5d7e-4f2a-8325-6e517c302aba"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="a076e7ed-3e15-4998-996d-25eadf6f6e2a"><con:settings/><con:parameters/><con:request name="Request 1" id="4116984e-845f-4cdc-b327-bf28be8e19eb" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="dc22c6a4-a34f-4837-891b-f49d7ab127d3"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#Node_Account_ID}</con:default></con:parameter></con:parameters><con:method name="AccountUpdate" method="PUT" id="a1265a96-58b0-47f6-af66-9c9b95ba6618"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_schema}">proj:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#Coordinator_schema}">proj:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="${#Project#Coordinator_schema}">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="758d0cd6-9d3d-42d8-a6b1-a3d503080e09" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="2a3710c4-68f5-44bf-bdf8-5e1aae0a0de6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#Node_Account_ID}</con:default></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="e0eb8689-ff9d-4c60-b0d5-91cd129613c3"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:Account</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="3767015c-0965-42b5-8558-47b953d33641"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="a327844e-455e-4718-b50a-a2fd9da779a7"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#Node_Account_ID}</con:default></con:parameter></con:parameters><con:method name="AccountDelete" method="DELETE" id="d7b218ba-01f0-47ba-9b2c-bb6ae96a700f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="User" type="rest" basePath="" definitionUrl="" id="2e682464-d1f4-46fc-9da4-0ccccde46bad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.rest.actions.service.Wadl2JavaAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Java Args" value=""/>
  <con:entry key="Output Directory" value=""/>
  <con:entry key="Package" value=""/>
  <con:entry key="JAXB Customization File(s)" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Automatic Package Names" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="User_API" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="0c8174b5-3220-4153-95b8-e0573d7c904c"><con:description/><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:resource name="UserGet" path="{UserID}" id="bdef12d4-97ec-43aa-8944-3c88e649824c"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true" disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="fe6ed9dc-45bb-4044-98b5-da432363b947"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:User</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901_concat.pem" id="0d647a5c-fada-4b07-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request><con:request name="UserGet_BasicAuth" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="4553a6ad-ed9c-479c-bdba-8c19d8a65aee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:username>shikha_account_get_user1</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:AB1D1CBC814D4D11E0401F0A07997B60"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:AB1D1CBC81524D11E0401F0A07997B60"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="2a75f86c-9ff5-45ff-84b7-a90995a7d9dc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="2763722f-c825-4357-bf2c-e51d24d0c702"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="b4329d9b-1b13-45c7-ae21-f41e414a12c6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="bd315131-0490-434b-a772-ffe73481d151"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="c1897df5-c4db-4c07-b621-a15652594a4d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="cbc1da50-d46c-41ad-ae90-1e81d73552cf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID}"/>
  <con:entry key="UserID" value="${#Project#Node_User_ID}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="23016557-501a-48f8-b51e-7148ff32ac5d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="5dda1da8-abca-4de4-a94f-fca684152959"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID}"/>
  <con:entry key="UserID" value="${#Project#Node_User_ID}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="f1acf72d-2bb6-4052-bed0-2526c15ee49b"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="14870ecb-83d2-4746-b865-b03922902454"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZd6rKEn73V7jYj1mGQYnDSjyrGUVFBQGHN4QWUAalQdBff1qNbpOdPd17H+5DVuyihq+qvu6ufv2njMLqAaYoSOI3gn6miCqMncQNYu+NMA2p1iL+6VZekR2FTAcgBNMMa1YV4Y1Yr1auy1BMzWk4dq0B2WZtVWfsWpOiaIomqgpCOVRilNlx9kYwWFijmjW6bdAvHabVoahnlmaXRNW6RWfO0TGeGHUu8d6IPI07iY0C1IntCKJO5nSmQB12sGbHvoEhuu/wLgFTsvvqos408GI7y1P47tBFb4SfZbsOSRZF8VzUn5PUIxmKokiqTWIdFwXeNwKn+m4MXSVeJ9c1b8dJHDh2GJzsc0QVZn7iVkHoJWmQ+dFPXNMkTZ1d12Dp1By6EX8jyO8BLuj+0NMHkCmya8i36ZszHa5hipsGq6auvBHfftOXq5GR2jFaJ2mEPq3/DguMDzBMdtCtoVtKN1h/7vGLOnVfodNRYifMUXCAo3Pzd7YDUXWSwnVQDgOEKeWi6qXx1RLdeAOdv+nFK/mIE8Mmv6iMEHgQZf9Jox6bdPVi2WEOu/2tldXJzQAV7GkszTc9xu+jSI57tPJ2gfCofAV17/H7+jND74R6N+IzercX3VNjqWlLk3Jh7NpHhxO3XCq6M7NhbXsN8QC8Ax/k4/leGDAnQI0Kd7Ln5h61d5psXzCbVHK08rASLdvrMd92mqhlhpbHs8yYPkrrZBcY/HhVvtQ1uGfqHmzv9lmasclh569tb8qyJRy8jObLCKQ9OhIZL6eTStgbyosna5oc6FgHHgOk1tv3nB5zOOc1gMdLkuffc5ZqC3Zm3xf8ef+v8b7MYFdVFCE/8Tw4Tj1QKBzw8N8GjDhvu/e3gdwuKA5omgQEngs34lAFWxnQpsj5Km9ZasmfQJ/zRhY2NCogXHKqLhZCsRAsTeuJhW+4snVcyWG+PIkjFaCLMe+roi5agm6IqgqSq6xUhZVcbtSpWijaQqhgB4JY7k6u3M6gXAYOo7DqlGUWUzZfzi0sl47DaHRYGWKo8qrMT/fyVFnVBU3sA30xcxgpx7anYbRLKguTezDq7+AGQKmgcExwUo1toRomMxJ0+yIzPspURe6rGip47ZKVXBGLvmWevteC51TejcRSNMDkWgvH4KURtZz3kT1jY1UHheBdjAdi4Y5vQFSNKir8tVZDsdBF3RxJqq4UIrjIBLEI0YoZ+SvZPzh1rewbYPPYGF4TZ1KMv8f6wTmy+4otS2AVWbRT130nYAN7nhTeslUI2qI/SJYKdjMCmshxGsCAKHBODdefA0POYse7oM0EcLiWkgj6aUWlk8H2cCqpVlAfe5PRjBXW2+ZEDiZ12/VJJXSYTX0LFAW6A9rXbFdfkLoQB6eX8cCcwyBdnLIRq9EvQYut6LPcnAtJ2HR784U5eCoXjmaMJ1NzNjmV5Wi/aZ3CrDfmeum0rwreeAThBDlPJGVLnNESWH7R22A+rXUKshXgqRwA8sbzxAATmOttriTs6aqIyQtUvpD5GS9PgSw/iQonaNpa8umJI1u5SY9URXRDXKbjYq6HlSXPCbhTlD1b7haMRC0N4F6caQ1R8jSTferP4VIbhYaVgWJnrWOapuSd1lurheeoZwa4SjHl8C7iKrkCTHu861PlwHqh6L3mhv1pG5j1cspsy7HvLY9bb7nFTVk8bJ2FAULLeOCYgik2q2iGqKugdd1vpaqYdT10onK3ipxSMHDPLsaJwYm6pFFmKQhgcJUhAzAlWpzEjcqLF/sKKFUb0+KwmvtoEY+CsSHmmLT5A102K4b6LcfOFKt85NieBxr4zDHxyjERrPdPSkugEfvC79Cs8DhZ3GtNa9hv7yhtPtxWuCeJ9LIgbIzjVmEMnmb0sWj6G202ayuCzz/F64VfX2UcZZ8cDfa3TTnQt0L80giP6lDVWDMgwyO1gfsCDSsjhY7FenaSyHaaP3HRMohOp3qDMaPJND8opj1A9NFf7WftYjPpvZBkKh/ZU3N50KR54iyu98jnQ/IuvB6j5OMB++EEvk1U03y1gU52W57vYUWoSvhytLOfT2f0M32RBG5tfVHt5DHaQQfDgC7RXafQTV7JR5ef4vFJvA7OhudR83rz/noWdKLOCtopTIlfeDonXVViHY8SSYygkbwRCJ8QeRzsc4zVxxcsUR0l2Tgep2CdwfQytNJfD606TmcXwPNk+zAIwNKOdiF8dpKItB0nyeMM4R/oMmv8FNjnb7ccsI4bnBXQGRYHcTHh50GapjvMDdMfYr+5B7kbnEcKXJAsDZwrko+fuu+5ocyFzt4+2Dv6+WA/xzDHU316SfOG/W7yWfDBPfk5s3tE9xA4d97dHxqKgCefLuB4Qbz7/fjtswWegc/iM3CEkWPc8I53FZzI+7MB/YMfMfbKceEPnt993OUfseWZH08zvJ8i3P7qZfn7V84Ha5x+BsvsKxkfYoDn4L98+jgd56yHxRP8r0hS93vVv/D11cePwns+d0wZbtoqz+DPv1TPe/eNeOd54BIXwe1weNgVj+UXRF4kwdVEEYgfnF5mv/dhvvzZm40m5+pw6vgwsom7bvB75Vpw6ZOD9znW72THHcZf4tcmDh57RJdm6g32XpcPkLo/iH+U/BdFTG/z/d+UURel/7sSAkngeFxHfFXVG/+TUn7enN1/AQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}:444</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" ?> 
<User UserID="urn:dece:userid:org:dece:76474" UserClass="urn:dece:role:user:class:full" 
    xmlns="http://www.decellc.org/schema/2010/10/dece"
    xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
    xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
    xmlns:md="http://www.movielabs.com/md"
    xmlns:dece="http://www.decellc.org/schema/2010/10/dece"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.decellc.org/schema dece.xsd">
   <Name>
      <GivenName>Jessica11</GivenName>
      <SurName>Harbor</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail>
         <Value>jessieharbor@abc.com</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>jessie_harbor@yahoo.com</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </AlternateEmail>
   <Address>
	<PostalAddress>301 Copperfield St</PostalAddress>
      <PostalCode>08810</PostalCode>
      <Locality>Dayton</Locality>
      <StateOrProvince>CT</StateOrProvince>
	<Country>US</Country>		
  </Address>
   </ContactInfo>
   <Languages>
      <Language primary="false">de</Language>
  </Languages>
<Policies>
<!--Policy Status="urn:dece:type:status:active">
        <PolicyClass>urn:dece:policy:MinorUser</PolicyClass>
        <Resource>urn:dece:agreement:coppa:900</Resource>
       <RequestingEntity>urn:dece:userid:org:dece:76488</RequestingEntity> 
        <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
        <PolicyCreator>urn:dece:userid:org:dece:76488</PolicyCreator>
</Policy-->
<Policy Status="urn:dece:type:status:active">
        <PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</PolicyClass>
        <Resource>urn:dece:agreement:enduserlicenseagreement:84737262</Resource>
        <RequestingEntity>urn:dece:userid:org:dece:76488</RequestingEntity> 
        <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
        <PolicyCreator>urn:dece:userid:org:dece:76488</PolicyCreator>
    </Policy>
</Policies>
   <DateOfBirth>2010-07-01Z</DateOfBirth>
   <Credentials>
      <Username>jessi1002</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <UserStatus>
      <CurrentStatus>
         <Status>urn:dece:type:status:active</Status>
         <StatusDate>2010-08-04T00:00:00.000Z</StatusDate>
         <StatusModifiedBy>urn:dece:org:org:dece:10</StatusModifiedBy>
         <StatusDescription>User Updated</StatusDescription>
      </CurrentStatus>
    <StatusHistory/>
   </UserStatus>
</User>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900101"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:76488"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserGet_List" path="List" id="28fb67ae-8817-48f6-9746-d830a4043891"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="b272c040-3db5-4c30-8b5e-31f7d4b2505d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:UserList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2c6efed1-a2fd-4567-bc03-5922f8dd548b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_Filters" method="GET" id="9edb7a4d-69a4-4336-b16e-9afcc853786e"><con:settings/><con:parameters><con:parameter><con:name>offset</con:name><con:style>QUERY</con:style></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>class</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:option>urn:dece:type:viewfilter:displayname</con:option><con:option>urn:dece:type:viewfilter:surname</con:option><con:option/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>chunk</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="b57067a9-22e8-474b-9e82-7edd62c63c5f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="class" value="urn:dece:type:viewfilter:displayname"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="0c9d65be-36b5-4127-85b4-5fe08d2bb8fc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="30324bb9-0e99-48cb-a816-97e93b74a610"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="57430238-553a-4edd-87a2-8dc2395ece1d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="ad3ad536-a1ed-4e18-841d-a602f0334a31"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="c2dce4ce-3228-4b71-b8ed-65b1bfc671ea"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="825e86c3-a6cb-479f-bdef-9ba37e535249"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="625ec8f8-4bdb-4e05-9b60-aa4831181acb"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="49b49428-b176-4437-9a8b-01cacba6310b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="0df5d29d-eab1-4935-a695-21a618dabfa6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="8cbc0252-d808-4f30-80f1-cb2392dea466"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:3823102" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserUpdate" path="{UserID}" id="d09813ab-8c3f-484f-824e-eb60098a0f8c"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true" disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserUpdate_PUT" method="PUT" id="bb1b7125-520e-424b-921e-72a6781d8c6f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="UserUpdate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901.pem" id="7911d39c-d7fa-4537-abd8-4fa853f207cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdpc6pME/3ur7C8Hy3DorhVkqphkaCigrh+YxkWRVAGBPn174DRmNzk3vu8qUol03T3nO4+DGeekX7w6T5ACEaxFwZViX+pmRTTsckm2dCtDtlotaluo8eQrUanTRqM2TIhNJhaVUIogVKAYj2IX2o0SVENim5QbY3q9FvNPtV6Inutba26hBHCmbHLE1mrZgc/QP1y15daEgX9UEce6gf6AaJ+bPbnQB73sWdfv0GqvT5fQZYbRq9uHB/7BGE+WdCEvm8+meGBeCY++TxbqD/3nECPkwi+72mhl9p7bJqmT2nzKYwcgiZJkiB7BPaxkOf8qr1WbsHQkgI7vK45PQgDz9R9L9cLUDKM3dCqAt8JIy92Dz+kpgiKLFI3YGY2TKoV/KoRHxuU6P4x0yeQEdIbyNWpWzIV2jCCgQmrC1V6qf36pwFeQ7VID5AdRgf0Zf3fEMHgDP3wCK0GuhV2A/fvGb/p1uszNPtSYPoJ8s5wUrDkqJsQVWcRtL1s7CHMPQtVy+lXM3QjGDT/y0SeiUecGDbxTWd4z4Eo/n/G9Tiqa5al7ifwNRed0ylRsjab9FYLKj0rCnfxxJXQa72UEB6dr6Duk35ff+XpnVbvQXxreBAM2KG3u9yO6+vDzoWCltN1vW5Y/sQdDw35ZGcRJHjaYtY9bRC5USLL6oritBZvp0b61vVs0t1TrYq3HvfUybarjZJ8fTESK3e3rbO5tptDop5SBttSszAZM8Ndk1opGz+36YnEs7MxoRldqR4aekSc9xeyO5LaFTRbnLe7kZK741QfN9mOs3n5qOmxhqKuEbyURRb/rxmyx+uxfl9wxUFh47czhq+yJPFJznHgMndAKrHAwb87MGGd/cnde2IvJVmgKAPAc6y/E8Yy2IuAWgisK3PLpZxxORiyzmSJA7UK8LesrAopn274paK8CamrWeLyYoh+ss2FiQxQGcy5sqAKS17VBFkG4dWWybwhZjt5LqeSsuErOAEvZMfcEnsxFDPPpCVGnjP0Zs4k2/US2weX8WFyNjTBlzlZ5OYncS4ZTV4RhkDdrEx6kODYfHw4hpXNgn0IGh7hDsBBSuI9QS5r+1TWFvSEV/XSpn22yZI4lBWUckpZlVgR0uFykX/0gmNlzjoImaCB2bUXpsYNJuR2PUT6iglkFaS8UwaPhNSa3oDICplWuGuvxkKqCupiMpBVKRVAaeOF1EcGPXEN0T2bTSUbamD3OBhOEVaDAD8P1LN5YU4VXRwA47CkzKbqmh7j6eswdbbdlFc2w1G4lXCaCVAEllUABkSCojTcfxaM2SUzPXo92oNjexAeoBtVZCoc7c95Rna95tSZTVYMb+87M9GbNXXLJSTfpHfNPZAkaI0oV9EtdUOofODl7elosYZetMnjCaNQba/LVNRVsljzod+x3tabxaiebUxFm87mi9Usz7LJadfN/fhtyr5F86HMO9MJhDNk1glSH7Bal2e4zdsO88lWSchUgCOzAIg7xxE8TGD2bXcl4ZsqC5i8QOZSkVtx4hyIYl2QWF5R7IFLzUxxmSyoiSwJlo/bdNmsVb+y5VgeT4rUV9vjhh6QWw1YZTKlJQwcZcHUh2u4VSa+toxBelzaAUWR4lF5s+XUMeWCAZaUzln8FrGVRAILfXocktlo2Sapk2L5w3kPLJrZnN5nU9fZXvbOdo+Hsnl4dTYa8JfaA8ckTLFVRdEEVQbd6/uWydKiqfrmITsaBzPjNTyzMjjUWEEdKOQi43kwutqQBugMbXJhJ3NCGV8BmaxjWpyNtYs2wcSbakKCSZs80GVn0ORfOVZQrPKZYycOKOArx4QrxwRgn+pSl6cQ0+aOaJU6rCiclM5yPOwdSWU93lfY+oBwYs9vTYNuqo3qK+qSdtydslr1JN7l6oG9cZtGzJJ6bipwuO+Inrrng3bLv8hjWWEWHuFfyB08pWhcmUhUIDTjfED0oqTOHrbeIc+bLXpxmM2Ts7TQR4i6uMZp1Ut3s7c2QUTihck727MyWIfm5vod+XpI3o3XY5R4PGA/ncA36TVPjB0049uy+A5LfHWAP456/GcZV1g8q2GXrv1joQVRDIO49lpEFRKun2Ch51l9/OW8rimSYkjypuiue30BwoWB7RUZC8l6/ST/GYZ56BtQj2BU+0OmohtVKVCxxggDBLXwpdYkWYGnB226CWj8XgmdFjvgBy2u3RZaPbrXqlUnYTwNphGwYxg9yODOVxmsQtM7erDQyu+KAcW43JN+TmKfejrrTwFMsJiOCj3bp1tdhkDe4ejDAi5xCK3Eh09H91i2hUDXv3RDN1Fp7eEfkiq1zI/1fX12awX2sbzCARXVsBAPC36j6MlbKb+VTH+r/G/pQWJ5hWTBfY0jz7wi+fzogwwFC+5MuBZ1Q313/mr4lJj4WtN9L+vsmXdG3288WDFjUVXeKhAeykl/Oj0l53NSjqFTCMYIpycogqSJOTQTrPouWriHAXFPQfyL3r6D/rLx3f4ZXhK7wTzGL+sBU6ZaLv9+1/oUjTsQwyz+zsb5+HZVbP7HC5jZNws/bJ7hP2kYWR+N/ybXwz4YcnHQeIFTrAqhfPlhwmaI03r4sAmjx+TfJfhu88/Ge7/uWGLMCyOJ4c9PqsX58lLTTTNMgljia6Xh8WQrccaXI+x/OP2WppSq73ePDP1491jL47npwoNeu/t6f3dueOXkTYijkFdieall+BaNNw+ch5P0HeDjYdrDmcgP8n3C+/qb+XfLQ+e+Evj1fw==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" UserID="urn:dece:userid:org:dece:101500" xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>Shikha_get_user</GivenName>
      <SurName>Gupta</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:10" verificationDateTime="2012-09-28T20:26:07.440Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator-Confirmed">
         <Value>update@vijay.com</Value>
         <ConfirmationEndpoint>Coordinator-Confirmed</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>shikha82@gmail.com</Value>
      </AlternateEmail>
      <TelephoneNumber>
         <Value>+1.7033453434</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7033453434</Value>
      </MobileTelephoneNumber>      
   </ContactInfo>
   <Languages>
      <Language primary="true">en-gb</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1993-09-28</DateOfBirth>
   <Credentials>
      <Username>Fshikha_user_get_user</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:900105"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:101500"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="UserGet_List_Response" path="List" id="e59b674e-8b21-46ec-9559-e9c1ebc6e569"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true" disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="f0984126-a94d-4ccd-adaa-6a806cce3583"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="de229466-db62-466d-b04e-85282fe63675"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_Filters" method="GET" id="4dc0c6e3-63ad-4d52-b0d8-1e72acad3d5c"><con:settings/><con:parameters><con:parameter><con:name>offset</con:name><con:style>QUERY</con:style></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>class</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:option>urn:dece:type:viewfilter:displayname</con:option><con:option>urn:dece:type:viewfilter:surname</con:option><con:option/><con:description xsi:nil="true"/></con:parameter><con:parameter required="false" disableUrlEncoding="false"><con:name>chunk</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2a4c221d-2446-4ab6-977d-09aa63bd43a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="class" value="urn:dece:type:viewfilter:displayname"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="d3996373-48ae-4a67-86c5-a8e04b6fd163"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="bbc1b4c8-f974-48f6-bd0c-276d48e53a48"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="927ad179-fd51-410c-af6b-33bab9bf1fc3"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="0938e6f2-c97b-4b85-807e-1d98c099a472"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="460ac525-0bce-410b-9b15-e39ec0984b42"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="7c7b2faf-5501-404c-a662-e6803723ca3f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="90461862-9ba4-489a-a9c7-2aa6bf16f4f3"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="86eed746-71a2-41fa-a4ef-c2a7af1e13ff"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_PUT" method="PUT" id="c97c5da9-6530-4b10-bcbb-72b3d7d8f077"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="application/xml" id="1de69198-58cf-48dc-8d9c-83605190515a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=zVdZl6q6En73V7jcj71sBsVWV7dnhbFRUUEc3xjCoAhKQNBffwK2bu3de7r3PtwHl6RSVfmq6ktSef0n3wXVI4yRH4VvNeqZrFVhaEW2H7pvtZku1tu1f3qVV2TsAroLEIJxgjWrMv9Wc0zTtmmSrltNy6g3IfNSNxu0UW+0zBZlNJxmo9GpVWWEUiiHKDHC5K1GkxRZJ1t1itRpskuSXYZ8Jjutda06v2KgCwwYVYi65apvtTQOu5GBfNQNjR1E3cTqToEy7GLNrnGFVOt9gCwXjIneq426U98NjSSN4YdDG73VvCTZdwkiy7LnrPEcxS5BkyRJkB0C69jId7/VcMAfxtCWQye6jDkjjELfMgL/bBQrKjDxIrsKAjeK/cTb/cQ1RVBk4boOc6tuUc3wW434vkCJ7g89PYCMkVFHnkFdnWnQgTEuHazONPmt9u2PqnMx1WMjRE4U79Cn8d8hguERBtEe2nV0DewK7s89fpGt3iu0unJoBSnyj3BUUGBvWBBVJzF0/HzoI0wsG1XL8ldzdGUPtP6mIq/EPU4Mm/giM7zvQpT8J+W6L9XFy9wIUtjLdkAzpba4eJnJyVKe5v2X5fjADo6p+1ZCuFe+gLpV+mP8mac3Wn0YCZMD3Va209Nq781Fx1rAZDhvqJTeNhbIGVpzo69HQ26oODxgB6PxPDOyPKUWo/14K62azK49YoOBl/dFd1VRjEQCQUwvstNAWB7sGIGnd3LCTc+LhrZuCVuw5fud0JSYDe2zLzM9Pa5J1RLDc8w3E0ZvefLekejtbgDtSpQ2Dfu04QIXNsXBU+765Nv3mO5jKOIawFMZZPG9ZMgObyTGbcAVp4CDd2cCe4os8+mZ48Bp6oJMZoGLfxswYt3twdv6UicjWaCqIuA5NtgIQwVsJUDNBNZTuPlcybkz6LPuaI4N9QoI1qyiCRmfrfi5qr4Lmafb0vxkSkG6PgsjBaDSmPMUQRPmvKYLigKiiyxXeFPKN8pUyWR1xVewA17I92db6iRQyn2LlhllytCrKZOul3MsF0/D3eho6kKgcIrETQ/SVDYbvCr0gbZaWLSYYtvzcLePKqsZe2fU38MNgGJG4jXBWdG3maLP6BGvGaVMf5QpstRXVJRxahmVVBGy/nx2/p4LjlU4eyfkgg4ml1xYOieOyPWyj4wFEyoayHi3NB4ImT2+AlFUMqtwl1wNhUwTtNlIVDQ5E0Ap44UsQCY98kzJO1oNNe/rYHNfGE4VFmKI50PtaJ2YQ8WQRGDu5pTV0DzLZ3xjGWXuup3x6qo/iNYydjMCqsCyKsCASFCEhvPPgiE7Z8Z7v0P7cOiI0Q56cUWhosH2eM7Jtt8Yu5PRguGd7ctE8icNw/YIObDoTWMLZBnaA8pTDVtbERof+ufWeDBbQj9enZMRo1Itv81UtEU6W/JR8GK/L1czzN+VperjyXS2mJzzfHTYtM9B8j5m3+NpX+Hd8QjCCbKeCNIQWb3NM9zqfYP55GgkZCrAVVgApI3rCj4mMPu+uZDwXVMETF6gcJnELThpCiTpSZBZXlUd0aMmljRPZ9RIkQU7wGk6rZZaUFlzLI8rRRqL9X5Fi+RaB3bpTG0KoqvOmKf+Eq7VUaDPE5Dt505IUaS0V98dJXMtpWCALWdTFu8itpLKYGaM930yH8xbJHVQ7aA/7YBZI5/S23zsuevT1l1vcVFWd1tnpYNgrt9xTMYUW1RUXdAU0L7st1yRZw0tsHb53txZOa/jmpXGkc4KmqiSs5znweAiQzqgc7Q6CxuFE0r7CsgVA9PiaC49tApH/lgXUkza9I4uG5Mmf8uxgmKVR44dOKCCzxwTLhwTgHN4kts8hZgWt0eLzGUl4aC+zIf9zp5Ul8NthX0SCTfxg+Y4bGf64GlBnbIXb6MuFh2Z97in0Fl5DTNhSeNsqbC/fZF8bcuHrWZwUoaKysx8IjiRG3jI0LAykqlQaCRnkejE6RO7W/u787nRpGe7yTQ9yjNjgKiTZx4WnWwzeW8RRCydmPPL+qiKy8haXe6Rz4fkTXg5Ron7A/bhBL72VdPU3EAruQ6Le1jmqyK+HI3k5z0a9UyVEt+uO6VqNw3RHloYBrRrPSeGdvRK3Lv8tB4XhY5fGBZt5+Xm/XVHaO26JjRiGNd+4akIuiqHGm4lohBBPXqrIXxCpKF/SDFWD1+wteooSsbhOAZOAuOydaW+bl01HM7eh0V/e9cIwNzY7QP4bEU7wrCsKA0ThD9Q2Wv8FNjnuWsMWMf2CwVUwGIhTiZ8aKepTrfZ7FJXTH+I/eoepLZftBQ4IUnsWxckj1O9j9hQYkPrYByNPfV8NJ5DmOLePi7DvGK/mXwWPLgnPkd2W9E++taNd7dHh8zjzqcHWI4Xbn4f5z5b4E64EBfAEUaOccMbXtM/E7fHA/oHP2gM07LhD54/fNzkj9jSxAunCd5PO1z+ajn8/VvnwRqHn8A8+UrGBRhgsfgvH0BW1yr0sHiC/7Iotr9n/QtfX00+Cm/x3DAluGhmmsCfz1SLvftW++C5b9dKwfVwuNsV9+nnBU4gwMVE5ms/OC17v49mPv/Zy40ilspwanlwZ9Ruuv7vlet+WScL73Os301Oe4w/x29OvHjo1noU3Wgyt7w8QOr9IP5R8l8kMb7293+TRk0Q/+9SCESe5XAe8VXVaP5PUvl5c/b+BQ==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="User_Create" path="" id="63f9d907-13af-4cba-8258-58e315b3b39d"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="User_Create" method="POST" id="a417ebbe-60ce-4371-8838-710b567555cc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserCreate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_CS_1_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:900105" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="User_Delete" path="{UserID}" id="486c92d7-a98e-444e-8e82-c6ecc3ad417e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="User_Delete" method="DELETE" id="870564ec-f7fa-4fcc-8e13-5ee7c1163c6c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="02c312e5-b2c3-4b3e-9dfb-e112b93e81cb"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserValidationTokenCreate" path="{UserID}/VerificationToken/{TokenType}" id="396646fc-d131-4fd4-812b-5b3884a88678"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="92775302-608e-407b-b87a-fca981758aab"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="df8bf6f7-ae8b-492e-8caf-0e350e539908"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:resource><con:resource name="UserValidationTokenCreate_PrimaryEmail" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="0be8f475-6599-4d70-acb2-c75900e7818e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserIdentifier</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate_POST" method="POST" id="33315a9b-9d83-4176-b745-9f7833055fb4"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8cfc76a7-43fc-48d2-9c30-5240de986a7d"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserValidationTokenCreate" type="rest" id="db11767a-1de5-4d95-b111-3d217afcc944" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="UserValidationTokenCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/VerificationToken/{TokenType}" id="c8cce4c5-03f9-47fd-bea3-892c6112e920"><con:settings/><con:parameters><con:parameter required="true" disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter required="true" disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="d86e6aae-9a31-47b9-8e81-8de93ff54434"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="a671b1af-26b7-4002-8fba-1b58561225a2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">All</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#NodeUserID_BAU}"/>
  <con:entry key="TokenType" value="${#Project#TokenType2}"/>
</con:parameters></con:request></con:method><con:method name="HEAD" method="HEAD" id="4a5e1f58-0b91-4237-ba00-b5d89bb3b2ff"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="HEAD_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="d2c3ca55-6a7e-4e1c-a4f0-c36e12f53e76"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType3}"/>
</con:parameters></con:request></con:method><con:method name="PUT" method="PUT" id="ccd3781a-0b9e-4416-812d-6acffe914724"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PUT_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="513b1446-5d72-452e-bb97-167718b017cd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType3}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
</con:parameters></con:request></con:method><con:method name="GET" method="GET" id="31dff3ef-ab6c-4f84-a548-c8dfa3b6e9c9"><con:settings/><con:parameters/><con:request name="GET_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="6c665086-f840-48ee-9fa6-94a5d30092b3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType1}"/>
</con:parameters></con:request></con:method><con:method name="DELETE" method="DELETE" id="e72ae186-bd57-4d53-91ad-30d58662f50a"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DELETE_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="af0f828b-27eb-4fd3-a7b4-ab69bc038f3c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType2}"/>
</con:parameters></con:request></con:method><con:method name="OPTIONS" method="OPTIONS" id="7ca05bbe-94c6-4b68-8592-736ecd20f718"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="OPTIONS_UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="999901.pem" id="2c171642-5b04-4402-a210-e8c39fdcad85"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_AccountID}"/>
  <con:entry key="TokenType" value="${#Project#TokenType1}"/>
  <con:entry key="UserID" value="${#Project#Node_UserID}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" id="ecf0ed80-9de3-4326-87c5-30f5c1e7c042" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="bb6d6c41-78e6-44de-bc24-bd342c63266a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenCreate" method="POST" id="6b7b5a11-4056-4fad-a6eb-4e01db7c2654"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:RightsTokenData</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="67be72ff-4d9c-4fa1-9e7b-54286c21bf9e"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsLockerDataGet_DownLoad_Query" type="rest" id="31893b61-5384-4f43-8590-922e290806ad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsLockerDataGet_byDWQ" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=download" id="660d1281-7ffd-41a3-8736-83f170b5d99f"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="cab52527-c430-4dd7-9be3-0513986692f2"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="f4b7b858-e88c-4a9c-834a-011c7733ebb5"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsLockerDataGet_Metadata_Query" type="rest" id="b1d69d38-5d10-4e10-bec4-ebb6db3626ff" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsLockerDataGet_byMD" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=metadata" id="c272f2f3-fd23-4212-b334-9cf2123cb505"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsLockerDataGet_MD" method="GET" id="5d1def24-9705-4d8c-bf0f-3186e6dc19a5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="01de8162-b598-494e-97f1-7135c52333bb"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsLockerDataGet_Reference_Query" type="rest" id="eb2ae163-8591-4e29-8b91-1d359b2716a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsLockerDataGet_byRF" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=reference" id="84544deb-9985-4b63-812e-367e960f95af"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="a64b220c-5f59-4534-b4bf-80fea1e33d45"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="6e867d1d-b0ad-4633-ad82-a15cf937f563"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsLockerDataGet_byRightsToken" type="rest" id="ffd8a46b-c226-4822-a9da-a334ed280641" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsLockerDataGet_byRightTokenID" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="b1d00c3a-6f36-4b19-902a-1af163ba0f7b"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="ed3604cc-e6fc-4eb8-ae30-aaf42bee17e4"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="9506bf73-6f1c-4f80-ad5b-7a38e72b1f89"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsLockerDataGet_byRightTokenID1" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" id="087da085-25c5-4724-8de5-039342a3d456"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsLockerDataGet_byRightTokenID" method="GET" id="ed1a8a42-3859-4382-9318-56d739c3dbe2"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f894601-5b08-4c5e-a189-be01ce4f7700"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDataGet_ByALID" type="rest" id="5d92e815-47ad-4187-a453-11631cb61b7b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDataGet_ByALID" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/ByMedia/{ALID}" id="641dbd11-0403-43ce-8bb2-59af56e650c5"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ALID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="d496c5fc-e0e9-4b8d-be41-113e04763114"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="e4a42fc6-c52a-4a25-b192-bd782b44743e"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDataGet_byAPID" type="rest" id="ecccda4e-9742-4b4d-b8d6-c6b69371e220" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDataGet_byAPID" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/ByMedia/{APID}" id="7962a226-1a2a-4142-bf40-956d2521a912"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>APID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="2dac5836-b3f9-4979-9606-5be4d0eeef5d"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsTokenList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="e3b3c346-d855-4f42-b6f4-f97050abefde"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDataGet_byAPID_DRM" type="rest" id="76d7ad15-d6f0-4c02-bc35-920f61150aad" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDataGet_byAPID_DRM" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/DRM/{NativeDRMID}/RightsToken/{APID}" id="c4732147-1f43-4796-a17f-30ae61ced8a2"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>APID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NativeDRMID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="54423873-16af-4837-aa05-d15357f82072"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="b2d9bacc-b2b5-4f0a-83a4-b1493b93ef23"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" id="252a198d-dc7d-498c-9e37-53d4bcc9fcd8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="fe98a820-7ea2-4730-954e-db187152790e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="d489f8ab-ca8b-4b98-bc0e-0ad61d1734c0"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/octet-stream;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenGet_without_DST" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="43fc2b81-0528-47f0-8311-46f1a88c8ffa"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="dc56e2be-12c5-4b6c-b109-65e9b1c51fa3"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="3cadc2ae-b94a-43fe-b391-522f29e41b48"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenUpdate" type="rest" id="fa958b0f-ef5e-4043-bd7b-975b847d19ab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="8f193ae9-6450-4d00-906b-de52b13f0c4d"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenUpdate" method="PUT" id="5164dbf9-cbbf-427e-8a3b-cea144fc6ffa"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="063f0b83-8ad1-4dbe-9112-5728a783eba0"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDelete" type="rest" id="f2299b97-46cc-4c28-8ed9-3b84f1330fbd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="f36ffb28-98f2-4381-9b19-d4ea48d8d5e2"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenDelete" method="DELETE" id="7ded602f-3d0a-4208-bde4-3c8abbd21d8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="56a8fc1d-310a-4706-a9bf-a002acad6349"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Streams" type="rest" basePath="" definitionUrl="" id="f2f823f6-04a0-4fa9-a023-4442551c14e6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="c536fe1a-4ba1-4604-871b-ff5da2bcdfe5"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="b1ddb01e-d631-4268-8bd4-dee1d6937942"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 409 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:StreamCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c6bed5e0-5738-425c-85dc-fa3acf21af41"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST-1" method="POST" id="65e41198-a2df-4e0e-af86-03b15017a25c"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 409 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:StreamCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7d02aa96-f671-468f-88b8-81d570c9e5f0" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" id="f5d92bbf-f2b1-4372-b3be-166bfebe4c59"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#testCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#testCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="604ccc65-7a08-4eec-a17c-4cdfcdf8bdb2"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8c395011-f318-41e2-941a-9392672e391a"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="e46fc8a3-9e1e-430e-940c-6c5cb5498ed2"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="029ad557-22a4-4d97-852b-34a148dad305"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bedb4965-2eee-42a7-8409-37ed0984e920" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamListView" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="cf0ada0a-70b4-4028-b448-b00cfa299472"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9f884079-443c-4f02-8b1d-fd5120e0f372"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 413 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Account</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8fba20b8-88ae-40af-aa13-8ecb02761e91" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsToken Delete" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken/{RT}" id="df5ab061-8d2b-44ba-a9ca-96070cd80630"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#Project#urnacct}${#TestCase#rtrnodeaccountid}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnacct}${#TestCase#rtrnodeaccountid}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RT</con:name><con:value>${#Project#urnrightstoken}${#TestCase#rightstokenid}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnrightstoken}${#TestCase#rightstokenid}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="6ad17e4e-5c63-43ba-95d1-2ec206734a50"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e39f84b3-6aa6-49ff-862f-a697fe618a51" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamDelete" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAMHANDLE}" id="b52c0f88-8b3a-4fdf-9f6f-7b923ca6959e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>STREAMHANDLE</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE" id="280096de-8c4d-4070-82aa-a12e0af8a1de"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4c44e8eb-ec74-4743-a725-58cfab41f542" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="5698b9e6-ae6a-4e19-8769-08ee5388131a"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>MINOR</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>STREAM</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="StreamRenew" method="PUT" id="17ca17c4-17d2-4e76-a013-3ecef0460ddd"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="5062a81c-c63b-4263-9ffc-ec0b029c4ae0"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamRenew_06" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" id="5698b9e6-ae6a-4e19-8769-08ee5388131a"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>MINOR</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ACCT</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>STREAM</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="StreamRenew" method="GET" id="17ca17c4-17d2-4e76-a013-3ecef0460ddd"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="5062a81c-c63b-4263-9ffc-ec0b029c4ae0"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DMR" type="rest" basePath="" definitionUrl="" id="034f1d03-6a29-4ae9-af89-f6bb906498bd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="DMRCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight" id="7fd5db1b-cc01-4820-a0d4-f2735db5445c"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestCase#NodeAccountID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#SchemaVersion}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="d883bed1-8511-4b1c-907f-79f756b29de9"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="83906d79-e822-42e1-92bd-19de1a01c71f" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRLeaseCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaFulfillmentMethod}/Lease" id="2aa2d6c0-6e8d-4e2a-b165-00849962eb3e"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ContentProfile</con:name><con:value>ContentProfile</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ContentProfile</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>DiscreteMediaTokenID</con:name><con:value>DiscreteMediaTokenID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaTokenID</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>DiscreteMediaFulfillmentMethod</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaFulfillmentMethod</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="POST" method="POST" id="2650dcd4-05a8-4896-8f21-72c84fcaa104"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bb7d7492-2af2-427e-8925-32ad81b07fe4" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRGET_Update_Delete_107" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" id="d4a58c0f-0cc1-45e9-be0d-cc41d8b0b807"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>DiscreteMediaTokenId</con:name><con:value>DiscreteMediaTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET" id="4be3c910-3abf-4478-9545-6c59f63c9195"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>401 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7207ed6c-7627-4ae6-a9be-c9327c79eb53" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD" method="HEAD" id="440f98cd-5a59-4de1-8a75-99dafa01a59b"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="1d9490f3-038d-45f7-a8d4-fa699393f59a" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DMRDelete_107" method="DELETE" id="594f1de8-6742-436a-a594-28a2dc478222"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="39a3e237-5b1c-4ded-bb65-39772ad9b9ab" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DMRUpdate_107" method="PUT" id="7531290b-72cf-4716-8854-f2bd3c9bb9f2"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="1cc77fce-abf1-4bb3-9fee-2d071682d3d4" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRList" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/List" id="20ed13da-69de-404c-b312-895e1d797d98"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET" id="62db426d-3923-4a0f-84e5-88bf9bc3ca4b"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7afa9051-66c3-4363-b93a-279a3fdb72bf" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD" method="HEAD" id="6fd4c821-ba1a-4852-9207-f22baa139b62"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="277b6350-8984-4717-9f9d-90a00e35c3a4" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRConsume" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaFulfillmentMethod}/Consume" id="21abd17d-1bc8-460a-8e45-b6e6d42dd8fc"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestCase#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>RightsTokenId</con:name><con:value>${#TestCase#rightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#rightsTokenId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>ContentProfile</con:name><con:value>${#TestCase#mediaProfile}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#mediaProfile}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>${#TestCase#fulfillmentMethod}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#fulfillmentMethod}</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="POST" method="POST" id="56cdf2bc-5300-4d6a-869f-085cf17e595a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="44a5ae19-0906-49a7-9d15-3801da7b78db" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRLease_Update_Delete_06" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}" id="790021bf-3cec-46f8-9a12-b5b2fdf21d7a"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountID</con:name><con:value>${#TestCase#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>DiscreteMediaRightID</con:name><con:value>${#TestCase#discreteMediaRightId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#discreteMediaRightId}</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="Consume_106" path="Consume" id="eb2f76cc-d53c-4a9b-9cb1-7bd8c3a96400"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="ad3ba3a8-2227-405e-94f9-35c6424ef574"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="7b65de43-31fc-49bf-b67a-8411525d0843" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Release" path="Lease/Release" id="3c22ceb2-4954-479a-922f-7037e2cbf2e6"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="361266ff-f6e3-4400-a33b-8f22489ff619"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="e76552d7-84e1-496e-9b3f-5d524e9ed6ae" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Renew" path="Lease/Renew" id="5cdf3c37-196c-4713-8750-eb280338c410"><con:settings/><con:parameters/><con:method name="PUT" method="PUT" id="e4804a5a-d7da-402d-b6e9-bd952d35262d"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f84ab259-5593-4433-950f-e37a607743c3" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Consume_107" path="Lease/Consume" id="c322058c-ddea-4aae-b705-aa0c50813fa4"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="6ff3030f-a89a-4e42-8675-e319868a524b"><con:settings/><con:parameters/><con:request name="Request 1" id="148ceaef-5b56-4a1f-a6b7-f44ab99fb618" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:method name="DMRDelete" method="DELETE" id="b305cd84-475d-4e41-9052-8debfa7c048f"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="4d2ed310-a5f2-4195-9936-deacc8656fe4" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DMRUpdate" method="PUT" id="3a9c1d02-f0bc-4b96-b30c-e6c08a09ff49"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="82d66ba9-91e0-4ee6-9307-185016686189" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="df68baca-a75a-4a2d-afcf-5fc3c0dc1c3a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="cc56e816-fa44-46c0-9658-d53d428713a7"><con:settings/><con:parameters><con:parameter><con:name>audience</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>tokentype</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="POST" method="POST" id="f1c065c2-973b-4cb8-8a2a-17d0bfb5695e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:Credentials</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="2f3be90a-6feb-4f2b-931e-c5de7169c503"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="ac7742f2-69b8-46a3-b053-ccf2c0c12379"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>ASSERTION</con:value><con:style>TEMPLATE</con:style><con:default>ASSERTION</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="GET" id="0f8e34d6-fe4c-462b-80f6-7be7d67393fa"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="04f5414e-fcbe-4be9-875e-33938a3ed90e"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSCreate_SAML2" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="cc56e816-fa44-46c0-9658-d53d428713a7"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:method name="SAML2" method="POST" id="f1c065c2-973b-4cb8-8a2a-17d0bfb5695e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:Credentials</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="2f3be90a-6feb-4f2b-931e-c5de7169c503"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSExchange" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{UUID}/SecurityTokenExchange" id="cc56e816-fa44-46c0-9658-d53d428713a7"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>duration</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UUID</con:name><con:value>UUID</con:value><con:style>TEMPLATE</con:style><con:default>UUID</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="f1c065c2-973b-4cb8-8a2a-17d0bfb5695e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:proj="${#Project#Coordinator_Schema}">proj:Credentials</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="2f3be90a-6feb-4f2b-931e-c5de7169c503"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="Policy_LVAC" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/urn:dece:type:policy:LockerViewAllConsent"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Policy_LVAC" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/><con:element xmlns:ns1="$ns1">ns1:PolicyList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>415</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="SetupScripts" id="6501bdd1-6983-4cd4-99c3-96bc1288b86c"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="5013324c-55e5-4134-91b2-0bcef0f98624"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="421757c0-8f16-41a5-9b26-c14f6f0aa0dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}


if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Linux");
	}

log.info  " ScriptLibrary     ... " + scriptLibrary;

com.eviware.soapui.SoapUI.settings.setString( "Script Library", scriptLibrary);

log.info "updated_project_properties from properties file";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="25d5c087-0af3-41de-9248-743e2d3f25ee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("Coordinator_Schema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="75a6ea91-e790-41e0-a0b2-2b42ea65ea0b"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="1e23df44-2b68-49ed-b32a-bcb83c2deef7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="8b743f50-9b5b-4ebc-a59d-2699f19bbf10"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20130923</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="End_To_End" id="668653d9-cc6c-43e1-ae8f-68dabeddc9d0"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate" searchProperties="true" id="0bf01b26-b1c1-44d6-b979-1a82cd8bee3f"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="AccountName_Generation" id="c1ec7922-ab6b-4cfb-ad82-6d6c5453d87a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def accName= "Sanity_Acc_Create_" + new Date().format( 'yyyyMMdd_hhmms' );

tP.setPropertyValue("AccountDisplayName",accName); 

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="905ea107-ee41-4672-b71c-134f95d212c3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;



testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
myTC.setPropertyValue("nodeid",nodeId);

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="c69faf28-a056-48be-9459-aa074143d843"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#Coordinator_Schema}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="03ecb40c-96be-49ac-b978-5200b11706c0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="be288dfb-7de8-48c7-8cab-2bd12d29ecc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="8695b50a-8169-4297-b849-e54d49dc75af"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def nodeacc = context.expand( '${#Project#NODEACCID}' )
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
		
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

 
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

if (tP.getPropertyValue("versionURLEncode") == "NO")
	{
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 1);
		def node_Account = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("Node_Account_ID_FULL",node_Account);
		tP.setPropertyValue("Node_Account_ID",accountid);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 3);
		def node_Account = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("Node_Account_ID_FULL",node_Account);
		tP.setPropertyValue("Node_Account_ID",accountid);
	}

                
      
} else 
{
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>500500</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>39da0c46-7f38-4527-b6be-af58fbc91aba</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bf0fa3e3-b1e7-4bf9-9635-da2c55ceeed9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0696f15b-f3ce-463e-b03b-33fc4c9d061d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1ec7922-ab6b-4cfb-ad82-6d6c5453d87a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate" searchProperties="true" id="3a726ffe-919d-4575-b640-e2bc3d4f58ff"><con:settings/><con:testStep type="groovy" name="Set properties from calling test case" id="50e8ed0a-ccf4-44ac-b917-15711ffd9d9b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="73b30c57-47ba-4c48-b7fa-85612b343456"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="923d1db3-fca8-408a-9403-3cf7eae759c1"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>fau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 	<Value>${#Project#PrimaryEmail}</Value>
        	<ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	   </PrimaryEmail>
	</ContactInfo>
       <DateOfBirth MeetsAgeOfMajority="true">${#Project#ADULT_DOB_XML}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="27ba4db2-f0ca-462b-a21c-ae8da6c181eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="0d948a76-1566-45db-86fb-5618f769981b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

if (tP.getPropertyValue("versionURLEncode") == "NO")
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		def node_User = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("Node_User_ID_FULL",node_User);		     
		tP.setPropertyValue("NODE_USER_ID",userid);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);

		def node_User = urlStr.substring(lastSlash + 1);		
		tP.setPropertyValue("Node_User_ID_FULL",node_User);		
		tP.setPropertyValue("NODE_USER_ID",userid);
	}

} else {

assert context.expand( '${#TestCase#httpLocation}') == "";
}



//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93/User/urn:dece:userid:org:dece:FCBAC96265E4FE2FE0401F0A05994428</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityFAU_20140626_1403776131200</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Standard" searchProperties="true" id="8f0b84bc-7818-4e76-bef1-f421b62ef0ad"><con:settings/><con:testStep type="groovy" name="Set properties for User" id="04d568bc-be6a-4f65-9418-37d1f64c1266"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
testCase.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="f9ae2fd1-8fda-464d-85b4-aaf4f900bf91"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="fc429085-b9d7-4744-8bee-c8a30703a256"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="${#TestCase#UserClass}" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>sau</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
<!--      <LegalGuardian>${#TestCase#LegalGuardian}</LegalGuardian>-->
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="752a07bc-b8aa-4027-89d0-1709ea2a0010"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="2d3e50d8-055c-48b5-9967-c9725fd97d12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		def node_User = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("Node_User",node_User);		     
		tP.setPropertyValue("NODE_USER_ID",userid);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);

		def node_User = urlStr.substring(lastSlash + 1);		
		tP.setPropertyValue("Node_User",node_User);		
		tP.setPropertyValue("NODE_USER_ID",userid);
	}

} else {

assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1/User/urn:dece:userid:org:dece:FAF58AA7D3CEB584E0401F0A079932AF</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanitySAU1_20140611_1402481700907</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB93D9108325E854E0401F0A0799736D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:standard</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2000-06-01</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:E26585227E5512DDE0401F0A059975D4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB8D4E1BE25A7AB8E0401F0A05994B41</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fc429085-b9d7-4744-8bee-c8a30703a256</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForFirstUser" searchProperties="true" id="29c15fcb-a18b-4ec7-87c6-193b1e3339d0"><con:settings/><con:testStep type="groovy" name="Set pem" id="78732f95-5bad-4898-b95b-9d4ef7846443"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");


soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);

if(testCase.getPropertyValue("Count") != "1"){

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="24beb413-d673-47ca-8de0-e3b20b1aaba1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="b26df845-fea0-4199-9988-d916ad8ada68"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#Policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="8ceb2bd2-0123-491e-957a-b50e07810fa1"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" id="37306d65-efc4-4fd6-afe9-373e9539dea8" disabled="true"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    
<dece:Policy>       
<dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>       
<dece:Resource>${#TestCase#NODEACCOUNTIDDecoded}</dece:Resource>       
<dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>       
<!--<dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>       
<dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->         
<!--<dece:RequestingEntity>urn:dece:org:org:dece:o:pjgdevicetoken:testing</dece:RequestingEntity>-->       
<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       
<dece:ResourceStatus>          
<dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">             
<dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       
</dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn%3Adece%3Auserid%3Aorg%3Adece%3A${#Project#Node_User_ID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="5c31e517-f3d1-4b5b-8698-6d855054e184"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#Coordinator_Schema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetNodeID" id="814ff63f-7ce1-4cde-a7ce-c014baf23a5c"><con:settings/><con:config><script>
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def loopuntil = testCase.getPropertyValue("loopuntil");
def Counter = testCase.getPropertyValue("Count");

Counter++;
testCase.setPropertyValue("Count",Counter);
if(testCase.getPropertyValue("Count") == "1")
{
	testProject.setPropertyValue("Node_OID","RET");
	testProject.setPropertyValue("Node_ID","RET");
}
if(testCase.getPropertyValue("Count") == "2")
{
	testProject.setPropertyValue("Node_OID","RET_CS_1");
	testProject.setPropertyValue("Node_ID","RET_CS_1");
}
if(testCase.getPropertyValue("Count") == "3")
{
	testProject.setPropertyValue("Node_OID","DLASP");
	testProject.setPropertyValue("Node_ID","DLASP");
}

if( Counter &lt;= loopuntil){
    testRunner.gotoStepByName("Set pem");
}</script></con:config></con:testStep><con:testStep type="groovy" name="SetInitialProperties" id="80fbb56a-d3cc-4029-ba93-4b0e6dcdb6ba"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Count","1");

tP.setPropertyValue("Node_OID","RET");
tP.setPropertyValue("Node_ID","RET");
testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = false;

</script></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForStandardUser" searchProperties="true" id="31dfb121-3d99-4549-94de-5bad98d18d1c"><con:settings/><con:testStep type="groovy" name="Set pem" id="4e412bc5-2d72-442b-8181-316dc72d57cb"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageAccountConsent");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserDataUsageConsent");


soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="11e7bfeb-a214-4360-81c9-0d20dc8cd1dc"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLSAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#Policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="7c35d6a6-9934-40ed-95fb-eeb7d1b27170"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLSAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageAccountConsent" disabled="true" id="24e62a2f-0c33-475d-bbda-85bcbe645faf"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageAccountConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">    
<dece:Policy>       
<dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>       
<dece:Resource>${#Project#Node_Account_ID}</dece:Resource>       
<dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>       
<!--<dece:RequestingEntity>urn:dece:org:org:dece:500501</dece:RequestingEntity>       
<dece:RequestingEntity>urn:dece:org:org:dece:500502</dece:RequestingEntity-->         
<!--<dece:RequestingEntity>urn:dece:org:org:dece:o:pjgdevicetoken:testing</dece:RequestingEntity>-->       
<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>       
<dece:ResourceStatus>          
<dece:Current CreatedBy="${#Project#NODEUSERIDFAU1}">             
<dece:Value>urn:dece:type:status:active</dece:Value>          </dece:Current>       
</dece:ResourceStatus>    </dece:Policy> </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true" id="a69cc818-ad79-42a0-926b-5713106b64f9"><con:configuration><scriptText>def hList = messageExchange.getResponseHeaders()
def hitFlag = 0
for (n in hList) {
	if (n.value == "HTTP/1.1 201 Created") {
		hitFlag = 1
	}
}
assert hitFlag
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn%3Adece%3Auserid%3Aorg%3Adece%3A${#Project#Node_User_ID}"/>
  <con:entry key="PolicyClass" value="urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#NODEACCOUNTID_Encoded}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="bb7cf2c8-e9f9-43ca-bec3-080cab4e0954"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLSAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#Coordinator_Schema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FAF58AA7D3CEB584E0401F0A079932AF</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95c44820-dc3d-41b1-aaeb-046ed883cdd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bebf0d96-3664-4297-8a60-39c898da110e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ae07363f-1c5d-48de-93f1-d5ae9ad79a72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS" searchProperties="true" id="0fc67fe0-db17-4161-8164-c537f7a63266"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7e04da00-2a2c-4bd9-bb9b-fd3bcc3450a5"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1" id="cd5ea61b-23a8-4780-b9af-279c4aab5494"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST" id="e7a9c5e3-79d8-4679-89f4-0d630222e495"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/json" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#Coordinator_Schema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#Project#urntokenType_userpassword}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="98c5f251-0317-4a02-9a7d-b1ceb0d7c6a9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

/*
if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="cb5f2845-0209-4f0d-add6-b7f27f7229fa">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	//assert b.getPath().matches("/rest/1/07/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}

tP.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem 1" id="1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="a15b0636-791f-46be-aa37-3622c5ce472d"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/json" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ASSERTION" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="635beeb6-dbc7-46f9-bde1-122d6bdd0f01"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="f3217336-ddd6-4c64-b37d-c5582afd0dd9"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVZdb+I6EH3fXxFlH6uQDwKBqCCFAru0tKVAu0tfrlxnQtxNHBo7Afrrrx0aCpT2sldCQp6MZ87MHB/7nKE4slyPMUg5Sagy6LbUf8BHVqNhGZpZh4ZmOw1bQ/gp0Kwn2687hg9V31GVAWMZDCjjiPKWahmmrRl1zTSnpuGaNdeqV6xq/VFVHiBlIrRwqRiqsoojytwibUvNUuomiBHmUhQDczl2J9710BWeLioxqe3zDcoiYdoOOV+4uo4rPmCIIlzBSayf63s+5z5zJ2ROEc9SeMvps5b6tne5XFaW1UqSznXLMAzdaOrCx2dk/l1tfys3gz+gQbJZXyCaUIJRRF6RBHUNPEx8xYvmSUp4GH8S2tRNQ4bWYIU1bNr0u6q/JyjQnRhpD2TKkMZCZJbBxhBAChSDcj8etNTvp01ws3eaIsqCJI3ZwfrvIAHNIUoW4GusrKxEd3rEI+1qnwN2BxRHGSM53EiaLBAGpoxSCMhqSJggn8+UYvzKiokfKVkG+G/Gcq7vYhXQ9SPd6ZI5MP5/ZrY7r02UBxRl0B452eNseNP9adTOXsKXX1eXd9XJ2rPh6b5VQNh13oDajvttfUjWLbfeNo1eEY6iB8tMnEXv7Gyqr2vxECf2c5etzvJe//711vZ/XAbBrDt7Cu7DYRQvqV69fb4aOWuY9fS7x7BuRtSqw+zby8wOf3SMsxk5G/28zZ+hPs4zh/x6WP5uDnxUHV4vepeLKzqtLkfr1St/1v88end2ii8e7lKj3895dWjMkqh23xx/uwmmbIwvnYE3zB+HzZoR/mm917Rbw76xlIRJ9vQMmJdLSY9BV+mLeSH+tbxIC/G1oHB1F1KjGAfK1bbcJaXFzYQAEd8Vw9ys+16/1vD6dqdnd+qW1e0ZtmH2Dc+oNZuOedErNWiD4gDiRUIDInNJld3w52uAOHYZUB9SLU8yHAJTv4jYRRwpAzoWhyOhDKaJUHEzq4aOIErjNV9ZKMywuSKvHK0DVblJ+C29Tb2AQ7ov3dU96R4DJgsCUt8lwZlgOOOiFy8oz3hkVnJUoZCJGyCVIuxadqOmMxIvIpBI9Tjxswgqi3BRdEZnm39LaBErrOPetDh4n9Z1+K1sgfDxiXRgspYOiDHCkTvILAv5vOD6bsFleC/ziTxfop88JXiDZP/TO00kP7Yc6Q69yagEvfU9ba/oxsed+heI9MNmbBP5OdlJW96k4nIQ0tEuR/mCKi+VLM+zYniOlMVUhNeFOpr6BHAmtG09Tf4A1bch9JOuli3qg8xb+z6+jId0whGHWFBNKZYnvCsmwOS7YiDOyOrUR8teStE3Dit+zHYRieeHRPzlCwW7WPoJ80j8LZPUfx/XkVg7eUSd4jHBCZ3LlbxE1p+QAiciLBGql6S7wY8FOJZ837ht8hYLF2x6yjh8/kWRctZSEcZJRvmgqxaGXYktcPL1Atx3pw9hChl/u5dX7NN7+ff1cCLELkbq1pf8t7NGCrpgUOX1X2BpqSvxzBTJ6XxH0t8A7ql6p+F1LLvTNJy6Y9equ6puO11z28C9StofzB8tOz09PA/tfwE=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_eda28820-16e8-4784-acbf-2b4d670de3d7</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_eda28820-16e8-4784-acbf-2b4d670de3d7</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>SanityBAU1_20140611_1402481727586</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2976</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_eda28820-16e8-4784-acbf-2b4d670de3d7</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_eda28820-16e8-4784-acbf-2b4d670de3d7" IssueInstant="2014-06-11T10:15:26.236Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_eda28820-16e8-4784-acbf-2b4d670de3d7">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>P7uZYLNDH05+qhqWKJQ3SyA4ebU=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
PzacllV21o7pE++T/y5mLco4jDsx+vEFUzO4dGJffYDYbfUhLlmwn/3OjKP7yeYE/QZh61ln26eY
qY4hGB0+Yi+PHOvje6Rvu7iWVwX9Ida3LMpEJpKnT3wPyxztj/kZAQ4rcCVQr0FFvt3L0Yol5U9R
NfTsRcJ7IALvZL950hk=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:FAF58AF4BE4B622DE0401F0A059971CE</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1u3h7fer8zvx2ahuc1xiztayf" NotOnOrAfter="2014-06-11T13:15:26.236Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-06-11T10:15:16.236Z" NotOnOrAfter="2014-06-11T16:15:26.236Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_eda28820-16e8-4784-acbf-2b4d670de3d7</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-06-11T10:15:26.236Z" SessionIndex="_eda28820-16e8-4784-acbf-2b4d670de3d7"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate_Basic" searchProperties="true" id="7c7ae868-f90e-4c3a-8f29-ea1f383cbf0f"><con:settings/><con:testStep type="groovy" name="Set properties for user" id="f821d649-bc32-40c2-9f7b-7c4498b9b99e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
testCase.setPropertyValue("UserClass",callTC.getPropertyValue("UserClass"));
testCase.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
testCase.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
testCase.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

def NODEUSERIDFULLDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDFULLDecoded",NODEUSERIDFULLDecoded);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a8e24fc2-b533-4d28-94f8-782d66e96b1e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="9ed15f65-9840-45c7-a665-c1121ea7dc6b"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>bau</SurName>
	</Name>	
	
  <DisplayImage>
        <DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData>
<!--DisplayImageData>jfdkjdkfgdgd</DisplayImageData-->
<!--DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=avatar&amp;nodeId=urn:dece:org:org:dece:500500&amp;nodeUserId=urn:dece:userid:org:dece:B2F5D0FFF1B7BEC4E0401F0A0599368E</DisplayImageURL-->
<!--DisplayImageURL>www.yahoo1.com</DisplayImageURL-->
    </DisplayImage>
<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <LegalGuardian>${#TestCase#LegalGuardian}</LegalGuardian>
       <Credentials> 

               <Username>${#TestCase#UserName}</Username>	
                <Password>${#TestCase#Password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="c34013d7-7784-4dd0-8948-1c434c68760d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="b50ae353-c9ed-47af-bbc5-d3431a194a84"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		def node_User = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("Node_User",node_User);
		     
		tP.setPropertyValue("NODE_USER_ID",userid);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);

		def node_User = urlStr.substring(lastSlash + 1);		
		tP.setPropertyValue("Node_User",node_User);		
		tP.setPropertyValue("NODE_USER_ID",userid);
	}

} else {

assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1/User/urn:dece:userid:org:dece:FAF58AF4BE4B622DE0401F0A059971CE</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityBAU1_20140611_1402481727586</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:DB8F0F6588921CE6E0401F0A05991E36</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7f3628e8-17b4-4b24-9a27-1a62fd725b3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ed15f65-9840-45c7-a665-c1121ea7dc6b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PoliciesForBasicUser" searchProperties="true" id="8691dd40-0ee8-4c76-89fe-96f74d3367f1"><con:settings/><con:testStep type="groovy" name="Set pem" id="e50cba40-d346-461a-9a81-ec041eb95abd"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
RestTestRequestStep testStep2 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
RestTestRequestStep testStep3 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_COPPA");
RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");
RestTestRequestStep testStep5 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="a2aa3ae3-87fa-46f5-b2e3-57bb9d2ee9db"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}CLGAttestation"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="74ad4008-426c-4c5f-9215-a13e6247c5cf"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#Policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>${#TestCase#NODEUSERIDDecoded}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_COPPA" id="5cbf0753-f18b-4dcd-a9e7-f6515d58b794"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_COPPA" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>     
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}GeoPrivacyAssent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent" id="15b84e78-9a96-4dc6-9c92-e9254e8c9b48"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLBAU1}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="db6c877c-8d18-4c8e-b0ef-c70e01acfa23"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#Coordinator_Schema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODEUSERIDFULLDecoded}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0db5f4bd-bb18-40bf-87fe-157ef3181f84"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FAF58AF4BE4B622DE0401F0A059971CE</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>NODEUSERIDFULLDecoded</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>538eac1e-267d-47ba-b194-f9953171618c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bac177f5-5586-4318-b970-cc997f810ec4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b2dc8a3b-c62a-4c6a-a101-634c57a370ce</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41774e16-4267-4acd-bbcd-b821f3f16b23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true" id="e2c4b352-b1d7-45e9-92f5-80017e8c6856"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="39fd81c1-fcb2-401d-91b3-2a3d23d29d39"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="f5011b4b-580a-4e49-aec1-fec8f76ba93f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("AccountGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="5c6ae69f-3e09-4d51-a2a3-4c85c35795d5"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="28da194c-7ee2-4ae6-873b-b6ef6163e13d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag=null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
			
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tP.setPropertyValue("eTag", etag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="98b1821f-7c3e-4c0d-9524-1f982af0133e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
//def usercount = context.expand( '${#Project#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account_ID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The country code is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requestor is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;  -- Comment for cache issue

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		log.info "RightsLockerID : " +  myXML.RightsLockerID;		
		tC.setPropertyValue("RightsLockerID",myXML.RightsLockerID.toString());
		//assert myXML.DomainID.size() == 1;
		assert myXML.UserList.size() == 1;
		//assert myXML.UserList.UserReference.size().toString() == usercount;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:FC97596FF4BA35A1E0401F0A059932EA" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>Sanity_Acc_Create_20140624_08411</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:FC97596FF4C235A1E0401F0A059932EA</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:FC96F7ED970B6526E0401F0A0599717E</UserReference>
      <UserReference>urn:dece:userid:org:dece:FC96F7ED97716526E0401F0A0599717E</UserReference>
   </UserList>
   <ResourceStatus>
      <Current CreationDate="2014-06-24T15:11:17.070Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-24T15:11:26.307Z" ModifiedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1232</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserCount</con:name><con:value>2</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CS</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC003</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"E23D997E5D8EF2E2E0401F0A07994DAE"</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FC97596FF4C235A1E0401F0A059932EA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5c6ae69f-3e09-4d51-a2a3-4c85c35795d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Update_API" searchProperties="true" id="1eedbeec-1eb0-4440-9b3d-d76af50bfb0d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="90256e89-5be5-43f1-a01a-0c11e0e04a95"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

def accName= "Sanity_Acc_Create_new" + new Date().format( 'yyyyMMdd_hhmms' );

tP.setPropertyValue("DisplayName_New",accName); 
</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="d9c43d7c-fc17-4daa-8d0d-f5710a976d6a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.settings.SSLSettings;
import com.eviware.soapui.SoapUI 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, "123" );


RestTestRequestStep testStep = testCase.getTestStepByName("AccountUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountUpdate" id="c0481e2d-e8d8-4999-9afc-b864b3924d0f"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountUpdate" id="758d0cd6-9d3d-42d8-a6b1-a3d503080e09" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <DisplayName>${#Project#DisplayName_New}</DisplayName> 
  <Country>${#TestCase#Country}</Country>
  ${#TestCase#ResourceStatus}
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="d98feb7a-8bae-43b1-89cc-3357e400ef6c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="395cfa69-56af-4676-bb6b-26321b014320"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account_ID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The country code is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "The member's user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACC_ID_INVALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountIDNotValid";
		errorReason = "The account ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIDNotValid";
	break;

	case "CANNOT_UPDATE_COUNTRY":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CountryCannotBeChangedOnceSet";
		errorReason = "The country cannot be changed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;


     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;	

     case "STS_UPDT_NOT_ALLWD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;


	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
	/*else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
	
	}*/
} 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>E2199B56E4032FF7E0401F0A059938C7</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>90174</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c0481e2d-e8d8-4999-9afc-b864b3924d0f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true" id="f876563f-7d3d-48e1-9f5e-44c595e0eefe"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="861982a7-a7ad-4ce7-b9b7-1bd298e64fc7"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="6c10c5a5-68e8-4736-a7f5-7944477f61a0"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, "1123" );

RestTestRequestStep testStep = testCase.getTestStepByName("AccountDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="f2f9735c-4db0-436a-9efa-4ef2b80a65d7"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="d938d154-9353-4b78-92e6-1c1cd65c2b5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="a2de8be5-d81d-4a61-a6e4-29637a63c9a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90259</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f2f9735c-4db0-436a-9efa-4ef2b80a65d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Get_API" searchProperties="true" id="9a034d2a-b1ae-4a52-b406-61fb5ebe9859"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f74a9c61-16d4-448a-a898-52c6dcc3fd56"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="5b6f76f8-f098-4cda-9b74-ed08303492c2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Get");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get" id="9e29cce0-d04a-4367-b690-165597caf13c"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="0d647a5c-fada-4b07-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NodeUserId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="2db466e7-3ddf-40a9-974f-9f6c1b014429"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tP.setPropertyValue("eTag", etag);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="8f86f3d9-231f-41b5-b6ab-b4991749c73a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() > 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserID="urn:dece:userid:org:dece:FAF58AA7D3CEB584E0401F0A079932AF" UserClass="urn:dece:role:user:class:standard" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>SanitySAU1_20140611_1402481700907</GivenName>
      <SurName>sau</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>test_+126@uvvutesting.biz</Value>
      </AlternateEmail>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">de</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="false">2000-06-01</DateOfBirth>
   <Credentials>
      <Username>sanitysau1_20140611_1402481700907</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:14:56.033Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-11T10:15:04.374Z" ModifiedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
   </ResourceStatus>
</User>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2018</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:FAF58AA7D3CEB584E0401F0A079932AF</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e29cce0-d04a-4367-b690-165597caf13c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_GetList_API" searchProperties="true" id="f825a6d5-fcaf-4a9f-9dc8-9fce64b955a8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6bb3dacb-00c5-4c09-b55a-9b27a2f62fc5"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("AccountID",tP.getPropertyValue("Node_Account"));

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="c6a61ba8-2fa9-43d9-a175-b31904052857"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserGetList");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGetList" id="d42b7cbc-b7d4-4df9-8eef-d9026d01910c"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/List" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGetList" mediaType="application/xml" postQueryString="false" accept="application/xml" id="2c6efed1-a2fd-4567-bc03-5922f8dd548b" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="5051c2bf-a09b-473f-9c9b-f32c21cdcfde"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGetList');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("eTag", etag);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="3e507e3f-840f-4591-af16-d0014fe41a83"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Query_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/List";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
	errorID     = "urn:dece:errorid:org:dece:UserNotInAccount";
	errorReason = "The member does not belong to the account.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotInAccount";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";		
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;


     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
      
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
	        //this.log.info myXML.@xmlns.text();
		  assert myXML.size() == 1;
		  assert myXML.UserReference.size().toString() == usercount;
		
		  for(def i = 0;i&lt;myXML.UserReference.size();i++)
		   {
		     assert myXML.UserReference[i].text().matches("urn:dece:userid:org:dece:[0-9,A-F]*");
		     this.log.info "Valid User Reference :  " + myXML.UserReference[i].text();
		   }
	   }
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<UserList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <UserReference>urn:dece:userid:org:dece:FAF58AA7D3CEB584E0401F0A079932AF</UserReference>
   <UserReference>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</UserReference>
   <UserReference>urn:dece:userid:org:dece:FAF58AF4BE4B622DE0401F0A059971CE</UserReference>
</UserList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">564</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>UserCount</con:name><con:value>3</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90940</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"FB8AB34BAE91CB5AE0401F0A059947D9:2BE5F7DB"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b651d442-610d-4859-809b-2cbedd24a3c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Update_API" searchProperties="true" id="90e774cf-9b54-422d-b527-c68e8b39cfb5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="ce1f1f5a-dbcf-4401-b709-9904590782cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="5ab69c6e-a37e-49ea-b783-ccf3393a0d8c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserUpdate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="c1e5408f-2815-47d2-a35a-ce700b37f9a2"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate_PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="7911d39c-d7fa-4537-abd8-4fa853f207cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" UserID="urn:dece:userid:org:dece:${#Project#NODEUSERIDFULL}" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>${#TestCase#GivenName}</GivenName>
      <SurName>${#TestCase#SurName}</SurName>
   </Name>
   <ContactInfo>
      <PrimaryEmail>
         <Value>${#Project#PrimaryEmail}</Value>
         <ConfirmationEndpoint>Coordinator-Confirmed</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail verified="true" verificationEntity="urn:dece:org:org:dece:RET" VerificationStatus="urn:dece:type:status:success" verificationDateTime="2012-11-30T10:05:32"> 	
         <Value>${#Project#AlternateEmail}</Value>
         <ConfirmationEndpoint>confirmed</ConfirmationEndpoint>
      </AlternateEmail>
      <TelephoneNumber>
         <Value>+1.7033453434</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7033453434</Value>
      </MobileTelephoneNumber>      
   </ContactInfo>
   <Languages>
      <Language primary="true">en-gb</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">${#Project#ADULT_DOB_XML}</DateOfBirth>
   <Credentials>
      <Username>${#Project#UserName_FAU1}</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>Turner</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>Phoenix</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERIDFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="18091881-4310-4c1b-871b-26bc252b7a8d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="7482c25c-4e14-4425-bb14-728754084c2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull     = true;
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
//         assert myXML.ContactInfo.size() == 1;
//         assert myXML.ContactInfo.Address.size() == 1;
//         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
//         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
//         assert myXML.ContactInfo.Address.Locality.size() == 1;
//         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
//         assert myXML.ContactInfo.Address.Country.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
//         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") )
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations

</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>Other</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90809</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Raju</con:value></con:property><con:property><con:name>SurName</con:name><con:value>Alluri</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9502db6b-c711-4d04-9372-64700bfdfead</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Delete_API" searchProperties="true" id="687ecfe5-4f68-4863-87a4-27f1e7bd0c3b"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="1d1d2574-19fc-4f4e-b13f-cfb30b4cdd31"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SET PEM" id="ef2a4919-b36f-4805-ab21-2259e910515f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("User_Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Delete" id="b651d442-610d-4859-809b-2cbedd24a3c3"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="User_Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Delete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERIDSAU1}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="aac3b393-f45d-4613-a5c7-f08670eba934"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Delete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="4a8a1c28-fb0d-4fea-93c7-e2d6b2360300"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		//errorReason = "The supplied UserID is invalid.";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	//errorReason = "The supplied UserID was not found.";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		//errorReason = "The user has already been removed.";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		//errorReason = "The last remaining full-access user in an account cannot be removed.";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		//errorReason = "Requestor privilege is not sufficient to delete full access users in the account";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		//errorReason = "User cannot be deleted as he is CLG to other users in the account";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";
		//errorReason = "The requesting member cannot delete the member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

		tP.setPropertyValue("fileName",fileName);
		def testCaseName = testRunner.testCase.name;

		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AccountID</con:name><con:value>${#Project#Node_Account_ID}</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#Project#Node_User1}</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91155</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0bf82b90-98b1-4f22-b5f2-fee31bde8abe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>437753d1-2ec7-450f-9e67-a3f918bb35b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c1e5408f-2815-47d2-a35a-ce700b37f9a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="96dfb56d-608d-49d0-a66f-b81fac3092db"><con:settings/><con:testStep type="groovy" name="Setpem" id="78dc0482-bf52-4bf1-a4e5-897d4bbddaaf"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		certPath = testProject.getPropertyValue("certsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		certPath = testProject.getPropertyValue("certsPath_Linux");
	}
	
def nodeId = context.expand( '${#TestCase#nodeid}' )

//String nodeId = testCase.getPropertyValue("nodeId");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
//String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	testCase.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>STS_Exchange</con:value></con:property><con:property><con:name>sName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate_Account_User" searchProperties="true" id="9a3790d1-24de-47a3-97b9-1c2f2e7599d3"><con:settings/><con:testStep type="groovy" name="SetPem" id="51a15e4d-b59c-43a9-9107-d0de5758ba5c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

//String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
//testCase.setPropertyValue("keyStorePath","");


def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

//Thread.sleep(5000);

//keyStorePath = testCase.getPropertyValue("keyStorePath");
keyStorePath=myTC.getPropertyValue("keyStorePath");

log.info "keyStorePath test: "+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserValidationTokenCreate");

this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep,keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate" id="5e3ff2de-196f-4306-b5ae-aea383d4a276"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/VerificationToken/{TokenType}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERIDFULL}"/>
  <con:entry key="TokenType" value="${#TestCase#TokenType}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="b2e03419-693d-4855-a85e-b959cdeca60c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('UserValidationTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();
log.info "Extracting Response Details"

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

log.info "End of Extracting Response Details"
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="c41acf32-a936-4b2a-8ea8-f1473c4216e8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#HostName}' );

def errorRespType = context.expand( '${#TestCase#errorRespType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;


String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype =  "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
               case "SUCCESS":        
                			  log.info "Success message --->"	                        
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                                XMLbodynull        = true;
                                httpLocationHeader = true;
                                //this.log.info "Hello";
                break;           
                
                case "API_NOT_AUTH":
                		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                		//errorReason = "API call not authorized";
					errorReason = "The API call is not authorized.";
                		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;

                case "ACCOUNT_FORBIDDEN":
                          expectHTTPstatus = "HTTP/1.1 403 Forbidden";                               
                          errorID = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                          //errorReason = "Request Account ID not match";
					 errorReason = "The account ID does not match.";
                          errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;

                case "SECURITY_FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";                               
                                errorID = "urn:dece:errorid:org:dece:securitycontext:forbidden:1122";
                                errorReason = "forbidden";							
                                errorLink   = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
                break;

                case "NOT_FOUND":
                                expectHTTPstatus = "HTTP/1.1 404 Not Found";                               
                                 XMLbodynull        = true;
                                 httpLocationHeader = true;
                                 expectHTTPcontenttype = "text/xml";                               
                break;   
			
			case "INVALID_TOKENTYPE":						
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";                               
                                errorID = "urn:dece:errorid:org:dece:TokenTypeNotValid";
                                //errorReason = "Token type in the request is not valid";
						  errorReason = "The token type is not valid";
                                errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
                break;   

			case "INVALID_METHOD":
						expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
						errorID = "urn:dece:error:MalformedRequest";
						//errorReason = "405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.";	
						errorReason = "The request cannot be fulfilled because the method is unknown or not supported by the server.";							
			break;
			
			case "INVALID_USERID":						
                                expectHTTPstatus = "HTTP/1.1 400 Bad Request";                               
                                errorID = "urn:dece:errorid:org:dece:UserIdInvalid";
                                //errorReason = "The supplied UserID is invalid.";
						   errorReason = "The user ID is not valid.";
                                errorLink   = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;   
                case "FORBIDDEN_COORD":
			               expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
						//errorReason = "Coordinator cannot service the request.";
						errorReason = "The request cannot be serviced.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
			break;
			case "USER_STATUS_NOT_VALID":
						expectHTTPstatus = "HTTP/1.1 400 Bad Request";
						errorID = "urn:dece:errorid:org:dece:UserStatusNotValid";
						//errorReason = "The user status is invalid.";
						errorReason = "The member\'s status is not valid.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";					
			break;
			case "REQUESTOR_NOT_ACTIVE":
						expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:RequestorNotActive";
						//errorReason = "The requestor is not active.";
						errorReason = "The requesting member is not active.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";	
			break;
			case "FORBIDDEN_USER_LINK_CONSENT":
						expectHTTPstatus = "HTTP/1.1 403 Forbidden";
						errorID = "urn:dece:errorid:org:dece:Policy:UserLinkConsentRequired";
						errorReason = "The setting of the \"User Link Consent\" policy prevents the requested action from being completed.";
						errorLink = "https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#Policy:UserLinkConsentRequired";	
			break;			
						
			
}

// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

                assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;

                                // ErrorLink
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
                
 } 



</script></con:config></con:testStep><con:properties><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorRespType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>05f29811-9d45-4892-ab42-c44278163a96</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e3ff2de-196f-4306-b5ae-aea383d4a276</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate_PrimaryEmail" searchProperties="true" id="a70333b3-fff7-497f-aaf6-ee711935cd32"><con:settings/><con:testStep type="groovy" name="SetPem" id="024d08ca-33c6-49ed-81b4-86ba6e26a025"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("UserValidationTokenRequest");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidationTokenCreate" id="a9ae8924-21ac-4ad4-aa9e-32d658dd5b71"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate_POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidationTokenCreate" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#TestCase#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Headers" id="8142f0c5-35ea-4a88-95a1-72f0886cfac5"><con:settings/><con:config><script>import groovy.xml.* ;
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status;
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange ;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('UserValidationTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

/*def userVerTokenTS = tP.getTestSuiteByName('Setup');
log.info "userVerTokenTS===="+userVerTokenTS;

def userVerTokenTC = userVerTokenTS.getTestCaseByName('User_VerificationTokenCreate_Request_Post');
log.info "userVerTokenTC===="+userVerTokenTC;

def tStep  = userVerTokenTC.getTestStepByName('UserValidationTokenRequest');
log.info "tStep===="+tStep;

def expXML = tStep.httpRequest.response.getResponseContent();*/

log.info 'expXML=='+expXML;

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

log.info "tStep.httpRequest.response.responseHeaders ==="+tStep.httpRequest.response.responseHeaders;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
log.info "expXML: "+expXML;

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
log.info "httpStatus==="+status;
tC.setPropertyValue("httpConnect", connection);
log.info "httpConnect==="+connection;
tC.setPropertyValue("httpContentType", contentType);
log.info "httpContentType==="+contentType;
tC.setPropertyValue("httpContentLength", contentLength);
log.info "httpContentLength==="+contentLength;
tC.setPropertyValue("httpLocation", contentLocation);
log.info "httpLocation==="+contentLocation;

log.info "Done setting the properties for the Response";
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response_Headers_And_Body" id="aca67fd2-6568-4ba9-aa39-6acd8efea92e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info 'errorRespType=='+errorRespType
def XMLbody   = context.expand( '${#TestCase#XMLbody}');
log.info 'XMLbody=='+XMLbody

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
//String orgRequest = url + "/merc_api/merc-service/Account/";
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;

def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );


if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info "We are in SUCCESS Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;
	case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "Token type in the request is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "User Identifier is required to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requestor is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is unauthorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;
	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the user identifier has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;
	
}


log.info "xmlbodynull " + XMLbodynull;

if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

 log.info 'DONE'



</script></con:config></con:testStep><con:properties><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>offshoreuvvu@gmail.com</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b3ca7188-ff18-4ab6-92e1-c03925bc6d0d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a9ae8924-21ac-4ad4-aa9e-32d658dd5b71</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="277320fc-7e6a-48ad-ba60-32ff50322f66">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="b385eee4-f168-42d2-add8-b74566b3acce">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
//import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

//def headers = new StringToStringMap()
//headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));
//Testing RightTokenCreate Request Properties Loaded correctly.



</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="e4fe7428-c2c8-49d1-8cec-750a883618f1">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("nodeId",nodeId);
myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST" id="66453046-7e1c-4b93-9f64-9e4b8eacb2a5"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"
	xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
	xmlns:ns4="${#Project#Coordinator_Schema}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"
	ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}">
	<ns4:SoldAs>
		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName>
		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID>
	</ns4:SoldAs>
	<ns4:RightsProfiles>
		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}">
			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload>
			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream>
		</ns4:PurchaseProfile>
		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}">
			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload>
			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream>
		</ns4:PurchaseProfile>
		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}">
			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload>
			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream>
		</ns4:PurchaseProfile>
	</ns4:RightsProfiles>
	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}"
		xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location>
		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference>
	</ns4:FulfillmentWebLoc>
	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}"
		xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location>
		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference>
	</ns4:FulfillmentWebLoc>
	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}"
		xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location>
		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference>
	</ns4:FulfillmentManifestLoc>
	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}"
		xsi:type="ns4:ResourceLocation-type">
		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location>
		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference>
	</ns4:FulfillmentManifestLoc>
	<ns4:PurchaseInfo>
		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID>
		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction>
		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount>
		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser>
		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime>
	</ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="f8c6eea0-e9ac-435e-88bd-d63e988d3cf2">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="647b6292-a5f4-4620-ac1a-30cc8de1bff2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());

if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
{
	callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
	
}
else 
{
	callingTCase.setPropertyValue("rightstokenid",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"),"UTF-8"));
}
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
log.info testCase.getPropertyValue("DBrightstokenid");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsTokenCreate RESPONSE" id="75a72d97-e45e-4a1c-9e9f-769a9194dabf">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenCreate Request POST").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenCreate Request POST").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        <con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property>
        
        
        
        
        
        
        
        
        <con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>nVfbkqLKEn33Kwzn0bABFW8x3RHFtbFF5SJeXk5gUQKKoBQI+vW7wNHRnp7Zs89Dh11JZdbKzEWy6ju290FzADBGceJHYVURXmv/662dje306YbdY1uNNrSZRs/posYa2r12j2Z7/damVlUwTpES4sQOk9dak2ZaDZpt0IxJdwftzqDdemHb/VWtaqEYk9Bkywtdq+b7IMSD8tjXWhqHg8jGPh6E9h7hQQIHBlBHA7JzYN8w1d6+X1GWB8ZvXpIcBhQFXxwEURDAFxjtqe/U057vDh4YvhvaSRqjH2c6+LX2wzfLspes9RLFLtWkaZqi+xTZ42Df/VZ7q9yckaOEm+i65u0wCn1oB/7FLkCpKPEipwoCN4r9xNv/JjRDMXQRuoFy2IBMO/xWo34eUKL7y0hPIGNsN7BnM7dgOtqgGIUQVWe68lr79ncdvPqasR3iTRTv8af1f4OEwhMKogNyGviW2Q3d30f8olxv3xEcKCEMUuyf0LigycGGCFenMdr4+cjHhHwOrpbtr+b4xjAE/0tLvlOPOAls6ovKCL6LcPL/9OuxV9colh2k6C3W9j0979RbZ9tbz5euuaq/u2fTsDbaawnhcfMV1L3VP9afiXrn1Q+ncX0Run1zG1rQOmdrc7kE76rETr3xSTCoiwAjenj2LBSiIed22Ollt3YvvoX0fKZYayvT9kdqUZ+hmWVsKh/K3Nht2t2wG2znvUAKlYPrdcdi1PbbdSnyl8akpUXuoQUXB+mdDoP+kJ8biWLSKW+w2/XW12w96sjh6WJXxlx9xgYQ6dukrm2T7Xoqvv7M6TGHIq8PdC6TLP5fsHRfsBP7vuCLSbEhr2eC3lRFEdILz4Oz4YJM4YBL/rZgzLm7o7fz5X5Gc0DTJCDwXLAVRyrYyYCZiZyn8pal5vwFkEqMLeJoVkCw4lRdzIRsKVia9i5mnunI1nktB+nqIo5VgEtn3lNFXbQE3RRVFURXW64KaznfqoaaKdpSqJAAgpgfLo7cT5Cc+7CpsKrBNpcGm64WFrFL59F+fFqbYqDyqswbR9lQ1i1BE4dAX85hU0qJ72W0P0SV5Yx7cBoe0BYgKaPJmeCimrtMNWfNsaDbpc18tqmKPFQ1nPFamZVcEbOhNbv8rAXPqbyzF3PRBNNrLaDJS2N6tRhie86Gqg4ywS2dP8TMmdyAqBqdVfhrrUZipov6bCypupKJoLQJYhbgdXPsrWXvBFtaPjTB9rExvCbOpZA8D/UTPLPHii1LYL23GNjSPeizvr2IMnfVywRtOfyIVgoJMwaayHEaIIBoUKRG6s+BEWexk4Pfb/potJGiPfLiispEH7vTJad7fmviTsdzVtjsulPZn7Zsx6OUADa3rR1QFOR8MJ5mO/qS0oXQv3QmH7MF8uPlJRmzGtPxe2xFn6ezhRAFXed9sZx91PMl1MzJ1JjNp5c8Hx+3vUuQvE+499gYqoI7GSM0xbBO0bbEmT2B5ZfvW8KnjU4jtgJclQNA3rqu6BMCc+/bKwnfdVUk5AUqn8n8nJcNIMt1UeEETdtIHjOFspXOmLGqiE5AynReLvSgsuI5gXSKtuerw7Ip0SsTOGUwrS1KrjZj68MFWmnjwLQSkB2sTcgwtHzQ3jdq5kK1YICjZAZH3iKukipgZk8OQzr/sDo0c9ScYGj0wayVG81dPvHc1XnnrnakKcuHV2dpgsAyHzimEIrNK5op6iroXd+3XFVmLT2A+/yw3sNcMEnPSufI5ERd0uhZLgjg42rDJmjmeHkRtyovlv4VkKs2ocVpvfDwMhz7E1NMCWnTB7ps1036XzlWUKzyzLEjDzTwmWPilWMi2BzrSk9gMNvhD3ieuZwsHrWuNRr2D7S2GO0qXF2i3MQP2pOwl5kf9TlzzrreVpvP+4rg8fVws/Ra64Sj7QvU0HDXlX19J4SddnBWR6rGznwqONNbdMzwqDJWmFBsJReJ6sdpnduv/P3l0mo3Z/upkZ6Umf2BmbO3Ps772Xb63qGoWD6zl+7qpEmLCC6v35HPQ/JuvI5R6nHAPk3gm/Yy0vUWweS2LL7DilCVyMfRTv6s4wqL7zQ25dbBoRCDOEFhUnsrvAoNN0iJ0vOdAflyXtcCB9ptAbA9RugKIsOLdJtmJBrQ3X6/2eZ7N7F3RfEJIh+FG784q5Cz14/1nwHC/QCj0EFx4xSl0EO49oeIRb2qSqgTFRKFGJkRkcs8K4mg2WT7EtvlmA7HtLp9XuIlTqKb3V6XiN5xlEzCSQw2CYqfpDJDP0llHUH/4KNCTxeiAhNVgRNSkqN9SpOAeTnZLyFKieKOC9E7aLZ7LIX9/SFABWBqHzlpgF4O3qEsEIWvv82GDXFpLQpYqp3f5vf52a0UZI/jFxtwkQyHSDvRF6K/dcvk9xm3HjO+hQep4xeihtQ1iX14RfL86CddCp7cuVKkdMN83/rZ8BSW+pzR/STn5MM74+93IiKpieh6uzXkaL8cX9LTKS1b0C0EZUzCUwxFdygDwZSowrMZ7VBI3UNQfyXI76g/nXy3P+NLEy80EvI27wlhquXyL25jBsLFbUwhhM//9qr3dCSpW4Ly5CsbH5BLW4H4j/c6OIDFPmKekp8sip2f7foi1sM5JM9ifPmhW6wK+X3+DStgRML6ZIRF8WPwrwJ8dfiz8V7kO5aEsGmdJuj3T6rFbHqt2RBGaZgoQq00PM7LEmdyPqDBz02/hCkF8I8bTY5/e6NZqCODTK69Xbvv9f99c8Mv6QIR8cJ+ieW1lpPLOTk8dB/m8w+AX49ovvOnEf2cydsv5l8tDzX9/D68/QM=</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
      <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBA44DA581C6DE1CE0401F0A079924C8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>3365</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_Download_Query" searchProperties="true" id="669ef973-18f3-4d95-9f00-3d6f5cf6bc6e">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="5e7744dc-ddd2-4352-8c34-7fb35afc9aff">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));

</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set" id="edd81982-2d43-4c40-8456-9923231d429b">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_DWQ");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightsLockerDataGet_DWQ" id="07f84815-9f5e-4c99-9a7a-08adff603270"><con:settings/><con:config service="RightsLockerDataGet_DownLoad_Query" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=download" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsLockerDataGet_DWQ" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="84f4bb2b-b00f-432a-9a54-b65eabc14841">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsLockerDataGet_DWQ").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="3d33ed48-cce4-4442-85d8-fe9e43665eeb">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsLockerDataGet_DWQ').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");
//
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="2131d431-357f-41eb-b9bd-8baf2d20461b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

Nodeid = testCase.getPropertyValue("nodeid");

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsLockerDataGet_DWQ").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsLockerDataGet_DWQ").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";

//
//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		ValerrorID = 1;
		QAResp_ErrorID = "ForbiddenAccountNotActive";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		Resp_errorReason = "The API call is not authorized.";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
		QAResp_ErrorID = "NotFoundContentIDNotFound"
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
		QAResp_ErrorID = "BadRequestContentIDNotValid"
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
		QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
		ValerrorID  = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
		Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
		QAResp_ErrorID = "ForbiddenUserNotActive";
		ValerrorID = 1;
		//Resp_errorReason = "User is not active";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
		//Resp_errorReason = "Request Account ID not match";
		ValerrorID  = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
		QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
		ValerrorID  = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
		
	break;
	
	case "ALID NOT ACTIVE":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
		QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
		QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
		//expectHTTPstatus = "HTTP/1.1 404 Not Found";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
		
	break;

	case "BUNDLEID NOT VALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
		QAResp_ErrorID = "BadRequestBundleIDNotValid";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
		QAResp_ErrorID = "NotFoundBundleIDNotFound";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
		QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
		Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
		QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "ContentProfile is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
		QAResp_ErrorID = "BadRequestContentProfileNotValid";
		Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";		
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "ContentProfile is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
		QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
		ValerrorID = 1;
		//Resp_errorReason = "FulfillmentLoc is not valid";
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
		QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "StandardDefinition is missing";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
		QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "PurchaseAccount is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
		QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "PurchaseUser is not valid";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
		Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
		QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "PurchaseNodeID is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
		Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
		QAResp_ErrorID = "BadRequestBundleIDNotActive";
		ValerrorID = 1;
		//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
		Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
		QAResp_ErrorID = "NotFoundRightsTokenNotFound";
		ValerrorID = 1;
		//Resp_errorReason = "User ID does not match security token";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
		Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
		QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
		ValerrorID = 1;
		//Resp_errorReason = "User ID does not match security token";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
		Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
		QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
		ValerrorID = 1;
		//Resp_errorReason = "User ID does not match security token";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
		Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
		QAResp_ErrorID = "ForbiddenUserNotActive";
		ValerrorID = 1;
		//Resp_errorReason = "User ID does not match security token";
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "application/xml"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
		Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
		QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
		Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
		QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
		ValerrorID = 1;
		Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
		Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
		QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
		ValerrorID = 1;
		Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
		Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
		ValerrorID = 1;
		Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
		Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
		QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
		ValerrorID = 1;
		Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
		Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
		QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
		ValerrorID = 1;
		Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
		QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
		QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
		QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
		//QAResp_ErrorID = "BadRequest";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
		//QAResp_ErrorID = "BadRequest";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
		Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
		//QAResp_ErrorID = "BadRequest";
		ValerrorID = 1;
		Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="1" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F">
      <RightsTokenLocation ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
         <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/bbb</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/aaa</Location>
            <Preference>1</Preference>
         </FulfillmentWebLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ccc</Location>
            <Preference>1</Preference>
         </FulfillmentManifestLoc>
         <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
            <Location>https://dl.bestbuy.com/p/ddd</Location>
            <Preference>3</Preference>
         </FulfillmentManifestLoc>
      </RightsTokenLocation>
   </RightsToken>
</RightsTokenList>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1452</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_Metadata" searchProperties="true" id="d08b241f-b4c1-4415-a92f-77fbc1a6192b">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="91449267-93fb-485b-b080-67225da7556d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="68a5d878-cf7b-450a-a77d-cd4458f2ac30">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_MD");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_MD" id="8e0f5496-37e8-4870-95cf-ccfcdcb81761">
        <con:settings/>
        <con:config service="RightsLockerDataGet_Metadata_Query" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=metadata" methodName="RightsLockerDataGet_MD" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsLockerDataGet_MD" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="87df0511-804b-4452-bacc-2052bc89bfc5">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsLockerDataGet_MD").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="57b16690-f9d8-495c-994d-fd460d4852e5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsLockerDataGet_MD').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsLockerDataGet_MD').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsLockerDataGet_MD').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");
//
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="96fd1005-628d-4d62-b7c9-2d34d8f2c4d5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsLockerDataGet_MD").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsLockerDataGet_MD").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="1" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F">
      <RightsTokenDetails ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" Language="en-US">
         <TitleDisplay60>title_1_61</TitleDisplay60>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EE42B3BE0401F0A0599737A</ArtReference>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EE22B3BE0401F0A0599737A</ArtReference>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EE32B3BE0401F0A0599737A</ArtReference>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EDF2B3BE0401F0A0599737A</ArtReference>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EE02B3BE0401F0A0599737A</ArtReference>
         <ArtReference>https://d1aa09tqol6rcr.cloudfront.net/uvvu-images/D6C3F1EC7EE12B3BE0401F0A0599737A</ArtReference>
         <Summary190>When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world and into ours.</Summary190>
         <Genre>Fantasy</Genre>
         <Genre>Comedy</Genre>
         <Genre>Adventure</Genre>
         <Genre>Family</Genre>
         <Genre>Animation</Genre>
         <RunLength>P0Y0M0DT1H43M0.000S</RunLength>
         <WorkType>Movie</WorkType>
         <RatingSet>
            <ns2:Rating>
               <ns2:Region>
                  <ns2:countryRegion>NL</ns2:countryRegion>
                  <ns2:country>NL</ns2:country>
               </ns2:Region>
               <ns2:System>Kijkwijzer</ns2:System>
               <ns2:Value>AL</ns2:Value>
               <ns2:LinkToLogo>http://www.kijkwijzer.nl/</ns2:LinkToLogo>
            </ns2:Rating>
            <ns2:AdultContent>false</ns2:AdultContent>
         </RatingSet>
      </RightsTokenDetails>
   </RightsToken>
</RightsTokenList>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1546</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>551e926c-ea40-4e07-84bf-aa3ee4cc78f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_Reference_Query" searchProperties="true" id="703a9682-db1a-4eac-a721-2f7e0cc91c00">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="1d483c5a-a138-4b6e-80d1-92834003dacb">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="c740d06a-391f-42ad-a66b-def159d74203">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_RF");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_RF" id="56222f26-586a-4b02-bc42-531ae57c9036"><con:settings/><con:config service="RightsLockerDataGet_Reference_Query" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List?response=reference" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsLockerDataGet_RF" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="7bdefba9-fe28-4223-be70-454e8c4fd930">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsLockerDataGet_RF").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="7c207569-7391-4c4a-b690-876018602532">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsLockerDataGet_RF').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsLockerDataGet_RF').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsLockerDataGet_RF').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");
//
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="e2f92a02-9fdb-483d-bfce-07ff5a0c9306">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsLockerDataGet_RF").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsLockerDataGet_RF").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="1" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   &lt;RightsTokenReference RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" CurrentStatus="urn:dece:type:status:active" CreatedDate="2014-06-11T10:15:53.651Z"/>
&lt;/RightsTokenList></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1368</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>551e926c-ea40-4e07-84bf-aa3ee4cc78f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_List" searchProperties="true" id="8e62035c-1a03-452b-a86b-c60bf6ab66b3">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="a74d82a4-ed4c-4f28-9c60-dbc6782086f2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="3437abec-d1f5-4d38-a29f-e15987b9dda1">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_List");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_List" id="53fcbbfe-d210-4238-bbcd-66302dad518f"><con:settings/><con:config service="RightsLockerDataGet_byRightsToken" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsLockerDataGet_List" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ExtractRightsLockerDataGet XML" id="35181ae3-2d98-4a9f-9018-bb8b93474f84">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsLockerDataGet_List").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsLocker Info from the Response" id="4984bfbf-9ee0-4008-a659-1a37915714eb">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsLockerDataGet_List').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsLockerDataGet_List').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsLockerDataGet_List').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");
//
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="f4eb78bf-aa39-45a3-95cb-0e17cb22a67b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsLockerDataGet_List").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsLockerDataGet_List").httpRequest.response.getResponseHeaders();
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

def Resp_XML = new XmlSlurper().parseText(ResponseXML);

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {	

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}
else

    {
    		log.info "Rights Locker OID ...." + Resp_XML.@RightsLockerID;

    		String rightsLockerId = Resp_XML.@RightsLockerID;
    		
    		int lastColon = rightsLockerId.lastIndexOf(':');
	     
	     def rightsLoclker_ID = rightsLockerId.substring(lastColon + 1);

		log.info "rightsLockerId ...." + rightsLoclker_ID;

		testProject.setPropertyValue("rightsLoclker_ID",rightsLoclker_ID);
	     
    }</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>ACC014 Draft</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Solekai</con:value>
        </con:property>
        
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FCBB0C4D71726BCFE0401F0A05994B93" AccountID="urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1725</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>Accountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>551e926c-ea40-4e07-84bf-aa3ee4cc78f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsLockerDataGet Request_without_DST" searchProperties="true" id="a4c23797-03b0-4585-893c-5b73bb7b3be6">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Locker Properties" id="b19ed93d-e985-437c-9256-06f507f4e917">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="d8f6131f-e6e6-426b-bf2e-cfb2ab6b316b">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsLockerDataGet_without_DST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsLockerDataGet_without_DST" id="a25b08aa-4915-49c3-a083-41aeb6256122"><con:settings/><con:config service="RightsLockerDataGet_byRightsToken" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/List" methodName="RightsLockerDataGet_byRightTokenID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsLockerDataGet_without_DST" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="75caa256-ae71-4a6f-be27-ec6f5524d4fe">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsLockerDataGet_without_DST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="e7308189-ad2d-4555-8432-fb81fcb5ef60">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsLockerDataGet_without_DST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsLockerDataGet_without_DST').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsLockerDataGet_without_DST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");
//
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="1f8fe897-1aeb-4263-96c7-76c011a31c66">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsLockerDataGet_without_DST").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsLockerDataGet_without_DST").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="1" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   &lt;RightsTokenReference RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" CurrentStatus="urn:dece:type:status:active" CreatedDate="2014-06-11T10:15:53.651Z"/>
&lt;/RightsTokenList></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1351</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>551e926c-ea40-4e07-84bf-aa3ee4cc78f7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDataGet Request_ALID" searchProperties="true" id="80f528f2-c51e-404d-bf68-9b29af3cc745">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="54af2f6b-9762-428e-8dce-a66115456e9b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("RightsTokenDataGet_ALID").testRequest.setRequestHeaders(headers);


//SetUp test properties

if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
{
	testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
	
}
else 
{
	testCase.setPropertyValue("ALID",URLEncoder.encode(CallingTCase.getPropertyValue("ALID"),"UTF-8"));
}
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="19d9c016-4af2-4ec3-9751-6f9275795d2d">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDataGet_ALID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="restrequest" name="RightsTokenDataGet_ALID" id="db9b6e36-3614-4153-9868-2007304d8fab"><con:settings/><con:config service="RightsTokenDataGet_ByALID" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/ByMedia/{ALID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenDataGet_ALID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="ALID" value="${#TestCase#ALID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="80768a74-75b2-4a8c-bbaa-cc16382ffd0f">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenDataGet_ALID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="9a394aee-4238-4031-b4e7-a7928cf77e81">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenDataGet_ALID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenDataGet_ALID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenDataGet_ALID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");
//
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="ca027870-7b8e-4eb2-99a9-8fbf866049dc">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenDataGet_ALID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenDataGet_ALID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:RTGET_ALID_R3_EXAMPLE_ALIDVersion_960500.txt</con:value>
        </con:property>
        <con:property>
          <con:name>User_oid</con:name>
          <con:value>A1C0C00EDD42CF8AE0401F0A0599345D</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBA9C97E25BA80D9E0401F0A079931A1</con:value></con:property><con:property><con:name>encodedALID</con:name><con:value>urn%3Adece%3Aalid%3Afile%3ARTGET_ALID_R3_EXAMPLE_ALIDVersion_960500.txt</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1443</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>eab5fdf0-eff8-429e-bb53-b1cc69c6b3ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDataGet Request_APID" searchProperties="true" id="0fd39e77-74f1-43da-9fb6-9a160eaec14b">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="a1016634-8a2c-451f-92fb-d5fe8ac7ddaf">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("RightsTokenDataGet_APID").testRequest.setRequestHeaders(headers);


//SetUp test properties

if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
{
	testCase.setPropertyValue("APID",CallingTCase.getPropertyValue("APID"));
	
}
else 
{
	testCase.setPropertyValue("APID",URLEncoder.encode(CallingTCase.getPropertyValue("APID"),"UTF-8"));
}
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="a7ee7d41-c17b-4a5d-b08a-07bb96a7bf6c">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDataGet_APID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDataGet_APID" id="62c44647-d1af-48d7-911b-309381f42886">
        <con:settings/>
        <con:config service="RightsTokenDataGet_byAPID" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/ByMedia/{APID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDataGet_APID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="APID" value="${#TestCase#APID}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="8442ae98-58c5-4ff6-a84d-d854b4f7a5e3">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenDataGet_APID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="5c1fd67f-3b8b-4b32-99b8-5075ed266a66">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenDataGet_APID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenDataGet_APID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenDataGet_APID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");
//
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="c9de86e7-cf92-434b-92ec-a9cef7add9bc">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenDataGet_APID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenDataGet_APID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>APID</con:name>
          <con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADD795C0DAE1D5682E0401F0A079944E3</con:value></con:property><con:property><con:name>encodedAPID</con:name><con:value>urn%3Adece%3Aapid%3Afile%3ASARVAJEET_CID_DONT_TOUCH_4.txt%3AAUDIO_Number_4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value>&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1" AccountID="urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>5368</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>931ad8f2-054a-4b2e-86c1-95a34778d3b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true" id="8e65bdd3-4f94-448f-856e-bf8ee8f6cd0b">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="d1c1bc76-8898-4e72-af5f-62129d9d9cdd">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.setRequestHeaders(headers);

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
//{
//	testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//	
//}
//else 
//{
//	testCase.setPropertyValue("RightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
//}
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="81baf055-355d-41e6-996a-f76aca19c833">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID" id="74f74f62-43aa-4560-b221-123dad0b4001"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3b2ed459-ae8f-4146-aae7-c3dbab1e7376"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('RightsTokenGet byTokenID');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag=null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
			
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tP.setPropertyValue("eTag", etag);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="23713b73-37c4-4326-aca6-47d8ed07ba15">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="1a34b02c-b58e-4da6-8dee-c4ec39af372c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="aca8934a-1f67-4497-95f0-e9932de1fcf6">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBB728DEF0887428E0401F0A079923A4</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:ED412F2C78C4C6ADE0401F0A07992A9E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <DiscreteMediaRightsRemaining FulfillmentMethod="urn:dece:type:discretemediaformat:bluray:packaged">1</DiscreteMediaRightsRemaining>
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:17:39.471Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-11T10:17:39.477Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3030</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <DiscreteMediaRightsRemaining FulfillmentMethod="urn:dece:type:discretemediaformat:bluray:packaged">1</DiscreteMediaRightsRemaining>
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:17:39.471Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-11T10:17:39.477Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1590</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request_without_DST" searchProperties="true" id="c0da1a28-c371-4b49-997a-2b44599ae620">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="dbe12bbf-29fa-41b1-bf1f-d252c8728d7b">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp test properties

if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
{
	testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
	
}
else 
{
	testCase.setPropertyValue("RightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="2257af1b-fa13-4ae5-99ca-005bc9c3299e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      
      
      
      
      
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID" id="4c3bbcf7-af83-4c22-a7a1-4ba2565d8e73"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="75a1e99c-4448-43cc-9a49-2a899abccfd6">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" id="d6a3a195-f600-4070-a3e3-778aa263f243">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def projectPath = groovyUtils.projectPath 
//
//def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")
//
//log.info "Log File Location : "+ logFile;
//
//logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="6608d5b2-7cee-480c-94ec-4565da428028">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBB728DEF0887428E0401F0A079923A4</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:ED412F2C78C4C6ADE0401F0A07992A9E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenFull ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:15:53.651Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-11T10:15:53.656Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <PurchaseInfo>
         <NodeID>urn:dece:org:org:dece:RET</NodeID>
         <RetailerTransaction>transcation</RetailerTransaction>
         <PurchaseAccount>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</PurchaseAccount>
         <PurchaseUser>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</PurchaseUser>
         <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
      </PurchaseInfo>
      <RightsLockerID>urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1</RightsLockerID>
   </RightsTokenFull>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1536</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Request" searchProperties="true" id="4b892447-aabe-4363-b1b6-da6a24e58464">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties" id="25b651fe-5ca7-43ca-a549-c046b9646a7e">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
headers.put("If-Match",testProject.getPropertyValue("eTag"));
testRunner.testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.setRequestHeaders(headers);

if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
{
	testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
	
}
else 
{
	testCase.setPropertyValue("RightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}
testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
testCase.setPropertyValue("RightsLockerID",CallingTCase.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanDownLoad1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RRSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("PITransactionType",CallingTCase.getPropertyValue("PITransactionType"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("StreamWebLocLocation1",CallingTCase.getPropertyValue("StreamWebLocLocation1"));
testCase.setPropertyValue("StreamWebLocPreference1",CallingTCase.getPropertyValue("StreamWebLocPreference1"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTUReq","OK");
CallingTCase.setPropertyValue("FeedRTUReq",testCase.getPropertyValue("FeedRTUReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set" id="2e19e5da-ca5c-4585-9fa1-01ba2a7bb53f">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightTokenUpdateRequest PUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightTokenUpdateRequest PUT" id="14d875c4-a51b-4b20-b71a-803481075d46">
        <con:settings/>
        <con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightTokenUpdateRequest PUT" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C"/>
  <con:entry key="If-Match" value="&quot;FB8AA8A662FE8EFCE0401F0A07997E17:8C3759DE&quot;"/>
</xml-fragment>]]></con:setting>
              <con:setting id="RecordRequestRepresentations">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request><![CDATA[<ns4:RightsTokenFull ALID="${#TestCase#ALID}" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="${#TestCase#ContentID}" xmlns:ns4="${#Project#Coordinator_Schema}" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName} 		</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:DiscreteMediaRightsRemaining 				FulfillmentMethod="${#TestCase#PPDiscreteMediaProfile1}">${#TestCase#PPDiscreteMediaRemaining1} 			</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc} 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>${#TestCase#RightsLockerID}</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:request>
            <con:assertion type="GroovyScriptAssertion" disabled="true" id="71490b8e-ae51-4517-b64a-83ce622d7a3e">
              <con:configuration>
                <scriptText>// check for the HTTP Response code 
assert messageExchange.responseHeaders["#status#"] == "HTTP/1.1 200 OK"</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Request XML" id="b0514048-f2b9-412b-b9d7-054b7400469a">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" disabled="true" id="53c1d477-c05d-4cf4-8b32-0b59a2e41654">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

log.info "Log File Location : "+ logFile;

logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="b9222890-c3e1-4f15-8b8d-7085345358c9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        
        
        <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property>
        
        
        <con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property>
        <con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property>
        
        <con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property>
        
        
        <con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ns3.google.com</con:value>
        </con:property>
        
        
        <con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property>
        
        
        
        <con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property>
        <con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>RetailerTransaction_1_node0799_RetailerNode</con:value></con:property>
        
        
        <con:property><con:name>PITransactionType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property>
        <con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property>
        
        
        
        
        <con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property>
        
        
        
        <con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</con:value></con:property>
        <con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property>
        
        
        
        
        
        <con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1</con:value></con:property><con:property><con:name>RightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property>
        
        
        <con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>StreamWebLocLocation1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
      <con:property><con:name>StreamWebLocPreference1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADE54AD6830BE2671E0401F0A07996160</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenFull ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt" 	xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" 	ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging 		</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:DiscreteMediaRightsRemaining 				FulfillmentMethod="urn:dece:type:discretemediaformat:securedigital">1 			</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com 	</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" 		xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1</ns4:RightsLockerID> </ns4:RightsTokenFull>]]></con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>2435</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDelete Request" searchProperties="true" id="e04d786b-915e-489d-9a98-ac9bbd4bd695">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties" id="85ba5621-6a2c-4a81-8879-cfbb8dfae33e">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
headers.put("If-Match",testProject.getPropertyValue("eTag"));
testRunner.testCase.getTestStepByName("RightsTokenDelete byTokenID").testRequest.setRequestHeaders(headers);

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//if(testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
//{
//	testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//	
//}
//else 
//{
//	testCase.setPropertyValue("RightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
//}
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
testCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));

</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="pem set" id="60dbf026-321f-4a01-9baf-680670dc2fb5">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDelete byTokenID");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDelete byTokenID" id="1f118337-f1eb-4267-96ae-781a0f4f6f53"><con:settings/><con:config service="RightsTokenDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenDelete byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C"/>
  <con:entry key="If-Match" value="&quot;FB8AB24B908A7453E0401F0A059947D1:14001FF4&quot;"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Request XML" id="f04dada7-3b9b-4da4-84ab-cd5c2b742181">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RT_RequestBody = testCase.getTestStepByName("RightsTokenDelete byTokenID").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract RightsToken Info from the Response" disabled="true" id="db9ddfe2-c9f5-420e-9cdc-8f919d8e9df4">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def Resp_RightTokenObj  = new ArrayList();
def Resp_RightsTokenID = new ArrayList();
def RightLockerRTlist = new LinkedHashMap();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testCase.getTestStepByName('RightsTokenDelete byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def RTCount = Val_RightsResXml.children().collect{ it.name()};
def RTattb = Val_RightsResXml.RightsToken.children().collect{ it.attributes()};
def RTCountSize = RTCount.size();

mydbRights = new dbRightsToken(log,"LP1"); 

def RT_Data7 = mydbRights.rightstokenGetByAccountHandle("7001");

if(RightsResHttpStatus == "HTTP/1.1 200 OK"){

for ( int i in 0..RTCountSize -1){

Resp_RightsTokenID += Val_RightsResXml.RightsToken[i].attributes().values();
Resp_RightTokenObj += Val_RightsResXml.RightsToken[i].children().collect{ it[0].name()};
log.info "RightsToken["+i+"] - " + Resp_RightsTokenID[i] + " - " + Resp_RightTokenObj[i];
RightLockerRTlist[ Resp_RightsTokenID[i]] = Resp_RightTokenObj[i];

testCase.setPropertyValue("rightstokenid",Resp_RightsTokenID[i].toString());

def RTObjType =  Resp_RightTokenObj[i];

testCase.setPropertyValue("RTObjType",RTObjType.toString());

actRTG_RightsTokenID =  Val_RightsResXml.RightsToken[i].@RightsTokenID.toString();
	
def DBrightstokenid = Resp_RightsTokenID[i].tokenize(':').last();


log.info DBrightstokenid;
log.info actRTG_RightsTokenID;

}
testCase.setPropertyValue("rightstokenlist",Resp_RightsTokenID.toString());
testCase.setPropertyValue("rightstokenObjlist",RightLockerRTlist.toString());

log.info Resp_RightTokenObj;
log.info RightLockerRTlist;

// Evaluate RightsToken Success &amp; Failure


log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
log.info "Number of RightsTokens Returned : [ $RTCountSize]" 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
def expectedHeader = callingTCase.getPropertyValue("expectErrTypeRTLGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 

def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

log.info "Log File Location : "+ logFile;

logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="ValidateRightsLockerGet RESPONSE" id="61596c83-62e2-4cf5-bb64-75811cecada9">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;
def QAResp_ErrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def node_ID = context.expand( '${#Project#Node_ID}' );

testCase.setPropertyValue("nodeid","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",testProject.getPropertyValue("Node_Account"));
testCase.setPropertyValue("expectErrTypeRTLGet",CallingTCase.getPropertyValue("expectErrTypeRTLGet"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));


def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
//myNodeRole = myNode.nodeGetRole(Nodeid);
//log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("targetHostq");
def DecePort  = testProject.getPropertyValue("targetPort");

def ResponseXML = testCase.getTestStepByName("RightsTokenDelete byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testCase.getTestStepByName("RightsTokenDelete byTokenID").httpRequest.response.getResponseHeaders();
def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTLGet");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
//def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
//log.info Resp_HTTPcontentlength;
log.info errorRespType;
	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";


//if (DeceUrl.length() == 0) {
//	Resp_errorHost = "http://error.decellc.org";
//} else {
//	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
//}
//this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		log.info "Res_RTObjType[$Res_RTObjType]"+ "xxxxxxxxxxxxxxx";
		//log.info "myNodeRole[$myNodeRole]"+ "xxxxxxxxxxxxxxx";
//		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' &amp;&amp; Res_RTObjType == 'RightsTokenFull'){
//		//if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport' ){
//               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
//		}
//              else {
//
//              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
//              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	QAResp_ErrorID = "ForbiddenAccountNotActive";
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	
	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"	
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetIdentifierNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetIdentifierNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = "BadRequestBundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestLogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	QAResp_ErrorID = "BadRequestContentIDUpdationNotAllowed"
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	QAResp_ErrorID = "RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists"; 
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "IVALID_FILTERENTRYPOINT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterEntryPoint";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterEntryPointNotValid";
	break;

	case "IVALID_FILTEROFFSET":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterOffsetNotValid";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterOffsetNotValid";
	break;

	case "IVALID_FILTERCOUNT":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:FilterCount";
	//QAResp_ErrorID = "BadRequest";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FilterCount";
	break;

 }
 
testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;


if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsError Validation");

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
//log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
//assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

//log.info "Content-Type:" + Resp_HTTPcontenttype[0];
//assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID.toString();
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>End_To_End</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Copy of Sanity_TestSuite</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADBB728DEF0887428E0401F0A079923A4</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:EBAB459414898DBEE0401F0A07997A66</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E2CBE24531240945E0401F0A05990271" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" ALID="urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-07-31T08:55:32.288Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-07-31T09:30:52.416Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-07-31T09:30:51.942Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Updated</Description>
            </Prior>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-07-31T08:55:32.293Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2821</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>1935</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1f118337-f1eb-4267-96ae-781a0f4f6f53</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsError Validation" searchProperties="true" id="f55eb858-d6a0-4375-ae5c-b7d2a136ccab"><con:settings/><con:testStep type="groovy" name="Validate Rights Errors" id="d7c983e4-ef1b-463c-ab63-f635fe4861ef">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def RightsErrors = new dbErrors(log,"LP1");


def callTSuitename = tC.getPropertyValue("TSuiteName");
def callTCasename = tC.getPropertyValue("TCaseName");

def CallingTCase = tP.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("QAerrorID");
log.info errId;
/*
log.info errId.tokenize(':').last();
if(errId.contains('Policy'))
{
	log.info 'Policy:' + errId.tokenize(':').last();
	ErrorID = 'Policy:' + errId.tokenize(':').last();
}
else
{
	log.info errId.tokenize(':').last();
	ErrorID = errId.tokenize(':').last();
}
*/
def xmlData = "";

try {
			 xmlData = RightsErrors.errGetIdInfo(errId.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (tC.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",tC.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",tC.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",tC.getPropertyValue("errorID"));

</script></con:config>
      </con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamCreate" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="54fdb90a-8cd0-4f24-ac2b-1055a366bd81"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="858bd098-c44f-4512-a0ed-ea4fd3d7db7c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
//tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));

tC.setPropertyValue("RightsTokenID",callTC.getPropertyValue("RightsTokenID"));
tC.setPropertyValue("decodedNodeUserID",callTC.getPropertyValue("decodedNodeUserID"));
tC.setPropertyValue("expectErrTypeStreamCreate",callTC.getPropertyValue("expectErrTypeStreamCreate"));

//tC.setPropertyValue("sCbodyRequestingUserSetting",callTC.getPropertyValue("sCbodyRequestingUserSetting"));
//tC.setPropertyValue("sCbodyTransactionIDSetting",callTC.getPropertyValue("sCbodyTransactionIDSetting"));

//if (tC.getPropertyValue("expectErrTypeStreamCreate") == null || tC.getPropertyValue("expectErrTypeStreamCreate") == "") {
//	tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//}
//
//if (tC.getPropertyValue("expectErrTypeStreamCreate") == "SUCCESS") {
//	tC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("nodeid"));
//	tC.setPropertyValue("expectDBStatus","active");
//}
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="52f50b8e-7b99-49af-8295-49a72b0ccac0"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeId.....;;;;;; " + nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("nodeId",nodeId);

log.info "myTC.setPropertyValue .........." + myTC.getPropertyValue("nodeId");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("POST - StreamCreate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - StreamCreate" id="b9b41e77-5dfb-4079-bb5f-8dc734108add"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - StreamCreate" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/md"       xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">       <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>        <RequestingUserID>${#TestCase#decodedNodeUserID}</RequestingUserID>       <RightsTokenID>${#TestCase#RightsTokenID}</RightsTokenID>        <TransactionID></TransactionID>         <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="07b36745-768a-44dd-b776-c08f6ffc2a8c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - StreamCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract ERROR table information" id="f923d461-0854-450b-91dc-0fce131197be"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,"LP1");

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrTypeStreamCreate[" + tC.getPropertyValue("expectErrTypeStreamCreate") + "]";

switch (tC.getPropertyValue("expectErrTypeStreamCreate")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "INVALID_CALCULATION_METHOD":
		errId = "CalculationMethodNotValid";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_VALID":
		errId = "RightsTokenIDNotValid";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "Policy:RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
	case "USER_PRIVILEGE_ACCESS_RESTRICTED":
		errId = "UserPrivilegeAccessRestricted";
		break;
	case "GEOLOCATION_VALUE_FORMAT_NOT_VALID":
		errId = "GeoLocationValueFormatNotValid";
	     break;
	case "CONFIDENCE_OUT_OF_RANGE":
		errId = "ConfidenceOutOfRange";
		break;
	default:
		errId = tC.getPropertyValue("expectErrTypeStreamCreate").toString();
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="a85370e8-3e17-4a39-8b02-d1c031e8e022"><con:settings/><con:config><script><![CDATA[import java.net.URLDecoder;
import java.net.URLEncoder;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");
def urnnode   = tP.getPropertyValue("urnNode");

def sh            = tC.getPropertyValue("streamhandleFULL");
def nodeid        = tC.getPropertyValue("nodeid");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = false;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "https://" + tP.getPropertyValue("targetHostq") + ":" + tP.getPropertyValue("targetPort");
String errorLinkBase = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#";
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
String urnErr = tP.getPropertyValue("urnError");





this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
//	case "Node_status_inactive":
//		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
//		processXMLFlag  = true;
//		errorID = "Bad_Request";
//		errorReason = "Node_status_inactive";
//		errorLink = "";
//	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "urn:dece:errorid:org:dece:securitycontext:Bad_Request";
		errorReason = "node_status_inactive";
		errorLink = "$errorHost/deceerrors/error/error_response.html";
	break;

	case "XML_PARSING_ERROR":
		errorLinkFlag = true;
		errorReasonFlag = false;
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink  = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;
	
	default:
		errorReasonFlag = true;
		expectHTTPstatus = tC.getPropertyValue("errorStatusCode");
		errorID     = urnErr + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

log.info "errorID[$errorID]";
log.info "errorReason[$errorReason]";
log.info "errorLink[$errorLink]";

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + tC.getPropertyValue("httpContentLength").toInteger();
if (XMLbodynull) {
	assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert tC.getPropertyValue("httpLocation") != null;

	def a = tC.getPropertyValue("httpLocation");
	def b = URLDecoder.decode(a,"UTF-8");
	//def urlStr = b.getPath();
	def urlStr = b;

	//assert b.getPath().matches("/rest/$major/$minor/Account/${account}/Stream/$urnstream[0-9, A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	streamid     = urlStr.substring(lastColon + 1);
	streamidFULL = urlStr.substring(lastSlash + 1);

	this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("streamhandle",streamid);
	tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert tC.getPropertyValue("httpLocation") == null;
}

//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		if (errorReasonFlag) {
			this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
			assert myXML.Error.Reason.toString() == errorReason;
		} else {
			log.info "ErrorReason IS NOT NULL";
			assert myXML.Error.Reason.toString().length() > 0;
		}

		// ErrorLink
		if (!errorLinkFlag) {
			assert myXML.Error.ErrorLink.size() == 1;
			log.info "ErrorLink:[" + myXML.Error.ErrorLink.toString() + "] Expected[$errorLink]";
			assert myXML.Error.ErrorLink.toString() == errorLink;
		}
	} else {
		this.log.info "ResourceStatus size is " + myXML.ResourceStatus.size();
		this.log.info "ResourceStatus.Current size is " + myXML.ResourceStatus.Current.size();
		this.log.info "ResourceStatus.Current.Value size is " + myXML.ResourceStatus.Current.Value.size();
		this.log.info "ResourceStatus.Current.Description size is " + myXML.ResourceStatus.Current.Description.size();
		this.log.info "myXML.RequestingUserID size is " + myXML.RequestingUserID.size();
		this.log.info "myXML.RightsTokenID size is " + myXML.RightsTokenID.size();
		this.log.info "ExpirationDateTime size is " + myXML.ExpirationDateTime.size();
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;
		if (nodetype != "llp" && nodetype != "llpcs") {
			assert myXML.RequestingUserID.size() == 1;
		} else {
			assert myXML.RequestingUserID.size() == 0;
		}
		assert myXML.RightsTokenID.size() == 1;
		assert myXML.ExpirationDateTime.size() == 1;

		// ModifiedBy
		expected = urnnode + nodeid;
		received = myXML.ResourceStatus.Current.@ModifiedBy.text();
		this.log.info "ModifiedBy - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// StreamHandleID
		expected = sh;
		received = myXML.@StreamHandleID.text();
		this.log.info "StreamHandleID - Expect[$expected] Received[$received]";
		assert expected == received;

		// CreatedBy
		expected = urnnode + tC.getPropertyValue("expectDBCreatedBy");
		received = myXML.ResourceStatus.Current.@CreatedBy.text();
		this.log.info "CreatedBy - Expect[$expected] Received[$received]";
		assert expected == received;

		// Value
		expected = tC.getPropertyValue("expectDBStatus");
		received = myXML.ResourceStatus.Current.Value.text();
		this.log.info "Value - Expect[$expected] Received[$received]";
		assert expected == received;

		// Description
		expected = description;
		received = myXML.ResourceStatus.Current.Description.text();
		this.log.info "Description - Expect[$expected] Received[$received]";
		assert expected == received;

		// RequestingUserID
		received = myXML.RequestingUserID.text();
		if (nodetype != "llp" && nodetype != "llpcs") {
			expected = tC.getPropertyValue("assertionUserIdFULL");
		} else {
			expected = "";  /* LLP has not user associated with it */
		}
		this.log.info "RequestingUserID - Expect[$expected] Received[$received]";
		assert expected == received;
		
		// RightsTokenID
		expected = tC.getPropertyValue("rightstokenidFULL");
		received = myXML.RightsTokenID.text();
		this.log.info "RightsTokenID - Expect[$expected] Received[$received]";
		assert expected == received;

		// RightsTokenID
		assert myXML.ExpirationDateTime.text().length() > 0;
	}
} 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Return the streamhandle" id="53463d73-84a9-417a-9d4d-87ad60037c33"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("streamhandle",tC.getPropertyValue("streamhandle"));
callTC.setPropertyValue("streamhandleFULL",tC.getPropertyValue("streamhandleFULL"));
callTC.setPropertyValue("expectDBCreatedBy",tC.getPropertyValue("expectDBCreatedBy"));
callTC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus"));
</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ashwin_user_create_20130626_020921</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>sCbodyRequestingUserSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:E2A4C8F78A56EB42E0401F0A059938CD</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3710</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>nVdZd6JKEH73V3icR0/CoridJOc0qxhRQcTlDaFZFEFpEPTX3wajMctk5s5Dli5q+brq6+rqJ2TuAroHEIJx4kdhVeafa81mB9JOm3kwW6T50GQs8mHdphr4F2w2adhtdGi6VpURSqEcosQMk+caTVLUA0k90C2davaoVo9iHrGfVa1qwBhhz1jlkaxV810Qol4Z9bmWxmEvMpGPeqG5g6iXWL0pUIY9rNkzr5BqL08XkGXA+MVLkn2PIKxHG1owCKxHK9oRT8QHnScb9aa+G5pJGsO3mDZ6rr3ZZln2mDUeo9glaJIkCbJLYB0b+e6v2kvlagxtOXSiy5ozwyj0LTPwz2YBSoGJF9lVELhR7Cfe7jeuKYIiC9cPMLceLKoZ/qoR7wFKdH/p6QPIGJkPyDOpqzMNOjCGoQWrM01+rv36qwJeTPXYDJETxTv0af3/EMHwCINoD+0HdN3YFdzfe/wmWy9P0OrJoRWkyD/CUcGSvWlBVJ3E0PHzoY8w92xULatfzdGVYND6PxV5Iu5xYtjEN5nhfRei5F/KdV+qixfDDFL4YozsNeufwm3mR+mJVYR6MGQygtHU2XMJ4V75AupW6bf1Z57eaPVmxJ4kIWYHwNmAhAANZ77ZuwMrc9rT6YyORMZZdLOtaszrqdpXaKKLbA9GCjNthhtr3CEdrj0M+TG1WUsrUBmcyMOGTiKaFB23Th40G7DsLIr7y1Nruc8WuSNC9exSEu/RGZ0eUndsOIOQHzWNIQ36ou5qEeNrRK7XjYq7MQICdiTrdMiZKbFVFfT8vqf7PRT7eoWncpPF/wuG7PJmYt4WXNEoHHw6E/iiyDKfnjkOnKYuyGQWuPhnA0asuz14W1/qZiQLVFUEPMcGG2GogK0EqJnAegpnGErOncGAdUcGNtQrIFixiiZkfLbkDVXtC5mn25JxWktBujoLIwWg0pjzFEETDF7TBUUB0UWWK/xayjfKVMlkdclXsANeyPdnW+omUMp9i5YZZcrQyymTrhYGloun4W50XOtCoHCKxE0P0lReN3hVGABtObdoMcW25+FuH1WWM/bOaLCHGwDFjMQxwVnRt5miz+gRr5mlTP8oU2RpoKgo49RyV1JFyAbG7PyeC45VOHsn5IIOJpdcWDonjsjVYoDMORMqGsh4tzR+FTJ7fAWiqGRW4S65GgqZJmizkahociaAUsYLWYDW9MhbS97Raqj5QAeb+8JwqjAXQ/w91I7WiTlUTEkE651BWQ3Ns3zGNxdR5q46Ga8uB6/RSsZuRkAVWFYFGBAJiq3h/LNgyBrMeO93aR8OHTHaQS+uKFT0uj2ec7LjN8buZDRneGfbnkj+pGHaHiEHFr1pbIEsQ/uV8lTT1paExof+uTV+nS2gHy/PyYhRqZbfYSraPJ0t+Cho2/3FcvZaz5eWqo8n09l8cs7z0WHTOQdJf8z24+lA4d3xCMIJsuoEaYqs3uEZbtnfYD45GgmZCnAVFgBp47qCjwnM9jcXEvY1RcDkBQqXSdyck6ZAkuqCzPKq6ogeNbEkI51RI0UW7ACn6bRcaEFlxbE8rhRpzlf7JS2SKx3YpTO1KYiuOmPqgwVcqaNANxKQ7Q0npChS2qt9R8lcSykYYMvZlMWniK2kMpiZ4/2AzF+NFkkdVDsYTLtg1sin9DYfe+7qtHVXW1yU5d3RWeogMPQ7jsmYYvOKqguaAjqX85Yr8qyhBdYu3693Vs7ruGalcaSzgiaq5CznefB6kSEd0DlanoWNwgmlfQXkiolpcVwvPLQMR/5YF1JM2vSOLps1Tf6RYwXFKh85duCACj5zTLhwTADOoS53eAoxLW6P5pnLSsJBbRvDQXdPqovhtsLWRcJN/KA5DjuZ/lqfU6es7W3U+bwr8x5XD52l11gnLGmeLRUOtm3J17Z82GoGJ2WoqMzMJ4ITuYGHDA0rI5kKhUZyFolunNbZ3crfnc+NJj3bTabpUZ6Zr4g6eevDvJttJv0WQcTSiTm3V0dVXETW8nKPfG6SN+GljRL3DfZDB76OXtN0vYFWcl0W97DMV0V8OZrJz2NcIfHtB6dU7e2LWRAlMExqL4VVMcL1Ujzo+XYP35yXdRcAvtXptNgm1WZbZFsgmyQlkoBkut1Wu8FeZ70Lik8QuSh0/CJWMcxeLuufAVq73hqaMYxrP3gq8lSVQw1PH1GIoB491xoMA7pNsdPstBi2wzFNttUSAUt36Sbd4pqtWnUUJeNwHAMngfHdgNz+PCBr0PL3Piym6LdZAiU4EQfzmCYB9Xg0H0OY4jE7LibdHt3sMGUCCDvd7S38AXe3eB+h5HHv7cth5rfb+PztumOsY/uFAipAsxBXC34z0pNXxF92Rn87+l/dg9T2i5kFpy+JfeuC5OOndzYUNLhRgexS5BXzTfWvTel/N23+o2mXoph/N219NSV+SCHxuXq3SPbRv4t7fUnhxwGeH8sHFMIsO5iPh8f0eExLXrVJkiZi7J4giS4xhVaK59uTHm1hSNw8EH/zsrhh/hT3Jv+ILk28cJrgtrTDR6BaLv/8qvxgjROQwDz5TsYF+B1ZBP/xqWn1rEIPiyf4TxbF9nvev/F1FwdDLlqqH7rFqngSnD6W9+3o9qwIe/VxV43ie9/f2X8X+6Pwlq4blASzYp0m8PdfqkW7fK6ZlhWlYSLztVJw38JLzMlpD3vvSl/clDP52yMrR799ZC2U4dTy4M6s3XT9Pys/+GXhLYitkF9iea7lqFdwPnTvrow3gL+5NZifbo2PO3n5Iv4qucvpZ2a//Ac=</con:value></con:property><con:property><con:name>nickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Raju</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1/Stream/urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7002/dece/Account/urn:dece:accountid:org:dece:96D720451F824F56E0401F0A079921A9/Stream/urn:dece:streamhandleid:org:dece:98F5525959D92153E0401F0A07993F6C</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorReason</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E00B9A40E209CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:E00B9A40E207CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6rKEn73V1juR8sAgihWkqrhpqioeNeXUzgMF+UmA4L++jOY6EqystbJPk8wTU/31xd6vnnGZuA3uwBjlKReFFY1+aX2H56DnTbatxomy7caHN3hyZvNNgSLMWm7Y+45m65VNYwzpIU4NcP0pdakGbZB840mv6A7XY7tNtmnpiDsatUVSjAxTVSeyK4i8EPcvbl9qWVJ2I1M7OFuaAYId1PYnQN91CWaXfOOqfb6/Iby5jB5ddM07lIUfLIQRL4Pn2AUUM/UJ51nC3fnnhOaaZagd58Wfqm9783z/Clnn6LEoZo0TVO0QBEdC3vOP7XXyn0zsrTQjt7WkhlGoQdN37uaJSgdpW5kVYHvRImXusEfTDMUQ5emG6iADchw4T816peDG7ofWvoEMsFmA7smczc2QzZKUAhRdTnTXmr//KyCb3sXiRliO0oC/GX97yCh8Iz8KEZWA98ju6P7ucVv0vX6jGBXC6GfYe+MxmWbxCZEuDpNkO0VIw+T5rNw9Vb+aoHvHYbgvynJM/URJ4FNfZMZ2XMQTv+fen2s1ZuVleln6PWKIskf8dP+CWLfmMPWbnudG6GTaMuXG4SPym+gHqV+X39t1EdfvW9aTVbp4JQM1WDZHxpOMVOjdDqfOid3UNhs4W4EP5o1R9NpnEoqKFr7S9Y2hUlg7Nw6Z2z2g2Nytdb2aFJoXmWPeV7aznLLVZ31MrC1lcjJ8UKCPicOxgkXMa06T1vysQmXE6pFrwZ1lWV2y2YueWM1Yia7ev+Q2FKx0egKfYzZkSJQHYqn8UBLwh5++RXTxxjKuIbocguyfN+0aEE2U/OxkMpJYZPfM0WvuqZJdVmSAJIckGsicDRxdAVj0Tme3KPXE3JaBMZSBTK46DOQy85WXhnGUMmt1crfrTRVFfUZl/fBVq6QD7JSrOTdZkCb6128bar0bi6K1mYW7dlBbPWPed+FY32h5+OFdtEPSjFeKPT6JnMKsr7qB52ZLJZsZX0QBX2m5HJ+8ygruTverWfxdink8KoYOuB6gFkqkqv3F8GKgezMhQdlpIPjTS66urRa6YWyANOK6IxXJLaFpO5iGFjxPvDdD8b7xPjC6q0u+56f7a7KQZeUnjQ/9ebanpUNZQBm2+V+vTqaa/Vcgf0x2N89ei3P3ES5s+vksrEdDKOd5p7hGBiKKBqApIsGutYbgKgnAp0DXnGVDiIfSZaaU4MmrtQFv8dvLt5pg80e7ZtMp8NsR2t+euJlJazvhtn+4OruRp3Uh3PrvBRS4brF5/qZNz0GFrFtbJR+OizsvjGv7KdysYH9uuUMKP8qqIneHoDkenF93Zmla36CL3vPttfiZsL5bdvX2Vls+3Z8wfVFZBwTmhcR26S2l/MwrQBHFwHoHZYH0dDFTplUS8uNrS6aQFXSDFwPzXTYXJ0G/bMPtyyIiuF6cji+F8aSc0WkckMhbaVUOjKwyiL050tFPYCl6DiJ6CiqaEAZGFttmG9JvpZ9ovw1j+otj44iAoXdAV7oV9glLaSTdM5x4BKKy1AVXP1UrC0+oNsnpIzm45jLdTy2w906OuqBlyyTbL4cDsejYr/IescDmVU2PR+e2V1FOR9j4I2HC/coR7I5jbfbNK6HMIGpFge6VlwnO3zoePuAHtRbjDilZdhuLoN9vuyZym6YOHNm2J+FU7YtVHBmX/pB/dDJ1/XFnI/blhTa8uVC7ZIVHYFIFWatk1U0m0d3mY/43B6A495sjgtfEC+CMtwtYD4zhut5UG9VWufRKKCvC4obx5N83ss5xTDqrCUu+gscJ9426zhFMgmt5tZM+fOOXvFe7B+FZnZccDG7cgJSrOnZitv6tGJwG7gLnHYMB9SMOgOlbY+03mV/Na9xMIFvA/TrdHgI3+YH9XGyfBo9d9IxJ92KYHpflgeQJldVciqY6d8JTCnxrIZ9U+3GJQvCKQrT2mu5qyQv3YxQHM/qkiPjba3QtCgAjlaaBLVMqwrN0YxKA7olCExL7txZzhuKLxClKLS90lfJ495Oqb8DhEEXo9BCSeMcZdBFuPYXi2W+qlo4I8dvFGK0iAhP5Ngm0+FUSeJ4ILWVlghYwLdbYqsjKW1RYmrVcZROwkkC7BQlnzgiw3ziiDMEvdhDJZEsT1NMjlOckpSczHOW+szT2XwKUUaoZlKyvW6T67Qo7AWxj0rAVBBZmY+eYje+JYjCb89mw4T4JmXbDH075v8Y39dv91QQHcsrFXAZjIhIOdE3bJe5R/JbxNy3rPhuHmSWV57mJK9p4sE3JJ8//WqXsk8evVKGdMf8UP3xVub3rdRfEFFfk/HwZJ29D37vnJ3QUEJUXu+1PJlPp6fsfM5u1WuXJCwh5imGonlqjmBGmNRlER1RSD1MUD8isQ/UXzw/5J/xZakbzlMyCALSa9Xb8gc3mDnC5Q1GI/9K8dPr0SeXJG8pKtLvZJJPLjol4r/ehWAXlnpEPCWPPEqsX+X6xtYHPyTOcvJ5oVOuSsp6+UNXwIiY9cj0i5KPxr8z8J3zz8JHkh9YUtJN+yxFf/5SLcfaS82EMMrCVJNrN8HHUXvDmV5i1P2l9JuZG2l8vwUU+I+3gI0+mpOhF5i1h673v5Ub3q1dICK7sHfD8lIryIWWOA+dD6P9HeAfpnv7b9P9cySvv4l/l3zI6df/4fW/</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>sCbodyTransactionIDSetting</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77327</con:value></con:property><con:property><con:name>subDivided</con:name><con:value>US 20148</con:value></con:property><con:property><con:name>calculationmethod</con:name><con:value>urn:dece:type:geoloc:networkaddress</con:value></con:property><con:property><con:name>viaproxy</con:name><con:value>urn:dece:type:true</con:value></con:property><con:property><con:name>confidence</con:name><con:value>50</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE00B9A40E207CD0FE0401F0A059915D8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamView API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4ffb5321-6f84-43d9-a300-b7b78b13ffa9"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="cf10bbd7-83cf-4055-9368-e2dd6db2a91a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if(tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
	
}
else 
{
	tC.setPropertyValue("streamhandleFULL",URLEncoder.encode(callTC.getPropertyValue("streamhandleFULL"),"UTF-8"));
}

tC.setPropertyValue("errorRespTypeStreamView",callTC.getPropertyValue("errorRespTypeStreamView"));
tC.setPropertyValue("expectStreamStatus",callTC.getPropertyValue("expectStreamStatus"));

//if (tC.getPropertyValue("expectStreamStatus") == null) {
//	tC.setPropertyValue("expectStreamStatus","active");
//}


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="21a3fd72-849f-4e4a-9cc1-71febf060540"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - StreamView");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamView" id="3016cbf1-06d3-4b04-bb42-0dd598259701"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamView" id="bedb4965-2eee-42a7-8409-37ed0984e920" mediaType="application/xml" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="75406400-68e0-41c9-90b6-38c99ec1978d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - StreamView');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String etag = null;

String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tP.setPropertyValue("eTag", etag);

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="22e9477c-ca6a-4395-b724-3af3038a4476" disabled="true"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def urnrt     = tP.getPropertyValue("urnRightsToken");
def urnnode   = tP.getPropertyValue("urnNode");
def urnuser   = tP.getPropertyValue("urnUser");
def urnstream = tP.getPropertyValue("urnstream");
def genericRT = tP.getPropertyValue("urnGenericRightsToken");
def nodetype  = tC.getPropertyValue("nodetype");

boolean eNickPresentFlag = false;
String dBy   = "";
String eUser = "";
String eStatusDesc = "";
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expectNickname = tC.getPropertyValue("expectNickname");
String expectStreamStatus = tC.getPropertyValue("expectStreamStatus");
String expectStreamHandle = tC.getPropertyValue("streamhandleFULL");
String expectCreatedBy = urnnode + tC.getPropertyValue("nodeid");
String expectUser = tC.getPropertyValue("assertionUserIdFULL");
String expectRightsToken = urnrt + tC.getPropertyValue("rightstokenid");
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
/*
log.info "expectNickname is [$expectNickname]";
ifS (expectNickname != 'null' || expectNickname != null) {
	eNickPresentFlag = true;
}
log.info "eNickPresentFlag[$eNickPresentFlag]";
*/
/*
*   VALIDATION HTTP HEADERS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;
//Content-Length
assert tC.getPropertyValue("httpContentLength").toInteger() > 0;
//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;



def XMLbody = tC.getPropertyValue("XMLbody");

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

switch (expectStreamStatus) {
	case "deleted":
		eStatusDesc = "deleted";
		if (eDECEDeleteFlag != "true") {
			eDECEDeleteFlag = "false";
		} else {
			dby = tP.getPropertyValue("deceorgid");
		}
	break;
	case "active":
	default:
		expectStreamStatus = "active";
		eStatusDesc = "active";
	break;
}




if (XMLbody.length() > 0) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Assert element counts
	assert myXML.ResourceStatus.size() == 1;
	assert myXML.ResourceStatus.Current.size() == 1;
	assert myXML.ResourceStatus.Current.Value.size() == 1;
	assert myXML.ResourceStatus.Current.Description.size() == 1;
	assert myXML.RightsTokenID.size() == 1;
	if (nodetype == "llpcs" || nodetype == "dlpcs") {
		assert myXML.RequestingUserID.size() == 0;
	} else {
		assert myXML.RequestingUserID.size() == 1;
	}
	assert myXML.ExpirationDateTime.size() == 1;

	// Status 
	this.log.info "expectStreamStatus [$expectStreamStatus] and value is " + myXML.ResourceStatus.Current.Value.toString();
	if (expectStreamStatus == "active") {
		assert myXML.ResourceStatus.Current.Value.toString() == "urn:dece:type:status:active";
	} else {
		assert myXML.ResourceStatus.Current.Value.toString() == "urn:dece:type:status:deleted";
	}
		
	// Streamhandle
	this.log.info "expectStreamHandle [$expectStreamHandle] - value " + myXML.@StreamHandleID.toString();
	assert myXML.@StreamHandleID.toString() == expectStreamHandle;

	//<CreatedBy>
	this.log.info "expectCreatedBy[$expectCreatedBy] - CreatedBy is " + myXML.ResourceStatus.Current.@CreatedBy.toString();
	assert myXML.ResourceStatus.Current.@CreatedBy.toString() == expectCreatedBy;

	//<CreatedDate>
	assert myXML.ResourceStatus.Current.@CreationDate.toString().length() > 0;

	//<Description>
	assert myXML.ResourceStatus.Current.Description.toString() == eStatusDesc;

	//<RequestingUserID>
	def rUser = myXML.RequestingUserID.toString();
	this.log.info "rUser [$rUser] and expectUser [$expectUser]";
	if (nodetype == "llpcs" || nodetype == "dlpcs") {
		assert rUser == "";
	} else {
		assert rUser == expectUser;
	}
	
	//<RightsTokenID>
	this.log.info "expectRightsToken [$expectRightsToken] value " + myXML.RightsTokenID.toString();
	assert myXML.RightsTokenID.toString() == expectRightsToken;
	
	//<ExpirationDateTime>
	assert myXML.ExpirationDateTime.toString().length() > 0;

	if (eNickPresentFlag) {
		assert myXML.StreamClientNickname.size() == 1;
		assert myXML.StreamClientNickname.toString() == expectNickname;
	} else {
		assert myXML.StreamClientNickname.size() == 0;
	}
} else {
	return false;
}

]]></script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:0</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn072ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:0000-3BAB-9352-9999-G-0000-9999-Q:0001</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>eDECEDeleteFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>eDeletedByPresent</con:name><con:value>false</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">harbor&amp;#6158;</con:value></con:property><con:property><con:name>expectTransactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1467</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>urn:dece:accountid:org:dece:9AAD6886B415B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>urn:dece:userid:org:dece:9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>DFAA2AC718B91024E0401F0A07991C2B</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>1999003</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_13056 - StreamCreate - DLP - &lt;StreamClientNickname> can contains UTF-8 Encoded characters - 201 Created</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Raju</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</RightsTokenID>
   <ExpirationDateTime>2014-06-11T17:46:57.147Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:16:42.088Z" CreatedBy="urn:dece:org:org:dece:DLASP" ModificationDate="2014-06-11T10:16:52.349Z" ModifiedBy="urn:dece:org:org:dece:DLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:16:42.088Z" ModifiedBy="urn:dece:org:org:dece:DLASP">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77329</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AED419DFA2BA592C7E0401F0A0799147D</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3016cbf1-06d3-4b04-bb42-0dd598259701</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamListView" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="87a09ea8-2f52-4f96-b858-9101127e00c7"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" disabled="true" id="0e6926db-8fbb-4b18-9c4e-0ec0391bdfb0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int counter;
String sh;
String rt;
String shCreatedBy;
String shValue;
String shExpireDate;
String nickname;
String expectGenericRightsToken;

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
def assertionAccountIdFULLEncoded = URLEncoder.encode(tC.getPropertyValue("assertionAccountIdFULL"),"UTF-8");
tC.setPropertyValue("assertionAccountIdFULLEncoded",assertionAccountIdFULLEncoded)
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
tC.setPropertyValue("expectErrTypeStreamListView",callTC.getPropertyValue("expectErrTypeStreamListView"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("nickname"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("expectGenericRightsToken",callTC.getPropertyValue("expectGenericRightsToken"));
tC.setPropertyValue("expectStreamAvailCnt",callTC.getPropertyValue("expectStreamAvailCnt"));
tC.setPropertyValue("expectStreamActiveCnt",callTC.getPropertyValue("expectStreamActiveCnt"));

if (tC.getPropertyValue("expectErrTypeStreamListView") == null || tC.getPropertyValue("expectErrTypeStreamListView") == "") {
	tC.setPropertyValue("expectErrTypeStreamListView","SUCCESS")
}
if (tC.getPropertyValue("expectDBStatus") == null || tC.getPropertyValue("expectDBStatus") == "") {
	tC.setPropertyValue("expectDBStatus","active")
}
if (tC.getPropertyValue("expectGenericRightsToken") == null || tC.getPropertyValue("expectGenericRightsToken") == "") {
	tC.setPropertyValue("expectGenericRightsToken","false")
}
if (tC.getPropertyValue("expectStreamAvailCnt") == null || tC.getPropertyValue("expectStreamAvailCnt") == "") {
	tC.setPropertyValue("expectStreamAvailCnt","")
}
if (tC.getPropertyValue("expectStreamActiveCnt") == null || tC.getPropertyValue("expectStreamActiveCnt") == "") {
	tC.setPropertyValue("expectStreamActiveCnt","")
}

if (tC.getPropertyValue("counter") == null ||
    tC.getPropertyValue("counter") == "") {
    		tC.setPropertyValue("counter","1");
    }
    
counter = tC.getPropertyValue("counter").toInteger();

for (int i = 0; i &lt;= counter; i++) {
	sh           = "streamhandleFULL_"  + (i + 1);
	rt           = "rightstokenFULL_"   + (i + 1);
	shCreatedBy  = "expectDBCreatedBy_" + (i + 1);
	shDeletedBy  = "expectDBDeletedBy_" + (i + 1);
	shValue      = "expectDBStatus_"    + (i + 1);
	nickname     = "expectNickname_"    + (i + 1);
	expectGenericRightsToken = "expectGenericRightsToken_" + (i + 1);
	
	tC.setPropertyValue(sh,callTC.getPropertyValue(sh));
	tC.setPropertyValue(rt,callTC.getPropertyValue(rt));
	tC.setPropertyValue(shValue,callTC.getPropertyValue(shValue));
	tC.setPropertyValue(shCreatedBy,callTC.getPropertyValue(shCreatedBy));
	tC.setPropertyValue(shDeletedBy,callTC.getPropertyValue(shDeletedBy));
	tC.setPropertyValue(nickname,callTC.getPropertyValue(nickname));
	tC.setPropertyValue(expectGenericRightsToken,callTC.getPropertyValue(expectGenericRightsToken));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="f95d99c4-d546-4991-93d3-57f64533997b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("GET - StreamListView");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamListView" id="852eed9a-4d62-4a55-8572-421356bf351f"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamListView" id="8fba20b8-88ae-40af-aa13-8ecb02761e91" mediaType="application/xml" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3b591731-3438-4a0f-9b88-841adb5cae4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamListView');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" disabled="true" id="40062d0b-3193-478d-95f3-a864c1d4f536"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url         = tP.getPropertyValue("targetHost");
def urnacct     = tP.getPropertyValue("urnaccount");
def urnstream   = tP.getPropertyValue("urnstream");
def urnnode     = tP.getPropertyValue("urnNode");
def urnGenericRightsToken = tP.getPropertyValue("urnGenericRightsToken");
def streamMaxDisplayCount = tP.getPropertyValue("streamMaxDisplayCount");
def streamlimit  = tP.getPropertyValue("streamlimit");
def acct         = tC.getPropertyValue("nodeaccountid");
def sh           = tC.getPropertyValue("streamhandleFULL");
def counter      = tC.getPropertyValue("counter").toInteger();
def account      = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypeStreamListView");
def XMLbody       = tC.getPropertyValue("XMLbody");
def expectCreatedBy = urnnode + tC.getPropertyValue("expectDBCreatedBy");
def expectDeletedBy = urnnode + tC.getPropertyValue("expectDBDeletedBy");
def expectStatus    = tC.getPropertyValue("expectDBStatus");
def expectRT        = tC.getPropertyValue("rightstokenidFULL");
def expectSH        = tC.getPropertyValue("streamhandleFULL");
def expectNickname  = tC.getPropertyValue("expectNickname");
def expectStreamActiveCnt  = tC.getPropertyValue("expectStreamActiveCnt");
def expectStreamAvailCnt   = tC.getPropertyValue("expectStreamAvailCnt");
def expectGenericRightsToken = tC.getPropertyValue("expectGenericRightsToken");

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String errorHost   = "";
String availStreamsCnt = "";
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expectDescription = "";
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean XMLbodynull     = false;
boolean doValidations   = true;
int displayStreamCount   = 0;
int xmlIndex             = 0;
int g                    = 0;

switch (expectStatus) {
	case "active":
		expectDescription = "active";
	break;
	default:
		expectDescription = "deleted";
	break;
}

/*
*  Change the expectRH value if policies should result
*  in the generic rightstoken being displayed
*/
if (expectGenericRightsToken == "true") {
	expectRT = tP.getPropertyValue("urnGenericRightsToken");
}

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/
if (tP.getPropertyValue("targetURL").length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = "https://qa.q.uvvu.com:" + tP.getPropertyValue("targetPort");
}

this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		processXMLFlag   = true;
		XMLbodynull      = false;
	break;
	case "SUCCESS_NO_STREAMS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		processXMLFlag   = true;
		XMLbodynull      = false;
		if (expectStreamActiveCnt == null || expectStreamActiveCnt == "") {
			expectStreamActiveCnt  = 0;
		}
		if (expectStreamAvailCnt == null || expectStreamAvailCnt == "") {
			expectStreamAvailCnt = streamlimit;
		}
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "Account is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	
	case "API_NOT_AUTH":
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CID_CONTENT_NOT_ACTIVE":
	errorID     = "urn:dece:errorid:org:dece:Request:StreamContentIdNotActive";
	errorReason = "Rights content ID is not active";
	errorLink   = "http://error.decellc.org/en/Request:StreamContentIdNotActive";
	
	break;
	case "CID_NOT_ACTIVE":
	errorID     = "urn:dece:errorid:org:dece:Request:StreamAssetNotActive";
	errorReason = "Rights logical asset is not active";
	errorLink   = "http://error.decellc.org/en/Request:StreamAssetNotActive";
	
	break;
	case "CID_NOT_ALLOWED":
	errorID     = "urn:dece:errorid:org:dece:StreamAssetWindowNotAllowed";
	errorReason = "Rights logical asset is not allowed for streaming";
	//errorLink   = "http://error.decellc.org/en/StreamAssetWindowNotAllowed";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamAssetWindowNotAllowed";
	
	break;
	case "CID_NOT_GRANTED":
	errorID     = "urn:dece:errorid:org:dece:StreamRightsNotGranted";
	errorReason = "Rights to stream the content is not granted";
	//errorLink   = "http://error.decellc.org/en/StreamRightsNotGranted";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamRightsNotGranted";
	
	break;
	case "CID_CONTENT_NOT_EXIST":
	errorID     = "urn:dece:errorid:org:dece:Request:StreamContentIdNotFound";
	errorReason = "Rights content ID does not exist";
	errorLink   = "http://error.decellc.org/en/Request:StreamContentIdNotFound";
	
	break;
	case "CONTENT_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	errorReason = "ContentID is not found";
	//errorLink   = "http://error.decellc.org/en/ContentIDNotFound";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_ACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:ContentIDNotActive";
	errorReason = "ContentID is not active";
	//errorLink   = "http://error.decellc.org/en/ContentIDNotActive";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotActive";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	errorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	errorReason = "AssetLogicalID is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = true;
		errorID = "Bad_Request";
		errorReason = "Node_status_inactive";
		errorLink = "";
		orgRequest = "";
	break;
	
	case "RT_ACCESS_NOT_ALLOWED":
	errorID     = "urn:dece:errorid:org:dece:Request:RightsTokenAccessNotAllowed";
	errorReason = "Rights token access is not allowed";
	errorLink   = "http://error.decellc.org/en/Request:RightsTokenAccessNotAllowed";
	
	break;
	case "STREAM_USER_NOT_SPECIFIED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	
	break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "Request Account ID not match";
		errorLink   = "$errorHost/rest/0/9/error/en/ErrorList.html#AccountIdUnmatched";
		orgRequest  = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
	break;
	
	case "STREAM_NOT_ACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:StreamNotActive";
		errorReason = "Stream Not Active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamNotActive";
	break;

	case "STREAM_USER_INVALID":
	errorID     = "urn:dece:errorid:org:dece:StreamNotActive";
	errorReason = "Stream User ID Invalid";
	errorLink   = "http://error.decellc.org/en/Request:StreamUserIdInvalid";
	break;
	
	case "STREAM_INVALID_TRANS":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:StreamTransactionIdInvalid";
	errorReason = "Stream Transaction ID Invalid";
	//errorLink   = "http://error.decellc.org/en/StreamTransactionIdInvalid";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamTransactionIdInvalid";

	case "STREAM_OWNER_MISMATCH":
		expectHTTPstatus = "HTTP/1.1 409 Conflict";
		errorID     = "urn:dece:errorid:org:dece:StreamOwnerMismatch";
		errorReason = "Stream Owner Mismatch";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamOwnerMismatch";
	break;
	
	case "USER_NOT_PERMIT":
	errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
	errorReason = "User Privilege Access Restricted";
	//errorLink   = "http://error.decellc.org/en/UserPrivilegeAccessRestricted";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";

	case "STREAM_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:StreamNotFound";
		errorReason = "Stream handle not found";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamNotFound";
	break;

	break;
	case "STREAM_COUNT_EXCEEDED":
	expectHTTPstatus = "HTTP/1.1 409 Conflict";
	errorID     = "urn:dece:errorid:org:dece:StreamCountExceedMaxLimit";
	errorReason = "Stream count has exceeded the maximum limit";
	//errorLink   = "http://error.decellc.org/en/StreamCountExceedMaxLimit";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamCountExceedMaxLimit";
	break;
	case "STREAM_NICKNAME_TOO_LONG":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:StreamClientNicknameTooLong";
	errorReason = "Stream Client Nickname Too Long";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#StreamClientNicknameTooLong";
	orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + acct + "/Stream/" + urnstream + sh;
	break;
	case "RT_NOT_ACTIVE":
	errorID     = "urn:dece:errorid:org:dece:RightsTokenNotActive";
	errorReason = "RightsToken is not active";
	//errorLink   = "http://error.decellc.org/en/RightsTokenNotActive";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotActive";
	
	break;
	case "RT_RENT_EXPIRED":
	errorID     = "urn:dece:errorid:org:dece:RightsTokenRentalExpired";
	errorReason = "Rights Token Rental Expired";
	//errorLink   = "http://error.decellc.org/en/RightsTokenRentalExpired";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenRentalExpired";
	
	break;
	case "RT_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	errorReason = "RightsToken is not found";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	
	break;
	case "RT_INVALID":
	errorID     = "urn:dece:errorid:org:dece:Request:StreamRightsTokenIdInvalid";
	errorReason = "Rights Token ID Invalid";
	errorLink   = "http://error.decellc.org/en/Request:StreamRightsTokenIdInvalid";
	
	break;
	case "USER_NOT_MATCH_TOKEN":
	errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	errorReason = "User ID does not match security token";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	case "USER_NOT_ACTIVE":
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	//errorLink   = "http://error.decellc.org/en/UserNotActive";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	//errorLink   = "http://error.decellc.org/en/UserNotSpecified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	
	break;
	default:
	errorID     = "urn:dece:errorid:org:dece:Request:StreamUserIdUnmatched";
	errorReason = "User ID does not match security token";
	errorLink   = "http://error.decellc.org/en/Request:StreamUserIdUnmatched";
	
	break;

}
/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;

/*
* Content-Length
*/
String httpContentEncoding = tC.getPropertyValue("httpContentEncoding");
String contentLength = tC.getPropertyValue("httpContentLength");
log.info "httpContentEncoding[$httpContentEncoding]";
log.info "contentLength[$contentLength]";
if (httpContentEncoding == "null" || httpContentEncoding == null) {
	log.info "Asserting contentLength.length() > 0";
	assert contentLength.toInteger() > 0;
} else {
	log.info "Asserting httpContentEncoding is chunked";
	assert tC.getPropertyValue("httpContentEncoding") == "chunked";
}


//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;

//Content-Type
this.log.info "HTTP Content-Type:  Expect: $expectHTTPcontenttype - Received: " + tC.getPropertyValue("httpContentType");
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {
	assert XMLbody == null;
}

this.log.info "XMLBody Length [" + XMLbody.length() + "] processXMLFlag[$processXMLFlag]";

if (XMLbody != null && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	if (errorRespType != "SUCCESS" && errorRespType != "SUCCESS_NO_STREAMS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;

		// ErrorCode
		this.log.info "Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink [" + myXML.Error.ErrorLink.toString() + "] errorLink[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;
		
	} else if (errorRespType == "SUCCESS_NO_STREAMS") {
		/*
		*    SUCCESS NO STREAMS
		*
		*/
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();

		/*  XML element count validations */
		log.info "Stream size: " + myXML.Stream.size();
		log.info "ResourceStatus size: " + myXML.Stream.ResourceStatus.size();
		log.info "RightsTokenID size: " + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		assert myXML.Stream.size() == 0;
		assert myXML.Stream.ResourceStatus.size() == 0;
		assert myXML.Stream.RightsTokenID.size() == 0;
		assert myXML.Stream.ExpirationDateTime.size() == 0;
			
		/*  AvailableStreams */
		log.info "availStreamsCnt[$availStreamsCnt] - expectStreamAvailCnt[$expectStreamAvailCnt]";
		assert availStreamsCnt == expectStreamAvailCnt;

		/* ActiveStreamCount */
		log.info "activeStreamCnt[$activeStreamCnt] - expectStreamActiveCnt[expectStreamActiveCnt]";
		assert activeStreamCnt.toInteger() == expectStreamActiveCnt.toInteger();
		
	} else {
		availStreamsCnt = myXML.@AvailableStreams.text();
		activeStreamCnt = myXML.@ActiveStreamCount.text();
		
		/*
		*  Due to stream ordering we must work backwards from the 
		*  total number of streams created.  The newest created
		*  stream will be the first in the list.
		*/
		g = counter;

		log.info "g[$g] - counter[$counter]";

		/*
		*  By design, we never return more than 30 streams.   
		*  
		*/
		this.log.info "Stream.size is [" + myXML.Stream.size() + "]";
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		
		while (g != 0) {
			String expectValue = tC.getPropertyValue("expectDBStatus_" + g);
			String expectcb    = urnnode + tC.getPropertyValue("expectDBCreatedBy_" + g);
			String expectdb    = urnnode + tC.getPropertyValue("expectDBDeletedBy_" + g);
			String expectsh    = tC.getPropertyValue("streamhandleFULL_" + g);
			String expectNick  = tC.getPropertyValue("expectNickname_" + g);
			String expectrt    = tC.getPropertyValue("rightstokenFULL_" + g);
			String expectGeneric = tC.getPropertyValue("expectGenericRightsToken_" + g);
			
			log.info "expectValue[$expectValue]";
			log.info "expectcb[$expectcb]";
			log.info "expectdb[$expectdb]";
			log.info "expectsh[$expectsh]";

			/*
			*  if the nodetype is 'dlp' or 'llp' streams in 'deleted' status
			*   are not displayed.  Thus, we must adjust accordingly.
			*/
			if (tC.getPropertyValue("nodetype") == "llp" || tC.getPropertyValue("nodetype") == "dlp") {
				if (	expectValue == "active") {
					doValidations = true;
				} else {
					doValidations = false;
				}
			} else {
				doValidations = true;
			}

			/*
			*  Special processing is required for nickname just
			*  incase it contains special xml characters.
			*/
			if (expectNick != null) {
				if (expectNick.length() > 0) {
					expectNick = expectNick.replace('&amp;','&');
					expectNick = expectNick.replace('&lt;','<');
					expectNick = expectNick.replace('&gt;','>');
					expectNick = expectNick.replace('&apos;','\'');
				}
			}
			
			log.info "doValidations is " + doValidations;
			
			if (doValidations) {
				displayStreamCount++;
	
				/*  Streamhandle validation */
				String recvsh   = myXML.Stream[xmlIndex].@StreamHandleID.text();
				log.info "xmlIndex[$xmlIndex] - recvsh[$recvsh] - expect[$expectsh]";
				assert recvsh == expectsh;

				/*  CreatedBy validation */
				String recvcb   = myXML.Stream[xmlIndex].ResourceStatus.Current.@CreatedBy.text();
				log.info "xmlIndex[$xmlIndex] - recvcb[$recvcb] - expectcb[$expectcb]";
				assert recvcb == expectcb;

				/*  CreationDate */
				assert myXML.Stream[xmlIndex].ResourceStatus.Current.@CreationDate.text().length() > 0;

				/*  Value validation */
				String recvValue   = myXML.Stream[xmlIndex].ResourceStatus.Current.Value.text();
				log.info "xmlIndex[$xmlIndex] - recvValue[$recvValue] - expectValue[$expectValue]";
				if (expectValue == "active") {
					assert recvValue == "urn:dece:type:status:active";
				} else {
					assert recvValue == "urn:dece:type:status:deleted";
				}
				
				/*  Description validation */
				String expectDesc = "active";
				if (expectValue == "deleted") {
					expectDesc = "deleted";
				}
				String recvDesc = myXML.Stream[xmlIndex].ResourceStatus.Current.Description.text();
				log.info "xmlIndex[$xmlIndex] - recvDesc[$recvDesc] - expectDesc[$expectDesc]";
				assert recvDesc == expectDesc;

				/*  Nickname validation */
				if (expectNick == null || expectNick == "") {
					log.info "Asserting no <StreamClientNickname> element exists";
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 0;
					assert myXML.Stream[xmlIndex].StreamClientNickname.text() == "";
				} else {
					assert myXML.Stream[xmlIndex].StreamClientNickname.size() == 1;
					String recvNick = myXML.Stream[xmlIndex].StreamClientNickname.text();
					log.info "xmlIndex[$xmlIndex] - recvNick[$recvNick] - expectNick[$expectNick]";
					assert recvNick == expectNick;
				}
			
				/*  
				* RightsToken validation 
				*/
				String recvrt   = myXML.Stream[xmlIndex].RightsTokenID.text();
				log.info "xmlIndex[$xmlIndex] - recvrt[$recvrt] - expectrt[$expectrt] - expectGeneric[$expectGeneric]";
				if (expectGeneric != "true") {
					log.info "RightsTokenValidation against RightsToken";
					assert recvrt == expectrt;
				} else {
					log.info "RightsTokenValidation against generic rightsToken";
					assert recvrt == urnGenericRightsToken;
				}

				/*  ExpirationDateTime */
				assert myXML.Stream[xmlIndex].ExpirationDateTime.text().length() > 0;

				/*
				*  If the stream is deleted....
				*/
				log.info "DeletedBy length: "    + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length();
				log.info "DeletionDate length: " + myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length();
				
				if (	expectValue == "deleted") {
					String recvDeletedBy = myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString();

					this.log.info "recvDeletedBy[$recvDeletedBy] - expectdb[$expectdb]";
					assert recvDeletedBy == expectdb;
				} else {
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletedBy.toString().length()    == 0;
					assert myXML.Stream[xmlIndex].ResourceStatus.Current.@DeletionDate.toString().length() == 0;
				}
				xmlIndex++;
			}

			/*
			*  By design, we never return more than 30 streams.   So
			*  if we encounter our 30th stream we will break out of 
			*  the XML validation routines and allow size() 
			*  invocations on the xml body to verify no additional
			*  streams were returned.
			*/
			if (displayStreamCount == streamMaxDisplayCount.toInteger()) {
				break;
			}
			
			g--;
		}
		log.info "displayStreamCount[$displayStreamCount]";
		log.info "Stream size: "             + myXML.Stream.size();
		log.info "ResourceStatus size: "     + myXML.Stream.ResourceStatus.size();
		log.info "ResourceStatus.Current size: "     + myXML.Stream.ResourceStatus.Current.size();
		log.info "ResourceStatus.Value size: " + myXML.Stream.ResourceStatus.Current.Value.size();
		log.info "ResourceStatus.Description size: " + myXML.Stream.ResourceStatus.Current.Description.size();
		log.info "RightsTokenID size: "      + myXML.Stream.RightsTokenID.size();
		log.info "ExpirationDateTime size: " + myXML.Stream.ExpirationDateTime.size();

		log.info "Stream size [" + myXML.Stream.size() + "] is lte " + streamMaxDisplayCount.toInteger();
		assert myXML.Stream.size() <= streamMaxDisplayCount.toInteger();
		log.info "Stream size [" + myXML.Stream.size() + "] is equal " + 1;
		assert myXML.Stream.size() == 1;
		assert myXML.Stream.ResourceStatus.size() == 1;
		assert myXML.Stream.ResourceStatus.Current.size() == 1;
		assert myXML.Stream.ResourceStatus.Current.Value.size() == 1;
		assert myXML.Stream.ResourceStatus.Current.Description.size() == 1;
		assert myXML.Stream.RightsTokenID.size()  == 1;
		assert myXML.Stream.ExpirationDateTime.size() == 1;
	}
} 

]]></script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<StreamList ActiveStreamCount="1" AvailableStreams="11" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Stream StreamHandleID="urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D">
      <StreamClientNickname>Raju</StreamClientNickname>
      <RequestingUserID>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</RequestingUserID>
      <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</RightsTokenID>
      <ExpirationDateTime>2014-06-11T16:16:42.088Z</ExpirationDateTime>
      <SubDividedGeolocation Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:16:42.088Z" CreatedBy="urn:dece:org:org:dece:DLASP">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Current>
      </ResourceStatus>
   </Stream>
</StreamList>]]></con:value></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130620_03526</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10902 - StreamCreate - DLP - StreamListView on newly created stream - 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>streamhandleFULL_9</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93FF1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_8</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93F71E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_7</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93EF1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_6</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93E71E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_5</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93DF1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_40</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93A51E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_39</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B939D1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_38</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93951E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_37</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B938D1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_36</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B93851E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_35</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B937D1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_33</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94BB1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_32</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94B51E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_31</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94AF1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_30</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94A71E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_29</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B949F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_28</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94971E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_27</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B948F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_26</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94871E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_25</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B947F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_24</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94771E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_23</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B946F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_22</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94671E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_21</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B945F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_20</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94571E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL_19</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B944F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_18</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94471E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_17</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B943F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_16</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94371E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_15</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B942F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_14</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94271E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_13</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B941F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_12</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94171E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_11</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B940F1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_10</con:name><con:value>urn:dece:streamhandleid:org:dece:9C523D9B94071E61E0401F0A079912E5</con:value></con:property><con:property><con:name>streamhandleFULL_1</con:name><con:value>urn:dece:streamhandleid:org:dece:DF98C5879ACFD9F8E0401F0A05991FE6</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:DF98C5879ACFD9F8E0401F0A05991FE6</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DF98BD1F0ABADC5CE0401F0A079928EA</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_9</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_8</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_7</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_6</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_5</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_40</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_39</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_38</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_37</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_36</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_35</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B925C1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_33</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_32</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_31</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_30</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_29</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_28</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_27</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_26</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_25</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_24</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_23</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_22</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_21</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_20</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenFULL_19</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_18</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_17</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_16</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_15</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_14</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_13</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_12</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_11</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_10</con:name><con:value>urn:dece:rightstokenid:org:dece:9C523D9B93AE1E61E0401F0A079912E5</con:value></con:property><con:property><con:name>rightstokenFULL_1</con:name><con:value>urn:dece:rightstokenid:org:dece:DF98BD1F0ABADC5CE0401F0A079928EA</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>1</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value>1233</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectStreamAvailCnt</con:name><con:value/></con:property><con:property><con:name>expectStreamActiveCnt</con:name><con:value/></con:property><con:property><con:name>expectNickname_9</con:name><con:value/></con:property><con:property><con:name>expectNickname_8</con:name><con:value/></con:property><con:property><con:name>expectNickname_7</con:name><con:value/></con:property><con:property><con:name>expectNickname_6</con:name><con:value/></con:property><con:property><con:name>expectNickname_5</con:name><con:value/></con:property><con:property><con:name>expectNickname_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_40</con:name><con:value/></con:property><con:property><con:name>expectNickname_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_39</con:name><con:value/></con:property><con:property><con:name>expectNickname_38</con:name><con:value/></con:property><con:property><con:name>expectNickname_37</con:name><con:value/></con:property><con:property><con:name>expectNickname_36</con:name><con:value/></con:property><con:property><con:name>expectNickname_35</con:name><con:value/></con:property><con:property><con:name>expectNickname_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_33</con:name><con:value/></con:property><con:property><con:name>expectNickname_32</con:name><con:value/></con:property><con:property><con:name>expectNickname_31</con:name><con:value/></con:property><con:property><con:name>expectNickname_30</con:name><con:value/></con:property><con:property><con:name>expectNickname_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_29</con:name><con:value/></con:property><con:property><con:name>expectNickname_28</con:name><con:value/></con:property><con:property><con:name>expectNickname_27</con:name><con:value/></con:property><con:property><con:name>expectNickname_26</con:name><con:value/></con:property><con:property><con:name>expectNickname_25</con:name><con:value/></con:property><con:property><con:name>expectNickname_24</con:name><con:value/></con:property><con:property><con:name>expectNickname_23</con:name><con:value/></con:property><con:property><con:name>expectNickname_22</con:name><con:value/></con:property><con:property><con:name>expectNickname_21</con:name><con:value/></con:property><con:property><con:name>expectNickname_20</con:name><con:value/></con:property><con:property><con:name>expectNickname_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname_19</con:name><con:value/></con:property><con:property><con:name>expectNickname_18</con:name><con:value/></con:property><con:property><con:name>expectNickname_17</con:name><con:value/></con:property><con:property><con:name>expectNickname_16</con:name><con:value/></con:property><con:property><con:name>expectNickname_15</con:name><con:value/></con:property><con:property><con:name>expectNickname_14</con:name><con:value/></con:property><con:property><con:name>expectNickname_13</con:name><con:value/></con:property><con:property><con:name>expectNickname_12</con:name><con:value/></con:property><con:property><con:name>expectNickname_11</con:name><con:value/></con:property><con:property><con:name>expectNickname_10</con:name><con:value/></con:property><con:property><con:name>expectNickname_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_9</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_8</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_7</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_6</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_5</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_40</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_39</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_38</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_37</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_36</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_35</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_33</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_32</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_31</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_30</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_29</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_28</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_27</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_26</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_25</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_24</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_23</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_22</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_21</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_20</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_19</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_18</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_17</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_16</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_15</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_14</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_13</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_12</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_11</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_10</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectGenericRightsToken</con:name><con:value>false</con:value></con:property><con:property><con:name>expectErrTypeStreamListView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBStatus_9</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_8</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_7</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_6</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_5</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_40</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_39</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_38</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_37</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_36</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_35</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_33</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_32</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_31</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBStatus_30</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_29</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_28</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_27</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_26</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_25</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_24</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_23</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_22</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_21</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_20</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBStatus_19</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_18</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_17</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_16</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_15</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_14</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_13</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_12</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_11</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_10</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectDBStatus_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>expectDBDeletedBy_9</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_8</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_7</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_6</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_5</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_40</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_39</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_38</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_37</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_36</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_35</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_33</con:name><con:value/></con:property><con:property><con:name>expectDBDeletedBy_32</con:name><con:value/></con:property><con:property><con:name>expectDBDeletedBy_31</con:name><con:value/></con:property><con:property><con:name>expectDBDeletedBy_30</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_29</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_28</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_27</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_26</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_25</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_24</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_23</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_22</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_21</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_20</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBDeletedBy_19</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_18</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_17</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_16</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_15</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_14</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_13</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_12</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_11</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_10</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBDeletedBy_1</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBCreatedBy_9</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_8</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_7</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_6</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_5</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_41</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_40</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_4</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_39</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_38</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_37</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_36</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_35</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_34</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_33</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_32</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_31</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_30</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_29</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_28</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_27</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_26</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_25</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_24</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_23</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_22</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_21</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_20</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectDBCreatedBy_19</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_18</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_17</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_16</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_15</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_14</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_13</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_12</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_11</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_10</con:name><con:value>221700</con:value></con:property><con:property><con:name>expectDBCreatedBy_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn072ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77330</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>852eed9a-4d62-4a55-8572-421356bf351f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="37da474a-fc83-42a3-97a2-a71ddfad6afd"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="1a189708-39bb-4902-b494-83551e5abe9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
//tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));

tC.setPropertyValue("RightsTokenID",callTC.getPropertyValue("RightsTokenID"));
tC.setPropertyValue("decodedNodeUserID",callTC.getPropertyValue("decodedNodeUserID"));

if(tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
	
}
else 
{
	tC.setPropertyValue("streamhandleFULL",URLEncoder.encode(callTC.getPropertyValue("streamhandleFULL"),"UTF-8"));
}
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("errorRespTypeStreamView",callTC.getPropertyValue("errorRespTypeStreamView"));
tC.setPropertyValue("expectStreamStatus",callTC.getPropertyValue("expectStreamStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="bd6a4c04-d110-4f5c-9fa5-e3ac2da36921"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - StreamRenew");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - StreamRenew" id="c64c8e9e-4669-4f08-9d3d-342aadb42eab"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" methodName="StreamRenew" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - StreamRenew" mediaType="application/xml" postQueryString="false" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Stream xmlns="${#Project#Coordinator_Schema}" 
             xmlns:ns2="http://www.movielabs.com/md"       
             xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" 
             xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" StreamHandleID="urn:dece:streamhandleid:org:dece:${#TestCase#streamhandle}">       
    <StreamClientNickname>${#TestCase#nickname}</StreamClientNickname>        
    <RequestingUserID>${#TestCase#decodedNodeUserID}</RequestingUserID>      
    <RightsTokenID>${#TestCase#RightsTokenID}</RightsTokenID>       
    <TransactionID></TransactionID>
   <ExpirationDateTime>${#Project#ExpirationDateTime}</ExpirationDateTime>         
    <SubDividedGeolocation ViaProxy="urn:dece:type:true" Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress">US 20148</SubDividedGeolocation> 
    </Stream>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="ACCT" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="STREAM" value="${#TestCase#streamhandleFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="87640ecc-088e-4fcd-b58e-e512e121c760"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PUT - StreamRenew');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="ec278e60-2fdf-4353-984a-8124a7c9a9fe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10903 - StreamCreate - DLP - StreamRenew on newly created stream - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn072ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A07990778</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130620_03526</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DF98C5879AEBD9F8E0401F0A05991FE6</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Raju</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2CD0EA63C5AE0401F0A07997E0F</RightsTokenID>
   <ExpirationDateTime>2014-06-11T17:46:57.147Z</ExpirationDateTime>
   <SubDividedGeolocation Confidence="50" CalculationMethod="urn:dece:type:geoloc:networkaddress" ViaProxy="urn:dece:type:true">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:16:42.088Z" CreatedBy="urn:dece:org:org:dece:DLASP" ModificationDate="2014-06-11T10:16:52.349Z" ModifiedBy="urn:dece:org:org:dece:DLASP">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:16:42.088Z" ModifiedBy="urn:dece:org:org:dece:DLASP">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1467</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77331</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn:dece:streamhandleid:org:dece:ED419DFA2BA592C7E0401F0A0799147D</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamRenew_06" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="a46f8faf-71e4-4b61-a6be-29028d27f0e4"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="b7b43d40-4bed-4c14-bf90-ce05eb0c33c6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nickname",callTC.getPropertyValue("nickname"));
//tC.setPropertyValue("transactionid",callTC.getPropertyValue("transactionid"));

tC.setPropertyValue("RightsTokenID",callTC.getPropertyValue("RightsTokenID"));
tC.setPropertyValue("decodedNodeUserID",callTC.getPropertyValue("decodedNodeUserID"));

if(tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
	
}
else 
{
	tC.setPropertyValue("streamhandleFULL",URLEncoder.encode(callTC.getPropertyValue("streamhandleFULL"),"UTF-8"));
}
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("errorRespTypeStreamView",callTC.getPropertyValue("errorRespTypeStreamView"));
tC.setPropertyValue("expectStreamStatus",callTC.getPropertyValue("expectStreamStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="f6a0657c-b694-4b9f-a3dd-6bf014d54284"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("PUT - StreamRenew");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - StreamRenew" id="d16108a0-2803-4e68-9851-f544cd1d1a1c"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}/Renew" methodName="StreamRenew" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - StreamRenew" mediaType="application/xml" postQueryString="false" id="5062a81c-c63b-4263-9ffc-ec0b029c4ae0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="ACCT" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="STREAM" value="${#TestCase#streamhandleFULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="991847d9-7b29-44e9-bafe-8b2068361e2d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('GET - StreamRenew');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="169d9780-e053-4c94-9707-c26839b2064f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10903 - StreamCreate - DLP - StreamRenew on newly created stream - 200 OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AED55101022B16DBBE0401F0A05991153</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ED55101022B16DBBE0401F0A05991153</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:ED54DACEF9BE27EBE0401F0A07995654</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value/></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn072ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0914</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A07990778</con:value></con:property><con:property><con:name>expectErrTypeStreamRenew</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>ashwin_user_create_20130620_03526</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DF98C5879AEBD9F8E0401F0A05991FE6</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">active</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Stream StreamHandleID="urn:dece:streamhandleid:org:dece:ED55101022B16DBBE0401F0A05991153" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <StreamClientNickname>Raju</StreamClientNickname>
   <RequestingUserID>urn:dece:userid:org:dece:ED54DACF9635E705E0401F0A07995652</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:ED54DACEF9BE27EBE0401F0A07995654</RightsTokenID>
   <ExpirationDateTime>2013-12-12T22:50:44.503Z</ExpirationDateTime>
   <SubDividedGeolocation ViaProxy="urn:dece:type:true" CalculationMethod="urn:dece:type:geoloc:networkaddress" Confidence="50">US 20148</SubDividedGeolocation>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:DLASP" ModificationDate="2013-12-12T11:02:39.556Z" CreatedBy="urn:dece:org:org:dece:DLASP" CreationDate="2013-12-12T10:50:44.503Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:DLASP" ModificationDate="2013-12-12T10:50:44.503Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
         </Prior>
      </History>
   </ResourceStatus>
</Stream>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1467</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77331</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn:dece:streamhandleid:org:dece:ED419DFA2BA592C7E0401F0A0799147D</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Sanity_TestSuite</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value/></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:ED54DACF9635E705E0401F0A07995652</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StreamDelete API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c222e697-5aee-478a-b6f9-111995e3641c"><con:settings/><con:testStep type="groovy" name="Extract required Properties from calling Test Case" id="0c011f0e-c098-417b-b4a9-5e87bd283547"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if(tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("streamhandleFULL",callTC.getPropertyValue("streamhandleFULL"));
	
}
else 
{
	tC.setPropertyValue("streamhandleFULL",URLEncoder.encode(callTC.getPropertyValue("streamhandleFULL"),"UTF-8"));
}

tC.setPropertyValue("errorRespTypeStreamView",callTC.getPropertyValue("errorRespTypeStreamView"));
tC.setPropertyValue("expectStreamStatus",callTC.getPropertyValue("expectStreamStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="pem set" id="6ae79d2b-3c58-4f72-af1f-636f740f2e71"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("Delete - StreamDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Delete - StreamDelete" id="839f0827-d6d7-446f-8ee2-3ed59a7254c3"><con:settings/><con:config service="Streams" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAMHANDLE}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Delete - StreamDelete" id="4c44e8eb-ec74-4743-a725-58cfab41f542" mediaType="application/xml" sslKeystore="DLASP_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAMLFULL}"/>
  &lt;con:entry key="If-Match" value="${#Project#eTag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="2af85a87-1e0e-499a-a32a-fe371465c12d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Delete - StreamDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6d2b5680-6f19-4880-aff9-34a4b3e53df6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

/*
*   VALIDATION HTTP HEADERS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert tC.getPropertyValue("httpConnect") == expectHTTPconnection;
//Content-Length
assert tC.getPropertyValue("httpContentLength").toInteger() == 0;
//No Content-Location
assert tC.getPropertyValue("httpContentLocation") == null;
//Content-Type
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

</script></con:config></con:testStep><con:testStep type="groovy" name="Return Property Values if Required" id="a97b8ffc-ba6a-47f9-b096-cb0899163c9f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("TSuiteName");
def callTCname = tC.getPropertyValue("TCaseName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("expectDBDeletedBy",tC.getPropertyValue("expectDBDeletedBy"));
callTC.setPropertyValue("expectDBStatus",tC.getPropertyValue("expectDBStatus"));
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:0</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVfbcrLMEr33KSz/S8sAiihWkqpBUFHRKKiRm10wDAflJAOCPv0eTPQz+ZLs/PtKp6ene/WBnjWP2Aj8Zg9gjJLUi8KqLD7V/mM2TdhmaKbBIAQbbNtGDZ5h2IbFtrs0Mi3WsuxaVcY4Q3KIUyNMn2pNmmk1aK7RpDWG7jW5HsM9sK2OXquuUYKJaaLyQNeqReCHuHdx+1TLkrAXGdjDvdAIEO6lsKcCZdojmj3jiqn2/PiG8uIweXbTNO5RFHywEES+Dx9gFFCP1AedRwv3VM8JjTRL0LtPCz/V3s/mef6Qtx6ixKGaNE1TNE8RHQt7zj+158r1MLLk0I7e1n0jjEIPGr53NkpQCkrdyKoC34kSL3WDb0wzFEOXphuogA3IsOE/NeqPgwu6X1r6ADLBRgO7BnM1tkQ2SlAIUXW1lJ9q//yugm9ntcQIsR0lAf60/neQUHhEfhQjq4GvkV3R/d7iF+l6fkSwJ4fQz7B3RLOyTWIDIlx9SZDtFVMPk+azcPVS/mqBrx2G4L8pySN1j5PApr7IjOg5CKf/T73ua/VmZW34GXpu53qxSmZgs3cVFUrt5Qzqw6IzwCfl6QLhXvkN1K3U7+vPjXrrq/dDrtPSgwn0dgyauA5lpvtivx6Dwxq1uLE51rhhLG+NUxit5+lontAiUOdLf7/B2uI8y6a7/jlgTuvhdsOkTmW32PazbOVo2+nWmY1teGqvHCFUcuq82fmSNj1YzFRZKoN9ywQya/bNSSFN/KQwJZS1QCy7ycLlVFGxz0VlZyb6DIZL/pSM6fMw0ib7pz8x3cdQxjVBp0uQ5f/XNs2LRmrcFv1yUtjk80zRsyLL/brY7wPUd0AuC8CRhekZzARnf3D33pDPaQEsVgMggpOyBLnobMX1YjGRcmu99vW1PBgIypLNR2ArVsiGKBVrUX8d08ZGj7fNAa2rgmC9LiOzNY6t0T4fuXCmaEo+0+STspOKmSbRm4vMKcj6rOwUZq6tWpXNTuCVpZSL+cWjKOXuTN8s4+2Kz+FZWiiAHQJmJfVdZaQFawa2li7cSVMF7C9ywVX667VSSBp4qQjObE1i0/oDPYaBFZuB794ZHxHjmjVcn8yhn+lnaaf0pWFfPQxV2WyJC2kMltuVuVnvjc3gWIGjGTCvHr22Z7xGuaN3c3GxHU8iXXaPcAYWkiAsAEkXDRR5OAbRUAAKC7zi3N8JXNS3Bjk1buJKnfeH3OvJO7xiY0j7BtPtMtvphns5cKIU1vVJZu5cxX0dzOsT1Tqu+JQ/b/GxfuQMj4FFbC9epVE6KezRQq2YL2LxCkd1yxlT/pkfJEpnDJLzyfUVZ5luuDk+mZ5tb4TXOet3bF9pLWPbt+MTrmvRYp/QnIBaTWp7Ok7SCnAUAYDhbrUTForQLZNqyfliqwgGGEhpBs67Zjpprg/j0dGH2xaIislmvtu/F8YSc0mg8oVE2kqqdEVglUUYqStpsAMrwXESwZEGwgKKYLGVJ/mW5Gs1Isqf8zi45NGRBCC1dMDxo0prRfPpPFVZFpxCYRUOeFc5FBuLC+jOAUlTdRazuYJndqhvor0SeMkqydTVZDKbFqaWDfc7MqtsWp0cW3pFOu5j4M0mmrsXI9F4ibfbNK6HMIGpHAeKXJznOt51PTOgx/U2I7zQIuw0V4GZr4aGpE8SR2Umo2X40urwFZzZp1FQ33XzTV1Tubhj9UNbPJ0oPVnTEYgG/LJ9sIpmc++u8imX22OwN43mrPB54cRLE12D+XIx2ahBvV1pH6fTgD5rFDuL57k6zFlpsai3LEEbaThOvG3WdYpkHlrNrZFyR51ec17s7/lmttfYuLV2AlKsl6MVd5SXyoJ9hXrgdGI4ppbUEUgdeyoPT+bZOMfBHL4N0M/T4SZ8mx/U/WT5MHqupEMl3Ypgel2WF5AsVgfkVjDSnwlMKfGshn1R7cUlC8IpCtPac3mqJC+9jFAcz+qRK+NtLQ54ti31eZa0qdgUaYlmaWZAA7rD83Sn072ynDcUnyD2o9D2Sl8lj3u7pX4GCIMeRqGFksYxyqCLcO0Hi2W+qnK4JNdvFGKkRYQntmiGG7RZnm9L7QHNA7bPc81up8M3Acfw0qBWnUXpPJwnwE5R8pEjtj5wxCWCXuyhkki+36Y4JRk5GMcs9ZmHo/EQoowwzaQke70m221fMkFZWRBDshEFKIkjnD7Ebny5zr+N4/PeNWSiY3mlAi5BC4iUDX3Baukr4r8iY79kv1fzILO88tYm+UsTD74h+bj1py3Kfrj1BM0z7BXzTfV3Rwnl4/4+Sv2AiPqcjJsn6+jd+b1yc0I3CSG5UHJMinYwHg4P2fGYXcrUKclWQsxTDEVzlIpgRhjTSYv2KKRuJqhfkdUb6k+eb/KP+LLUDdWUfPAB6anqZfmLl4qKcPlSkck3Ufz2GfTBJclbior0K1nfJw+aEvGPbx7Yg6UeEb+QnzxKrD/l+sLWnR8SZznhvNApVyU1PX3TFTAiZj0y5aLk3vhXBr5y/lF4S/INS0q6ycxS9P1OtRxfTzUDwigLU1msXQT3I/WCMz3FqPdH6S8zF3L4zvYL/C3bf1WmKhlugVG76Xr/W7nhXdoFInIKexcsT7WCPFyJ89C5G+HvAL+Z4t2fpvjHSJ7/Ev8tucvp5+/h+b8=</con:value></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:0000-3BAB-9352-9999-G-0000-9999-Q:0001</con:value></con:property><con:property><con:name>dlpnodeid</con:name><con:value>914</con:value></con:property><con:property><con:name>eDECEDeleteFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>eDeletedByPresent</con:name><con:value>false</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamView</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectNickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectTransactionid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Hello-George...Lovely 123 Day</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>0914</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>streamdeletenodeaccount</con:name><con:value>1999003</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11081 - StreamCreate - DLP - &lt;TransactionID> can be duplicated on 'deleted' stream - 201 Created</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nickname</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:DF9942FD9463A8EAE0401F0A079923F8</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:DF945EC94BAAD2D0E0401F0A07990778</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:DF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77328</con:value></con:property><con:property><con:name>assertionAccountIdFULLEncoded</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF945EC94BA8D2D0E0401F0A07990778</con:value></con:property><con:property><con:name>streamhandleFULLEncoded</con:name><con:value>urn%3Adece%3Astreamhandleid%3Aorg%3Adece%3AED55101022B16DBBE0401F0A05991153</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/DLASP_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>839f0827-d6d7-446f-8ee2-3ed59a7254c3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRCreate POST" searchProperties="true" id="91543ba3-e467-4611-87a1-1c94553d65e3"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="2126bb7a-feb2-4c81-b5a1-98e8a2b0e1dd">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRCreate POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("decodedNodeUserID",CallingTCase.getPropertyValue("decodedNodeUserID"));
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
testCase.setPropertyValue("RightsTokenIDdecoded",URLDecoder.decode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("fulfillmentMethod",CallingTCase.getPropertyValue("fulfillmentMethod"));
testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="f12114d2-87a1-4015-8ba9-2ddea899f407"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRCreate POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRCreate POST" id="e92a1394-66b9-4db3-b8b8-b49fe2b83e0d"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRCreate POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:available" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#TestCase#decodedNodeUserID}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenIDdecoded}</RightsTokenID>
   <AuthorizedFulfillmentMethod>${#TestCase#fulfillmentMethod}</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#mediaProfile}</MediaProfile>
   <LeaseExpiration>2011-06-04T02:30:57</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightstokenid}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b5584b56-b124-4012-bd6a-2bb9b4e673c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRCreate POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="305dfcef-183b-42d0-ab63-f5e2b0d33afb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 201 Created";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:testStep type="groovy" name="Fetch DiscreteMediaTokenId" id="d467e3b5-471b-4222-a045-4454c0cf5a7c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName("DMRCreate POST");
def expXML = tStep.httpRequest.response.getResponseContent();

def callTSuitename = tC.getPropertyValue("TSuiteName");
def callTCasename = tC.getPropertyValue("TCaseName");


boolean httpLocationHeader = true;

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);


def CallingTCase = tP.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	
if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
{
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	dmrtokenoid     = urlStr.substring(lastColon + 1);
	dmrtokenid = urlStr.substring(lastSlash + 1);

	tC.setPropertyValue("discreteMediaTokenOid",dmrtokenoid);
	tC.setPropertyValue("discreteMediaTokenId",dmrtokenid);
}
else 
{
	int lastColon = urlStr.lastIndexOf('%');
	int lastSlash = urlStr.lastIndexOf('/');
	dmrtokenoid     = urlStr.substring(lastColon + 3);
	dmrtokenid = urlStr.substring(lastSlash + 1);
	
	tC.setPropertyValue("discreteMediaTokenOid",dmrtokenoid);
	tC.setPropertyValue("discreteMediaTokenId",dmrtokenid);
	log.info dmrtokenid;
	log.info dmrtokenoid;
} 
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

CallingTCase.setPropertyValue("discreteMediaTokenOid",dmrtokenoid);
CallingTCase.setPropertyValue("discreteMediaTokenId",dmrtokenid);
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1/RightsToken/urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE616B5E42370C812E0401F0A059902A8</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE616C7EA2B99122FE0401F0A05992BA4</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1/RightsToken/urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>RightsTokenIDdecoded</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>aafd4b7c-9e5d-4c26-bc42-83df7b59d575</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b5584b56-b124-4012-bd6a-2bb9b4e673c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>305dfcef-183b-42d0-ab63-f5e2b0d33afb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMR GET" searchProperties="true" id="9e109905-bd39-4095-bd7c-73599d028442"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="01b62f4d-17c1-42f5-a06d-8c49ccca210e">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMR GET").testRequest.setRequestHeaders(headers);


// setUp Node Properties
//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));


//Set the URL values
//testCase.setPropertyValue("urlNodeAccountID",URLEncoder.encode(testCase.getPropertyValue("NodeAccountID"), "UTF-8"));
//testCase.setPropertyValue("urlrightsTokenId",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"), "UTF-8"));
//testCase.setPropertyValue("urldiscreteMediaTokenId",URLEncoder.encode(testCase.getPropertyValue("discreteMediaTokenId"), "UTF-8"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="10530488-038a-4453-baeb-234741f1e46c"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMR GET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMR GET" id="6c87d88e-b601-4cb3-950f-548d52f4fdf4"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMR GET" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="SchemaVersion" value="${#Project#SchemaVersion}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#urlNodeAccountID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightsTokenID}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#discreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="ac0e4dcf-b7f4-4a83-9419-44aa30f46c74"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMR GET');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="78754708-86ba-4c6f-bde4-b264c0ff5496"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the Headers" disabled="true" id="5ac959ec-cfdc-4f90-9f7c-5bcc949530b6"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import CacheTestManager.CacheTestManager;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.WsdlProject;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("TSuiteName");
def callTCname = testCase.getPropertyValue("TCaseName");

def CommonLib = "End_To_End";
def TcName = "DMR GET"
def TpName =  testSuite.getProject().getName();  

def DMR = "DMR GET";

def cc = new CacheTestManager(TpName, CommonLib, TcName, DMR) 

def tStep  = testCase.getTestStepByName(DMR);
status = cc.getCacheHeaders("#status#");
def headersCount = tStep.httpRequest.response.responseHeaders.size()
testCase.setPropertyValue("headersCount",headersCount.toString());

log.info cc.getCacheHeaders("#status#");

if (status == 'HTTP/1.1 200 OK')
{
	//Header size
	//assert headersCount == 11;
	
	assert cc.getCacheHeaders("#status#") == "HTTP/1.1 200 OK" 

	log.info " Etag Returned -->" + cc.getCacheHeaders("ETag");
	testCase.setPropertyValue("ETag",cc.getCacheHeaders("ETag"));
	
	assert cc.getCacheHeaders("ETag") != null
	
	log.info " Expires Header Returned -->" + cc.getCacheHeaders("Expires");
	assert cc.getCacheHeaders("Expires") != null
	
	log.info " Lase-Modified -->" + cc.getCacheHeaders("Last-Modified");
	assert cc.getCacheHeaders("Last-Modified") != null
	assert cc.getCacheHeaders("Date") != null
	assert cc.getCacheHeaders("Server") != null
	assert cc.getCacheHeaders("Cache-Control") != null
	assert cc.getCacheHeaders("Connection") != null
	assert cc.getCacheHeaders("x-Transaction-Info") != null
	assert cc.getCacheHeaders("Content-Length") != null
	assert cc.getCacheHeaders("Content-Type") != null
}
else if (status == 'HTTP/1.1 304 Not Modified')
{
	//Header size
	//assert headersCount == 5;
	
	assert cc.getCacheHeaders("#status#") == "HTTP/1.1 304 Not Modified" 

	log.info " Etag Returned -->" + cc.getCacheHeaders("ETag");
	assert cc.getCacheHeaders("ETag") != null
	assert cc.getCacheHeaders("Date") != null
	assert cc.getCacheHeaders("Server") != null
	assert cc.getCacheHeaders("Connection") != null
}
else 
{
	log.info "Status -->" + cc.getCacheHeaders("#status#")
}

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
log.info 'head=='+testCase.getPropertyValue("headersCount")
callTC.setPropertyValue("headersCount",testCase.getPropertyValue("headersCount"));
callTC.setPropertyValue("ETag",testCase.getPropertyValue("ETag"));

</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE616C7EA2B99122FE0401F0A05992BA4</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE616C7EA2BBF122FE0401F0A05992BA4</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE616B5E42370C812E0401F0A059902A8</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47" State="urn:dece:type:state:discretemediaright:leased" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>2014-06-11T16:17:53.196Z</LeaseExpiration>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:53.196Z" CreatedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:42.847Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1484</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ETag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>76438451-095f-46bf-8142-68514d9ff932</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac0e4dcf-b7f4-4a83-9419-44aa30f46c74</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78754708-86ba-4c6f-bde4-b264c0ff5496</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRList GET" searchProperties="true" id="35448f8f-ada7-4827-8e19-31c863828195"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="88838cf6-4579-4f63-b22a-dbd32d7bf449">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRList GET").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));

//Set the URL values
//testCase.setPropertyValue("urlNodeAccountID",URLEncoder.encode(testCase.getPropertyValue("NodeAccountID"), "UTF-8"));
//testCase.setPropertyValue("urlrightsTokenId",URLEncoder.encode(testCase.getPropertyValue("rightstokenid"), "UTF-8"));
//testCase.setPropertyValue("urldiscreteMediaTokenId",URLEncoder.encode(testCase.getPropertyValue("discreteMediaTokenId"), "UTF-8"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="b8eaa784-7f7a-455f-9d83-fa71897888f2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRList GET");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRList GET" id="398933b1-2ebe-4392-a8e9-3f65ae7514c8"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/List" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRList GET" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#urlNodeAccountID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightsTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="b5de711a-38b2-4a10-b2ba-a60e1ed4717f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRList GET');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="b7bf41ae-43ae-4f23-ad4c-8bc43423e701"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FAF58F54B5DF75C3E0401F0A0599711D</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value/></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value/></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8ACF0DF12EDDF7E0401F0A059947CF</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FB73138017CB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FB7313805ECB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FB73138070CB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaTokenList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8ACF0DF12EDDF7E0401F0A059947CF" State="urn:dece:type:state:discretemediaright:available">
      <RightsTokenID>urn:dece:rightstokenid:org:dece:FAF58F54B5DF75C3E0401F0A0599711D</RightsTokenID>
      <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
      <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:17:02.589Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>Active</Description>
         </Current>
      </ResourceStatus>
   </DiscreteMediaToken>
</DiscreteMediaTokenList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1087</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e3ed726b-d1a1-407a-8b78-57d89fd08932</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRUpdate PUT" searchProperties="true" id="6236b77a-d091-48e4-89d5-acb354ff830b"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="26882ef1-1efd-47f7-a523-d15194b8488c">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("Etag",CallingTCase.getPropertyValue("Etag"));

//Setting the If-Match to null
testCase.setPropertyValue("If-Match",null)

testCase.setPropertyValue("If-Match",CallingTCase.getPropertyValue("If-Match"))

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()

//def ifMatch = context.expand( '${#TestCase#If-Match}' )
//
//if (ifMatch == 'noIfMatch')
//{
//	 headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//}
//else if (ifMatch == 'withStar')
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match","*");
//}
//else
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match",testCase.getPropertyValue("Etag"));
//}
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
headers.put("If-Match","*");


//testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);
testRunner.testCase.getTestStepByName("DMRUpdate PUT_107").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));

//Set the URL values
//testCase.setPropertyValue("urlNodeAccountID",URLEncoder.encode(testCase.getPropertyValue("NodeAccountID"), "UTF-8"));
//testCase.setPropertyValue("urldiscreteMediaTokenId",URLEncoder.encode(testCase.getPropertyValue("discreteMediaTokenId"), "UTF-8"));
//testCase.setPropertyValue("urlrightsTokenId",URLEncoder.encode(testCase.getPropertyValue("rightsTokenId"), "UTF-8"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="b67ab674-a117-4e36-8bba-02dbcdfaa461"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRUpdate PUT_107");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Disable TC" disabled="true" id="e8d173da-d3f1-429b-881a-afa9af20f118"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def V2 = context.expand( '${#Project#versionMinor}' )

if (V2 == '07')
{
                callUpdate106 = tC.getTestStepByName('DMRUpdate PUT');

                callUpdate106.setDisabled(true);
}
if (V2 == '06')
{
                callUpdate107 = tC.getTestStepByName('DMRUpdate PUT_107');

                callUpdate107.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRUpdate PUT_107" id="fa83a7ea-3cea-4c83-a02b-107d1ebaa3aa"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DMRUpdate_107" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRUpdate PUT_107" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:available" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>${#TestCase#rightsTokenId}</RightsTokenID>
   <AuthorizedFulfillmentMethod>${#TestCase#fulfillmentMethod}</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#mediaProfile}</MediaProfile>
   <LeaseExpiration>2011-06-04T02:30:57</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="SchemaVersion" value="${#Project#SchemaVersion}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#urlNodeAccountID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightsTokenId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#urlrightsTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Enable TC" disabled="true" id="d5be9fad-1aa7-4820-a0ca-a5b11c7fd995"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


callUpdate106 = tC.getTestStepByName('DMRUpdate PUT');
callUpdate107 = tC.getTestStepByName('DMRUpdate PUT_107');

callUpdate106.setDisabled(false);
callUpdate107.setDisabled(false);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0da5d5f4-a93f-444b-8d03-d50e8be12f01"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRUpdate PUT_107');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="808b80d2-93fc-43c5-a9b9-0ddc8c4f4e55"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FAF58F54B5DF75C3E0401F0A0599711D</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:dvd:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB23AD565FD43E0401F0A059947D3</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FB8DF3370B8786E0401F0A07992DA1</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FB8DF337698786E0401F0A07992DA1</con:value></con:property><con:property><con:name>If-Match</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Etag</con:name><con:value>"ED2E194D1536FF13E0401F0A07991EDF:B3DE8C3B"</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FB8DF337578786E0401F0A07992DA1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB23AD565FD43E0401F0A059947D3" State="urn:dece:type:state:discretemediaright:available" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FAF58F54B5DF75C3E0401F0A0599711D</RightsTokenID>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:10.714Z" ModificationDate="2014-06-11T10:17:14.682Z">
         <Value>urn:dece:type:status:active</Value>
      </Current>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>886</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d52cd0ff-6fc2-463b-b4db-80c38f05d43d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7872b5a4-f9cf-4524-a13a-93c804e5fd2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91acfb71-834e-4f1a-9d09-e9f8c41172fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRDelete" searchProperties="true" id="b1cd8eb1-2ae4-41ec-a4f1-bbca5cab11df"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="4ab96999-64c9-4f2b-a79a-45a58ccfbc2f">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("Etag",CallingTCase.getPropertyValue("Etag"));

//Setting the If-Match to null
//testCase.setPropertyValue("If-Match",null)

//testCase.setPropertyValue("If-Match",CallingTCase.getPropertyValue("If-Match"))

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
//
//def ifMatch = context.expand( '${#TestCase#If-Match}' )
//
//if (ifMatch == 'noIfMatch')
//{
//	 headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//}
//else if (ifMatch == 'withStar')
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match","*");
//}
//else
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match",testCase.getPropertyValue("Etag"));
//}

headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
headers.put("If-Match","*");

//testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);
testRunner.testCase.getTestStepByName("DMRDelete").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));

//Set the URL values
//testCase.setPropertyValue("urlNodeAccountID",URLEncoder.encode(testCase.getPropertyValue("NodeAccountID"), "UTF-8"));
//testCase.setPropertyValue("urldiscreteMediaTokenId",URLEncoder.encode(testCase.getPropertyValue("discreteMediaTokenId"), "UTF-8"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="93f2c498-1327-460c-8fde-463fe79e88f3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRDelete" id="133d43af-0d2f-4cfc-8797-812fbf5471ed"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DMRDelete_107" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRDelete" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#urldiscreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="NodeAccountID" value="${#TestCase#urlNodeAccountId}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightsTokenId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#discreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="9bfbc3b1-4d0e-414a-8974-9aa234ba9df9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRDelete');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="10ce4aa1-9ed7-4f6a-8f9b-2c825eb13969"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:C8F5EF70438D72C9E0401F0A07997136</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:dvd:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8ACF0DF12EDDF7E0401F0A059947CF</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2D3DDCB0FB23469E0401F0A0599358E</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2D3DDCB10113469E0401F0A0599358E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Etag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property><con:property><con:name>If-Match</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fdb90695-a52f-40dd-919c-c75ec7350bd4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRConsume POST" searchProperties="true" id="794916c4-a54f-4831-a31e-7184ea9439c1"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="54c87bd0-72b3-4a2d-9ac9-1b9919183f6d">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header
def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRConsume POST").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
 {
 	testCase.setPropertyValue("fulfillmentMethod",CallingTCase.getPropertyValue("fulfillmentMethod"));
	testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));
 }
 else
 {
 	 testCase.setPropertyValue("fulfillmentMethod",URLEncoder.encode(CallingTCase.getPropertyValue("fulfillmentMethod"),"UTF-8"));
	 testCase.setPropertyValue("mediaProfile",URLEncoder.encode(CallingTCase.getPropertyValue("mediaProfile"),"UTF-8"));
 }

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="29b0a14f-2633-4219-977e-6c668650610b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRConsume POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRConsume POST" id="8f843eca-ad25-4bd9-804c-130eacfe518d"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaFulfillmentMethod}/Consume" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRConsume POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#urlNodeAccountId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="86978827-4382-49f6-86ef-8dc4ac95cfad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRConsume POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="38d23126-9bef-4e1a-9044-923a8489bb6a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB151EC40709CC02E0401F0A07994A3F</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB2CDD6B64DF0E0401F0A059945D0</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FB73138017CB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FB7313805ECB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FB73138070CB8AE0401F0A07997D7C</con:value></con:property><con:property><con:name>urlfulfillmentMethod</con:name><con:value>urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged</con:value></con:property><con:property><con:name>urlmediaProfile</con:name><con:value>urn%3Adece%3Atype%3Amediaprofile%3Ahd</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB2CDD6B64DF0E0401F0A059945D0" State="urn:dece:type:state:discretemediaright:fulfilled" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB151EC40709CC02E0401F0A07994A3F</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:22.005Z">
         <Value>urn:dece:type:status:active</Value>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:20.388Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1226</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4bf778e0-e788-4a39-bf0f-1a5139b61c4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRLeaseCreate POST" searchProperties="true" id="12b6b0fe-5ccb-4afd-bb3f-60203017531c"><con:settings/><con:testStep type="groovy" name="Update DMR Expire Count" id="91acfb71-834e-4f1a-9d09-e9f8c41172fd"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

def sql =new dbUtils.dbUtils(log, testProject.getPropertyValue("targetSystem"));
def nodeid = "urn:dece:org:org:dece:RET";
log.info nodeid
sqlStr = """update node set DMR_EXPIRE_COUNT = '0' where node_id ='$nodeid'""";

sql.dbConnExecuteQuery(sqlStr,testProject.getPropertyValue("targetSystem"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Get the Required DMR Properties" id="f893b9fd-4c5c-4976-a1d5-cb688bc71ce2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRLeaseCreate POST").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
testCase.setPropertyValue("fulfillmentMethod",CallingTCase.getPropertyValue("fulfillmentMethod"));
if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
 {
 	testCase.setPropertyValue("fulfillmentMethod",CallingTCase.getPropertyValue("fulfillmentMethod"));
	testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));
 }
 else
 {
 	 testCase.setPropertyValue("fulfillmentMethod",URLEncoder.encode(CallingTCase.getPropertyValue("fulfillmentMethod"),"UTF-8"));
	 testCase.setPropertyValue("mediaProfile",URLEncoder.encode(CallingTCase.getPropertyValue("mediaProfile"),"UTF-8"));
 }

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="a15ad45b-d4ac-49bf-a273-5f5c8470305d"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseCreate POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseCreate POST" id="81734ee0-fc6a-4b2a-8ecd-2cf0b11a8ac8"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaFulfillmentMethod}/Lease" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseCreate POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ContentProfile" value="${#TestCase#mediaProfile}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="DiscreteMediaFulfillmentMethod" value="${#TestCase#fulfillmentMethod}"/>
  <con:entry key="SchemaVersion" value="${#Project#SchemaVersion}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NodeAccountID}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#rightsTokenId}"/>
  <con:entry key="DiscreteMediaTokenID" value="${#TestCase#discreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="612695e7-e52c-41a1-a47c-ef0c703f4da0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRLeaseCreate POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="59facc9d-22b6-4d3a-87a1-dbeb01104b75"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FCA5AC5F1AD9CDE0401F0A07992ED3</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FCA5C2FF5C7FF6E0401F0A07992ED1</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FCA693F77C6FF5E0401F0A059953AA</con:value></con:property><con:property><con:name>urlfulfillmentMethod</con:name><con:value>urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged</con:value></con:property><con:property><con:name>urlmediaProfile</con:name><con:value>urn%3Adece%3Atype%3Amediaprofile%3Ahd</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47" State="urn:dece:type:state:discretemediaright:leased" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>2014-06-11T16:17:53.196Z</LeaseExpiration>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:53.196Z">
         <Value>urn:dece:type:status:active</Value>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:42.847Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1400</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5e127f61-48be-4ffd-b950-d806c86f121e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRLeaseConsume POST" searchProperties="true" id="c6d7a5ad-968b-4f3c-8cc6-4deeb5b83cb6"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="a7b08d8a-7448-4336-9502-b3ca98d9b9f5">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRLeaseConsume POST").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="18e7dd8f-f147-4d2e-bd84-d1e80165a181"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseConsume POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseConsume POST" id="55d05a56-278b-4717-8bd2-8bbdc034ed5f"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}/Lease/Consume" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseConsume POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="19fb7d09-3938-489c-9532-64dd0d5e5a9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRLeaseConsume POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="bc5f7d30-9e5f-42a2-812f-15d5cf685842"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB24AB25C521CE0401F0A059947CB</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB24897AF7CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FCA5AC5F1AD9CDE0401F0A07992ED3</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FCA693F77C6FF5E0401F0A059953AA</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB24897AF7CE7E0401F0A059947D5" State="urn:dece:type:state:discretemediaright:fulfilled" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB24AB25C521CE0401F0A059947CB</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>2014-06-11T16:17:33.843Z</LeaseExpiration>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:33.843Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-11T10:17:36.797Z" ModifiedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:33.843Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:leased</Description>
         </Prior>
         <Prior ModificationDate="2014-06-11T10:17:27.502Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1729</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2f025dc0-7653-46fe-903d-890cd6dcfb20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRLeaseRelease POST" searchProperties="true" id="9bb3458c-d037-428b-acfd-a392de6f03c3"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="b672f0b5-6e70-4da8-ae21-c70a9ad82362">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRLeaseRelease POST").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
testCase.setPropertyValue("fulfillmentMethod",CallingTCase.getPropertyValue("fulfillmentMethod"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="428f687e-c060-4da7-a66d-b8d1bd065ac3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseRelease POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseRelease POST" id="8217689a-5e06-4511-b680-836803157640"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}/Lease/Release" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseRelease POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="NodeAccountID" value="${#TestCase#urlNodeAccountId}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#urlNodeAccountId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#urldiscreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="86b710ad-80d4-496a-879a-f5d440d98dd9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRLeaseRelease POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="250041ec-9548-4959-947b-9d65df6ec199"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FCA5AC5F1AD9CDE0401F0A07992ED3</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FCA5C2FF5C7FF6E0401F0A07992ED1</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FCA693F77C6FF5E0401F0A059953AA</con:value></con:property><con:property><con:name>urlfulfillmentMethod</con:name><con:value>urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged</con:value></con:property><con:property><con:name>urlmediaProfile</con:name><con:value>urn%3Adece%3Atype%3Amediaprofile%3Ahd</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47" State="urn:dece:type:state:discretemediaright:available" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</RightsTokenID>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:53.196Z">
         <Value>urn:dece:type:status:active</Value>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:42.847Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
         <Prior ModificationDate="2014-06-11T10:17:53.196Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:leased</Description>
         </Prior>
         <Prior ModificationDate="2014-06-11T10:17:53.196Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:leased</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1701</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5e127f61-48be-4ffd-b950-d806c86f121e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRLeaseRenew PUT" searchProperties="true" id="8d9fe10f-9e9d-4f58-a39b-81c0d23afc93"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="92fc60b9-978c-44c1-93c4-b4b90cca8a73">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("Etag",CallingTCase.getPropertyValue("Etag"));

//Setting the If-Match to null
//testCase.setPropertyValue("If-Match",null)
//
//testCase.setPropertyValue("If-Match",CallingTCase.getPropertyValue("If-Match"))

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()

//def ifMatch = context.expand( '${#TestCase#If-Match}' )
//
//if (ifMatch == 'noIfMatch')
//{
//	 headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//}
//else if (ifMatch == 'withStar')
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match","*");
//}
//else
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match",testCase.getPropertyValue("Etag"));
//}

headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
headers.put("If-Match","*");

//testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);
testRunner.testCase.getTestStepByName("DMRLeaseRenew PUT").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="1eb7764f-90f0-45d4-8356-662dd7b5cd12"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseRenew PUT");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseRenew PUT" id="62015167-9de9-486c-bc3b-fadda9275dc4"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}/Lease/Renew" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseRenew PUT" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCwXajjADgh6OKApcr+OXOyFZ2khJsEkR/fU3KRYB0cu5M8ww2W52n33Js3su0Dwphy0hIJWUM6PXaZj/EN+dBMSvWBXsI8urV31rUoaaBZ5L8JRMJ0EFTKMnRAY9JiRismGWHdeznJrlumPXCV0v9Ool3wmeTOMBUqFMK5WSYxqrecJEmLttmFnKQo4EFSFDcxChxOGoddMPlWaICkxm83yNMneYNmMpF6Ft4xIBDEmCS5jP7XN7R+eciHBEI4ZklsKHTyIa5sfd19fX0mulxNPILjuOYzuBrXSIoNGp2TwpLgPpsSlfny8Q44xilNB3pEHdgIw5MVpJxFMq4/k3pl3bdbRpC1bYwq7HTk3700GO7khLOyBTgSwRI7cwNoQppMAwGH8New3z9LgKru+OU8TElKdzsXf+M0jAlpDwBRBLFJEV6I63eCBdzXPAYY/hJBN0Cbe6TRYIgzDuUpjSVZ8K1XxEGHn5jZVQP1p0GeA/Kcu5vY1VQbcPZKdDIxDy/9Rsu15rKw8oyaBZHS/t2XVLOH7tMWnFT7NUer2KW2PP3UYOYVt5DWpT7o/zfrNueuvj0i+3P/Mu5G9xlWBy79ba/fpgSsiDiOX97TjJnqP21X226ODRW3zl0WvcGdafgFT9MzFcdHnnSUJwO+qu7tx6/4TEs8kv/pRFAbpPUK3N6ctV+vx7GCWrZz/qz68DTG4fvf4VPmv7g2DweGM/83jm3Q+61bLfxlNncTY8+zs+uxlMTnybdsij3x9N7Mf2W89LuzeNz5i2Y9gVFpQwyibPgGVx1O3R6xiXql5I/kwvWkKJNc1Vw4XmKCGBSbOpb2lqCTNFQJSEqpjr82Xbb7XLnh/Ug3L9olvvOp7jXjotpxoEXr1TLThojWIP4gVnU6p9aZZd98/PAPE8FMAIpNaSZzgGYf5gsYMkMnpsqB4HZwLGXLH4uzerRJXJallblt00jngNef4rnb2bxi2XAzZIW1MJ6S51V3aoewiYLihoftcNLlSHC6ly8YKWmUzc0hKVGGRqAqSahEOVm6ot6HyRgEZqzznJEigt4kWeGVus/8sWwiKXDrvj/OF9G9f+tyIFSodQrSB0LG1QZYQDM6hSBPIl4OrBWVWYb2WE6vel8ilTitdIdj99tonuj02PdPqt0V0BeqN73F2Vja837R8Q2fvJ2DgiS7rltpikajgo6mgWpXxBpZdStlxmefHqmhZTZd5W7OjaI8CZ4ra3MZ8Bszcm7KNGywb1nueNfBdfJmM2kkjCXLWakR+P2CtGIPRe0VNvZHXs0rLjUuVNwkoekl0kav3QiH/cUHCItZ4S36m/V56Sz3IdsLXlR8WplglJWaRPeoi8fdMUmCuzVLEeT7eNHzJwyPmucJPkDRapummSSfj+i6HprGEijHnGZK9j5oJtis1xyrcFhJ9KX8zkNP4xl1fi27n8eNMfKbKbI3OjS/9b2aJ5u2C1lSr9HEvDXKk1Uzln0RalfwA8wOrtwKnX6l61ssfq7iaBO5E0v4i/SrZyuv8emv8C"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="NodeAccountID" value="${#TestCase#urlNodeAccountId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#urldiscreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="2d53e103-6332-4825-ac49-a5c5d7d0ff7d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRLeaseRenew PUT');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="89b6c23f-208b-47b0-bdb6-3cbe9f496b18"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Copy of Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:dvd:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FCA5AC5F1AD9CDE0401F0A07992ED3</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FCA693F77C6FF5E0401F0A059953AA</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47" State="urn:dece:type:state:discretemediaright:leased" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>2014-06-11T22:17:53.196Z</LeaseExpiration>
   <ResourceStatus>
      <Current CreationDate="2014-06-11T10:17:53.196Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-11T10:17:56.054Z" ModifiedBy="urn:dece:org:org:dece:RET">
         <Value>urn:dece:type:status:active</Value>
         <Description>Active</Description>
      </Current>
      <History>
         <Prior ModificationDate="2014-06-11T10:17:42.847Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
         <Prior ModificationDate="2014-06-11T10:17:53.196Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:leased</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1839</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Etag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property><con:property><con:name>If-Match</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4c7a463a-f060-4ecd-aaf2-9dd05d24ee7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRLeaseConsume POST_06" searchProperties="true" id="7ac404b8-f5f4-4494-a293-c9251d0309bc"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="aa3bf211-3078-4fa7-b646-1c77a8f50bad">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
testRunner.testCase.getTestStepByName("DMRLeaseConsume POST").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="7c8dc66e-5229-423b-8c7e-79aaf553389f"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseConsume POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseConsume POST" id="1c236262-33a7-4a21-93aa-0b8856f7632e"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}/Consume" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseConsume POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZdU6s8EL73VzB46dAApVAY25m2WOVYtUrrOXrjxBDaKAQkoR/++jdQqW2tvj1npjOdLJvdZz/y7J4yGEe602EMZ5wkVPLclvxkB9DSdWwrYahqitEIVaXZCHUFqZaBrcBoNJtNWfIYy7FHGYeUt2Rd1eqKpovfSFMdo+FoWs1s2I+ydI8zJkwLlZoqS4s4oswp3bbkPKNOAhlhDoUxZg5Hjt+5GjhC04EVJrl9ukJZOszaU85TBwBUCzDCUYRqKInBKdjSOQ2Y45MJhTzP8IfPgLXkj7vz+bw2r9eSbAJ0VVWBagOhEzAyOZbbR9VlHHg0TFbnHqQJJQhG5B0WoK4wnyaB1IkmSUb4NP7GtAY0tTCt4AVSkGbQYxl8OijRHWhpC2TGoMKmUKuM3eEQZ5giLI3vvJZ8fFgFV3dHGaQsTLKY7Zz/DhKmMxwlKQ4UVkVWoTvc4p50tU8xcjyKopyRGb4u2iSFCDNpmOGQLAaEieYLmFSWX1ow8SNVl2H0N2U5BZtYBXSwJzsumWDG/6Vmm/VaWbmHUY7bV4/u+UMPvJvxiwlu1XE6us5mD4/Zw/u4VULYVF6BWpf747zbrOve+rh0PZ8F2jKzB0nzxDqZh1bStMDbTR//ehlfU3t8ORz6tNvsdr2r5aC7GKvx3YU98Qbhm58CNny4naDgedS/vRz8YUf94Sh+Hj5qg5O+7gV0eBFN41f1PcXL8+Uy8ozu/a/MD/WLrAPCE26PU/8SvXSXce/hjbGb+cXk940av1u/L8cvg6OQxCZ4vYTng/v5aGDWl51m6zOmzRi2hRUl+PnzC0a8Ohbt4blSX9QL8p/ppZCQQAlLVSctOIpxTLncLm4V1OLkgoBI4Ihirs5nbsNwO72+bdYbZ5baOFMNVeurHdWy7YbZ0CsOWqHYgdhLaEgKXwXLrvrnZ4AodhimAc6UWZKjKWbyDxZdyKHk0TvxOBLK8CgRLH7mdpuG1TdN3exaTa1h9lxDreu6Ve/2z0y3L0vXCb+hN1kn5DjbZvD6FoPfYURSgguaL/qciUZnXKTkDc5yHmm1GaxRnItBkBVc7OhGswEYidMIF4BBnAR5hGvpNC0TBNjqX1cgYqX07mxUvr9vw9v9VmVC6ASkUGBFLF0sqon3jCK1CuRLwMbekVWZ7+QBKZ6ZSCvPCFoh2f702S1Fm6xbxR10/GEFeq172F2Rjaee/6T9+/WvN8EPAYHdXK4dBTOy4baax2LECAJqV53wBmtvtXw2y8vaW6qqg0yYBxpQTeBjlAuGXI6SV0zB2gQ4aECtUe94Xsu38eV8Sn0OOY5Fp0rl8YDtxMes2E488dIWh64+Wy5F3jhe8H2yXiSWmALxj3sOclChJ8RD8TdPsuCzXHtsbfgRcYqVhBM6KU7FKFp+0xQoEWaJ4M4k2zS+z8A+59vCdZLXWLjopuec4++/SAUptmSIUJJT7rlyKdgk6hInX6bY+VT6YqYcBh/TfcG+ne5/rga+oMwYymtd8v/KCinbBWG5WCJKLC15IZZV4ZxONgbDB8Dd2dDVeq5pa25HN43N2WA0TXudwK1I2l/EXyUbOd19D+3/AA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="e3bd14e0-1857-406c-ac4c-c51faca832d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRLeaseConsume POST');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="33ebee71-d9e9-4b85-81b9-eb987580b0da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ED54B1CD691DA264E0401F0A07994869</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AED68B22EEE4AD1E5E0401F0A059911CC</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AED683B3F58ADBE51E0401F0A0799277A</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FCA5AC5F1AD9CDE0401F0A07992ED3</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FCA693F77C6FF5E0401F0A059953AA</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:fulfilled" DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:ED683B3F58ADBE51E0401F0A0799277A" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:ED68B22EEE4AD1E5E0401F0A059911CC</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</DiscreteMediaFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>2013-12-13T16:29:20.703Z</LeaseExpiration>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-13T10:29:25.701Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-13T10:29:20.703Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-13T10:27:53.203Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:available</Description>
         </Prior>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-13T10:29:20.703Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>urn:dece:type:state:discretemediaright:leased</Description>
         </Prior>
      </History>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>1729</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2f025dc0-7653-46fe-903d-890cd6dcfb20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRUpdate PUT_06" searchProperties="true" id="c5f11641-3b6e-46af-a62d-733f74feab27"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="e7055409-6826-4f35-b60e-464f0f4379cb">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
//testCase.setPropertyValue("Etag",CallingTCase.getPropertyValue("Etag"));
//
////Setting the If-Match to null
//testCase.setPropertyValue("If-Match",null)
//
//testCase.setPropertyValue("If-Match",CallingTCase.getPropertyValue("If-Match"))
//
////SetUp SAML assertion in Request header
//
//def headers = new StringToStringMap()
//
//def ifMatch = context.expand( '${#TestCase#If-Match}' )
//
//if (ifMatch == 'noIfMatch')
//{
//	 headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//}
//else if (ifMatch == 'withStar')
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match","*");
//}
//else
//{
//	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
//	headers.put("If-Match",testCase.getPropertyValue("Etag"));
//}
//
//
////testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);
//testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));
testCase.setPropertyValue("RightsTokenIDdecoded",URLDecoder.decode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("mediaProfile",CallingTCase.getPropertyValue("mediaProfile"));
testCase.setPropertyValue("rightsTokenId",CallingTCase.getPropertyValue("rightstokenid"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="2128ecde-09a6-43d1-9fd9-2d9435e11ef2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRUpdate PUT_107");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRUpdate PUT" id="e7cc4449-88a9-4d92-bfb4-b55895a742c4"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}" methodName="DMRUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRUpdate PUT" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 Assertion=nVZdU6s8EL73VzB46dAApVAY25m2WOVYtUrrOXrjxBDaKAQkoR/++jdQqW2tvj1npjOdLJvdZz/y7J4yGEe602EMZ5wkVPLclvxkB9DSdWwrYahqitEIVaXZCHUFqZaBrcBoNJtNWfIYy7FHGYeUt2Rd1eqKpovfSFMdo+FoWs1s2I+ydI8zJkwLlZoqS4s4oswp3bbkPKNOAhlhDoUxZg5Hjt+5GjhC04EVJrl9ukJZOszaU85TBwBUCzDCUYRqKInBKdjSOQ2Y45MJhTzP8IfPgLXkj7vz+bw2r9eSbAJ0VVWBagOhEzAyOZbbR9VlHHg0TFbnHqQJJQhG5B0WoK4wnyaB1IkmSUb4NP7GtAY0tTCt4AVSkGbQYxl8OijRHWhpC2TGoMKmUKuM3eEQZ5giLI3vvJZ8fFgFV3dHGaQsTLKY7Zz/DhKmMxwlKQ4UVkVWoTvc4p50tU8xcjyKopyRGb4u2iSFCDNpmOGQLAaEieYLmFSWX1ow8SNVl2H0N2U5BZtYBXSwJzsumWDG/6Vmm/VaWbmHUY7bV4/u+UMPvJvxiwlu1XE6us5mD4/Zw/u4VULYVF6BWpf747zbrOve+rh0PZ8F2jKzB0nzxDqZh1bStMDbTR//ehlfU3t8ORz6tNvsdr2r5aC7GKvx3YU98Qbhm58CNny4naDgedS/vRz8YUf94Sh+Hj5qg5O+7gV0eBFN41f1PcXL8+Uy8ozu/a/MD/WLrAPCE26PU/8SvXSXce/hjbGb+cXk940av1u/L8cvg6OQxCZ4vYTng/v5aGDWl51m6zOmzRi2hRUl+PnzC0a8Ohbt4blSX9QL8p/ppZCQQAlLVSctOIpxTLncLm4V1OLkgoBI4Ihirs5nbsNwO72+bdYbZ5baOFMNVeurHdWy7YbZ0CsOWqHYgdhLaEgKXwXLrvrnZ4AodhimAc6UWZKjKWbyDxZdyKHk0TvxOBLK8CgRLH7mdpuG1TdN3exaTa1h9lxDreu6Ve/2z0y3L0vXCb+hN1kn5DjbZvD6FoPfYURSgguaL/qciUZnXKTkDc5yHmm1GaxRnItBkBVc7OhGswEYidMIF4BBnAR5hGvpNC0TBNjqX1cgYqX07mxUvr9vw9v9VmVC6ASkUGBFLF0sqon3jCK1CuRLwMbekVWZ7+QBKZ6ZSCvPCFoh2f702S1Fm6xbxR10/GEFeq172F2Rjaee/6T9+/WvN8EPAYHdXK4dBTOy4baax2LECAJqV53wBmtvtXw2y8vaW6qqg0yYBxpQTeBjlAuGXI6SV0zB2gQ4aECtUe94Xsu38eV8Sn0OOY5Fp0rl8YDtxMes2E488dIWh64+Wy5F3jhe8H2yXiSWmALxj3sOclChJ8RD8TdPsuCzXHtsbfgRcYqVhBM6KU7FKFp+0xQoEWaJ4M4k2zS+z8A+59vCdZLXWLjopuec4++/SAUptmSIUJJT7rlyKdgk6hInX6bY+VT6YqYcBh/TfcG+ne5/rga+oMwYymtd8v/KCinbBWG5WCJKLC15IZZV4ZxONgbDB8Dd2dDVeq5pa25HN43N2WA0TXudwK1I2l/EXyUbOd19D+3/AA=="/>
  <con:entry key="If-Match" value="&quot;ED67D2C6B701C983E0401F0A079943F5:18B31766&quot;"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:available" xmlns="${#Project#Coordinator_Schema}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>${#TestCase#RightsTokenIDdecoded}</RightsTokenID>
   <AuthorizedFulfillmentMethod>${#TestCase#fulfillmentMethod}</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#mediaProfile}</MediaProfile>
   <LeaseExpiration>2011-06-04T02:30:57</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="f88c3bc5-5781-4feb-a945-c08ec2cd22d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRUpdate PUT');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="c87997b3-e9de-4a8d-8b29-62b1769d7fc8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:ED54B1CD691DA264E0401F0A07994869</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AED683B3F56F0BE51E0401F0A0799277A</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:dvd:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AED683B3F572DBE51E0401F0A0799277A</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2FB8DF3370B8786E0401F0A07992DA1</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2FB8DF337698786E0401F0A07992DA1</con:value></con:property><con:property><con:name>If-Match</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Etag</con:name><con:value>"ED67D2C6B701C983E0401F0A079943F5:18B31766"</con:value></con:property><con:property><con:name>urlrightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE2FB8DF337578786E0401F0A07992DA1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<DiscreteMediaToken State="urn:dece:type:state:discretemediaright:available" DiscreteMediaTokenID="urn:dece:discretemediatokenid:org:dece:ED683B3F572DBE51E0401F0A0799277A" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenID>urn:dece:rightstokenid:org:dece:ED683B3F56F0BE51E0401F0A0799277A</RightsTokenID>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <ResourceStatus>
      <Current ModificationDate="2013-12-13T10:15:28.602Z" CreationDate="2013-12-13T09:46:02.481Z">
         <Value>urn:dece:type:status:active</Value>
      </Current>
   </ResourceStatus>
</DiscreteMediaToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>886</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenIDdecoded</con:name><con:value>urn:dece:rightstokenid:org:dece:ED683B3F56F0BE51E0401F0A0799277A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d52cd0ff-6fc2-463b-b4db-80c38f05d43d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7872b5a4-f9cf-4524-a13a-93c804e5fd2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91acfb71-834e-4f1a-9d09-e9f8c41172fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DMRDelete_06" searchProperties="true" id="8eeae6f1-2a94-4029-85a9-a3287539c14b"><con:settings/><con:testStep type="groovy" name="Get the Required DMR Properties" id="c5a1b1de-4ab5-412e-9aff-167f270d51a2">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("Etag",CallingTCase.getPropertyValue("Etag"));

//Setting the If-Match to null
testCase.setPropertyValue("If-Match",null)

testCase.setPropertyValue("If-Match",CallingTCase.getPropertyValue("If-Match"))

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()

def ifMatch = context.expand( '${#TestCase#If-Match}' )

if (ifMatch == 'noIfMatch')
{
	 headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
}
else if (ifMatch == 'withStar')
{
	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
	headers.put("If-Match","*");
}
else
{
	headers.put("Authorization",testProject.getPropertyValue("SAMLFULL"));
	headers.put("If-Match",testCase.getPropertyValue("Etag"));
}


//testRunner.testCase.getTestStepByName("DMRUpdate PUT").testRequest.setRequestHeaders(headers);
testRunner.testCase.getTestStepByName("DMRDelete").testRequest.setRequestHeaders(headers);


// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("NodeAccountID",CallingTCase.getPropertyValue("NODEACCOUNTIDDecoded"));
testCase.setPropertyValue("discreteMediaTokenId",CallingTCase.getPropertyValue("discreteMediaTokenId"));

//Set the URL values
//testCase.setPropertyValue("urlNodeAccountID",URLEncoder.encode(testCase.getPropertyValue("NodeAccountID"), "UTF-8"));
//testCase.setPropertyValue("urldiscreteMediaTokenId",URLEncoder.encode(testCase.getPropertyValue("discreteMediaTokenId"), "UTF-8"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Set Pem" id="881558f5-7f72-4752-8ef0-3295ac3527ee"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;

RestTestRequestStep testStep = testCase.getTestStepByName("DMRDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRDelete" id="341e5cec-2a7f-49d2-8d83-6bd1d4b356d9"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}" methodName="DMRDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRDelete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 Assertion=nVZdU6s8EL73VzB46dAApVAY25m2WOVYtUrrOXrjxBDaKAQkoR/++jdQqW2tvj1npjOdLJvdZz/y7J4yGEe602EMZ5wkVPLclvxkB9DSdWwrYahqitEIVaXZCHUFqZaBrcBoNJtNWfIYy7FHGYeUt2Rd1eqKpovfSFMdo+FoWs1s2I+ydI8zJkwLlZoqS4s4oswp3bbkPKNOAhlhDoUxZg5Hjt+5GjhC04EVJrl9ukJZOszaU85TBwBUCzDCUYRqKInBKdjSOQ2Y45MJhTzP8IfPgLXkj7vz+bw2r9eSbAJ0VVWBagOhEzAyOZbbR9VlHHg0TFbnHqQJJQhG5B0WoK4wnyaB1IkmSUb4NP7GtAY0tTCt4AVSkGbQYxl8OijRHWhpC2TGoMKmUKuM3eEQZ5giLI3vvJZ8fFgFV3dHGaQsTLKY7Zz/DhKmMxwlKQ4UVkVWoTvc4p50tU8xcjyKopyRGb4u2iSFCDNpmOGQLAaEieYLmFSWX1ow8SNVl2H0N2U5BZtYBXSwJzsumWDG/6Vmm/VaWbmHUY7bV4/u+UMPvJvxiwlu1XE6us5mD4/Zw/u4VULYVF6BWpf747zbrOve+rh0PZ8F2jKzB0nzxDqZh1bStMDbTR//ehlfU3t8ORz6tNvsdr2r5aC7GKvx3YU98Qbhm58CNny4naDgedS/vRz8YUf94Sh+Hj5qg5O+7gV0eBFN41f1PcXL8+Uy8ozu/a/MD/WLrAPCE26PU/8SvXSXce/hjbGb+cXk940av1u/L8cvg6OQxCZ4vYTng/v5aGDWl51m6zOmzRi2hRUl+PnzC0a8Ohbt4blSX9QL8p/ppZCQQAlLVSctOIpxTLncLm4V1OLkgoBI4Ihirs5nbsNwO72+bdYbZ5baOFMNVeurHdWy7YbZ0CsOWqHYgdhLaEgKXwXLrvrnZ4AodhimAc6UWZKjKWbyDxZdyKHk0TvxOBLK8CgRLH7mdpuG1TdN3exaTa1h9lxDreu6Ve/2z0y3L0vXCb+hN1kn5DjbZvD6FoPfYURSgguaL/qciUZnXKTkDc5yHmm1GaxRnItBkBVc7OhGswEYidMIF4BBnAR5hGvpNC0TBNjqX1cgYqX07mxUvr9vw9v9VmVC6ASkUGBFLF0sqon3jCK1CuRLwMbekVWZ7+QBKZ6ZSCvPCFoh2f702S1Fm6xbxR10/GEFeq172F2Rjaee/6T9+/WvN8EPAYHdXK4dBTOy4baax2LECAJqV53wBmtvtXw2y8vaW6qqg0yYBxpQTeBjlAuGXI6SV0zB2gQ4aECtUe94Xsu38eV8Sn0OOY5Fp0rl8YDtxMes2E488dIWh64+Wy5F3jhe8H2yXiSWmALxj3sOclChJ8RD8TdPsuCzXHtsbfgRcYqVhBM6KU7FKFp+0xQoEWaJ4M4k2zS+z8A+59vCdZLXWLjopuec4++/SAUptmSIUJJT7rlyKdgk6hInX6bY+VT6YqYcBh/TfcG+ne5/rga+oMwYymtd8v/KCinbBWG5WCJKLC15IZZV4ZxONgbDB8Dd2dDVeq5pa25HN43N2WA0TXudwK1I2l/EXyUbOd19D+3/AA=="/>
  <con:entry key="If-Match" value="&quot;ED683B3F5711BE51E0401F0A0799277A:A0347DEF&quot;"/>
</xml-fragment>]]></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#discreteMediaTokenId}"/>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="0b81939c-6eaf-4e30-a72a-3504ba138d5d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('DMRDelete');

/*
*  Get the XML body raw 
*/
//rawResp = new ByteArrayOutputStream();
//rawResp = tStep.httpRequest.response.getRawResponseData();
//def expXML  = new String(rawResp);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String contentEncoding = null;

expXML     = tStep.httpRequest.response.getResponseContent();

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			contentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentEncoding", contentEncoding);</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="157a5b0b-1142-448b-8b8b-c4c1e3244034"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


String expectHTTPstatus  = "HTTP/1.1 200 OK";

/*
*   HTTP HEADER CHECKS
*/
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>TCaseName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Sanity_TestSuite</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountID</con:name><con:value>urn:dece:accountid:org:dece:ED54B1CD691DA264E0401F0A07994869</con:value></con:property><con:property><con:name>rightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:C8F5EF70438D72C9E0401F0A07997136</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:dvd:packaged</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AED67F56BD7916BD4E0401F0A0599217F</con:value></con:property><con:property><con:name>urlNodeAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE2D3DDCB0FB23469E0401F0A0599358E</con:value></con:property><con:property><con:name>urldiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE2D3DDCB10113469E0401F0A0599358E</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentEncoding</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Etag</con:name><con:value>"ED683B3F5711BE51E0401F0A0799277A:A0347DEF"</con:value></con:property><con:property><con:name>If-Match</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fdb90695-a52f-40dd-919c-c75ec7350bd4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_SAML2" searchProperties="true" id="e1032df7-f00b-432b-b4a8-ee44a3598a9e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
testCase.setPropertyValue("Password",callTC.getPropertyValue("Password"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STS - POST"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="SAML2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - POST" mediaType="application/json" postQueryString="false" id="2f3be90a-6feb-4f2b-931e-c5de7169c503" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
<Credentials xmlns="${#Project#Coordinator_Schema}">
  <Username>${#TestCase#UserName}</Username> 
  <Password>${#TestCase#Password}</Password> 
</Credentials>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#Project#urntokenType_SAML2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

/*
if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	//assert b.getPath().matches("/rest/1/07/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}


tP.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem 1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/json" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ASSERTION" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVbbbuo6EH3fXxGlj1XIhQBJVJC4tCjdLW2B3vbLkesM4BIcsB0u/fpjhyYFSnu6j4SEPBnPrJlZXvYZR7PYCZqcAxMkoVrYqev/OC9lr+y5yHA8Gxnui1M1vLLtGlGlUnNw2Y7cl7KuhZynEFIuEBV13bGkg1U1nOrQ8gPXD+xyqeo7f3TtARiXoaVLydK19SymPMjS1vWU0SBBnPCAohnwQOBg0Ly+CqRngHJMeuNsizJLyBoTIeaBaeJSBBjiGJdwMjPPzD2fs4gHAzKmSKQM3nNGvK6/712tVqVVuZSwselYlmVavil9Ik7GJ3rjV74ZopCOku26jWhCCUYxeUMK1DWISRJpzXicMCImsy9C26ZtqdAGrLGBbZee6OZHggzdDyPtgWQcGXyC7DxYH0bAgGLQ7vthXT/52QS3e4cMUT5K2IwfrP8OEtAlxMkcIoPnleXofh7xSLsaZ4CDkOI45WQJPUWTOcLAtVsGI7K+IlySL+JaNn5tzeWP5CwD/DdjOTN3sUro5pHudMgYuPg/M9ud1zbKA4pTaNxPL1g7HHTYsD2NosvNgxP3r7E/jBZhPYOw67wFVYz7fX1I1oJb75tG9A7Q3euahY+rHi+z3vnmiXWtq5odr5JKF12WK113/nzJ0f0fy7+/J4+swrrPj824HcWrp+5QxLXL6Y3Xt8LFL4J/e3cJdFvPb3fLBwdPFy/0itbIE+o3T4UHd6vT1mkzYRux7F31nsfm0+/7Ib6ZNuOKV4vprUNpp/2aWItw+vZr5vqnsc+Gfm/R9RybzZ9W9Y+admvYN+aSMEhfXgGLfKnoEXa0CzkvJL6XF2UhkTHKXIO50igugAq9oXYpaQlSKUAkCuQwt+uLdqvZ9qtOtXLuXpw7F+eWa9kXVtOq+L7rOl6uQVsUBxDbCR0RlUup7JY/3wPEs4ADjYAZyyTFE+D6NxE7SCAtpH15OBLKYZhIFbfRCK0nG68Ma/dtHjkrhKveclJb6lovETf0hjVHAtiedNvOnnT3AZM5AaXviuBcMpwL2YsFWqYitktLVKKQyhuAKREOHNermJzM5jEopOYsidIYSvPJPOuMybf/joEwz6z982F28L6s6/Bb3gLpExHlwFUtLZBjhCN3kJUX8nXBld2C8/DNNCLqfMl+CkbwFsn+pw+aKH4UHJEV5ZALz0PDXlTzsKAiUbQkuCB6cUNLgZfHv5GPY4FKi1K6XKbZAGpK2pgMb0qFs80B4FTq02aYTIGaRQjzR9dDgfogc2Hfx5eKCR0IJGAm6aJlyx+8DQbA1dsglDxf//ThsZdS9k3AWhyztWP5hFCIv31l4AArP2m+lX+rhEUf4zoSayePrFM+CAShY7VSF8HmC1LgRIYlUrkSthv8WIBjyfeNRZMLLEKy6SUV8PUXTUlSXUcYJykVYUfPDLsymeEUmzkEH06fwmRS/H63rvmXd+vT9dVACtYM6YUv+W9ng2R0waCrKzzDUtfX8qkok9Pxjiy/AzxQ5pbVdjs1u9qsttr7ytzyP7i8V0njk/mzZaenh+eh8S8=</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_2b38384a-281a-4b26-8314-d5572c31d4b3</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2b38384a-281a-4b26-8314-d5572c31d4b3</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>SanityFAU_20140626_1403776131200</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2916</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_2b38384a-281a-4b26-8314-d5572c31d4b3</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_2b38384a-281a-4b26-8314-d5572c31d4b3" IssueInstant="2014-06-26T09:49:13.692Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_2b38384a-281a-4b26-8314-d5572c31d4b3">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>UkFrCISDrTCkddJyV2lRMc9TdqI=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
fnQeaQjxrIWwNs3rNEyXrG0L71lwo5GaJ35G4pYJsaUZ09UUiWr5rGYWAlCdlwXGTtl7JkO8R0Iq
icK8QoeGBYzQvV2ckqbnLn7iXaRA+t8eQw+B+AorytvNLNYg/XKUTcOkAl587lnP2nnDCjo0qIkz
m49+l9rT9NqG821rpXw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:FCBAC96265E4FE2FE0401F0A05994428</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1afaxhy83ex4zpd2wac68vh7v" NotOnOrAfter="2014-06-26T12:49:13.692Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-06-26T09:49:03.692Z" NotOnOrAfter="2014-06-26T15:49:13.692Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_2b38384a-281a-4b26-8314-d5572c31d4b3</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-06-26T09:49:13.692Z" SessionIndex="_2b38384a-281a-4b26-8314-d5572c31d4b3"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy_TOU" searchProperties="true" id="a3846f34-d824-4c9d-b0bd-aac1e076ea3d"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep4 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);

if(testCase.getPropertyValue("Count") != "1"){

testRunner.testCase.getTestStepByName( "PolicyCreateSinglePolicyPost_TOU" ).disabled = true;	
}</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set_TOU_Policy_Resource" disabled="true" id="a0f0f861-2d95-4448-adb4-4ec689abbf00"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )
def targetport = context.expand( '${#Project#targetport}' )


//def touForCountry = "TOU_"+country
def consent_Version =  "20121024";

tP.setPropertyValue("policy_TOU",'https://qa.c.uvvu.com:'+  targetport + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
  <dece:Resource>${#Project#Policy_TOU}</dece:Resource>    
      <dece:RequestingEntity>${#Project#Node_User_ID_FULL}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="76a6d451-0751-487b-a822-7afe464d5c6d"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}TermsOfUse"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FC1999B288737D05E0401F0A0599263A</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FC1999B0FC27BA67E0401F0A07991D5D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0f0f861-2d95-4448-adb4-4ec689abbf00</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy_ULC" searchProperties="true" id="e1f7f47b-932f-42bf-978f-47c3dd84b9da"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}UserLinkConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FC1999B288737D05E0401F0A0599263A</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FC1999B0FC27BA67E0401F0A07991D5D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy_LVAC" searchProperties="true" id="b27795bc-e98b-4a3e-a6cc-f6327454c64a"><con:settings/><con:testStep type="groovy" name="Set pem" id="38fd9842-c17d-480c-b63a-4e66d01b74da"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("Policy_LVAC");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_LVAC"><con:settings/><con:config service="Policies" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/urn:dece:type:policy:LockerViewAllConsent" methodName="Policy_LVAC" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_LVAC" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>
 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>
 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>
 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>
 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>

 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>

 <dece:Policy>
  <dece:PolicyClass>urn:dece:type:policy:LockerViewAllConsent</dece:PolicyClass>
  <dece:Resource>urn:dece:rightslockerid:org:dece:${#Project#rightsLoclker_ID}</dece:Resource>
  <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
  <dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
  <dece:ResourceStatus>
   <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
    <dece:Value>urn:dece:type:status:active</dece:Value>
   </dece:Current>
  </dece:ResourceStatus>
 </dece:Policy>
 </dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FC1999BC6870DD3FE0401F0A05992650</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FC1999B0FC27BA67E0401F0A07991D5D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>38fd9842-c17d-480c-b63a-4e66d01b74da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Policy_Create" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("User Policy Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User Policy Create"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User Policy Create" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#TestCase#NODEUSERIDDecoded}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#TestCase#NODEUSERIDDecoded}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>End_To_End</con:value></con:property><con:property><con:name>sName</con:name><con:value>Sanity_TestSuite</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FC013E3A11B97C0BE0401F0A07990EA4</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FC013E3A11A77C0BE0401F0A07990EA4</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy_MUC" searchProperties="true" id="05206e51-c183-4896-9a32-dc9b99c5c398"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_UserLinkConsent");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_UserLinkConsent"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_UserLinkConsent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#Node_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="3f24880e-3b76-4d4b-9613-3837945935d0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>UserID</con:name><con:value>9E9EB486B0E941E6E0401F0A05996C5F</con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC003</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FC1999B288737D05E0401F0A0599263A</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FC1999B0FC27BA67E0401F0A07991D5D</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Count</con:name><con:value>1</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>3</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2d787415-6ad6-4403-9bbc-37fb4687847b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ede2863a-87cd-4b07-8480-d41d12995398</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f020102-31af-4191-b98e-c0bba2ab7ab5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>707eff09-f96a-455f-b067-5fcaba4a8db6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71a94c3c-2ce0-4432-b4cd-f0190ffabade</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>78732f95-5bad-4898-b95b-9d4ef7846443</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_Exchange" searchProperties="true" id="cc895e60-73ad-4630-9b29-5b6c7d250ccb"><con:settings/><con:testStep type="groovy" name="Set pem1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("STS - POST");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STS Exchange"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{UUID}/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Test Request" mediaType="application/xml" postQueryString="false" id="2f3be90a-6feb-4f2b-931e-c5de7169c503"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="duration" value="${#Project#duration}"/>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#Project#urntokenType_SAML2}"/>
  <con:entry key="UUID" value="${#Project#assertionUUID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS Exchange');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
//log.info connection[0];
log.info contentType[0];
log.info contentLength[0];
log.info contentLocation[0];

tC.setPropertyValue("status",status[0]);
//tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

/*
if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	//assert b.getPath().matches("/rest/1/07/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="SetPem1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of GET - STS" mediaType="application/json" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ASSERTION" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Reepsonse Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def callTSname = tC.getPropertyValue("sName");
//def callTCname = tC.getPropertyValue("tName");
//
//def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def tStep  = tC.getTestStepByName('GET - STS');


/*
*  Get the HTTP headers
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
	   /*	case "Location": 
			contentLocation = value[0];
		break;*/
		case "#status#": 
			status = value[0]; 
			break;
		/*case "Connection": 
			connection = value[0]; 
			break;*/
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}
//def contentLocation = tStep.httpRequest.response.responseHeaders["Content-Location"];

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
//tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
//tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

//import groovy.sql.Sql;
//import org.apache.commons.codec.binary.Base64;

//com.eviware.soapui.support.ClasspathHacker.addFile( new File("opensaml-2.3.1.jar") );

//import org.opensaml.*;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/

//BaseID base64Encoder1 = new BaseID();

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);

//tP.setPropertyValue("SAMLFAU1_"+tP.getPropertyValue("Count")+"1", "SAML2 Assertion="+base64encodeStr);
tP.setPropertyValue("SAML",base64encodeStr);

//DatatypeHelper DTH = new DatatypeHelper();

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVZdb+I6EH3fXxFlH6+CkxC+ooIEgd6ypSwlbbe7LyvjDOCSONR2AvTXXyc0FCjt7W4lJOTJeObMzPHMnAkchbbbFgK4pDHT+t2m/juYVCekgcFwyvWJ4dRNYtTLQWAocbVWmeAy1Ce61hcigT4TEjPZ1G3TcgyzatjVG7PhVkzXqpUq1fIvXbsDLpRppVIydW0dhUy4udumnnDmxlhQ4TIcgXAlcf321cBVmi4uMOmtsy3K3CFvzaVcugiRUgAEwpCUSByhM3SgcxYI16czhmXC4dlnIJr6893ValValUsxnyHbNE1kNpDSCQSdfdVbX4rLEPTZNN6ePcxiRgkO6RPOQF2BnMeB1g5nMadyHr1h2kKWmZk2YE0MYjnsq45eHOToPmjpACQX2BBzbBXGxjAFDoyAdjvuN/WvH6vg9u4Nx0xMYx6Jo/OfQQKWQhgvITBEEVmB7uMWT6SrdQbE7TMSJoKmMMxossQEhDbiMKXrARWKfIHQ8vJra6F+tGAZkD8pyxnax6qgoxPZ6dIZCPk3Nduv19bKHQ4TaCWD+sXg0h9tvsleLQwi5vGujVYLeeM0cwj7yltQu3I/n4/JuuPW8yXq/LuY8Im8H6Td+ydr4aWpD+hiRL1Z7I+Il95f8mRq13o/1nflB789fUAz1Ond3/+IOtFYJCl6WGyeesON+fD4RUzhIo5h5CXjy02ZDujFXWB2fvHr6OpiKZLr287GXF7e4vurweK6Owru7PO1U+4Ol9f/pF7PIwtvVHm4JFZt2J58+XmR1oPho3n18+p7YzDcoN5t8yWm/RgOhUVL8JPJAxBZHDN69LvauaoXlu+3l0xCA2Oaq7rLrEcJCUzqrexW1lrcRDUgGriqmNvzuddpe42qXa30nPOefd4zHdM6N9tmpdFwHLte9KAtiiOIXsymNPOVddktf94HSCJXAAuAG2mckDkI/R2LXSyx1mdj9ThiJuAmVl18lVg8fqrW6pUFtTjQFSvL8sKqPOnaMJbf2XfenkrgB63bsg9a9xgIXVLI+ntGcKEYLqTKxSNOExlapRSXGCRqAvCsCbu2U68gQaNlCBlSFMVBEkJpOV/mmUFi+28bmIhcOu7d5A/vzbiOvxUpUDoBzRREFksHVBnhxAwyi0DeDriyH3Bhvp0ENHtfKp+SU7JFcvjphSYZP3Yc6Q7a/qgAvdP9g7u/Pf+39bcG/t715xwPPhH14LNRKxJ98vrrm+gdHqBjCu4cBSndc1vsL2okq4bdKh7QIy49lpI0TfInU8uGEVfmkZpJFvKBJGqibG7iBTC0M4E+NNB3qI887+SH+BI5Z77EEiL1wLX8+IFtzgeRbXN91ZnWH10VD1yqvElYy1MyL1RLX4b43b2QuCTTU+KR+lvFPHgp1wlbe35UnGqFk5TNslM2ujdvkILEyixVsybm+8ZPGTjl/FC4S/IOi1RsmiQS3v6iZUOkqWNC4oTJflfPBfuDLccpN0twX5RemcmH5/M2tBZvbkNqVvtqxERY3+nS/1c2aE4XAnq2dOVYmvpaLffKOZvtDdJngEeztGN6TrdmVdvVjnc4SzuN8i6BB5G0XolfS/ZyevweWv8B</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_db6bc9ae-438b-480c-83dd-b6b675ba3e8b</con:value></con:property><con:property><con:name>assertIdL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value>_db6bc9ae-438b-480c-83dd-b6b675ba3e8b</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>3512</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>CE0FA9BFE5F30C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>uname</con:name><con:value>shikha_user_create_accp_test_20110610_11508</con:value></con:property><con:property><con:name>username</con:name><con:value>SanityFAU_20140626_1403764096118</con:value></con:property><con:property><con:name>useroid</con:name><con:value>CE0FA9BFE5F80C65E0401F0A07990DF9</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>3350</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_db6bc9ae-438b-480c-83dd-b6b675ba3e8b</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_db6bc9ae-438b-480c-83dd-b6b675ba3e8b" IssueInstant="2014-06-26T09:50:17.563Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_db6bc9ae-438b-480c-83dd-b6b675ba3e8b">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>uL8HLKSPyJtE7ldmnCrD2/wktT4=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
i4GkbrbtXLvDXz1kCvvSe/HPiCgoSPcCvXKruf27EWxV3jSAfj/g/BEXXWmBmRsuv/jkyzENy0jq
sfeHooePCuRKy3iLiHVd0BZrQmMHpsuQUBy0pKUaXMLkQDPdV2Fx43DNpQ+vCECckCP5jKc17NAb
YHv8dNq0MYMO9LNy/EU=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:FCBAC96265E4FE2FE0401F0A05994428</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_wu1roz6785ki1reiwn3t3k15z" NotOnOrAfter="2014-06-26T12:50:17.563Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-06-26T09:50:07.563Z" NotOnOrAfter="2014-06-26T15:50:17.563Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_db6bc9ae-438b-480c-83dd-b6b675ba3e8b</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-06-26T09:50:17.563Z" SessionIndex="_db6bc9ae-438b-480c-83dd-b6b675ba3e8b"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>ACC014 Draft</con:value></con:property><con:property><con:name>sName</con:name><con:value>Solekai</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:E257A6E6BA7EFAE2E0401F0A059930BB</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:E257B8E89F615B19E0401F0A0599565B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>duration</con:name><con:value>365</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>800673c1-3147-4c8c-b0c1-58e0015b4b03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>175431f8-b1ab-411a-838d-f62e6ec865f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7b4251c4-b0c9-4524-b11d-58f032477794</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad58565a-ea44-49b7-aab1-812ed0ed9584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63c7be09-e6de-4048-88a8-4093708a9d7b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a41302e2-c2f1-4384-92f7-153edc9522ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2fe33502-92b9-4bc5-9cab-1083378ddd6c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1adab77f-1cd6-4d9f-ac40-f99f00ddbb94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af3889f5-e9ad-4a18-837c-7ead87c1caed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fdb00829-308f-406e-9775-a6c8de3621f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98f48738-f6c6-4056-be18-f24b60c6a023</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cb39d541-2f26-4a00-9fc8-5a5ea810f40b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1d6deba7-1e9f-4639-9f4c-9f1d7ae6305c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>nodeidRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Solekai" id="e3d69969-201a-4c2d-ae59-58d882659653"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ACC001" searchProperties="true" id="dde0eade-1d69-45a2-824a-ed40a58e08dc" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Setup_Node" id="ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP2: AccountCreate" id="57100200-80ad-4429-b054-c9c5bc20096e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP3: FirstUserCreate_FAU1" id="9c9f42c9-23c7-4942-a8a7-14e703ea1943"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityFAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

//for UserUpdate
tP.setPropertyValue("UserName_FAU1",UserName);

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP4-5: STSCreate_FAU1" id="ad2ebec4-c400-4d5b-afd9-f4de7bc063ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="STEP6: AccountGet" id="a27182fe-500c-4e26-993d-4cb19e21c90d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAMLFULL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ResponseType","ACCT_INACTIVE");
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP7: Create Policy TOU" id="22261161-6bc7-4ce1-9de5-8e3c77ecdd6f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_TOU");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP8: AccountGet" id="5708c8ca-74f2-45b2-9bc9-cfbe1195f20c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAMLFULL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ResponseType","NO_MNG_ACC_CNST");
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP9: Create Policy ULC" id="4a43d6e8-ca07-4568-9f93-b2a72fc52214"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_ULC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP10: RightsLocketDataGet" id="c842eac7-32fb-4374-b04d-65e623e4ed47"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_List");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP11: Create Policy LVAC" id="467bcd49-e7ca-4002-b915-345e86bc1339"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_LVAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem01"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP12: Create Policy EUDUC");
RestTestRequestStep testStep2 = testCase.getTestStepByName("STEP13: Create Policy EMUC");
RestTestRequestStep testStep3 = testCase.getTestStepByName("STEP14: Create Policy MAC");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set EUDUC property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableUserDataUsageConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP12: Create Policy EUDUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP12: Create Policy EUDUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set EMUC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableManageUserConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP13: Create Policy EMUC" id="837c121b-6f19-461b-9299-8e878289714f"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP13: Create Policy EMUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set MAC Property" id="630c4723-4d07-48c5-ab74-bdbf92dd012a"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","ManageAccountConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP14: Create Policy MAC" id="55e86fd6-e632-4ca1-9590-4566eb42bb84"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP14: Create Policy MAC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTL}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_Account_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="STEP15: AccountGet" id="b8783c4c-0e05-446d-8bc7-5fe263858f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAMLFULL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ResponseType","SUCCESS");
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB878A0AE0FD9C7DE0401F0A05991259</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1637</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FC9389FB1F074CE8E0401F0A05995E8F" AccountID="urn:dece:accountid:org:dece:FC9389FB1EFF4CE8E0401F0A05995E8F" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityFAU_20140624_1403606916131</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>ManageAccountConsent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22261161-6bc7-4ce1-9de5-8e3c77ecdd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5708c8ca-74f2-45b2-9bc9-cfbe1195f20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4a43d6e8-ca07-4568-9f93-b2a72fc52214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467bcd49-e7ca-4002-b915-345e86bc1339</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>837c121b-6f19-461b-9299-8e878289714f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>630c4723-4d07-48c5-ab74-bdbf92dd012a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55e86fd6-e632-4ca1-9590-4566eb42bb84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8783c4c-0e05-446d-8bc7-5fe263858f2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ACC002" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2893b753-3b53-4645-b685-e6c6b456e98a"><con:settings/><con:testStep type="groovy" name="Setup_Node"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP2: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP3: FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityFAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

//for UserUpdate
tP.setPropertyValue("UserName_FAU1",UserName);

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP4-5: STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="STEP6: Create Policy TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAMLFULL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_TOU");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem01" id="24703264-c43b-472e-93c6-337e1b9504f3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP12: Create Policy EUDUC");
RestTestRequestStep testStep2 = testCase.getTestStepByName("STEP13: Create Policy EMUC");
RestTestRequestStep testStep3 = testCase.getTestStepByName("STEP14: Create Policy MAC");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="STEP7: Create Policy ULC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_ULC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP8: RightsLocketDataGet"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_List");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP9: Create Policy LVAC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_LVAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Set EUDUC property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableUserDataUsageConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP10: Create Policy EUDUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP10: Create Policy EUDUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set EMUC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableManageUserConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP11: Create Policy EMUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP11: Create Policy EMUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set MAC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","ManageAccountConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP12: Create Policy MAC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP12: Create Policy MAC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAMLFULL}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTL}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_Account_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="STEP13: AccountGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAMLFULL"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB878A0AE0FD9C7DE0401F0A05991259</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1607</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FC939400BE492290E0401F0A059904D2" AccountID="urn:dece:accountid:org:dece:FC939400BE412290E0401F0A059904D2" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityFAU_20140624_1403606884559</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>ManageAccountConsent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22261161-6bc7-4ce1-9de5-8e3c77ecdd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5708c8ca-74f2-45b2-9bc9-cfbe1195f20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4a43d6e8-ca07-4568-9f93-b2a72fc52214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467bcd49-e7ca-4002-b915-345e86bc1339</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>837c121b-6f19-461b-9299-8e878289714f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>630c4723-4d07-48c5-ab74-bdbf92dd012a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55e86fd6-e632-4ca1-9590-4566eb42bb84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8783c4c-0e05-446d-8bc7-5fe263858f2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24703264-c43b-472e-93c6-337e1b9504f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ACC003" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c37ca512-1355-43c4-bcec-b46a5b61710e"><con:settings/><con:testStep type="groovy" name="Setup_Node"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP2: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP3: FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityFAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

//for UserUpdate
tP.setPropertyValue("UserName_FAU1",UserName);

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP4-5: STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAML_USER1","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="STEP6: Create Policy TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_TOU");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem01"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP10: Create Policy EUDUC");
RestTestRequestStep testStep2 = testCase.getTestStepByName("STEP11: Create Policy EMUC");
RestTestRequestStep testStep3 = testCase.getTestStepByName("STEP12: Create Policy MAC");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="STEP7: Create Policy ULC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_ULC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP8: RightsLockerDataGet"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_List");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP9: Create Policy LVAC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_LVAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Set EUDUC property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableUserDataUsageConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP10: Create Policy EUDUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP10: Create Policy EUDUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set EMUC Property" id="8fbac267-9623-41d9-85cd-4224414b43a1"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableManageUserConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP11: Create Policy EMUC" id="6173e995-b539-42ef-b0a8-f93bc3b9aff5"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP11: Create Policy EMUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set MAC Property" id="7c7503a1-6810-4489-b322-ae4b5d94cb99"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","ManageAccountConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP12: Create Policy MAC" id="04a359df-9ebc-4cef-89ff-47f20e85db0b"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP12: Create Policy MAC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTL}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_Account_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Generate Username"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Solekai_ACCOO3_Step13_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

tC.setPropertyValue("userName",UserName);
</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP13: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP13: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract and Validate Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP13: User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		def node_User = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("NODE_USER_ID2_FULL",node_User);		     
		tP.setPropertyValue("NODE_USER_ID2",userid);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid = urlStr.substring(lastColon + 3);

		def node_User = urlStr.substring(lastSlash + 1);		
		tP.setPropertyValue("NODE_USER_ID2_FULL",node_User);		
		tP.setPropertyValue("NODE_USER_ID2",userid);
	}

} else {

assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP15-16: STS Create User2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAML_User2","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="STEP17: Create Policy TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("Node_User_ID_FULL",tP.getPropertyValue("Node_User_ID2_FULL"));

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_TOU");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP18: Create Policy ULC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("Node_User_ID_FULL",tP.getPropertyValue("Node_User_ID2_FULL"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_User2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_ULC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP19: Create Policy MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tP.setPropertyValue("Node_User_ID_FULL",tP.getPropertyValue("Node_User_ID2_FULL"));
tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_User2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_MUC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STEP20: AccountGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_User2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP22: RightsTokenCreate"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP22: RightsTokenCreate" mediaType="application/xml" postQueryString="false" id="67be72ff-4d9c-4fa1-9e7b-54286c21bf9e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_USER2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData ContentID="${#Project#CID}" 
ALID="${#Project#ALID}" xmlns="${#Project#Coordinator_Schema}"
	xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" 
	xmlns:ns2="http://www.movielabs.com/md" 
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
	xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <ns4:SoldAs>
  <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
  <ns4:ContentID>${#Project#CID}</ns4:ContentID>
 </ns4:SoldAs>
 <ns4:RightsProfiles>
	<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
	<ns4:CanDownload>true</ns4:CanDownload>
	<ns4:CanStream>true</ns4:CanStream>
	</ns4:PurchaseProfile>
 </ns4:RightsProfiles>
 <ns4:LicenseAcqBaseLoc>https://dececvp.solekai.com</ns4:LicenseAcqBaseLoc>
	  <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>1</ns4:Preference>
 </ns4:FulfillmentWebLoc>
	  <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>2</ns4:Preference>
 </ns4:FulfillmentManifestLoc>
	  <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>3</ns4:Preference>
 </ns4:StreamWebLoc>
 <ns4:PurchaseInfo>
	  <ns4:NodeID>urn:dece:org:org:dece:${#Project#nodeIdRTL}</ns4:NodeID>
	  <ns4:RetailerTransaction>9f5dda6535404b28a1a520f1f0d41a97</ns4:RetailerTransaction>
	  <ns4:PurchaseAccount>${#Project#Node_Account_ID_FULL}</ns4:PurchaseAccount>
	  <ns4:PurchaseUser>${#Project#Node_User_ID_FULL}</ns4:PurchaseUser>
	  <ns4:PurchaseTime>2014-06-03T18:50:12Z</ns4:PurchaseTime>
 </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract and Validate Step22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP22: RightsTokenCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
	
	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("URLEncode") == "NO")
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/RightsToken/urn:dece:rightstokenid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		rightsTokenID    = urlStr.substring(lastColon + 1);
		def rightsTokenID_full = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("RIGHTS_TOKEN_ID",rightsTokenID);		     
		tP.setPropertyValue("RIGHTS_TOKEN_ID_FULL",rightsTokenID_full);
	} 
	else 
	{
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/RightsToken/urn%3Adece%3Arightstokenid%3Aorg%3Adece%3A[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		rightsTokenID    = urlStr.substring(lastColon + 1);
		def rightsTokenID_full = urlStr.substring(lastSlash + 1);
		
		tP.setPropertyValue("RIGHTS_TOKEN_ID",rightsTokenID);		     
		tP.setPropertyValue("RIGHTS_TOKEN_ID_FULL",rightsTokenID_full);
	}

} else {

assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem03" id="c297f947-1865-43a6-bdac-b8628a4c520c"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="restrequest" name="STEP23: RightsTokenGet"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP23: RightsTokenGet" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_USER2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Rights Token Get - ETag23" id="c2d01393-7a43-4263-b68e-f7f42825c3a2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP23: RightsTokenGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
		break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("eTag", etag);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
//		XMLbodynull        = true;
//		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	
}

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
assert context.expand( '${#TestCase#httpLocation}') == "";

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	}

 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP24: RightsTokenUpdate"><con:settings/><con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP24: RightsTokenUpdate" mediaType="application/xml" postQueryString="false" id="063f0b83-8ad1-4dbe-9112-5728a783eba0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Auuthorization" value="${#Project#SAML_USER2}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#etag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenFull ContentID="${#Project#CID}" 
ALID="${#Project#ALID}" xmlns="${#Project#Coordinator_Schema}"
	xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" 
	xmlns:ns2="http://www.movielabs.com/md" 
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
	xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <ns4:SoldAs>
  <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
  <ns4:ContentID>${#Project#CID}</ns4:ContentID>
 </ns4:SoldAs>
 <ns4:RightsProfiles>
	<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
	<ns4:CanDownload>false</ns4:CanDownload>
	<ns4:CanStream>true</ns4:CanStream>
	</ns4:PurchaseProfile>
 </ns4:RightsProfiles>
 <ns4:LicenseAcqBaseLoc>https://dececvp.solekai.com</ns4:LicenseAcqBaseLoc>
	  <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>1</ns4:Preference>
 </ns4:FulfillmentWebLoc>
	  <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>2</ns4:Preference>
 </ns4:FulfillmentManifestLoc>
	  <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>3</ns4:Preference>
 </ns4:StreamWebLoc>
 <ns4:PurchaseInfo>
	  <ns4:NodeID>urn:dece:org:org:dece:${#Project#nodeIdRTL}</ns4:NodeID>
	  <ns4:RetailerTransaction>9f5dda6535404b28a1a520f1f0d41a97</ns4:RetailerTransaction>
	  <ns4:PurchaseAccount>${#Project#Node_Account_ID_FULL}</ns4:PurchaseAccount>
	  <ns4:PurchaseUser>${#Project#Node_User_ID_FULL}</ns4:PurchaseUser>
	  <ns4:PurchaseTime>2014-06-03T18:50:12Z</ns4:PurchaseTime>
 </ns4:PurchaseInfo> 
 <ns4:RightsLockerID>${#Project#RIGHTS_TOKEN_ID_FULL}</ns4:RightsLockerID>
</ns4:RightsTokenFull>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="STEP25: RightsTokenGet"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP25: RightsTokenGet" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_USER2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Rights Token Get - ETag25" id="9e02ec7b-c932-4834-b758-9d1a22767e52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP25: RightsTokenGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
		break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("eTag", etag);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
//		XMLbodynull        = true;
//		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	
}

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
assert context.expand( '${#TestCase#httpLocation}') == "";

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	}

 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP26: UserGet"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP26: UserGet" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="999901_concat.pem" id="0d647a5c-fada-4b07-b0fd-ab836b95fb74"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="UserID" value="${#Project#Node_User_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract User Get - Etag26"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP26: UserGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
		break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("eTag", etag);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
//		XMLbodynull        = true;
//		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	
}

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
assert context.expand( '${#TestCase#httpLocation}') == "";

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	}

 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP27: Account Delete"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP27: Account Delete" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 403 Forbidden]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="STEP28: AccountGet" disabled="true"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP28: AccountGet" mediaType="application/xml" id="3767015c-0965-42b5-8558-47b953d33641"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="STEP29: RightsTokenUpdate" disabled="true"><con:settings/><con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP29: RightsTokenUpdate" mediaType="application/xml" postQueryString="false" id="063f0b83-8ad1-4dbe-9112-5728a783eba0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Auuthorization" value="${#Project#SAML_USER2}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenFull ContentID="${#Project#CID}" 
ALID="${#Project#ALID}" xmlns="${#Project#Coordinator_Schema}"
	xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" 
	xmlns:ns2="http://www.movielabs.com/md" 
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
	xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <ns4:SoldAs>
  <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
  <ns4:ContentID>${#Project#CID}</ns4:ContentID>
 </ns4:SoldAs>
 <ns4:RightsProfiles>
	<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
	<ns4:CanDownload>true</ns4:CanDownload>
	<ns4:CanStream>true</ns4:CanStream>
	</ns4:PurchaseProfile>
 </ns4:RightsProfiles>
 <ns4:LicenseAcqBaseLoc>https://dececvp.solekai.com</ns4:LicenseAcqBaseLoc>
	  <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>1</ns4:Preference>
 </ns4:FulfillmentWebLoc>
	  <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>2</ns4:Preference>
 </ns4:FulfillmentManifestLoc>
	  <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>3</ns4:Preference>
 </ns4:StreamWebLoc>
 <ns4:PurchaseInfo>
	  <ns4:NodeID>urn:dece:org:org:dece:${#Project#nodeIdRTL}</ns4:NodeID>
	  <ns4:RetailerTransaction>9f5dda6535404b28a1a520f1f0d41a97</ns4:RetailerTransaction>
	  <ns4:PurchaseAccount>${#Project#Node_Account_ID_FULL}</ns4:PurchaseAccount>
	  <ns4:PurchaseUser>${#Project#Node_User_ID_FULL}</ns4:PurchaseUser>
	  <ns4:PurchaseTime>2014-06-03T18:50:12Z</ns4:PurchaseTime>
 </ns4:PurchaseInfo> 
 <ns4:RightsLockerID>${#Project#RIGHTS_TOKEN_ID_FULL}</ns4:RightsLockerID>
</ns4:RightsTokenFull>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="STEP31: RightsTokenGet"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP31: RightsTokenGet" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_USER2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Rights Token Get - ETag31"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('STEP31: RightsTokenGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
		case "ETag":
			etag = value[0];
		break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
tC.setPropertyValue("eTag", etag);


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = "SUCCESS"
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
//		XMLbodynull        = true;
//		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	
}

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
assert context.expand( '${#TestCase#httpLocation}') == "";

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
//		assert myXML.Error.ErrorLink.toString() == errorLink;
	}

 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP33: AccountGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_User2"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ResponseType","SUCCESS");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP34: RightsTokenUpdate"><con:settings/><con:config service="RightsTokenUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP34: RightsTokenUpdate" mediaType="application/xml" postQueryString="false" id="063f0b83-8ad1-4dbe-9112-5728a783eba0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Auuthorization" value="${#Project#SAML_USER2}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#etag}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenFull ContentID="${#Project#CID}" 
ALID="${#Project#ALID}" xmlns="${#Project#Coordinator_Schema}"
	xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" 
	xmlns:ns2="http://www.movielabs.com/md" 
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"
	xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <ns4:SoldAs>
  <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
  <ns4:ContentID>${#Project#CID}</ns4:ContentID>
 </ns4:SoldAs>
 <ns4:RightsProfiles>
	<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
	<ns4:CanDownload>false</ns4:CanDownload>
	<ns4:CanStream>true</ns4:CanStream>
	</ns4:PurchaseProfile>
 </ns4:RightsProfiles>
 <ns4:LicenseAcqBaseLoc>https://dececvp.solekai.com</ns4:LicenseAcqBaseLoc>
	  <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>1</ns4:Preference>
 </ns4:FulfillmentWebLoc>
	  <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>2</ns4:Preference>
 </ns4:FulfillmentManifestLoc>
	  <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type">
	  <ns4:Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</ns4:Location>
	  <ns4:Preference>3</ns4:Preference>
 </ns4:StreamWebLoc>
 <ns4:PurchaseInfo>
	  <ns4:NodeID>urn:dece:org:org:dece:${#Project#nodeIdRTL}</ns4:NodeID>
	  <ns4:RetailerTransaction>9f5dda6535404b28a1a520f1f0d41a97</ns4:RetailerTransaction>
	  <ns4:PurchaseAccount>${#Project#Node_Account_ID_FULL}</ns4:PurchaseAccount>
	  <ns4:PurchaseUser>${#Project#Node_User_ID_FULL}</ns4:PurchaseUser>
	  <ns4:PurchaseTime>2014-06-03T18:50:12Z</ns4:PurchaseTime>
 </ns4:PurchaseInfo> 
 <ns4:RightsLockerID>${#Project#RIGHTS_TOKEN_ID_FULL}</ns4:RightsLockerID>
</ns4:RightsTokenFull>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="STEP35: RightsTokenGet"><con:settings/><con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP35: RightsTokenGet" mediaType="application/xml" id="d51a71c0-a6da-438a-8c31-faf305926023"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML_USER2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account_ID_FULL}"/>
  <con:entry key="RightsTokenID" value="${#Project#RIGHTS_TOKEN_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB878A0AE0FD9C7DE0401F0A05991259</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1676</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FC97596FF4C235A1E0401F0A059932EA" AccountID="urn:dece:accountid:org:dece:FC97596FF4BA35A1E0401F0A059932EA" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Solekai_ACCOO3_Step13_20140624_1403622725964</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC97596FF58F35A1E0401F0A059932EA:B102A623"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FC97596FF57835A1E0401F0A059932EA" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>false</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-24T15:12:34.760Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-24T15:12:39.770Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-24T15:12:39.404Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Updated - without DST</Description>
            </Prior>
            <Prior ModificationDate="2014-06-24T15:12:34.765Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>https://dececvp.solekai.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>2</Preference>
      </FulfillmentManifestLoc>
      <StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>3</Preference>
      </StreamWebLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2768</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22261161-6bc7-4ce1-9de5-8e3c77ecdd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5708c8ca-74f2-45b2-9bc9-cfbe1195f20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4a43d6e8-ca07-4568-9f93-b2a72fc52214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467bcd49-e7ca-4002-b915-345e86bc1339</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>837c121b-6f19-461b-9299-8e878289714f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>630c4723-4d07-48c5-ab74-bdbf92dd012a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55e86fd6-e632-4ca1-9590-4566eb42bb84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8783c4c-0e05-446d-8bc7-5fe263858f2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9923a3bd-d15f-4ab6-857f-a0639fa1a068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24703264-c43b-472e-93c6-337e1b9504f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fbac267-9623-41d9-85cd-4224414b43a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04a359df-9ebc-4cef-89ff-47f20e85db0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6173e995-b539-42ef-b0a8-f93bc3b9aff5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c7503a1-6810-4489-b322-ae4b5d94cb99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c297f947-1865-43a6-bdac-b8628a4c520c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e02ec7b-c932-4834-b758-9d1a22767e52</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2d01393-7a43-4263-b68e-f7f42825c3a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ACC013" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="985c66db-b665-4558-a6e7-f81082f82087"><con:settings/><con:testStep type="groovy" name="Set_Node_NodeIDRTL"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP2: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 1" id="7bed7363-974f-4e4c-b25a-33c2f4825e35"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP03: User_Create" id="98d2c16f-f8c4-4794-a81f-490a931aa1ee"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP03: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="LLASP_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set_Node_NodeIDRTLCS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTLCS"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP04: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP05: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP05: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set_Node_NodeIDLLASP"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidLLASP"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP06: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP07: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP07: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set_Node_NodeIDLLASPCS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidLLASP"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP08: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 4"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP09: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP09: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set_Node_NodeIDDLASP"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidLLASP"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP10: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 5"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP11: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP11: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set_Node_NodeIDDLASPCS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidLLASP"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP12: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Username 6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "Acc007_Step3_FAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem 6"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP03: User_Create");

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP13: User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="User_Create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP13: User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem" id="e0b80965-5d28-444f-bd86-fb60556b82b5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#Coordinator_schema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
 <Name>
  <GivenName>User1</GivenName>
  <SurName>${#TestCase#userName}</SurName>
 </Name>
 <ContactInfo>
  <PrimaryEmail>
   <Value>${#Project#PrimaryEmail}</Value>
  </PrimaryEmail>
 </ContactInfo>
 <DateOfBirth>1980-01-01</DateOfBirth>
 <Credentials>
  <Username>${#TestCase#userName}</Username>
  <Password>testing</Password>
 </Credentials>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB878A0AE0FD9C7DE0401F0A05991259</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1943</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FC908B08299F5688E0401F0A07991C6C" AccountID="urn:dece:accountid:org:dece:FC908B0829975688E0401F0A07991C6C" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>Acc007_Step3_FAU_20140624_1403610455180</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC90C76DA68B4241E0401F0A0599139C:2E3893D3"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/LLASP_concat.pem</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>ManageAccountConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FC90C7643013753FE0401F0A0599139A" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>false</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-24T07:32:18.642Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-24T07:32:23.093Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-24T07:32:23.056Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Updated - without DST</Description>
            </Prior>
            <Prior ModificationDate="2014-06-24T07:32:18.645Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>https://dececvp.solekai.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>2</Preference>
      </FulfillmentManifestLoc>
      <StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>3</Preference>
      </StreamWebLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2768</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22261161-6bc7-4ce1-9de5-8e3c77ecdd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5708c8ca-74f2-45b2-9bc9-cfbe1195f20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4a43d6e8-ca07-4568-9f93-b2a72fc52214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467bcd49-e7ca-4002-b915-345e86bc1339</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>837c121b-6f19-461b-9299-8e878289714f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>630c4723-4d07-48c5-ab74-bdbf92dd012a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55e86fd6-e632-4ca1-9590-4566eb42bb84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8783c4c-0e05-446d-8bc7-5fe263858f2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9923a3bd-d15f-4ab6-857f-a0639fa1a068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24703264-c43b-472e-93c6-337e1b9504f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fbac267-9623-41d9-85cd-4224414b43a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04a359df-9ebc-4cef-89ff-47f20e85db0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6173e995-b539-42ef-b0a8-f93bc3b9aff5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c7503a1-6810-4489-b322-ae4b5d94cb99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c297f947-1865-43a6-bdac-b8628a4c520c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e02ec7b-c932-4834-b758-9d1a22767e52</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2d01393-7a43-4263-b68e-f7f42825c3a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98d2c16f-f8c4-4794-a81f-490a931aa1ee</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7bed7363-974f-4e4c-b25a-33c2f4825e35</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ACC014 Draft" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8857d25e-014a-40e9-a6cb-fb225dc6ae3a"><con:settings/><con:testStep type="groovy" name="Setup_Node"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidRTLCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASPCS")+";");
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP2: AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP3: FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityFAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

//for UserUpdate
tP.setPropertyValue("UserName_FAU1",UserName);

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP4-5: STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAML_USER1","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="STEP6: Create Policy TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_TOU");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem01" id="2cfc13c9-17c1-4695-a9ea-62ff3913de79"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeId");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = myTC.getPropertyValue("keyStorePath");

RestTestRequestStep testStep1 = testCase.getTestStepByName("STEP10: Create Policy EUDUC");
RestTestRequestStep testStep2 = testCase.getTestStepByName("STEP11: Create Policy EMUC");
RestTestRequestStep testStep3 = testCase.getTestStepByName("STEP12: Create Policy MAC");
RestTestRequestStep testStep4 = testCase.getTestStepByName("STEP7: Create Policy ULC");
RestTestRequestStep testStep5 = testCase.getTestStepByName("STEP13: Create Policy MUC");


soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep3, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep4, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep5, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set ULC property"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("Policy_Class","UserLinkConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP7: Create Policy ULC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP7: Create Policy ULC" id="cc17343d-c656-4b2b-8269-776e6ce4386d" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidRTL}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeidDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="STEP8: RightsLockerDataGet"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_List");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="STEP9: Create Policy LVAC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tP.getPropertyValue("SAML_USER1"));

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Policy_LVAC");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Set EUDUC property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableUserDataUsageConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP10: Create Policy EUDUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP10: Create Policy EUDUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set EMUC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","EnableManageUserConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP11: Create Policy EMUC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP11: Create Policy EMUC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDSPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set MAC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","ManageAccountConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP12: Create Policy MAC"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateAccount" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP12: Create Policy MAC" id="a1e642f5-0ad4-4209-8c68-d797fc86575a" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_Account_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set MUC Property"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","ManageUserConsent");</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP13: Create Policy MUC" id="86efa055-94c9-4b4b-9235-41b59b3bcf63"><con:settings/><con:config service="E2E" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP13: Create Policy MUC" id="cc17343d-c656-4b2b-8269-776e6ce4386d" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdLLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASP}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:${#TestCase#Policy_Class}</dece:PolicyClass>
      <dece:Resource>${#Project#Node_User_ID_FULL}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#nodeIdDLASPCS}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="${#Project#Node_User_ID_FULL}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#Node_User_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#Project#Encoded_PolicyClass}${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#Node_Account_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SetupNode and Audience" id="4d80ef6a-cbac-456a-a604-39263fa00582"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidRTLCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidLLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDSP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDSPCS")+";");
//tP.setPropertyValue("audience","");</script></con:config></con:testStep><con:testStep type="groovy" name="STEP14-15: STS Exchange" id="467abeea-823d-47a2-bec0-7f4c9f518102"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_Exchange");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("duration","365");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");

tP.setPropertyValue("SAML_USER1_NEW","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="restrequest" name="STEP27: Account Delete" disabled="true"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STEP27: Account Delete" mediaType="application/xml" id="0fdb6c42-d0d5-4eec-aff1-840b09bc8b20"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 403 Forbidden]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#Node_Account_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB878A0AE0FD9C7DE0401F0A05991259</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB878A0AE0F59C7DE0401F0A05991259</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB878A144770E771E0401F0A059903CE</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1725</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">&lt;RightsTokenList RightsLockerID="urn:dece:rightslockerid:org:dece:FCBB0C4D71726BCFE0401F0A05994B93" AccountID="urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93" FilterClass="urn:dece:type:viewfilter:lastmodifieddate" FilterOffset="0" FilterCount="0" FilterMoreAvailable="false" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"/></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB87950309C02399E0401F0A0599218E</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8794D955790D1DE0401F0A05992190</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityFAU_20140626_1403776131200</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB87950309CD2399E0401F0A0599218E</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"FC9393FF9F135BB4E0401F0A079950C0:74D3CFE7"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>ManageUserConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FC9388282B415DD1E0401F0A059958D5" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>false</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-24T10:53:14.793Z" CreatedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-06-24T10:53:18.611Z" ModifiedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-24T10:53:18.554Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Updated - without DST</Description>
            </Prior>
            <Prior ModificationDate="2014-06-24T10:53:14.797Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>https://dececvp.solekai.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>2</Preference>
      </FulfillmentManifestLoc>
      <StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd">
         <Location>http://dececvp.solekai.com/media_download/urn:dece:type:mediaprofile:sd</Location>
         <Preference>3</Preference>
      </StreamWebLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>2768</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>22261161-6bc7-4ce1-9de5-8e3c77ecdd6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5708c8ca-74f2-45b2-9bc9-cfbe1195f20c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4a43d6e8-ca07-4568-9f93-b2a72fc52214</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467bcd49-e7ca-4002-b915-345e86bc1339</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>837c121b-6f19-461b-9299-8e878289714f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>630c4723-4d07-48c5-ab74-bdbf92dd012a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>55e86fd6-e632-4ca1-9590-4566eb42bb84</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b8783c4c-0e05-446d-8bc7-5fe263858f2f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9923a3bd-d15f-4ab6-857f-a0639fa1a068</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24703264-c43b-472e-93c6-337e1b9504f3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fbac267-9623-41d9-85cd-4224414b43a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>04a359df-9ebc-4cef-89ff-47f20e85db0b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6173e995-b539-42ef-b0a8-f93bc3b9aff5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7c7503a1-6810-4489-b322-ae4b5d94cb99</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c297f947-1865-43a6-bdac-b8628a4c520c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e02ec7b-c932-4834-b758-9d1a22767e52</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2d01393-7a43-4263-b68e-f7f42825c3a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cfc13c9-17c1-4695-a9ea-62ff3913de79</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>86efa055-94c9-4b4b-9235-41b59b3bcf63</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4d80ef6a-cbac-456a-a604-39263fa00582</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>467abeea-823d-47a2-bec0-7f4c9f518102</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Copy of Sanity_TestSuite" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="End_To_End" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="35fffc97-fe4d-4437-9d89-331d43fb33b9"><con:settings/><con:testStep type="groovy" name="Setup_Node"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue("nodeidRTL"));

tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
//tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("AccountCreate")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="FirstUserCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityFAU_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

//for UserUpdate
tP.setPropertyValue("UserName_FAU1",UserName);

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("FirstUserCreate");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridfull = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDFULL",nodeuseridfull);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS_SAML2");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_FAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForFirstUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_FAU1_1yr"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlfull = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLFULL","SAML2 Assertion="+samlfull); 
</script></con:config></con:testStep><con:testStep type="groovy" name="AccountGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","1");
myTC.setPropertyValue("ResponseType","SUCCESS");
def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Update_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def UserName= "SanitySAU1_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);

tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:standard");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#YOUTH_DOB_XML}'));

//def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
//tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Standard");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridstandard = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDSAU1",nodeuseridstandard);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlstandard = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLSAU1","SAML2 Assertion="+samlstandard); 

</script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForStandardUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet_for_UserUpdate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDFULL"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserUpdate_FAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Update_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("GivenName","Raju");
myTC.setPropertyValue("SurName","Alluri");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet_SAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDSAU1"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserCreate_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName= "SanityBAU1_"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");
tC.setPropertyValue("UserClass","urn:dece:role:user:class:basic");
tC.setPropertyValue("MeetsAgeOfMajority","false");
tC.setPropertyValue("DateOfBirth",context.expand('${#Project#CHILD_DOB_XML}'));

def NODEUSERIDFULLDecoded = URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
tC.setPropertyValue("LegalGuardian",NODEUSERIDFULLDecoded);

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserCreate_Basic");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def nodeuseridbasic = tP.getPropertyValue("Node_User");
tP.setPropertyValue("NODEUSERIDBAU1",nodeuseridbasic);

</script></con:config></con:testStep><con:testStep type="groovy" name="STSCreate_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def UserName = tC.getPropertyValue("UserName");
tC.setPropertyValue("UserName",UserName);
tC.setPropertyValue("Password","testing");

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("STS");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

def samlbasic = tP.getPropertyValue("SAML");
tP.setPropertyValue("SAMLBAU1","SAML2 Assertion="+samlbasic);

   </script></con:config></con:testStep><con:testStep type="groovy" name="CreatePoliciesForUser_BAU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("PoliciesForBasicUser");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UserGetList2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_GetList_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","3");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserGet_for_User_Delete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NodeUserId",tP.getPropertyValue("NODEUSERIDSAU1"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("User_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserValidationTokenCreate_User Name"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserValidationTokenCreate_Account_User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("TokenType",tP.getPropertyValue("urntokenType_ResetPassword"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="UserValidationTokenCreate_PrimaryEmail"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("UserValidationTokenCreate_PrimaryEmail")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("TokenType",tP.getPropertyValue("urntokenType_ResetPassword"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="RightsLockerDataGet_DownLoad_Query"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_Download_Query");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsLockerDataGet_Metadata"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_Metadata");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsLockerDataGet__Reference_Query"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_Reference_Query");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsLockerDataGet_List"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_List");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsLockerDataGet_without_DST"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsLockerDataGet Request_without_DST");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenDataGet_ByALID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RTGET_ALID_R3_EXAMPLE_ALIDVersion_960500.txt");
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDataGet Request_ALID");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenDataGet_ByAPID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

testCase.setPropertyValue("APID","urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4");
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

//testCase.setPropertyValue("ResponseType",testCase.getPropertyValue("ResponseType"));

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDataGet Request_APID");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenGet"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenGet_without_DST"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request_without_DST");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenGet_for_Update"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenUpdate"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenUpdate Request");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));

def rlid = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API").getPropertyValue("RightsLockerID");

testCase.setPropertyValue("RightsLockerID",rlid);
testCase.setPropertyValue("ALID","urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt");
testCase.setPropertyValue("SoldAsBundleID","");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");

def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","RetailerTransaction_1_node0799_RetailerNode");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTUpdate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node DLASP"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeId",tP.getPropertyValue("nodeidDLASP"));

//tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeidDLASP"));
tP.setPropertyValue("audience","");

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamCreate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamCreate");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("decodedNodeUserID" ,URLDecoder.decode(tP.getPropertyValue("NODEUSERIDFULL")));
tC.setPropertyValue("RightsTokenID",tC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("nickname","Raju");
//tC.setPropertyValue("transactionid",);

//tC.setPropertyValue("rightstokenidFULL",callTC.getPropertyValue("rightstokenidFULL"));
tC.setPropertyValue("expectErrTypeStreamCreate","SUCCESS");
//tC.setPropertyValue("sCbodyRequestingUserSetting",);
//tC.setPropertyValue("sCbodyTransactionIDSetting",);

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamListView"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamListView");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamView"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamView API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamView_for_StreamRenew"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamView API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamRenew"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

Date d=new Date(new Date().getTime()+7200000);

String s=new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").format(d);
tP.setPropertyValue("ExpirationDateTime",s);
def myTC;
if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
 {
 	myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamRenew");
 }
 else
 {
 	 myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamRenew_06");
 }


myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamView_for_StreamDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamView API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="StreamDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("StreamDelete API");

myTC.setPropertyValue("TCaseName",tC.getName());
myTC.setPropertyValue("TSuiteName",tS.getName());

tC.setPropertyValue("errorRespTypeStreamView","SUCCESS");
tC.setPropertyValue("expectStreamStatus","active");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node RTL"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeId",tP.getPropertyValue("nodeidRTL"));


</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate-1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("PINodeID","urn:dece:org:org:dece:RET");

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());


//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );
testProject.setPropertyValue("Node_OID","RET");
assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="DMRCreatePost"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMR GET")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRListGet"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRList GET")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def DMRRequest;
 if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
 {
 	DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRDelete")
 }
 else
 {
 	 DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRDelete_06")
 }

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRCreatePost-1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRGet-1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMR GET")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRUpdatePut"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def DMRRequest;
 if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
 {
 	DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRUpdate PUT")
 }
 else
 {
 	 DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRUpdate PUT_06")
 }


DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate-2"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="DMRCreatePost-2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRConsumePost"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRConsume POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate-3"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="DMRCreatePost-3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRLeaseCreatePost"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRGet-2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMR GET")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRLeaseConsumePost"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def DMRRequest;
 if (testProject.getPropertyValue("versionMinor") != testProject.getPropertyValue("versionURLEncode"))
 {
 	DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseConsume POST")
 }
 else
 {
 	 DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseConsume POST_06")
 }


DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenCreate-4"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenCreateRequest");

TsRightsXMLReq.setPropertyValue("TCaseName",testCase.getName());
TsRightsXMLReq.setPropertyValue("TSuiteName",testSuite.getName());

//RightsToken Request and properties

testCase.setPropertyValue("ALID","urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt" );
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt");
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:retailer");
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","1");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","3");
def node_ID = context.expand( '${#Project#Node_ID}' )
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+node_ID);
testCase.setPropertyValue("PIRetailerTransx","transcation");

def NODEUSERIDDecoded = URLDecoder.decode(testProject.getPropertyValue("NODEUSERIDFULL"),"UTF-8");
testCase.setPropertyValue("NODEUSERIDDecoded",NODEUSERIDDecoded);

def NODEACCOUNTIDDecoded = URLDecoder.decode(testProject.getPropertyValue("Node_Account"),"UTF-8");
testCase.setPropertyValue("NODEACCOUNTIDDecoded",NODEACCOUNTIDDecoded);

testCase.setPropertyValue("PIPurchaseAccount",NODEACCOUNTIDDecoded);
testCase.setPropertyValue("PIPurchaseUser",NODEUSERIDDecoded);
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTCReq","OK");

def runnerRTC = TsRightsXMLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="DMRCreatePost-4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRLeaseCreatePost-1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseCreate POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRGet-3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMR GET")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRLeaseRenewPut"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseRenew PUT")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="DMRLeaseReleasePost"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def DMRRequest = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("DMRLeaseRelease POST")

DMRRequest.setPropertyValue("TCaseName",testCase.getName());
DMRRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerDMR = DMRRequest.run( null , false )

assert runnerDMR.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenGet_for_Delete"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="RightsTokenDelete"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties
testCase.setPropertyValue("RightsTokenID",testCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectErrTypeRTLGet","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("FeedRTDReq","OK");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testProject.getTestSuiteByName("End_To_End").getTestCaseByName("RightsTokenDelete Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = FeedRTLReq.run( null , false );

assert runnerRTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountGet_for_Acct_Delete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Get_API");

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("UserCount","2");

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="AccountDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("End_To_End").getTestCaseByName("Account_Delete_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:SARVAJEET_CID_DONT_TOUCH_4.txt:AUDIO_Number_4</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>decodedNodeUserID</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>errorRespTypeStreamView</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectDBCreatedBy</con:name><con:value>3710</con:value></con:property><con:property><con:name>expectDBDeletedBy</con:name><con:value>0914</con:value></con:property><con:property><con:name>expectDBStatus</con:name><con:value>deleted</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTLGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTUpdate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectStreamStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTDReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FeedRTUReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>3</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>nickname</con:name><con:value>Raju</con:value></con:property><con:property><con:name>NODEACCOUNTIDDecoded</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE2518F78DBE57FCEE0401F0A0799731F</con:value></con:property><con:property><con:name>NODEUSERIDDecoded</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsLockerID</con:name><con:value>urn:dece:rightslockerid:org:dece:FB8AB24B907E7453E0401F0A059947D1</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		<ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:FB8AB24B90767453E0401F0A059947D1</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:FB8AB24897927CE7E0401F0A059947D5</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1590</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ALID="urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt" ContentID="urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <DiscreteMediaRightsRemaining FulfillmentMethod="urn:dece:type:discretemediaformat:bluray:packaged">1</DiscreteMediaRightsRemaining>
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreationDate="2014-06-11T10:17:39.471Z" CreatedBy="urn:dece:org:org:dece:RET">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModificationDate="2014-06-11T10:17:39.477Z" ModifiedBy="urn:dece:org:org:dece:RET">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FB8AB2C3C90E66E9E0401F0A07997E15</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:retailer</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>SoldAsBundleID</con:name><con:value/></con:property><con:property><con:name>SoldAsContentID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value>FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value>urn:dece:streamhandleid:org:dece:FB8AA8A89C5BB1B5E0401F0A07997E1D</con:value></con:property><con:property><con:name>UserClass</con:name><con:value>urn:dece:role:user:class:basic</con:value></con:property><con:property><con:name>UserName</con:name><con:value>SanityBAU1_20140611_1402481727586</con:value></con:property><con:property><con:name>discreteMediaTokenOid</con:name><con:value>FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>discreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:FB8AB249A8E95044E0401F0A07997E47</con:value></con:property><con:property><con:name>mediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>fulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>headersCount</con:name><con:value>13</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"ED683B3F58B9BE51E0401F0A0799277A:81423F5A"</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140602_1401688279493</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>993282f6-9376-4ef1-a63a-3c8080ed376d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d586b16a-25ab-42e7-843f-4615e6e5b6af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eceab473-b205-4123-8cc3-1e3b1cc51d7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8328e7ca-1a6e-4e28-8384-b121130eac4d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a27182fe-500c-4e26-993d-4cb19e21c90d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>08854fcf-8c23-4d91-8cb0-6eeba6e67202</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2b06ca0-8a78-484a-8a80-4f7e90347f6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>34ab57d8-3b8f-411e-8680-2321b8738d02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a1adeb6b-cdb1-4626-b4e7-f9e0a0183d3e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c979bfff-1f78-4e6b-8918-15c2b7a131cb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fba942a3-9a63-4ca6-8e70-bec8c08037e3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e2d6d738-2e6e-4dde-8f2a-8fc6336dfdda</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cdae7e2a-7170-419e-bc22-f1c923e6450b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2e520e83-1683-4a8f-91d3-34704132b3e9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6e1923d8-174f-4cdd-8702-b982fd605089</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c842eac7-32fb-4374-b04d-65e623e4ed47</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c36a165e-6dec-497b-8e32-8d14e29ac632</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a5fbd9f8-d908-4272-a96e-d6e1075dff9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e85e3845-3c37-4d2b-a7f6-32e6eac909d1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a06bc5cf-ed3a-4713-9a46-01e229ded4f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>33d662c5-cf68-4bf1-84e2-f61756fd6850</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30ea4dcd-d69f-40cc-aff4-684ac9d09922</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a8566bf-47ae-4e10-b320-bbf09c40408a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3614d810-6385-4bea-8a78-1828e0491451</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e43a6cd6-fe21-4849-a310-232733748b49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>58c8ec97-8bb8-4c33-bfc5-5e1f7d477b5f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>845d4575-df4d-4969-943a-069a58ea7c22</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>641277d0-cf83-4521-a8f0-dad925ecef57</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>654fb05c-12b8-410b-8094-6c16f0c3dc54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26ce0eb2-48e9-4166-b1b1-b2e8c578d365</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee29dc64-dc2a-43ef-8c8e-a0a8fe20bd0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>57100200-80ad-4429-b054-c9c5bc20096e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c9f42c9-23c7-4942-a8a7-14e703ea1943</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ad2ebec4-c400-4d5b-afd9-f4de7bc063ef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>54e78513-d465-44df-8252-92ee0978500c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fee93a4e-4d19-4cb9-8c5e-a2a69a33cb81</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37b32451-bdd1-4bf2-8926-976a7d1361b4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8fa0af99-986c-4e0e-b456-ab093d385bc0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0bcd18d2-e5a2-4bc0-9ce0-4d733266cc91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>de4341f4-5493-487f-9230-f65f6a55948f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e5868ed5-35fd-406e-b5a1-de87607471fc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ca9cafd2-27b4-4550-b9d4-a3db56428b1a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7db88c19-231b-43f2-94b8-bb5b7c90387e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03fed95b-2b03-4be0-a370-b942c71565c8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4f6f150c-c986-4c9b-8795-24c3fffc1d54</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53a36455-4e2e-4148-9dbf-f29ccf9ce76c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>42a14792-4f3b-4f05-8b37-74efb90f0a0c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8c35398c-cf4a-4276-9009-bc1a841891b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>05ba3b8b-4eea-43cb-93b8-42183164ce14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd2f19ee-9734-4ad4-82bd-8de96980e012</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8b6a8a72-1aa0-433b-8b67-f6265ad665eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a6da0346-f0a2-4bd7-b89b-d8fd8b2f810a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8f993e64-d8e3-4657-94e3-55c8a4adb005</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b192b610-7aac-4e72-b1d8-e500d4101128</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27660d2c-3527-45e6-b0a1-353bf6fbb000</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b9c578e9-0534-49db-860c-24cf71ccd8c7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa59c7b6-e502-41a8-9d23-98a2a151e080</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7be529f-62d1-41c8-b7f4-16ab0ea0e434</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4905801a-966f-48ae-9cc6-fdba3dcf454a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>387ecece-6dee-46e5-840b-f3d3ff80981e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee51222c-116f-4ff0-9742-738402d2a150</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30818245-c276-47a8-be96-34ba02a04f43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>359849aa-8ffc-4248-a32b-f8d07b4d4f4f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79239680-7c43-47af-921d-fd7b512acafe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237bfab2-0573-4191-8244-97d01999e52f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fee30217-c044-4be0-ace7-a7418f5218c1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>89847499-adb5-4015-8748-6fa4b1b90982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0aa447b-9084-4f1d-9208-8532900c744a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce202508-1f69-4df9-a800-855eb1c3e279</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6a3727d3-5d31-4d4e-8855-4bcdcfa4fcdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>caa27362-f0a8-47ac-9e41-9930a7b160d5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b201f987-2f4b-4917-a114-b3bfb2d637ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fa3d5c01-2a57-4835-b12c-b559c4b601af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite 5"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true" id="48a3ce99-bc8b-497c-be72-9d367e0c5fa1"><con:settings/><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements><con:requirement><con:id>Policy-1000</con:id><con:name>ViewControl trumps Parental Control</con:name><con:description>In cases where both a parental control policy and the ViewControl settings of a Rights Token are in conflict ViewControl shall take precedence over all other policies. For example, when a BlockUnratedContent policy is in effect and a RightsToken ViewControl property names the user involved in the policy evaluation step, the named user shall have access to the content identified by the rights token.,</con:description><con:status>In Scope</con:status><con:links/><con:testCases/></con:requirement></con:requirements><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Sanity_Acc_Create_20140626_031849</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>03-Jun-95</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-06-03</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:RLGET_DOWNLOAD_R3_EXAMPLE_ALIDVersion_611142.txt</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:LLASP;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>certspath</con:name><con:value>C://certs/</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>01-Jun-03</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-06-01</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:RLGET_DOWNLOAD_R3_EXAMPLE_CIDVersion_611142.txt</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Coordinator_Schema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>DisplayName_New</con:name><con:value>Sanity_Acc_Create_new20140611_034458</con:value></con:property><con:property><con:name>Encoded_NodeAcc_Id</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>Encoded_NodeUser_Id</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Encoded_PolicyClass</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>eTag</con:name><con:value>"FC975B6169F72EDCE0401F0A0599366F:12AA85AD"</con:value></con:property><con:property><con:name>ExpirationDateTime</con:name><con:value>2014-06-11T17:46:57.147Z</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:deqa1/dec2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>NeustarVM</con:name><con:value>NO</con:value></con:property><con:property><con:name>NODEACCOUNTID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE45EA13333F27FD3E0401F0A07996EE5</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>NODEUSERIDFULL</con:name><con:value>urn:dece:userid:org:dece:FC35EFD05D180373E0401F0A05990F53</con:value></con:property><con:property><con:name>Node_Account_ID</con:name><con:value>FCBB0C4D716A6BCFE0401F0A05994B93</con:value></con:property><con:property><con:name>Node_Account_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FCBB0C4D716A6BCFE0401F0A05994B93</con:value></con:property><con:property><con:name>Node_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>RET</con:value></con:property><con:property><con:name>Node_User</con:name><con:value>urn:dece:userid:org:dece:FC35EFD05D180373E0401F0A05990F53</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>FCBAC96265E4FE2FE0401F0A05994428</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>FC96F7ED97716526E0401F0A0599717E</con:value></con:property><con:property><con:name>NODE_USER_ID2_FULL</con:name><con:value>urn:dece:userid:org:dece:FC96F7ED97716526E0401F0A0599717E</con:value></con:property><con:property><con:name>Node_User_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FCBAC96265E4FE2FE0401F0A05994428</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:8001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:8001</con:value></con:property><con:property><con:name>rightsLoclker_ID</con:name><con:value>FCBB0C4D71726BCFE0401F0A05994B93</con:value></con:property><con:property><con:name>RIGHTS_TOKEN_ID</con:name><con:value>FC97596FF57835A1E0401F0A059932EA</con:value></con:property><con:property><con:name>RIGHTS_TOKEN_ID_FULL</con:name><con:value>urn:dece:rightstokenid:org:dece:FC97596FF57835A1E0401F0A059932EA</con:value></con:property><con:property><con:name>SAML</con:name><con:value>pVZdb+I6EH3fXxFlH6+CkxC+ooIEgd6ypSwlbbe7LyvjDOCSONR2AvTXXyc0FCjt7W4lJOTJeObMzPHMnAkchbbbFgK4pDHT+t2m/juYVCekgcFwyvWJ4dRNYtTLQWAocbVWmeAy1Ce61hcigT4TEjPZ1G3TcgyzatjVG7PhVkzXqpUq1fIvXbsDLpRppVIydW0dhUy4udumnnDmxlhQ4TIcgXAlcf321cBVmi4uMOmtsy3K3CFvzaVcugiRUgAEwpCUSByhM3SgcxYI16czhmXC4dlnIJr6893ValValUsxnyHbNE1kNpDSCQSdfdVbX4rLEPTZNN6ePcxiRgkO6RPOQF2BnMeB1g5nMadyHr1h2kKWmZk2YE0MYjnsq45eHOToPmjpACQX2BBzbBXGxjAFDoyAdjvuN/WvH6vg9u4Nx0xMYx6Jo/OfQQKWQhgvITBEEVmB7uMWT6SrdQbE7TMSJoKmMMxossQEhDbiMKXrARWKfIHQ8vJra6F+tGAZkD8pyxnax6qgoxPZ6dIZCPk3Nduv19bKHQ4TaCWD+sXg0h9tvsleLQwi5vGujVYLeeM0cwj7yltQu3I/n4/JuuPW8yXq/LuY8Im8H6Td+ydr4aWpD+hiRL1Z7I+Il95f8mRq13o/1nflB789fUAz1Ond3/+IOtFYJCl6WGyeesON+fD4RUzhIo5h5CXjy02ZDujFXWB2fvHr6OpiKZLr287GXF7e4vurweK6Owru7PO1U+4Ol9f/pF7PIwtvVHm4JFZt2J58+XmR1oPho3n18+p7YzDcoN5t8yWm/RgOhUVL8JPJAxBZHDN69LvauaoXlu+3l0xCA2Oaq7rLrEcJCUzqrexW1lrcRDUgGriqmNvzuddpe42qXa30nPOefd4zHdM6N9tmpdFwHLte9KAtiiOIXsymNPOVddktf94HSCJXAAuAG2mckDkI/R2LXSyx1mdj9ThiJuAmVl18lVg8fqrW6pUFtTjQFSvL8sKqPOnaMJbf2XfenkrgB63bsg9a9xgIXVLI+ntGcKEYLqTKxSNOExlapRSXGCRqAvCsCbu2U68gQaNlCBlSFMVBEkJpOV/mmUFi+28bmIhcOu7d5A/vzbiOvxUpUDoBzRREFksHVBnhxAwyi0DeDriyH3Bhvp0ENHtfKp+SU7JFcvjphSYZP3Yc6Q7a/qgAvdP9g7u/Pf+39bcG/t715xwPPhH14LNRKxJ98vrrm+gdHqBjCu4cBSndc1vsL2okq4bdKh7QIy49lpI0TfInU8uGEVfmkZpJFvKBJGqibG7iBTC0M4E+NNB3qI887+SH+BI5Z77EEiL1wLX8+IFtzgeRbXN91ZnWH10VD1yqvElYy1MyL1RLX4b43b2QuCTTU+KR+lvFPHgp1wlbe35UnGqFk5TNslM2ujdvkILEyixVsybm+8ZPGTjl/FC4S/IOi1RsmiQS3v6iZUOkqWNC4oTJflfPBfuDLccpN0twX5RemcmH5/M2tBZvbkNqVvtqxERY3+nS/1c2aE4XAnq2dOVYmvpaLffKOZvtDdJngEeztGN6TrdmVdvVjnc4SzuN8i6BB5G0XolfS/ZyevweWv8B</con:value></con:property><con:property><con:name>SAMLBAU1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQDwKBqCCFAru0tKVAu0tfrlxnQtxNHBo7Afrrrx0aCpT2sldCQp6MZ87MHB/7nKE4slyPMUg5Sagy6LbUf8BHVqNhGZpZh4ZmOw1bQ/gp0Kwn2687hg9V31GVAWMZDCjjiPKWahmmrRl1zTSnpuGaNdeqV6xq/VFVHiBlIrRwqRiqsoojytwibUvNUuomiBHmUhQDczl2J9710BWeLioxqe3zDcoiYdoOOV+4uo4rPmCIIlzBSayf63s+5z5zJ2ROEc9SeMvps5b6tne5XFaW1UqSznXLMAzdaOrCx2dk/l1tfys3gz+gQbJZXyCaUIJRRF6RBHUNPEx8xYvmSUp4GH8S2tRNQ4bWYIU1bNr0u6q/JyjQnRhpD2TKkMZCZJbBxhBAChSDcj8etNTvp01ws3eaIsqCJI3ZwfrvIAHNIUoW4GusrKxEd3rEI+1qnwN2BxRHGSM53EiaLBAGpoxSCMhqSJggn8+UYvzKiokfKVkG+G/Gcq7vYhXQ9SPd6ZI5MP5/ZrY7r02UBxRl0B452eNseNP9adTOXsKXX1eXd9XJ2rPh6b5VQNh13oDajvttfUjWLbfeNo1eEY6iB8tMnEXv7Gyqr2vxECf2c5etzvJe//711vZ/XAbBrDt7Cu7DYRQvqV69fb4aOWuY9fS7x7BuRtSqw+zby8wOf3SMsxk5G/28zZ+hPs4zh/x6WP5uDnxUHV4vepeLKzqtLkfr1St/1v88end2ii8e7lKj3895dWjMkqh23xx/uwmmbIwvnYE3zB+HzZoR/mm917Rbw76xlIRJ9vQMmJdLSY9BV+mLeSH+tbxIC/G1oHB1F1KjGAfK1bbcJaXFzYQAEd8Vw9ys+16/1vD6dqdnd+qW1e0ZtmH2Dc+oNZuOedErNWiD4gDiRUIDInNJld3w52uAOHYZUB9SLU8yHAJTv4jYRRwpAzoWhyOhDKaJUHEzq4aOIErjNV9ZKMywuSKvHK0DVblJ+C29Tb2AQ7ov3dU96R4DJgsCUt8lwZlgOOOiFy8oz3hkVnJUoZCJGyCVIuxadqOmMxIvIpBI9Tjxswgqi3BRdEZnm39LaBErrOPetDh4n9Z1+K1sgfDxiXRgspYOiDHCkTvILAv5vOD6bsFleC/ziTxfop88JXiDZP/TO00kP7Yc6Q69yagEvfU9ba/oxsed+heI9MNmbBP5OdlJW96k4nIQ0tEuR/mCKi+VLM+zYniOlMVUhNeFOpr6BHAmtG09Tf4A1bch9JOuli3qg8xb+z6+jId0whGHWFBNKZYnvCsmwOS7YiDOyOrUR8teStE3Dit+zHYRieeHRPzlCwW7WPoJ80j8LZPUfx/XkVg7eUSd4jHBCZ3LlbxE1p+QAiciLBGql6S7wY8FOJZ837ht8hYLF2x6yjh8/kWRctZSEcZJRvmgqxaGXYktcPL1Atx3pw9hChl/u5dX7NN7+ff1cCLELkbq1pf8t7NGCrpgUOX1X2BpqSvxzBTJ6XxH0t8A7ql6p+F1LLvTNJy6Y9equ6puO11z28C9StofzB8tOz09PA/tfwE=</con:value></con:property><con:property><con:name>SAMLFULL</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyLKeaxCLoRLooLEdZcWTjkE6OVlZZwhcQsOxA6X/vq1Q5MCpd2elZCQJ+OZb2Y+f/Y1Q8uF5TYYg5iTiCq9dk39x/FNHyPT0KpWparZ8yLWnKJpaQiZM7OMKnapglSlx1gCPco4orymWoZpa0ZZs+yxabh21S3ZBcMpPqnKFGImQguXgqEqu+WCMjdNW1OTmLoRYoS5FC2BuRy7XmPQd4WnizJMav36gDJNGNdDzleuruOCDxgWC1zA0VK/1k98rn3meiSgiCcxvOX0WU1927vdbgvbYiGKA90yDEM3HF34+IwEP9X6j2wz+D06jw7rFqIRJRgtyCuSoAbAw8hXGosgigkPl5+ENnXTkKE12GENmzb9qervCVJ034x0AjJmSGMhMrNgI5hDDBSDMhn1aurP703wsHccI8rmUbxkZ+s/gwR0A4toBb7GssoydN+PeKFd9WvAbo/iRcLIBn5JmqwQBqYMY5iTXZ8wQT6fKen4lR0TP5KxDPCfjOVaP8YqoOsXutMmATD+f2Z2PK9DlClaJFDfx9brDJLdSwLPFevXOCy3B0O/vHu0J7UUwrHzAVQ+7rf1OVlzbr1t8sL+cGDfWDePd8P55JaOWfGW8L/3xc49bRL+ENyMbp1Z8aq99aYPzenM63SG0ytnfmeV+FXELeIEWB/2CXmdbn+QV+fJuWmFuPEItzvv1qgO/nIG1eljq9+i2Hqd7idB+NBe8vUoapIhVO7bk9EV7Nf9KbZ/P9w3dqUr9BQ9N59mmx/ehHfuoTyb6N7vYHQVjDovtfeajms4NWaS4CWzZ8A8W0p69NpKV8wL8a/lRVqIr81TV3clNYpxoFyty11SWtxECBDxXTHMw7rbcopVy6pWqpbZ7DSbHcM2zK7RMCqOYzWKdqZBBxRnEFsRnROZS6rsgT9fA8RLlwH1IdY2UYJDYOoXEduII6VHR+JwRJTBOBIq/rxmQQhr5L+swaSUMT92nsvhVlV+RfyO3sWNOYf4VLmLJ8o9AkxWBKS8S34zQXDGRSvWaJPwhVnYoAKFRFwAsdRg17KrJZ2R5WoBEqi+jPxkAYVVuEobo7PDv1AhzFLrqDNOz92nZZ1/yzogfHwiHZispQliinDhCrKzQj4vuHxccBa+kfhEHi/RTh4TfEBy+umdJZIeOUVERRnk3PPccBJVPy8oT+RvCM55nl/QQt/F6a9n41ijwrqQbDZJOoCKVLZYhNeFwJm6BzgR8rQfRy9A9TyE/q3bIUd9ljm3n+JLeEg9jjgsBV2UdPmNp4EHTD4NeoLmu+++O05Sir5x2PFLttZCvCAk4i8fGdjF0k+Yh+JvG8X++7guxDrKI+oU7wFOaCBX8h7Yf0IKHImwRAhXFB8HvxTgUvJTY97kHAsXbJolHD7/okhFqqkI4yihvNdWU8OxSqY4+X4F7rvThzCpEr9drTv26dX6MOh7Qq+WSM19yX87aySlCwZV3uAplpq6Ey9FkZwGR6r8BvCDMDvdptnpdu1Wp5oLc8lxSp1qN2/gSSX1D+aPlqOenp+H+r8=</con:value></con:property><con:property><con:name>SAMLSAU1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH69CYpLwERWklJS9tHS35aPL3pcrY5vgNrEhdoD2168dGgqU9rJXQkKejGfOzBwf+0LANKkGoRAkk5Qzoxe1zH9dH7oNt16zqj6GlgcaUws6oGEBhDEGBNdrLjCNnhA56TEhIZMts+oAz3JqFgAj4ATAC/xmBTi1f0zjgWRChVYuFcc0NmnCRFCkbZl5xgIOBRUBgykRgUTBMLztB8ozgCUms32xRVkkzNpzKReBbaMKJogkCaogntoX9oHPBRbBkMYMyjwjrzmxaJmve9frdWXtVngW21XHcWynaSsfLGj81Wx/KTcT3GMzvl13IOOMIpjQF6hB3RI559gIk5hnVM7TD0IDGzg6tEU2yELAY19N+y1Bge7MSAcgMwEtMYegDDYgM5IRhogxHvRa5tfzJrjdO8ogEzOepeJo/WeQCFuRhC8ItkRZWYnu/Ign2tW+ICjoMZTkgq7Id02TBUREGHcZmdFNnwpFPiyMYvzGRqgfLVlG0J+M5cLex6qg2ye6E9GYCPl/ZrY/r22UB5jkpM2WXhyBfn80SGYDd9KXY5kvr6/BarRuFRD2nbegduN+XR+Tdcet100w/7VcxI/586DHB5fRJIyy+/vrl2VUh9e1xyGu/r1Ke53B453fmIwfBtNxv/tg30S3v0b19OdN1cMTMOhe4bE3eoy/NPOnZy+ezBrk6tvP+18+ybwbv+u8XI/Ad3+U4eaEXc3vOnzyc8P+ai6n39b9F2+xFvOOkyRrPpmNq0P3dj2BN4B9mY6SWvNlbY9vwb0cR6vpE2+91bRfw6GxlIRhPn0kSJZLTY9eZHTVvKD8XF60hWJrVrgGC61RQhImzbbepaUlyJUAURyoYW7X3bDrN8KwHrmdq0u/4V05ngO6TujUm023GnZLDdqiOILY4WxGdS6tslv+fA4QpYEgDJPMWvEczYkwP4kYQQmNHhuow8GZICOuVJy6z2LtLprzpyUDfrp5cdx4HiewYRrfufzBfmThTJLsULrdA+keEEQXlGh91wQXiuFCql4s4SqXCaisYIWRXN0AmRbhoOo1fFvQdJEQjdROOc4TUlnMF0VnbLH9r1oQicI6uBoVB+/Duo6/lS1QPphqB6FruSRqjOTEHeSVhXxccG2/4DJ8mGOqz5fqp8wo2iI5/PRGE82PHUeifji8K0HvfM/bq7rxfqf9CSL7uBm7RHhF99KWN6m6HJR0tMtRLmFlWclXq7wYXl3LYqbC20odgT0kKFfa9jziT4TZuxD2WVfLDvVR5p39EF8u52wooSSpoppRLM94VwyJ0O+Knjojm3MfLQcpVd8k2chTtk6inh8a8acvFBQg7afMd+pvzTP8Nq4TsfbyqDrVY0JSFuuVvkSePyAF4iosVarHs/3gpwKcSn5o3DV5h0UqNk1zST7+Ymg5a5kQIZ4z2YvMwrAvsQVO+bwgwZvTuzCFjL/eyxvx4b08ue0Pldil0Nz50v92tmhBF0RMff0XWFrmRj0zVXIW70n6K8ADVb9shJdV77Lp1Gt1z3d3qu43m149euPyQSXtd+b3lr2eHp+H9m8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIhQBJVJC4tCjdLW2B3vbLkesM4BIcsB0u/fpjhyYFSnu6j4SEPBnPrJlZXvYZR7PYCZqcAxMkoVrYqev/OC9lr+y5yHA8Gxnui1M1vLLtGlGlUnNw2Y7cl7KuhZynEFIuEBV13bGkg1U1nOrQ8gPXD+xyqeo7f3TtARiXoaVLydK19SymPMjS1vWU0SBBnPCAohnwQOBg0Ly+CqRngHJMeuNsizJLyBoTIeaBaeJSBBjiGJdwMjPPzD2fs4gHAzKmSKQM3nNGvK6/712tVqVVuZSwselYlmVavil9Ik7GJ3rjV74ZopCOku26jWhCCUYxeUMK1DWISRJpzXicMCImsy9C26ZtqdAGrLGBbZee6OZHggzdDyPtgWQcGXyC7DxYH0bAgGLQ7vthXT/52QS3e4cMUT5K2IwfrP8OEtAlxMkcIoPnleXofh7xSLsaZ4CDkOI45WQJPUWTOcLAtVsGI7K+IlySL+JaNn5tzeWP5CwD/DdjOTN3sUro5pHudMgYuPg/M9ud1zbKA4pTaNxPL1g7HHTYsD2NosvNgxP3r7E/jBZhPYOw67wFVYz7fX1I1oJb75tG9A7Q3euahY+rHi+z3vnmiXWtq5odr5JKF12WK113/nzJ0f0fy7+/J4+swrrPj824HcWrp+5QxLXL6Y3Xt8LFL4J/e3cJdFvPb3fLBwdPFy/0itbIE+o3T4UHd6vT1mkzYRux7F31nsfm0+/7Ib6ZNuOKV4vprUNpp/2aWItw+vZr5vqnsc+Gfm/R9RybzZ9W9Y+admvYN+aSMEhfXgGLfKnoEXa0CzkvJL6XF2UhkTHKXIO50igugAq9oXYpaQlSKUAkCuQwt+uLdqvZ9qtOtXLuXpw7F+eWa9kXVtOq+L7rOl6uQVsUBxDbCR0RlUup7JY/3wPEs4ADjYAZyyTFE+D6NxE7SCAtpH15OBLKYZhIFbfRCK0nG68Ma/dtHjkrhKveclJb6lovETf0hjVHAtiedNvOnnT3AZM5AaXviuBcMpwL2YsFWqYitktLVKKQyhuAKREOHNermJzM5jEopOYsidIYSvPJPOuMybf/joEwz6z982F28L6s6/Bb3gLpExHlwFUtLZBjhCN3kJUX8nXBld2C8/DNNCLqfMl+CkbwFsn+pw+aKH4UHJEV5ZALz0PDXlTzsKAiUbQkuCB6cUNLgZfHv5GPY4FKi1K6XKbZAGpK2pgMb0qFs80B4FTq02aYTIGaRQjzR9dDgfogc2Hfx5eKCR0IJGAm6aJlyx+8DQbA1dsglDxf//ThsZdS9k3AWhyztWP5hFCIv31l4AArP2m+lX+rhEUf4zoSayePrFM+CAShY7VSF8HmC1LgRIYlUrkSthv8WIBjyfeNRZMLLEKy6SUV8PUXTUlSXUcYJykVYUfPDLsymeEUmzkEH06fwmRS/H63rvmXd+vT9dVACtYM6YUv+W9ng2R0waCrKzzDUtfX8qkok9Pxjiy/AzxQ5pbVdjs1u9qsttr7ytzyP7i8V0njk/mzZaenh+eh8S8=</con:value></con:property><con:property><con:name>SAML_User2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj0chF66JClJayjbdlnaBXl+OXGcCbhMHbCeF/vq1Q5MCpT3dIyEhT8Yz38x8/uxDjpLY8XzOgQmSUi3od/V/G+3IiVquZaC6jYzGo4WMThhFBtTrrY6LpaFp6VrAeQYB5QJR0dUdy24YVstwGhO76dmO5zRqdqv9oGs3wLgMLV1qctcyiSn3irRdPWPUSxEn3KMoAe4J7I39i3NPenqoxKT3Dtcoi4SsNxNi7pkmroWAIY5xDaeJeWhu+RyG3BuTKUUiY/CWM+Rd/W3vy8tL7aVeS9nUdCzLMi3XlD4hJ9MDvfej3AxhQKN0vT5GNKUEo5i8IgXqAsQsDTU/nqaMiFnySWjbtC0V2oAlNrDdoAe6+Z6gQPfNSFsgGUcGnyG7DDaCCBhQDNr1KOjqB9+b4HrvhCHKo5QlfGf9d5CA5hCncwgNXlZWovt+xD3t6h0C9gKK44yTHIaKJnOEgWtXDCKyPCdcki/kWjF+bcnlj5QsA/w3Yzk0N7FK6Oae7vTJFLj4PzPbnNc6yg2KM+hh/rx4us2xexnk+PqfBzuaQ/8Op3nY6RYQNp3XoKpxv613yVpx623T4uJh6g5Mdtqhs+eH1WmreYNfl+Ls6Pru12Q0wc3ThDce2oF7+gjLh59hy/IXLEuag+EwWHXmq1GyAPMqnv08h+jHVBw9D8/y30f+tXN/xWan54P75KcTdDq3VjQeWX2z/no6neXDYTY6dq/8djo6c+4vFrerOmpdPA9aj0fR719nM2hf4h/Y9eljznhet67uo8vW2Wvafa9ps4ZtYykJ4+zxCbAol4oeQV8byHkh8bW8KAsJjahw9eZKo7gAKvSe2qWkxcukAJHQk8NcrwfHbmvQPum77bbdajqtE6th2QPLt5qu27bbJ6UGrVHsQDxOaURULqWya/58DRAnHgcaAjPyNMMz4PoXEftIIC2gI3k4UsphkkoVtxFhvAEhacJq6cZWtnxyV3U7i3RtmIpLesn8SADblu7OlnSPAJM5AaXviuBcMpwL2YsFyjMR27Uc1Shk8gZgSoTlvk7T5CSZx6CQmkkaZjHU5rN50RmTr/8dA2FeWEcnk+LgfVrX7reyBdInJMqBq1qOQI4R9txBdlnIpwU79mbBZXg/C4k6X7KfghG8RrL96Z0mih8VR2RFJeTKc9ewFdXcLahKFOYEV0Svbmgp8PL498pxLFBtUcvyPCsG0FbSxmR4UyqcbY4BZ1KfVpP0GahZhTC/dT1UqHcyV/ZtfJmY0bFAAhJJF61YfuNtMAau3gaB5Pnyuw+PrZSybwKWYp/tOJZPCIX4y1cG9rDyk+Yr+feSsvB9XHtibeSRdcoHgSB0qlbqIlh9QgqcyrBEKlfKNoPvC7Av+baxanKFRUg2PWYCPv+iKUnq6gjjNKMi6OuFYVMmC5xiNQfv3elDmEKK3+7WJf/0br27OB9LwUqQXvmS/3Y2SEEXDLq6wgssXX0pn4oyOZ1uyPIbwB1lbjelOA8aR3696dubylx3TvyqgVuV9D6YP1o2erp7Hnp/AA==</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\soapUIScripts</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:8001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostb</con:name><con:value>qa.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deqa1/dec2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetport</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>8001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:8001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:8001</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>TOUVersionUS</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urntokenType_ResetPassword</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>urntokenType_SAML2</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_UnlockMe</con:name><con:value>urn:Adece:type:token:UnlockMe</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urntokenType_ValidateEmail</con:name><con:value>urn:dece:type:token:ValidateEmail </con:value></con:property><con:property><con:name>UserName</con:name><con:value>sanity_user_create_20140529_050027</con:value></con:property><con:property><con:name>UserName_BAU1</con:name><con:value>sanity_user_create_20140529_050024</con:value></con:property><con:property><con:name>UserName_BAU2</con:name><con:value>sanity_user_create_20140529_050027</con:value></con:property><con:property><con:name>UserName_FAU1</con:name><con:value>SanityFAU_20140626_1403776131200</con:value></con:property><con:property><con:name>UserName_FAU2</con:name><con:value>sanity_user_create_20140529_050025</con:value></con:property><con:property><con:name>UserName_SAU1</con:name><con:value>sanity_user_create_20140529_050022</con:value></con:property><con:property><con:name>UserName_SAU2</con:name><con:value>sanity_user_create_20140529_050026</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>01-Jun-00</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>2000-06-01</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_2b38384a-281a-4b26-8314-d5572c31d4b3</con:value></con:property><con:property><con:name>SAML_USER1_NEW</con:name><con:value>SAML2 Assertion=pVZdb+I6EH3fXxFlH6+CkxC+ooIEgd6ypSwlbbe7LyvjDOCSONR2AvTXXyc0FCjt7W4lJOTJeObMzPHMnAkchbbbFgK4pDHT+t2m/juYVCekgcFwyvWJ4dRNYtTLQWAocbVWmeAy1Ce61hcigT4TEjPZ1G3TcgyzatjVG7PhVkzXqpUq1fIvXbsDLpRppVIydW0dhUy4udumnnDmxlhQ4TIcgXAlcf321cBVmi4uMOmtsy3K3CFvzaVcugiRUgAEwpCUSByhM3SgcxYI16czhmXC4dlnIJr6893ValValUsxnyHbNE1kNpDSCQSdfdVbX4rLEPTZNN6ePcxiRgkO6RPOQF2BnMeB1g5nMadyHr1h2kKWmZk2YE0MYjnsq45eHOToPmjpACQX2BBzbBXGxjAFDoyAdjvuN/WvH6vg9u4Nx0xMYx6Jo/OfQQKWQhgvITBEEVmB7uMWT6SrdQbE7TMSJoKmMMxossQEhDbiMKXrARWKfIHQ8vJra6F+tGAZkD8pyxnax6qgoxPZ6dIZCPk3Nduv19bKHQ4TaCWD+sXg0h9tvsleLQwi5vGujVYLeeM0cwj7yltQu3I/n4/JuuPW8yXq/LuY8Im8H6Td+ydr4aWpD+hiRL1Z7I+Il95f8mRq13o/1nflB789fUAz1Ond3/+IOtFYJCl6WGyeesON+fD4RUzhIo5h5CXjy02ZDujFXWB2fvHr6OpiKZLr287GXF7e4vurweK6Owru7PO1U+4Ol9f/pF7PIwtvVHm4JFZt2J58+XmR1oPho3n18+p7YzDcoN5t8yWm/RgOhUVL8JPJAxBZHDN69LvauaoXlu+3l0xCA2Oaq7rLrEcJCUzqrexW1lrcRDUgGriqmNvzuddpe42qXa30nPOefd4zHdM6N9tmpdFwHLte9KAtiiOIXsymNPOVddktf94HSCJXAAuAG2mckDkI/R2LXSyx1mdj9ThiJuAmVl18lVg8fqrW6pUFtTjQFSvL8sKqPOnaMJbf2XfenkrgB63bsg9a9xgIXVLI+ntGcKEYLqTKxSNOExlapRSXGCRqAvCsCbu2U68gQaNlCBlSFMVBEkJpOV/mmUFi+28bmIhcOu7d5A/vzbiOvxUpUDoBzRREFksHVBnhxAwyi0DeDriyH3Bhvp0ENHtfKp+SU7JFcvjphSYZP3Yc6Q7a/qgAvdP9g7u/Pf+39bcG/t715xwPPhH14LNRKxJ98vrrm+gdHqBjCu4cBSndc1vsL2okq4bdKh7QIy49lpI0TfInU8uGEVfmkZpJFvKBJGqibG7iBTC0M4E+NNB3qI887+SH+BI5Z77EEiL1wLX8+IFtzgeRbXN91ZnWH10VD1yqvElYy1MyL1RLX4b43b2QuCTTU+KR+lvFPHgp1wlbe35UnGqFk5TNslM2ujdvkILEyixVsybm+8ZPGTjl/FC4S/IOi1RsmiQS3v6iZUOkqWNC4oTJflfPBfuDLccpN0twX5RemcmH5/M2tBZvbkNqVvtqxERY3+nS/1c2aE4XAnq2dOVYmvpaLffKOZvtDdJngEeztGN6TrdmVdvVjnc4SzuN8i6BB5G0XolfS/ZyevweWv8B</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestSuiteRunListener.afterTestCase" name="TestSuiteRunListener.afterTestCase" target=""><con:script disabled="false"/></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>