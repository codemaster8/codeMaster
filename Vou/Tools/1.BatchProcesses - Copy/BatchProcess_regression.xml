<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="BATCH_PROCESS_REG" resourceRoot="${projectDir}" soapui-version="4.6.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="3185_TestDataCreation"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="UV_3185_TD5_2E_1D_1F_1Child"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="TestSuite Report"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth>1982-07-01</DateOfBirth>
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyDELETE" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=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"/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=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"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="User" type="rest" basePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" definitionUrl="" id="7cd50515-8110-45b0-81ab-4a393dbd7a2c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:endpoint>https://qa.q.uvvu.com:7003</con:endpoint></con:endpoints><con:resource name="User_API" path="" id="6d34c7b4-6756-417f-8c2e-56c186a3633e"><con:description/><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>QUERY</con:style></con:parameter></con:parameters><con:resource name="UserUpdate" path="{UserID}" id="371e60dc-d0b3-4c17-84d8-56b82823cca8"><con:settings/><con:parameters><con:parameter required="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter><con:parameter required="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="2a40ffad-8cd3-4845-9c36-13a88dbc026f"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="15ed0f96-2a45-454f-8acb-44ee5ffe447a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User2}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_POST" method="POST" id="c39796e7-67ed-4424-9712-4d89172f8821"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="26ad120a-f3a1-469c-9cdd-7029950ca30c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>Shikha</GivenName>
      <SurName>UsrUpdtUser1</SurName>
   </Name>
    <ContactInfo>
      <PrimaryEmail>
         <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </AlternateEmail>
      <Address>
         <PostalAddress>300 Silver StLane3Ring Road</PostalAddress>
         <PostalCode>8810</PostalCode>
         <Locality>Dayton</Locality>
         <StateOrProvince>NJ</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7035987422</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="false">de</Language>
      <Language primary="true">en</Language>
   </Languages>
   <DateOfBirth>2000-07-01</DateOfBirth>
   <!--LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:101110</LegalGuardian-->
   <!--LegalGuardian Status="urn:dece:type:status:deleted">urn:dece:userid:org:dece:101114</LegalGuardian-->
  <Credentials>
      <Username>Shikha_User_Updt_User2</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <!--ResourceStatus>
        <Current>
         <Value>urn:dece:type:status:active</Value>
         <Description>User Updated</Description>
      </Current>
   </ResourceStatus-->
</User> ]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_OPT" method="OPTIONS" id="fed0642e-041b-4cd0-870a-e5b1bea6d510"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="1d9191ca-a5bd-4652-84a7-f9cbb886149f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=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"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:3823102"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:1005"/>
</con:parameters></con:request></con:method><con:method name="UserGet_HEAD" method="HEAD" id="d31983e0-47e3-460e-bc58-a3f6db514660"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="f522d0b5-3d11-47cb-a0e5-9aa4bcf0c023"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet_DEL" method="DELETE" id="6b255876-1b9f-44a2-8441-4c2902163db8"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="0a5dfd18-ea95-459d-b4c2-a9e0e4b5b215"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User}"/>
</con:parameters></con:request></con:method><con:method name="UserUpdate_PUT" method="PUT" id="328aa525-2b36-4f12-adf0-f3dcf21b80db"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema/2010/10/dece">sch:UserCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" accept="" id="fcbb842c-50c3-4adf-b480-9d89207c152b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>Shikha</GivenName>
      <SurName>UsrUpdtUser1</SurName>
   </Name>
    <ContactInfo>
      <PrimaryEmail>
         <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail>
         <Value>testing@uvvutesting.biz</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </AlternateEmail>
      <Address>
         <PostalAddress>300 Silver StLane3Ring Road</PostalAddress>
         <PostalCode>8810</PostalCode>
         <Locality>Dayton</Locality>
         <StateOrProvince>NJ</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.7035987422</Value>
         <ConfirmationEndpoint>www.mymail.com</ConfirmationEndpoint>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="false">de</Language>
      <Language primary="true">en</Language>
   </Languages>
   <DateOfBirth>2000-07-01</DateOfBirth>
   <!--LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:101110</LegalGuardian-->
   <!--LegalGuardian Status="urn:dece:type:status:deleted">urn:dece:userid:org:dece:101114</LegalGuardian-->
  <Credentials>
      <Username>Shikha_User_Updt_User2</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <!--ResourceStatus>
        <Current>
         <Value>urn:dece:type:status:active</Value>
         <Description>User Updated</Description>
      </Current>
   </ResourceStatus-->
</User> ]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#Node_Account}"/>
  <con:entry key="UserID" value="${#Project#Node_User2}"/>
</con:parameters></con:request></con:method></con:resource></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>403</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserCreate" type="rest" basePath="" definitionUrl="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate_API" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="POST_CreateUser" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>text/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 404 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 415 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/x-www-form-urlencoded"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET_User_Create" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PUT_UserCreate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DEL_UserCreate" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD_UserCreate" method="HEAD"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="OPTIONS_UserCreate" method="OPTIONS"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenDelete" type="rest" basePath="${#Project#AppHost}:${#Project#AppPort}" definitionUrl="C:\Users\usinha\Desktop\us_test\RightsTokenDelete_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/usinha/Desktop/us_test/RightsTokenDelete_1.wadl"><con:part><con:url>file:/C:/Users/usinha/Desktop/us_test/RightsTokenDelete_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenDelete"/>
  <resources base="${#Project#AppHost}:${#Project#AppPort}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightTokenDelete">
      <doc xml:lang="en" title="RightTokenDelete"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="RightsTokenDelete">
        <doc xml:lang="en" title="RightsTokenDelete"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="HEAD" id="HeadMethod">
        <doc xml:lang="en" title="HeadMethod"/>
        <request/>
      </method>
      <method name="PUT" id="PutMethod">
        <doc xml:lang="en" title="PutMethod"/>
        <request/>
        <response status="200">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="GET" id="GetMethod">
        <doc xml:lang="en" title="GetMethod"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="proj:RightsToken" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </response>
      </method>
      <method name="POST" id="PostMethod">
        <doc xml:lang="en" title="PostMethod"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="RightTokenDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GetMethod" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:RightsToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenGet" type="rest" basePath="" definitionUrl="C:\Users\usinha\Desktop\us_test\RightsTokenGet_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/usinha/Desktop/us_test/RightsTokenGet_1.wadl"><con:part><con:url>file:/C:/Users/usinha/Desktop/us_test/RightsTokenGet_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="RightsTokenGet"/>
  <resources base="https://qa.p.uvvu.com:7001">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" id="RightsTokenGet[ByTokenId]">
      <doc xml:lang="en" title="RightsTokenGet[ByTokenId]"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="RightsTokenGet[byTokenID]">
        <doc xml:lang="en" title="RightsTokenGet[byTokenID]"/>
        <request/>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="401 500 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="sch:RightsTokenList" xmlns:sch="http://www.decellc.org/schema"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
        </response>
        <response status="403 500">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="POST" id="PostMethod">
        <doc xml:lang="en" title="PostMethod"/>
        <request/>
      </method>
      <method name="PUT" id="PutMethod">
        <doc xml:lang="en" title="PutMethod"/>
        <request/>
      </method>
      <method name="DELETE" id="DeleteMethod">
        <doc xml:lang="en" title="DeleteMethod"/>
        <request/>
      </method>
      <method name="HEAD" id="HeadMethod">
        <doc xml:lang="en" title="HeadMethod"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint></con:endpoints><con:resource name="RightsTokenGet[ByTokenId]" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="RightsTokenGet[byTokenID]" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:RightsTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>403 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PostMethod" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PutMethod" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DeleteMethod" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HeadMethod" method="HEAD"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightTokenCreate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="RightTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#AccountID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#AccountID}</con:default></con:parameter></con:parameters><con:method name="RightsTokenCreate" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:RightsTokenData</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#SchemaNameSpace}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		<ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			<ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		<ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		<ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a" disabled="true"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country","US");
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format('yyyyMMdd_hhmms')+ System.currentTimeMillis();

tC.setPropertyValue("AccountName","ucr5_accname_"+today);
log.info("Create account : '"+"ucr5_accname_"+today+"'");
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES"){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def dbAccount = new dbUtils.dbAccount(log,context.expand( '${#Project#targetSystem}' ));

def a = dbAccount.accountGetfromNodeAccountId(tC.getPropertyValue("NODE_ACCOUNT_ID"));
		                  
tC.setPropertyValue("account_oid", a);
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Test_Account_And_User_Data_Purge</con:value></con:property><con:property><con:name>sName</con:name><con:value>TEST_ACCOUNT_AND_USER_DATA_PURGE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ucr5_accname_20140428_0100551398670255211</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>F816494A8BC408D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("Username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountDelete API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="7bed7b31-f1e7-4d93-a26b-7c4f3fd4364f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName" id="b5272ae6-82f1-4167-a218-91364f720ae1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("SecondUserName","username_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.8. Account Delete [Your UltraViolet account has been closed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

  else
if(tP.getPropertyValue("Country")=="LU")
{
  tP.setPropertyValue("GeoProfile","LU");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

else
if(tP.getPropertyValue("Country")=="BE")
{
  tP.setPropertyValue("GeoProfile","BE");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

else
if(tP.getPropertyValue("Country")=="NL")
{
  tP.setPropertyValue("GeoProfile","NL");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" id="6afcd2ee-d125-48d3-86d9-0b8f90dcad31" disabled="true"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}"
	xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md"
	xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>
]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the <ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "The first member must be 18 years or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#TestCase#TelephoneNumber}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
		expectHTTPconnection = "close";
	break;

	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
		expectHTTPconnection = "close";
	break;

	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tC.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tC.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
			expectHTTPconnection = "close";
	break;	

	case "SaxParserException":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "cvc-complex-type.2.4.a: Invalid content was found starting with element 'AlternateEmail'. One of '{&quot;http://www.decellc.org/schema/2013/06/coordinator&quot;:Address, &quot;http://www.decellc.org/schema/2013/06/coordinator&quot;:TelephoneNumber, &quot;http://www.decellc.org/schema/2013/06/coordinator&quot;:MobileTelephoneNumber}' is expected.";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
		expectHTTPconnection = "close";
	break;

	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
		expectHTTPconnection = "close";
	break;

	case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
		expectHTTPconnection = "close";
	break;

	case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

     case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
		expectHTTPconnection = "close";
	break;

	 case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
		expectHTTPconnection = "close";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
		expectHTTPconnection = "close";
	break;



}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES"){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" && processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		         		  def uname=tC.getPropertyValue("UserName").toLowerCase();
		         		  log.info("uname............>"+uname);
		         		  String u = dbUser.userGetUserOID(uname);
		                 //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase());
					  log.info("Passed");
					  String a = dbUser.userGetAccountOIDbyUsername(uname);
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 log.info("Passed1");
		                 tC.setPropertyValue("user_oid", u);
		                 tP.setPropertyValue("account_oid", a);
		                  log.info("Passed2");
		              }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>F816494A8BC408D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-05-03</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-03-24</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-05-03</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B/User/urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>fztcoord190_pm@neustar.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>TEST_ACCOUNT_AND_USER_DATA_PURGE</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>Test_Account_And_User_Data_Purge</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F816495745FC8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F7C40DFBEF5FCAC3E0401F0A07993BEA</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>2000-03-24</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="f23d9bb0-0bd1-4723-928b-a9c1d99c147f"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}

 else
if(tP.getPropertyValue("Country")=="LU")
{
  tP.setPropertyValue("GeoProfile","LU");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

else
if(tP.getPropertyValue("Country")=="BE")
{
  tP.setPropertyValue("GeoProfile","BE");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

else
if(tP.getPropertyValue("Country")=="NL")
{
  tP.setPropertyValue("GeoProfile","NL");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay); 
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		log.info curYear1;
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		log.info now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());

		if(tP.getPropertyValue("Country") == "FR")
		{
			log.info "ADULTMinus DateOfBirth for FR : "+dob;
			tC.setPropertyValue("DateOfBirth",dob);
			tC.setPropertyValue("CHILD_DOB_XML",dob);
		}
		else
		{
			log.info "ADULTMinus DateOfBirth: "+dob;
			tC.setPropertyValue("DateOfBirth",dob);
			tC.setPropertyValue("YOUTH_DOB_XML",dob);
		}
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	     if(curDay==19){
			curDay=18
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay); 
		log.info "Now: "+now; 
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}
</con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		//errorReason = "The requestor is not active.";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

     case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 def uname=tC.getPropertyValue("UserName").toLowerCase();
		         		  String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName").toLowerCase());
		                 //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase());
					  String a = dbUser.userGetAccountOIDbyUsername(uname);
					  
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-04-20</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:9433787859E654102E1516549481F9A8/User/urn:dece:userid:org:dece:25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>neuemailtest@gmail.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0j38DYE5jhlpY2twOkbfrSEfJi1NqysWQu+fWVTEyAkJSegcFovdr99qJvdcFxEttBh3PIBU2ZNuy39J/OVH5ICAaZyR93SizD98EzgAA0Sd22Abu6NuS8gCHjAjPR0m3Tcg3TNSxvYnqB3Qzqbs22rR+69hVyLk1LlZqpa+skZjwo3bb0ImdBijnlAcMJ8ECQYNy5vgqkZoArTHr7YouydJi350JkAUKkFko8cUxqJE3QBTrQuQh5MKYRw6LI4clnyFv6097ValVbObU0j5BtmiYyfSR1Qk6j93r7XbUZwiGbpdt1D7OUUYJj+ogVqGsQ8zTUOnGU5lTMk1dMW8gylWkD1sQglsve6+jZQYnuTEsHIHOODT7HVmVsBDPIgRHQ7kfDlv7+vApu905yzPgszRN+tP43SMCWEKcZhAavIqvQnW/xRLraF0CCISNxwekSblSbZJgA1+5ymNH1FeWy+UKuleXX1lx+adVlQP6lLBdoH6uEjk5kp08j4OL/1Gy/XlsrX3FcQPvx4fcChzerTw+NmYUepoNrNrvqWl9Gj/etEsK+8hbUrtxP6+Nm3fXW06Yk+vB5+Os2WuXS0Q/kO37WLWyw7jfO/Q3vTl36LbT576IZfXZur6Z8EXvesrtZXDrISu7ij4sPI7GhIfeG06t3ZoTSxUfHzbOoM/g07X7C6Lq4K5LCfJxNGvf/NToPUE9XyY876/t4+bAu5pRFX5L+vNP5Gm4WLFu7zmjycZZeX/J3dq8RZXfJzbfPvY1b9wb2r/vWc0z7MRwKK0oYF9NfQES1VO0x7GuXsl5YvE0vSkJDY1aqBpniKC6ACb2tdilqCQpJQDQMZDG363rDc7oNs97wB426a5n2wKpb8p/vNq1Lv9OsOGiL4ghiL2Uzqnwplt32z9sASRJwYCHkxjItyBy4/obFPhZYG7KRPBwp4zBJJYv7g8te3+m6TrPe7Tm+bffqjmdeer5nO87A7+jaTSpu2W3emQnIDxjcMg8YfASEZhQUzas+57LRuZApWeBlIWKrtsQ1BoUcBLni4sB2m3XEaZLFoACjJA2LGGrZPCsThPj2aRuY8FI6GkzK8/dqeMfvqkxInZAqBa5i6YKsJpwYRW4VyOsBO/sBV+Y7RUjVMZNpFTklWySHr567RbXJrlVkRD97459WhXunfvb2lzvRG6DQcT52jsIl3XNbzVQ5JiSJtKtqLnBtUSuWy6Ksn6cIMpfmkeRJC42BFJLlNpP0NzC0M4HOGjI71Eeed/JDfIWYs7HAAhLZbVq5POOGMQaubhhDeVrW515fDlzKvAlYi1OyXiwvIgrxm3cVEhClJ8V38rFK8/C5XCds7fmRccprhZAcqVZqnGxeaQqSSrNU8l+a7xs/ZeCU80PhLsk7LEJ207QQ8PobTRFbS8eEpAUTw75eCvbJtsQpNhkEz0ovzJSE/jSh1/zVCf39+mosaS/B+k6X/l3ZoGW7ENDVRaDE0tLX8sIpnbNoj9yfAO7zu+86jtf0mvW/8PthJO0X4peSvZwen4f2Hw==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>USER_DEIDENTIFY</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>User_Deidentify_TestDataCreation</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>35931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-03-28</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("Username",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("Username",callTC.getPropertyValue("Username"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}

 else
if(tP.getPropertyValue("Country")=="LU")
{
  tP.setPropertyValue("GeoProfile","LU");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

else
if(tP.getPropertyValue("Country")=="BE")
{
  tP.setPropertyValue("GeoProfile","BE");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}

else
if(tP.getPropertyValue("Country")=="NL")
{
  tP.setPropertyValue("GeoProfile","NL");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("Username"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase());
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

//callTC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL2"));
//callTC.setPropertyValue("UserName2",tC.getPropertyValue("UserName"));
//callTC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES"){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>testing_+428@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-08</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42/User/urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A158BFEF210675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5A158E8FAED7930E0401F0A0599188B</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A158BFF59C0675E0401F0A07992D42</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00033_UserCreate_AUTH_Creator_ADULT_Full_New_CHILD_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130905_04010</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E5A158BFF59D0675E0401F0A07992D42</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
////assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00046_UserCreate_FUNC_UI_verification_of_ability_to_create_users_to_override_deleted_user_201_CREATED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_PYLD_P2</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">5663DF8BEB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EB330B09EB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+JKEH73V6Syj1bIFQgpoSpcXHFBV/By9MUaJg2MJjOYmXA5v/7MBIOA6LKnSouaTk/315f5us84SmInCDmHVBBGtW67rj+j8sgGC/nG2KmA4ZUxGKPxyDfArzqeB9Wa63i61uU8gy7lAlFR1x3L9gzLNRz71q4Gnhe41ZLju0+6dg8pl6alSsnStWUSUx7kbut6ltKAIU54QFECPBA4GIb9XiA1A1Rg0htna5S5w7QxFWIWmCYuRYAhjnEJs8Q8M3d0ziIeDMmEIpGl8O4z4nX9/e5isSgt3BJLJ6ZjWZZp1UypE3Ey+aE3TorLEHXpmK3PLUQZJRjF5F+kQPVBTFmkhfGEpURMky9M26ZtKdMGLLGBbY/+0M0PBzm6Iy3tgEw5MvgU2YWxAYwhBYpBuxt06/qP4yq4vnubIsrHLE343vnvIAGdQ8xmEBm8iKxAd7zFA+lqnAEOuhTHGSdzuFJtMkMYuPY7hTFZ9giXzRdxLS+/tuTyjxRdBvhvynJmbmOV0M0D2WmTCXDxf2q2Xa+1lXsUZ9B46YmZ5U9ag9UDXlH3Z29148b9Uff+jtVzCNvKa1Cbcr+f95t101vvl35OQzt9TM+HUWQ1O73Fo50OzwdvFbh6GNvRDRbR4hdkFxeVJ/Y2qtHId17RBVtYHrw0e4j+NPt+bTjon95fZp2T5eNN5ab/eFeJYuG+il+v3JpdC14LQ9O6QuwpqxKReE9uvzZt2lVnnLx5/kVvzqx0Rh8vHyZRpXLqiNUivfBWJ79D2r7E8Hhq3/LT6d1N7XpS/4hpO4ZdYUEJw2z0AlgUR9Ue3bZ2LuuFxPf0oiQkMsa5ajBTHMUFUKE31C1FLUEmCYhEgSzm+txpu2677NY6zXLH82zLdp1yue15Nc+3z2uhX3DQGsUexBajY6J8KZZd98/3AHEScKARpMacZXgKXP/GYhsJpHXpQD4ORjncMsniZd9uW82w1mnV/NBxq/Lfbvth87zcalXOQ8ngV0xc0+s0HAtIdxjcsXYYfACYzAgomld9zmWjcyFT8obmmYjt0hyVKGRyEKSKiwPH88smJ8ksBgXYTFiUxVCaTWd5gky+/nUMhHkuHXRu8/f3ZXj734pMSJ2IKAWuYmmCrCYcGEVOEcjXAbvbARfmwywi6pnJtIqU4DWS3U8f3aLaZNMqMqLn1vDZLnBv1I++/vmm+Q0ocz8fG0fRnGy5LWaqHBOSRBpFNd9Q6a2UzedZXr+qIshUmjclT9rmEHAmWW51y16BmhsT5lFDZoN6z/NGvosvE1M6FEhAIrtNy49HbBhD4GrD6MrXsjx2fdlxKfMmYCkOyVqxXEQU4m93FRxgpSfFv+XPgqXRR7kO2NryI+OUa4UgdKJOapysvmgKzKRZIvmPpdvGDxk45HxXuEnyBouQ3TTKBHz9RVPEVtcRxiyjotvWc8E22eY4xWoGwYfSJzM5ob9P6CX/ckL/0+8NJe0lSN/okj8rGyRvFwy6WgRyLHV9KRdO6ZxOtsj9HeAOvzdd12paf+T33Ugan8SfJVs53X8Pjf8A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5663DF8BEB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EB330B09EB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"F52250D94F97857CE0401F0A07994A80:EB782F66"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth>
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                //errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 
//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;
 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="5eb7ce36-7d07-4ecf-a5c3-b2c786cbdaef"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B/User/urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5eb7ce36-7d07-4ecf-a5c3-b2c786cbdaef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>Inactive_Account_TestDataCreation</con:value></con:property><con:property><con:name>sName</con:name><con:value>INACTIVE_ACCOUNT_NOTIFICATION</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8/User/urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" id="cbeadbfd-394a-4b1c-9e9a-4c96b103c67e"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb" disabled="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="10fe7e27-0ca1-4b5b-900d-075f1886f604"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2013/10/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>testing_+428@uvvutesting.biz</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1990-07-01</DateOfBirth>
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="5935459c-5982-4cb1-9974-1d4d88038a65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("PolicyID",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="afcc2bf8-a03d-442a-bb54-83b79c3a8deb"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="UserPolicy_DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#PolicyID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>D261A6199541A815E0401F0A07990F36</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}

if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows";
            certPath = testProject.getPropertyValue("certsPath_Windows");
      } 
else 
      {
            log.info "it's not Windows"
            certPath = testProject.getPropertyValue("certsPath_Linux");
      }



File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenCreateRequest</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1" disabled="true"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b" disabled="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2013/10/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=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</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=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</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469" disabled="true"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("versionMinor")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("versionMinor")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="8c721406-10ad-4003-9fcd-4043b3af0f90"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("versionMinor")=="06" || tP.getPropertyValue("versionMinor")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="a34ac438-f9e9-46e6-aa72-085a95955c04"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tC.setPropertyValue("audience",tC.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tC.setPropertyValue("audience",URLEncoder.encode(tC.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());

			if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
	} 
	else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}
</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>Test_Account_And_User_Data_Purge</con:value></con:property><con:property><con:name>sName</con:name><con:value>TEST_ACCOUNT_AND_USER_DATA_PURGE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>audience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>1208</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_337a908a-2299-4a1c-86a0-9985b802d884</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_337a908a-2299-4a1c-86a0-9985b802d884" IssueInstant="2014-04-28T07:31:13.437Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_337a908a-2299-4a1c-86a0-9985b802d884">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>QeK6lBXFdRvqfnrug8t7z5CS5Mo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
yoytCsTO4qPTKbw7Fez2e3gnIdyUMdTnYBwlt/KCGOJuqGicgqoocl03xwtB20zolkaBEmc1p+tb
JujCjMpACD7AyRa/cvLbP8bRzJiVOCmVZ6waCYkad1SJZ4N7tfKVQz3S1xsSSUCnJvfEZgnhBYSt
uDLTBrSZqUTiADx6t6A=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_E2B3F0D3AFAACF7ED29AF2920EF1242B" NotOnOrAfter="2014-04-28T10:31:13.437Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-04-28T07:31:03.437Z" NotOnOrAfter="2014-04-28T13:31:13.437Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_337a908a-2299-4a1c-86a0-9985b802d884</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-04-28T07:31:13.437Z" SessionIndex="_337a908a-2299-4a1c-86a0-9985b802d884"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2014-04-28T07:31:03.437Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2014-04-28T13:31:13.437Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2014-04-28T07:31:03.437Z</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_337a908a-2299-4a1c-86a0-9985b802d884</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0" disabled="true"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("Username").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Get" id="38afa56b-7e9c-4472-bf71-fef58010dd70"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Get" mediaType="application/xml" id="169c0ad6-f4ab-4d70-84a8-840bafc17ad2" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQCwmQqCABgbPZlrYLtNuel8p1BvAhcULscNlfv3ZoKFDaZY+EhDwZz3xz8TdzyVAcWV6bMcg4SagS+E31ueG+GIaJQ82ug6PZ1sTR3Ebd0FynXm3U0KSG64aqBIzlEFDGEeVN1TJMWzOqmmWOzbpn255dq9Sc+r+q8gAZE6aFSkXcWscRZV7htqnmGfUSxAjzKIqBeRx7o/bg2hOaHioxqa3LLcrCYdaacZ56uo4rIWCIIlzBSaxf6gc6lyHzRmRKEc8zePUZsqb6ene1WlVW1UqSTXXLMAzdcHWhEzIyvVBbX8rLEAZ0kmzPXUQTSjCKyC8kQQ2Az5JQaUfTJCN8Fn9g2tRNQ5rWYI01bNr0QtXfHBTozrR0ADJjSGMzZJbGhjCBDCgG5X4YNNWL8yq4vTvOEGWTJIvZ0fnvIAFdQpSkEGqsjKxEd77FE+lqXQL2AoqjnJEl3Mg2SREGptxlMCHra8JE84VMKcqvrJn4kbLLAP9NWS71fawCun4iOz6ZAuP/p2b79dpaeUBRDq1V+q3+42H6eJM88NQij0u79gOuwJyMn5oFhH3lLahduV/Px826663XS5vl19VTfThohMwZzH90v99/++76Q8eePw2Cu8WocbUY64/3XTzN/pndJ/5PyG6W7Fcwd/rXAb9fMkpyGl5P/Z92+KW/olzfGCIn/bx28xTVnFkWJ6u7uTGfJtVxvkmvntbBw308qFs3fddhVkodiNcbyrLbMJguvrH2xkWjYbS6+rKYj2asY9x10/HX1c9bF7fbzbeY9mM4FJaUMMpf/gPMy6Nsj8BX+qJeiH9OL1JCQm1SqHqp5CjGgXK1JW9JavFyQUAk9EQxt2enVqv6/Uan13F6tm0aZtVyHN+2Xbth9t12o+SgLYojiN2EToj0JVl22z+fA8Sxx4CGkGnLJMczYOonFn3EkRLQoXgcCWUwTgSLd6r9nuW6fq9j1bu9jtv1G6ZvuLbh2E7fabdV5Sbht/Q2a084ZAcMbhkHDD4ETFICkuZlnzPR6IyLlCzQMueRWVmiCoVcDIJMcrFn2Q1HZyROI5CA9TgJ8wgq6SwtEqSz7b+lIcwK6bA3Lt7fh+EdfyszIXRCIhWYjKUDoppwYhRVy0A+Dri6H3Bpvp2HRD4zkVaeEbxFcvjprVtkm+xaRUT03B09myXunfrZ19/f1D8BpR/nY+coXJI9t+VMFWNCkEirrOYCVRaVfLnMi/rVJUFmwrwueNLUR4BzwXKbcTIHqu9M6GcNmR3qI887+SG+nM/oiCMOseg2pTiesWGMgMkNIxCvZX3u+nLgUuSNw5qfknUjsYhIxJ/uKtjDUk+I78TfKsnCt3KdsLXnR8Qp1gpO6FSe5DjZfNAUOBFmieC/JNs3fsrAKeeHwl2Sd1i46KaXnMPHXxRJbE0VYZzklAe+Wgj2ybbAyTcpeG9K78wUhP46odfswwn9OLgeCdqLkbrTJX9W1kjRLhhUuQgUWJrqWiycwjmd7pH7K8B9fu91qlWjY7h/4vfDSFrvxO8lezk9fg+t3w==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EB330B09EB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5663DF8BEB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<User UserClass="urn:dece:role:user:class:basic" UserID="urn:dece:userid:org:dece:5663DF8BEB5E441013255D449481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>SUC20140321_01_44_451395423885365</GivenName>
      <SurName>SUC20140321_01_44_451395423885365</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://d1aa09tqol6rcr.cloudfront.net /uvvu-images/6663EF8BEB5E441013255D449481F9A8</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail VerificationStatus="urn:dece:type:status:pending">
         <Value>testing@uvvutesting.biz</Value>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>test_+126@uvvutesting.biz</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">en</Language>
   </Languages>
   <DateOfBirth MeetsAgeOfMajority="true">1995-03-26</DateOfBirth>
   <Credentials>
      <Username>suc20140321_01_44_451395423885365</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-03-21T17:44:47.431Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2014-03-21T17:44:45.559Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
   </ResourceStatus>
</User>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2679</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"F52250D94F97857CE0401F0A07994A80:EB782F66"</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00046_UserCreate_FUNC_UI_verification_of_ability_to_create_users_to_override_deleted_user_201_CREATED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_PYLD_P2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B/User/urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>20</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if (tP.getPropertyValue("URLEncode").toUpperCase()=="YES")
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8/User/urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4" disabled="true"><con:settings/><con:testStep type="groovy" name="Update_User_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )

a = new dbUtils.dbUser(log,context.expand( '${#Project#targetSystem}' ));

assert a.userSetStatus(userID,status) == 1;
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>mergedeleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">34A03181BB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00008_UserCreate_FUNC_FAULT_CS_Creator_UserStatus_Not_Active_201_CREATED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_AUTH_P2</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6" disabled="true"><con:settings/><con:testStep type="groovy" name="Update_AccStatus"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

a = new dbUtils.dbAccount(log,context.expand( '${#Project#targetSystem}' ));

assert a.accountSetStatus(accountID,status) == 1;

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>2DC0A574BB5E441013255D449481F9A8</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00009_UserCreate_FUNC_FAULT_Account_Status_Pending_403_FORBIDDEN_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_AUTH_P2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143" disabled="true"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )
def Policy = context.expand( '${#TestCase#Policy}' )
def userName = context.expand( '${#TestCase#UserName}' )

def dbHost = context.expand( '${#Project#targetSystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update policy set status = '$status' 
		where policy_oid in 
		(select policy_oid from policy_relationship where policy_actor 
				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
				(select account_oid from account_user where lower(username) = lower('$userName')))) 
		and policy_class = '$Policy'""";


//String sql = """update policy set status = '$status'  
//			where policy_oid in 
//			(select policy_oid from policy_relationship where policy_actor 
//				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
//				(select account_oid from account_user where lower(username) = lower('$userName')))) and policy_class='$Policy'""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">F066AC317B5E441013255D449481F9A8</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00019_UserCreate_FUNC_AddUser_3rd_Party_No_ManageAccountConsent_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_Access_P1</con:value></con:property><con:property><con:name>Policy</con:name><con:value>105</con:value></con:property><con:property><con:name>UserName</con:name><con:value>firstuser_111_20140321_0136241395423384269</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757" disabled="true"><con:settings/><con:testStep type="groovy" name="Rename"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "UserCreate_CS_Geopolicy_RET_US";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ralluri\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012" disabled="true"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db" disabled="true"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619" disabled="true"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName").toLowerCase();
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

c = new dbUtils.dbNode(log,dbHost);

def n = c.nodeGetNodeId("urn:dece:org:org:dece:"+tC.getPropertyValue("nodeid"));                 

log.info n;

tC.setPropertyValue("node_oid", n);

def role = c.nodeGetRole(tC.getPropertyValue("node_oid")); 
log.info "Role : --- " + role;

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def country = context.expand( '${#Project#Country}' )
def requestor_UserOID = context.expand( '${#TestCase#Requestor_UserOID}' );

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
def requestor_Privilege = context.expand( '${#TestCase#Requestor_Privilege}' )

if (requestor_Privilege != "YOUTHSAU")
{

                                String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
                                and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


                                this.log.info "Query is:  " + sql;
                                results = a.SelectFromDB(sql,dbHost);
                                
                                log.info "Policies Results : " + results;
                                /*
                                *  If zero length, no need to continue;
                                */
                                assert results.length() > 0;
                                
                                def myXML = new XmlSlurper().parseText(results);
                                
                                log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
                                
                                assert myXML.ResultSet.Row.size() > 0;

                                //if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

                                if (context.expand( '${#TestCase#IsMinor}')=="true") 
                                                {
                                                                if((country == "US")|| (country == "CA"))
                                                                                {
                                                                                                assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
                                                                                                //      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
                                                                                                assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
                                                                                }
                                                                else if ((country == "GB") || (country == "AU") || (country == "NZ") || 
                                                                                   (country == "IE") || (country == "AT") || (country == "CH") || 
                                                                                   (country == "DE") || (country == "FR")|| 
                                                                                   (country == "LU")|| (country == "BE")|| (country == "NL"))                                                                     
                                                                                {
                                                                                                assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

                                                                                                assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
                                                                                                //      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
                                                                                                assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
                                                                                } 
                                                }
                                                
                                else
                                                {
                                                                assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
                                                }

}

else

{
                                String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$requestor_UserOID')
                                and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";

                                this.log.info "Query is:  " + sql;
                                results = a.SelectFromDB(sql,dbHost);
                                
                                log.info "Policies Results for Youth SAU: " + results;

                                def requestor_Policies_length =  results.length();

                                String sql1 = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
                                and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";

                                this.log.info "Query is:  " + sql;
                                results1 = a.SelectFromDB(sql,dbHost);
                                
                                log.info "Policies Results for Requestee and Youth Requestor: " + results;

                                def requestee_Policies_length =  results.length();

                                assert requestor_Policies_length == requestee_Policies_length;
                                
}

log.info "Policy Validation Passed";          
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dbHost = context.expand( '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>//End of DB Validations

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Requestor_Privilege",null);

log.info "DB Validations Complete";
</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1995-03-26</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1998-03-25</con:value></con:property><con:property><con:name>Country</con:name><con:value>LU</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1998-03-25</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser_111_20140321_0442331395434553487</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>ABD26328166E441013255D449481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_CS_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser_111_20140321_0442331395434553487</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00078_UserCreate_CS_AUTH_Creator_ADULT_Full_New_CHILD_CLG_Status_Pending_201_CREATED_P2</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser_111_20140321_0442331395434553487</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>BBD28328166E441013255D449481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1996-03-22</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>node_oid</con:name><con:value>DABD1A709AAD9052E0401F0A07996E9F</con:value></con:property><con:property><con:name>Requestor_Privilege</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Requestor_UserOID</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="36d67e4e-4c1f-4c45-a15e-bca6c210ba2c">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

log.info "CallingTCase" +CallingTCase.getName();
//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization",CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert"));


testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
//else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID","urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt");
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID","urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt");
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";
//${#Project#myXml}
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
log.info "Setting Properly_"
context.requestContent="hi"
//testProject.getProperty("myXml")
</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="RightsTokenCreate Request POST"><con:settings/><con:config service="RightTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken" methodName="RightsTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreate Request POST" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#ALID}" ContentID="${#TestCase#ContentID}"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="${#TestCase#SoldAsLanguage}">${#TestCase#SoldAsDisplayName}</ns4:DisplayName> 		 <ns4:ContentID>${#TestCase#SoldAsContentID}</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="${#TestCase#PPContentProfile1}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad1}</ns4:CanDownload> 			 <ns4:CanStream>${#TestCase#PPCanStream1}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="${#TestCase#PPContentProfile2}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad2}</ns4:CanDownload> 			 <ns4:CanStream>${#TestCase#PPCanStream2}</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="${#TestCase#PPContentProfile3}"> 			<ns4:CanDownload>${#TestCase#PPCanDownLoad3}</ns4:CanDownload> 			 <ns4:CanStream>${#TestCase#PPCanStream3}</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>${#TestCase#LICAcqBaseLoc}</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="${#TestCase#PPContentProfile1}"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation1}</ns4:Location> 		 <ns4:Preference>${#TestCase#FFWebLocPreference1}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>${#TestCase#FFWebLocLocation2}</ns4:Location> 		 <ns4:Preference>${#TestCase#FFWebLocPreference2}</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>${#TestCase#FFManifestLocLocation1}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference1}</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="${#TestCase#PPContentProfile1}" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>${#TestCase#FFManifestLocLocation2}</ns4:Location> 		<ns4:Preference>${#TestCase#FFManifestLocPreference2}</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>${#TestCase#PINodeID}</ns4:NodeID> 		 <ns4:RetailerTransaction>${#TestCase#PIRetailerTransx}</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>${#TestCase#PIPurchaseAccount}</ns4:PurchaseAccount> 		<ns4:PurchaseUser>${#TestCase#PIPurchaseUser}</ns4:PurchaseUser> 		 <ns4:PurchaseTime>${#TestCase#PIPurchaseTime}</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>ns3.google.com</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>transcation</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:hd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:sd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:pd</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsToken-Generation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Create Information" searchProperties="true" id="f4f4a170-3066-44b0-b6bc-fec5d1530393">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
/*testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );
log.info RTKLoc[RTKLoc.indexOf("Account").next()];
testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);*/

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);

//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsToken-Generation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>CommonTestSteps</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:7EB037CEDED654102E1516549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>7EB037CEDED654102E1516549481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>7594</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>tName</con:name><con:value>TC_DECE_3184_UserCreate_AUTH_Creator_YOUTH_Standard_New_ADULT_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_GeoProfile</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsToken-Generation" searchProperties="true" id="a2c8c4b5-ece4-4049-bd7b-d4e7c1cbde9c"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",RTCRequest.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",RTCRequest.getPropertyValue("SAML_USER1"));

testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
//testCase.setPropertyValue("ALID",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("ContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("ALID","urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt");
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testProject.getPropertyValue("ContentID"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",RTCRequest.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("NODE_USER_ID_FULL1"));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");
log.info "Feeding Data Complete"</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

RTCRequest.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>ALID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>ContentID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:hd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:sd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:pd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>transcation</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:CAC19DE62078514EE0401F0A2222592AE4</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:CAC19DE62086514EE0401F0A2222592AE4</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>7594</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>Inactive_Account_TestDataCreation</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>INACTIVE_ACCOUNT_NOTIFICATION</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b16ce8f3-4891-4051-9a45-7efb886890d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="b002cde9-8b8f-48c0-954b-9036a4b39e96" disabled="true"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(projectPath+"/project.properties"));
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows";
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Windows");
	} 
else 
	{
    		log.info "it's not Windows"
    		scriptLibrary = tP.getPropertyValue("scriptsPath_Linux");
	}

log.info  " ScriptLibrary     ... " + scriptLibrary;

com.eviware.soapui.SoapUI.settings.setString( "Script Library", scriptLibrary);

log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140218</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Wrapper" searchProperties="true" id="249c0cc3-deab-4389-b014-e82451bd5ff3"><con:settings/><con:testStep type="datasource" name="DataSource"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>BatchFileSelector.xls</file><worksheet>Sheet1</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>ProcessName</con:property><con:property>ToBeExecuted</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Run Enabled Suites"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();




def batchProcessName = context.expand( '${DataSource#ProcessName}' )
def toBeExecuted = context.expand( '${DataSource#ToBeExecuted}' )

if (toBeExecuted=='Yes')
{
	log.info(tP.getName())
	tP.getTestSuiteByName(batchProcessName).setDisabled(false);
}
else {
	log.info("No Test Suites selected");
}
</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>DataSource</dataSourceStep><targetStep>Run Enabled Suites</targetStep></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="INACTIVE_ACCOUNT_NOTIFICATION" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Inactive_Account_TestDataCreation" searchProperties="true" id="4d7c9627-d3f8-441f-a02d-945beb6add25"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "EU1_Eng"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","utkarsh.sinha@neustar.biz");//Test_Pass
tC.setPropertyValue("password","Password1");

tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

//
tS.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tS.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tS.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "FU_2SAU_"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");
//User 2 language - DE
tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","neuemailtest@gmail.com");//eblon@12

tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call SAU User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));


tS.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
tS.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
tS.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for SAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for ADULT SAU Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "DU3_"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");
//Language FR
tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","neuemailtest@gmail.com");//Password@12
tC.setPropertyValue("password",tP.getPropertyValue("password"));

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call ADULT SAU Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("user_oid3",tC.getPropertyValue("user_oid"));
tC.setPropertyValue("NODE_USER_ID3",tC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL3",tC.getPropertyValue("NODE_USER_ID_FULL"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for ADULT SAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER3",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_USER_ID3",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL3",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

tS.setPropertyValue("SAML_USER3",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_USER_ID3",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL3",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for Adult SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for ADULT SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER3"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID3"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL3"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Child Basic User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "FU4_"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","false");

tC.setPropertyValue("CLG_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("LegalGuardian","&lt;LegalGuardian>urn:dece:userid:org:dece:\${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian>");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("PrimaryEmail","neuemailtest@gmail.com");
tC.setPropertyValue("Language1","en");

tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Child Basic User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for Child User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER4",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_USER_ID4",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL4",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

tS.setPropertyValue("SAML_USER4",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_USER_ID4",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL4",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - CLGAttestation for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID4"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL4"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID4"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL4"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - GeoPrivacyAssent for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID4"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL4"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for Child User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID4"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL4"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for Adult BAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "Fifth_AdultBAU"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");

tC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("PrimaryEmail","neuemailtest@gmail.com");
tC.setPropertyValue("Language1","en");
tC.setPropertyValue("password","Password1");

tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Adult BAU User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("user_oid5",tC.getPropertyValue("user_oid"));
tC.setPropertyValue("NODE_USER_ID5",tC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL5",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for BAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER5",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_USER_ID5",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL5",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

tS.setPropertyValue("SAML_USER5",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_USER_ID5",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL5",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER5"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID5"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL5"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for BAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER5"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID5"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL5"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#TestCase#NODE_ACCOUNT_ID_FULL}/User/${#TestCase#NODE_USER_ID_FULL}/Policy/${#TestCase#PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML_USER1}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ParentalControl:RatingPolicy</dece:PolicyClass>
      <dece:Resource>urn:dece:type:rating:US:MPAA:G</dece:Resource>
      <dece:RequestingEntity>${#TestCase#NODE_USER_ID_FULL5}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#NODE_USER_ID_FULL1}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_FULL5}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:Ratingpolicy "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Set Node to Retailer"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create new RightsToken">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,"LP1");;
log.info "#############" + testCase.getPropertyValue("DBrightstokenid");
def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

		
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
		</script></con:config>
      </con:testStep><con:testStep type="groovy" name="UpdateDate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

 def account_oid= tP.getPropertyValue("account_oid");
 log.info "Acc. oid: "+ account_oid;
 dbObj = new dbUtils.dbUtils(log,dbHost);


updateCDRights= """update rights_token set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updatePTRights= """update rights_token set PURCHASE_TIME = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateUDRights= """update rights_token set UPDATED_DATE = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccount= """update account set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccountUser= """update account_user set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
dbObj.dbConnExecuteUpdate(updateCDRights);
dbObj.dbConnExecuteUpdate(updatePTRights);
dbObj.dbConnExecuteUpdate(updateUDRights);
dbObj.dbConnExecuteUpdate(updateCDAccount);
dbObj.dbConnExecuteUpdate(updateCDAccountUser);
</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" disabled="true"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestSuite#SAML_USER1}"/>
  &lt;con:entry key="IF-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#TestSuite#NODE_ACCOUNT_ID1}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyInacitveAccountCreated"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from inactive_acct_email_notify where account_oid = hextoraw('$account_oid')""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="1";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "0";
</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>B9C0650CABDF441087D0BF449481F9A8</con:value></con:property><con:property><con:name>accountname</con:name><con:value>ucr5_accname_20140417_0950421397708442369</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_57e03f92-fb36-47a8-9919-b593db948bf4</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_57e03f92-fb36-47a8-9919-b593db948bf4</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-04-20</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E4CA22A51A3993CBE0401F0A07994735"</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>neuemailtest@gmail.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>7594</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQCwkhUUEKBPZkt3QR0G7bl5XrDMGnwaGxA5Rff+zQUKC0yx6pEvVkPPPNxd/MJUPz1PIDxiDnJKNKFLbU300XA4otW6vHrqPZrhdrj7jZ1GwEjTg2bKdpuqoSMVZARBlHlLdUyzBtzbA1050Ytm9ZvmXXPNd+UJVbyJkwLVRqhqqs5yllfum2pRY59TPECPMpmgPzOfbHweDKF5o+qjCp7cstytJh3p5xvvB1HddiwJCmuIazuX6pH+hcxswfk4QiXuTw6jNmLfX17mq1qq3qtSxPdMswDN3wdKETM5J8VdtfqssQR3Sabc9dRDNKMErJBklQA+CzLFaCNMlywmfzD0ybumlI0xqssYZNm35V9TcHJbozLR2AzBnS2AyZlbERTCEHikG5GUUt9et5FdzeneSIsmmWz9nR+e8gAV1Cmi0g1lgVWYXufIsn0tW+BOxHFKcFI0u4lm2yQBiYMsxhStZXhInmi5lSll9ZM/FHqi4D/DdludT3sQro+onshCQBxv9PzfbrtbVyi9IC2rNwY0Fn5Q5785/e/e00cgIUPDqj503QKiHsK29B7cr9ej5u1l1vvV6CjkNuborFOurFDz/u6LfmSxJ6d9+uNrSX9uvXg2QQXevDZXe2igAnF2Qx7Dw42f08bFCvf7G6b0CXWfj5RkD7cmtYi6F56z1m05duuP4WTq6Mf9iD+TRhLEmnzWCjM6PjPPTjX+FFcdEMzKR763nLJ5OTVYrZ/Wo44t2nH/qm1/8yHYeDyH0s+pvB97tf04uXX0nrLab9GA6FFSWMi8d/AfPqKNsjCpW+qBfin9OLlJBYm5aq/kJyFONAudqWtyS1+IUgIBL7opjbs+t0jL5jBZ1e2HBs07B6pmOK/zy7afa9oFlx0BbFEcRuRqdE+pIsu+2fzwHiuc+AxpBry6zAM2DqJxZDxJES0ZF4HBllMMkEi/cadbtuBs1+veO59bARhJ7tmd261wgtt9kLVeU64z/pzzyYcsgPGdw9YPARYLIgIGle9jkTjc64SMkzWhY8NWtLVKNQiEGQSy4W95qOzsh8kYIErM+zuEihtpgtygTpbPtraQizUjrqTcr392F4x9+qTAidmEgFJmPpgKgmnBhFZhXIhwGbxn7AlfmgiIl8ZiKtPCd4i+Tw01u3yDbZtYqI6Hd3/NuscO/Uz77+/qb+CSj9OB87R/GS7LmtZqoYE4JE2lU1n1HtuVYsl0VZP1cSZC7M64InTX0MuBAs9zLJnoDqOxP6WUNmh/rI805+iK/gMzrmiMNcdJtSHs/YMMbA5IYRideyPnd9OXAp8sZhzU/JuqlYRCTiT3cV7GOpJ8RD8bPK8vitXCds7fkRcYq1ghOayJMcJy8fNAXOhFki+C/L942fMnDK+aFwl+QdFi666bHg8PEXRRJbS0UYZwXlkSQQIdgn2xInf1mA/6b0zkxJ6K8Tes0+nNB3g6uxoL05Une65M/KGinbBYMqF4ESS0tdi4VTOKfJHrm/Atzn967RMYJGwwn+wO+HkbTfid9L9nJ6/B7a/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>User1</con:name><con:value>firstuser_111_20140326_0458401395833320311</con:value></con:property><con:property><con:name>Username</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>Username1</con:name><con:value>firstuser20130902_065313</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130902_065333</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_065353</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>6CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>91B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>85B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>97B0B651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid5</con:name><con:value>6CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-03-28</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d41dd7c0-63c7-4c83-99b6-d741b7d0fa56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Execute_Batch_Process" searchProperties="true" id="c1a47097-9985-4d11-abca-3497a7115572"><con:settings/><con:testStep type="groovy" name="Run_Batch_Process"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projPath = groovyUtils.projectPath


def batch2Run = "INACTIVE_ACCOUNT_NOTIFICATION";


def pyFileName=  projPath+"/python/runOnBatchBox.py";
//log.info "@@@@@@@@ Executing " + pyFileName;
def process=new ProcessBuilder(projPath+"/python/runPython.sh",pyFileName,batch2Run).redirectErrorStream(true).start()
process.inputStream.eachLine {log.info (it)}
process.waitFor();
log.info("Execution Competed with Code:"+process.exitValue());
</script></con:config></con:testStep><con:testStep type="delay" name="WaitingBufferForBatchJobCompletion"><con:settings/><con:config><delay>90000</delay></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate_Batch_Process" searchProperties="true" id="d72368e6-3040-4c98-8f70-11187a86a130"><con:settings/><con:testStep type="groovy" name="ValidationStep"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from inactive_acct_email_notify where account_oid = hextoraw('$account_oid')""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="0";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "1";
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</con:value></con:property><con:property><con:name>Country</con:name><con:value>LU</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_Geopolicy_Portal_LU</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>85B0F52ABED654102E1516549481F9A8</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="ACCOUNT_DEIDENTIFICATION" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Deidentification_TestDataCreation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "EU1_Eng"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","utkarsh.sinha@neustar.biz");//Test_Pass
tC.setPropertyValue("password","Password1");

tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

//
tS.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tS.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tS.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node to Retailer"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create new RightsToken">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,"LP1");;
log.info "#############" + testCase.getPropertyValue("DBrightstokenid");
def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

		
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
		</script></con:config>
      </con:testStep><con:testStep type="groovy" name="UpdateDate"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

 def account_oid= tP.getPropertyValue("account_oid");
 log.info "Acc. oid: "+ account_oid;
 dbObj = new dbUtils.dbUtils(log,dbHost);


updateCDRights= """update rights_token set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updatePTRights= """update rights_token set PURCHASE_TIME = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateUDRights= """update rights_token set UPDATED_DATE = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccount= """update account set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccountUser= """update account_user set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
dbObj.dbConnExecuteUpdate(updateCDRights);
dbObj.dbConnExecuteUpdate(updatePTRights);
dbObj.dbConnExecuteUpdate(updateUDRights);
dbObj.dbConnExecuteUpdate(updateCDAccount);
dbObj.dbConnExecuteUpdate(updateCDAccountUser);
</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestSuite#SAML_USER1}"/>
  &lt;con:entry key="IF-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#TestSuite#NODE_ACCOUNT_ID1}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyTestDataCreated"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from inactive_acct_email_notify where account_oid = hextoraw('$account_oid')""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="1";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "0";
</script></con:config></con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>B9C0650CABDF441087D0BF449481F9A8</con:value></con:property><con:property><con:name>accountname</con:name><con:value>ucr5_accname_20140417_0950421397708442369</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_57e03f92-fb36-47a8-9919-b593db948bf4</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_57e03f92-fb36-47a8-9919-b593db948bf4</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-04-20</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E4CA22A51A3993CBE0401F0A07994735"</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>neuemailtest@gmail.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>7594</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQCwkhUUEKBPZkt3QR0G7bl5XrDMGnwaGxA5Rff+zQUKC0yx6pEvVkPPPNxd/MJUPz1PIDxiDnJKNKFLbU300XA4otW6vHrqPZrhdrj7jZ1GwEjTg2bKdpuqoSMVZARBlHlLdUyzBtzbA1050Ytm9ZvmXXPNd+UJVbyJkwLVRqhqqs5yllfum2pRY59TPECPMpmgPzOfbHweDKF5o+qjCp7cstytJh3p5xvvB1HddiwJCmuIazuX6pH+hcxswfk4QiXuTw6jNmLfX17mq1qq3qtSxPdMswDN3wdKETM5J8VdtfqssQR3Sabc9dRDNKMErJBklQA+CzLFaCNMlywmfzD0ybumlI0xqssYZNm35V9TcHJbozLR2AzBnS2AyZlbERTCEHikG5GUUt9et5FdzeneSIsmmWz9nR+e8gAV1Cmi0g1lgVWYXufIsn0tW+BOxHFKcFI0u4lm2yQBiYMsxhStZXhInmi5lSll9ZM/FHqi4D/DdludT3sQro+onshCQBxv9PzfbrtbVyi9IC2rNwY0Fn5Q5785/e/e00cgIUPDqj503QKiHsK29B7cr9ej5u1l1vvV6CjkNuborFOurFDz/u6LfmSxJ6d9+uNrSX9uvXg2QQXevDZXe2igAnF2Qx7Dw42f08bFCvf7G6b0CXWfj5RkD7cmtYi6F56z1m05duuP4WTq6Mf9iD+TRhLEmnzWCjM6PjPPTjX+FFcdEMzKR763nLJ5OTVYrZ/Wo44t2nH/qm1/8yHYeDyH0s+pvB97tf04uXX0nrLab9GA6FFSWMi8d/AfPqKNsjCpW+qBfin9OLlJBYm5aq/kJyFONAudqWtyS1+IUgIBL7opjbs+t0jL5jBZ1e2HBs07B6pmOK/zy7afa9oFlx0BbFEcRuRqdE+pIsu+2fzwHiuc+AxpBry6zAM2DqJxZDxJES0ZF4HBllMMkEi/cadbtuBs1+veO59bARhJ7tmd261wgtt9kLVeU64z/pzzyYcsgPGdw9YPARYLIgIGle9jkTjc64SMkzWhY8NWtLVKNQiEGQSy4W95qOzsh8kYIErM+zuEihtpgtygTpbPtraQizUjrqTcr392F4x9+qTAidmEgFJmPpgKgmnBhFZhXIhwGbxn7AlfmgiIl8ZiKtPCd4i+Tw01u3yDbZtYqI6Hd3/NuscO/Uz77+/qb+CSj9OB87R/GS7LmtZqoYE4JE2lU1n1HtuVYsl0VZP1cSZC7M64InTX0MuBAs9zLJnoDqOxP6WUNmh/rI805+iK/gMzrmiMNcdJtSHs/YMMbA5IYRideyPnd9OXAp8sZhzU/JuqlYRCTiT3cV7GOpJ8RD8bPK8vitXCds7fkRcYq1ghOayJMcJy8fNAXOhFki+C/L942fMnDK+aFwl+QdFi666bHg8PEXRRJbS0UYZwXlkSQQIdgn2xInf1mA/6b0zkxJ6K8Tes0+nNB3g6uxoL05Une65M/KGinbBYMqF4ESS0tdi4VTOKfJHrm/Atzn967RMYJGwwn+wO+HkbTfid9L9nJ6/B7a/wE=</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>User1</con:name><con:value>firstuser_111_20140326_0458401395833320311</con:value></con:property><con:property><con:name>Username</con:name><con:value>Fifth_AdultBAU20140417_0953421397708622840</con:value></con:property><con:property><con:name>Username1</con:name><con:value>firstuser20130902_065313</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130902_065333</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_065353</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>6CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>91B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>85B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>97B0B651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid5</con:name><con:value>6CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-03-28</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d41dd7c0-63c7-4c83-99b6-d741b7d0fa56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Execute_Batch_Process" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Run_Batch_Process"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projPath = groovyUtils.projectPath


def batch2Run = "ACCOUNT_DEIDENTIFY";


def pyFileName=  projPath+"/python/runOnBatchBox.py";
//log.info "@@@@@@@@ Executing " + pyFileName;
def process=new ProcessBuilder(projPath+"/python/runPython.sh",pyFileName,batch2Run).redirectErrorStream(true).start()
process.inputStream.eachLine {log.info (it)}
process.waitFor();
log.info("Execution Competed with Code:"+process.exitValue());
</script></con:config></con:testStep><con:testStep type="delay" name="WaitingBufferForBatchJobCompletion"><con:settings/><con:config><delay>90000</delay></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate_Batch_Process" searchProperties="true" id="487275a0-acc1-448c-ae43-0b0325aaf849"><con:settings/><con:testStep type="groovy" name="ValidationStep"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from account_status_history where account_oid = hextoraw('$account_oid') and status = deidentified""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="0";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "1";

</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</con:value></con:property><con:property><con:name>Country</con:name><con:value>LU</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:75B0F52ABED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7Pr/C4jx1jyzEXe4AZc8kpbWkSIJfmJSPkBXRiS8SSgeTXH8lgAoSk9Mxkhmi92v32om+3LnASu0EoBKSScmb0Og3zMap4FRIhbPm1CVhehMbWGLmRVUa1aAyVyCO+Yxo9ITLoMSExkw3TdZBnOZ6FqiPHC1wUlM9LZf/8wTRuIRXKtFIpqVurJGYiyN02zCxlAceCioDhBEQgSTAM+z8DpRngApPZrK9R5g7T5kzKeWDbpBQBgTgmJcITu27v6dQjEQzplGGZpbDxGYmGubm7XC5Ly/MST6e26ziO7fi20okEnX4xm2fFZYh6bMLX5zZmnFGCY/qKNag+yBmPjDCe8pTKWfKBaWQjR5u2YEUsgjz2xbTfHOToTrS0BzIV2BIzjApjA5hACoyAcTPoNcwvp1VwfXeUYiYmPE3EwfnvIAFbQMznEFmiiKxAd7rFI+lq1oEEPUbiTNAF/NJtMscEhHGVwoSuflKhmi8SRl5+YyXUHy26DMjflKVu72JV0O0j2enQKQj5f2q2W6+1lVscZ9Ac1r52w8nFQ3Y7pG0Y/IrbTkjk9aT/Iho5hF3lNahtuTfnw2bd9tbmUpQlk9e06vCvy+Xzb/KPk3jX4R0iHOz+uMe+P8nyxY9O9jpNrkRlmrwuHzw3XGAUTwmffu1fO36l5j9fopS0787un3xg6VN5NuKD+4unkT/wqr/R5eR3l8VL2iLXMvzeXc18Tu5Gq5TffhvduJWlHPTtq4clw2R8M4hr5ekV6j1fnb3++DG4rJ2/csCVb3fLAb/uN95i2o1hX1hQwjAb/wtEFkfdHr2OcaHqheXn9KIlNLImuWow1xwlJDBpNvUtTS1BpgiIRoEq5vpcQy0H1Vy31e1Uyh5y3C4qI/Wf79XQhR/WCg5aoziA2OZsQrUvzbLr/vkcIEkCASyC1FrwjMxAmJ9Y7GCJjR4bqMfBmYARVyx+0fVb1WrF65ZD13NCp9VyK36rW1X4K+Ww7ZrGLy4v2WUaTiSk+wxe3WPwARA6p6BpXve5UI0upErJM15kMkalBS4xyNQgSDUXB65XK9uCJvMYNGA74VEWQ2k+m+cJssX617UwEbl00B3l7+/D8A6/FZlQOhHVCkLH0gJVTTgyirwikA8DRs5uwIX5MIuofmYqrTKlZI1k/9Nbt+g22baKiuixPXxEBe6t+snX39+0PwFlH+Zj6yha0B23xUxVY0KRSLOo5jMuPZeyxSLL61fVBJkq87biSWQPgWSK5V5G/AmYvTVhnzRktqgPPG/l+/gyOWNDiSUkqtuM/HjChjEEoTeMnnotq1PXlz2XKm8SVvKYrB2rRUQj/nRXIQHRekp8pX6WPI3eynXE1o4fFadaKyRlU33S4+Tlg6YgXJmliv94umv8mIFjzveF2yRvsUjVTeNMwsdfDE1sDRMTwjMmex0zF+ySbY5TvswheFN6ZyYn9M2EXokPJ/R9/+dQ0V6Cza0u/bOyRfN2IWDqRSDH0jBXauFUztl0h9w3AHf5ve20nLCiuPEP/L4fSfOd+L1kJ6eH76H5Hw==</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_Geopolicy_Portal_LU</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>85B0F52ABED654102E1516549481F9A8</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="USER_DEIDENTIFY" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Deidentify_TestDataCreation" searchProperties="true" id="5a7e5c04-3a24-4396-a7fb-dacbc0d83b6a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("role")));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "EU1_Eng"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","utkarsh.sinha@neustar.biz");//Test_Pass
tC.setPropertyValue("password","Password1");

tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

//
tS.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tS.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tS.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for YOUTH SAU"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "FU_2SAU_"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","standard");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("MeetsAgeOfMajority","true");

tC.setPropertyValue("LegalGuardian","");
//User 2 language - DE
tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","neuemailtest@gmail.com");//eblon@12

tC.setPropertyValue("PrimaryEmailConfirmationEndpoint",tP.getPropertyValue("PrimaryEmailConfirmationEndpoint"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call SAU User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));


tS.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
tS.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
tS.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for SAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU for SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC for SAU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER2"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="UpdateDate" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbHost = context.expand( '${#Project#targetSystem}' );

 def account_oid= tP.getPropertyValue("account_oid");
 log.info "Acc. oid: "+ account_oid;
 dbObj = new dbUtils.dbUtils(log,dbHost);


updateCDRights= """update rights_token set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updatePTRights= """update rights_token set PURCHASE_TIME = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateUDRights= """update rights_token set UPDATED_DATE = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccount= """update account set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
updateCDAccountUser= """update account_user set created_date = '26-MAR-00 09.37.30.777000000 AM' where account_oid=hextoraw('$account_oid')""";
dbObj.dbConnExecuteUpdate(updateCDRights);
dbObj.dbConnExecuteUpdate(updatePTRights);
dbObj.dbConnExecuteUpdate(updateUDRights);
dbObj.dbConnExecuteUpdate(updateCDAccount);
dbObj.dbConnExecuteUpdate(updateCDAccountUser);
</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" disabled="true"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestSuite#SAML_USER1}"/>
  &lt;con:entry key="IF-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#TestSuite#NODE_ACCOUNT_ID1}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="USER_DELETE"><con:settings/><con:config service="Users" resourcePath="/rest/${Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="USER_DELETE" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestSuite#SAML_USER1}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#TestSuite#NODE_ACCOUNT_ID1}"/>
  <con:entry key="UserID" value="urn:dece:accountid:org:dece:${#TestSuite#NODE_USER_ID2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="VerifyInacitveAccountCreated"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from inactive_acct_email_notify where account_oid = hextoraw('$account_oid')""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="1";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "0";
</script></con:config></con:testStep><con:properties><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-03-28</con:value></con:property><con:property><con:name>user_oid5</con:name><con:value>6CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>97B0B651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>35931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>6673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>35931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_065353</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130902_065333</con:value></con:property><con:property><con:name>Username1</con:name><con:value>firstuser20130902_065313</con:value></con:property><con:property><con:name>Username</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>User1</con:name><con:value>firstuser_111_20140326_0458401395833320311</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>SurName</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZZb+o6EH4/vyJKH6uQHUIESGy9TVtoy376UrmOAdPEgdhhub/+2oFQoNDDuVIl6sl45pvF30yJgjAw3CqlKGY4IpLXKMvv/oeOPqBhKnDs+4pVdApKUTd0RcvnLW2sa75tGbLkUZogj1AGCCvLhqZbimYpeqGnFVyj6JpOznK0N1kaoJhy01wlp8nSOgwIdVO3ZTmJiRsBiqlLQIioy6DbrbaeXK7pggyTXCltUaYO48qUsbmrqjDnI4iCAOZgFKol9Uin5FO3iycEsCRGO58+Lcu7u6vVKrcyc1E8UQ1N01StqHIdn+LJjVz5lV1GvkfG0fZcByQiGIIA/wsEqBZi08iXqsEkijGbhhdM66quCdMKWkMF6ha5kdUvBym6Ky0dgYwpUOgU6JmxDhqjGBGIpH7HK8s311Vwe7cXA0LHURzSk/PfQUJkiYJojnyFZpFl6K63eCZdlRKCrkdgkFC8RG3RJnMAEZVeYjTG6ydMefP5VErLL60p/8NZlyH4N2UpqYdYOXT1THYaeIIo+z81O6zX1soABAmq1G3cIM+JMV6EuNNqd8Oxdf8QNaj26pVTCIfKW1D7cu/Op826763dpcYo7DVeh1G+df/2CFuD9i2p9V9myWdVNeK3B8IG3tx5sftxY+bPegt9OOoFM/OxOVvVm8Pbz80Q09r9AKyfmDb8tU682uPL9Al0uqPFLCCMdjdvdjMK8bNHNvn+3erhdZU4HqwWPofN/N0/pteu9wMShIQs1d89Z92FcDQbetNm9deo/2oPksnKb07s3057ePvolL9iOozhWJhRQjf5mCHIsqNoD68h3fF6AfYzvQgJ9pVxqurOBUdRhgiTK+KWoBY34QSEfZcXc3s27KKp1xrNfLGZty1dM5q6rfP/ipaj3xWrTsZBWxQnEOsRGWPhS7Dstn9+BghDlyLio1hZRgmcIir/YLEBGJA80uGPIyIU9SLO4g3LrNbMerWZN+ummTcK+dqdVreLNaNqO0Y+L0vtiD2T57g6Zig+YnBdO2LwDoJ4jpGgedHnlDc6ZTwlC7BMWKDnliBHUMIHQSy42DUsx1YpDucBEoDVMPKTAOXm03maIJVufw0FQJpKO81e+v4uhnf6LcsE1/GxUKAilhri1URnRpGRBXI5YPMw4Mx8NfGxeGY8rSzGcIvk+NNXt4g22bcKj+i93n3XM9x79auvf7+p/gBKPc3H3pG/xAdus5nKxwQnkUpWzQXILXLJcpmk9SsIgoy5eZXzpK52EUw4y2160Sci6t6EetWQ2aM+8byXH+NL2JR0GWAo5N0mpccrNowuomLD8PhrWV+7vhy55HljaM3OyeoBX0QE4h93FehCocfFL/xnFcX+V7nO2Drww+PkawXDZCJOYpxsLjQFjLhZzPkvig+NnzNwzvmxcJ/kPRbGu+kjYejyF0kQW1kGEEYJYV5DTgWHZJviZJs5cr+UvplJCX03odf04oQetZ66nPZCIO918Z+VFZy2C0SyWARSLGV5zRdO7pxMDsh9B/CQ34uWaRacgmP/gd+PI6l8E3+XHOT09D1U/gM=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0j38DYE5jhlpY2twOkbfrSEfJi1NqysWQu+fWVTEyAkJSegcFovdr99qJvdcFxEttBh3PIBU2ZNuy39J/OVH5ICAaZyR93SizD98EzgAA0Sd22Abu6NuS8gCHjAjPR0m3Tcg3TNSxvYnqB3Qzqbs22rR+69hVyLk1LlZqpa+skZjwo3bb0ImdBijnlAcMJ8ECQYNy5vgqkZoArTHr7YouydJi350JkAUKkFko8cUxqJE3QBTrQuQh5MKYRw6LI4clnyFv6097ValVbObU0j5BtmiYyfSR1Qk6j93r7XbUZwiGbpdt1D7OUUYJj+ogVqGsQ8zTUOnGU5lTMk1dMW8gylWkD1sQglsve6+jZQYnuTEsHIHOODT7HVmVsBDPIgRHQ7kfDlv7+vApu905yzPgszRN+tP43SMCWEKcZhAavIqvQnW/xRLraF0CCISNxwekSblSbZJgA1+5ymNH1FeWy+UKuleXX1lx+adVlQP6lLBdoH6uEjk5kp08j4OL/1Gy/XlsrX3FcQPvx4fcChzerTw+NmYUepoNrNrvqWl9Gj/etEsK+8hbUrtxP6+Nm3fXW06Yk+vB5+Os2WuXS0Q/kO37WLWyw7jfO/Q3vTl36LbT576IZfXZur6Z8EXvesrtZXDrISu7ij4sPI7GhIfeG06t3ZoTSxUfHzbOoM/g07X7C6Lq4K5LCfJxNGvf/NToPUE9XyY876/t4+bAu5pRFX5L+vNP5Gm4WLFu7zmjycZZeX/J3dq8RZXfJzbfPvY1b9wb2r/vWc0z7MRwKK0oYF9NfQES1VO0x7GuXsl5YvE0vSkJDY1aqBpniKC6ACb2tdilqCQpJQDQMZDG363rDc7oNs97wB426a5n2wKpb8p/vNq1Lv9OsOGiL4ghiL2Uzqnwplt32z9sASRJwYCHkxjItyBy4/obFPhZYG7KRPBwp4zBJJYv7g8te3+m6TrPe7Tm+bffqjmdeer5nO87A7+jaTSpu2W3emQnIDxjcMg8YfASEZhQUzas+57LRuZApWeBlIWKrtsQ1BoUcBLni4sB2m3XEaZLFoACjJA2LGGrZPCsThPj2aRuY8FI6GkzK8/dqeMfvqkxInZAqBa5i6YKsJpwYRW4VyOsBO/sBV+Y7RUjVMZNpFTklWySHr567RbXJrlVkRD97459WhXunfvb2lzvRG6DQcT52jsIl3XNbzVQ5JiSJtKtqLnBtUSuWy6Ksn6cIMpfmkeRJC42BFJLlNpP0NzC0M4HOGjI71Eeed/JDfIWYs7HAAhLZbVq5POOGMQaubhhDeVrW515fDlzKvAlYi1OyXiwvIgrxm3cVEhClJ8V38rFK8/C5XCds7fmRccprhZAcqVZqnGxeaQqSSrNU8l+a7xs/ZeCU80PhLsk7LEJ207QQ8PobTRFbS8eEpAUTw75eCvbJtsQpNhkEz0ovzJSE/jSh1/zVCf39+mosaS/B+k6X/l3ZoGW7ENDVRaDE0tLX8sIpnbNoj9yfAO7zu+86jtf0mvW/8PthJO0X4peSvZwen4f2Hw==</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZZb+o6EH4/vyJKH6uQHUIESGy9TVtoy376UrmOAdPEgdhhub/+2oFQoNDDuVIl6sl45pvF30yJgjAw3CqlKGY4IpLXKMvv/oeOPqBhKnDs+4pVdApKUTd0RcvnLW2sa75tGbLkUZogj1AGCCvLhqZbimYpeqGnFVyj6JpOznK0N1kaoJhy01wlp8nSOgwIdVO3ZTmJiRsBiqlLQIioy6DbrbaeXK7pggyTXCltUaYO48qUsbmrqjDnI4iCAOZgFKol9Uin5FO3iycEsCRGO58+Lcu7u6vVKrcyc1E8UQ1N01StqHIdn+LJjVz5lV1GvkfG0fZcByQiGIIA/wsEqBZi08iXqsEkijGbhhdM66quCdMKWkMF6ha5kdUvBym6Ky0dgYwpUOgU6JmxDhqjGBGIpH7HK8s311Vwe7cXA0LHURzSk/PfQUJkiYJojnyFZpFl6K63eCZdlRKCrkdgkFC8RG3RJnMAEZVeYjTG6ydMefP5VErLL60p/8NZlyH4N2UpqYdYOXT1THYaeIIo+z81O6zX1soABAmq1G3cIM+JMV6EuNNqd8Oxdf8QNaj26pVTCIfKW1D7cu/Op826763dpcYo7DVeh1G+df/2CFuD9i2p9V9myWdVNeK3B8IG3tx5sftxY+bPegt9OOoFM/OxOVvVm8Pbz80Q09r9AKyfmDb8tU682uPL9Al0uqPFLCCMdjdvdjMK8bNHNvn+3erhdZU4HqwWPofN/N0/pteu9wMShIQs1d89Z92FcDQbetNm9deo/2oPksnKb07s3057ePvolL9iOozhWJhRQjf5mCHIsqNoD68h3fF6AfYzvQgJ9pVxqurOBUdRhgiTK+KWoBY34QSEfZcXc3s27KKp1xrNfLGZty1dM5q6rfP/ipaj3xWrTsZBWxQnEOsRGWPhS7Dstn9+BghDlyLio1hZRgmcIir/YLEBGJA80uGPIyIU9SLO4g3LrNbMerWZN+ummTcK+dqdVreLNaNqO0Y+L0vtiD2T57g6Zig+YnBdO2LwDoJ4jpGgedHnlDc6ZTwlC7BMWKDnliBHUMIHQSy42DUsx1YpDucBEoDVMPKTAOXm03maIJVufw0FQJpKO81e+v4uhnf6LcsE1/GxUKAilhri1URnRpGRBXI5YPMw4Mx8NfGxeGY8rSzGcIvk+NNXt4g22bcKj+i93n3XM9x79auvf7+p/gBKPc3H3pG/xAdus5nKxwQnkUpWzQXILXLJcpmk9SsIgoy5eZXzpK52EUw4y2160Sci6t6EetWQ2aM+8byXH+NL2JR0GWAo5N0mpccrNowuomLD8PhrWV+7vhy55HljaM3OyeoBX0QE4h93FehCocfFL/xnFcX+V7nO2Drww+PkawXDZCJOYpxsLjQFjLhZzPkvig+NnzNwzvmxcJ/kPRbGu+kjYejyF0kQW1kGEEYJYV5DTgWHZJviZJs5cr+UvplJCX03odf04oQetZ66nPZCIO918Z+VFZy2C0SyWARSLGV5zRdO7pxMDsh9B/CQ34uWaRacgmP/gd+PI6l8E3+XHOT09D1U/gM=</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>7594</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:C0B0A665AED654102E1516549481F9A8</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:81B01822BED654102E1516549481F9A8</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>neuemailtest@gmail.com</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>FU_2SAU_20140417_1259111397719751543</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E4CA22A51A3993CBE0401F0A07994735"</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>7EB037CEDED654102E1516549481F9A8</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>81B01822BED654102E1516549481F9A8</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-04-20</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_db1ebc23-cfdd-4987-9121-06640f10d542</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_db1ebc23-cfdd-4987-9121-06640f10d542</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-04-22</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>accountname</con:name><con:value>ucr5_accname_20140417_1257401397719660330</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>B9C0650CABDF441087D0BF449481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d41dd7c0-63c7-4c83-99b6-d741b7d0fa56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Execute_Batch_Process" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Run_Batch_Process"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projPath = groovyUtils.projectPath


def batch2Run = "INACTIVE_ACCOUNT_NOTIFICATION";


def pyFileName=  projPath+"/python/runOnBatchBox.py";
//log.info "@@@@@@@@ Executing " + pyFileName;
def process=new ProcessBuilder(projPath+"/python/runPython.sh",pyFileName,batch2Run).redirectErrorStream(true).start()
process.inputStream.eachLine {log.info (it)}
process.waitFor();
log.info("Execution Competed with Code:"+process.exitValue());
</script></con:config></con:testStep><con:testStep type="delay" name="WaitingBufferForBatchJobCompletion"><con:settings/><con:config><delay>90000</delay></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate_Batch_Process" searchProperties="true"><con:settings/><con:testStep type="groovy" name="ValidationStep"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def node_user_id= tS.getPropertyValue("NODE_USER_ID1");

String envIdentifier = tP.getPropertyValue("DBHost");
def account_oid = tP.getPropertyValue("account_oid");
myDBUtils = new dbUtils(log, envIdentifier);

sqlStr = """select count(1) from inactive_acct_email_notify where account_oid = hextoraw('$account_oid')""";

log.info("@@@@ Executing Query : $sqlStr");
String queryResultXml = myDBUtils.SelectFromDB(sqlStr,envIdentifier);
log.info("#### Query Result : " + queryResultXml);
queryResultXml = queryResultXml.replace("(1)"," ");
myDBUtils.dbConnClose();
sleep(200);

String count ="0";

def myXML = null;
if(queryResultXml != null)
{
log.info("got response");
 try
 {
  myXML = new XmlSlurper().parseText(queryResultXml);
	count = myXML.ResultSet.Row.text();

 }
 catch(Throwable e)
 {
  log.info e;     
 }
}
log.info ("Got Count :: " + count);
assert count == "1";
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>user_oid2</con:name><con:value>35931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_Geopolicy_Portal_LU</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyo4gRBIBEiBwCrblnaBtmf3pTKOAXcTG2KHS3/92oFQoJdlj1SJejKe+ebib6bBYRKXPZ9znArCqBYGTf25WsNmZeKWjcm44hh2DdYN17VcY1x1K9HYtevjia1rIecZDikXkIqmXjYt2zBtw6qNTNsr255ZLllW5ZeuPeKUS9NSpWTq2jqJKfdyt009S6nHICfcozDB3BPIG/q3N57U9GCBSW81tihzh2lrJsTcAwCVIoxwHKMSYglogCOdRsS9IZlSKLIU73xGvKnv7q5Wq9KqUmLpFJRN0wSmC6ROxMn0Um9dFJdxFNIJ2547kDJKEIzJK1SgbrGYsUjz4ylLiZgln5i2gGUq0wZeIwNZNr3UwZuDHN2Zlo5AphwafAatwtgAT3CKKcLawyBs6pfnVXB7d5RCyicsTfjJ+d8gYbrEMZvjyOBFZAW68y1+kK5WAyMvpCjOOFnivmqTOUSYa/cpnpD1DeGy+SKu5eXX1lz+kaLLMPqXsjTAIVYJHXyQnYBMMRf/p2aH9dpaeYRxhls3k8HgqU/6/SsABlZmv/wK+MO4cvtaZ80cwqHyFtS+3LvzabPue2t3aXnTvsM8tMdumq5tcH296t2aV983DAXO6OEJdoYvq+sr0x/1+osMdePNUPy8dh/btRULX2uLXtskP5/czcOonT5dLBezMBDhMg4eJ3VgObfjJHnxXdSfLVh2zwdrx318/fHD7V07/m9nfvP72zU3p9NerT921rRszRaV8ebhbvb922xxQe9gt3Znlv3OAPTLa/HyyJpvMR3GcCwsKGGYjV8wEsVRtUcYaD1ZLyi+phclIZExyVW9ueIoLjAVekvdUtTiZZKASOTJYm7P1U7bdE3fCrqBU7Uts9y1qpb8Tz4nq+f69YKDtihOIHYYnRDlS7Hstn++BogSj2Ma4dRYsgzNMNe/sBhAAbWQDuTjYJTjEZMs3u21JSirW+8F1V6n6nR6VdupB7ZZ8V2n5ld0rc/EHb1L/YnA6TGD144YfIARmROsaF71OZeNzoVMyQIuMxFbpSUsUZzJQZAqLpZX61XASTKPsQIMEhZlMS7NZ/M8QYBvf8sGRDyXDrqj/P19Gt7ptyITUiciSoGrWNpYVhO/G0UVr1oE8mnAlnkYcGHezyKinplMq0gJ2iI5/vTWLapN9q0iI3ruDJ+tAvde/ezr72+CL0CB03zsHUVLcuC2mKlyTEgSaRXVXMDSopQtl1lev5oiyFSaB5InLTDEKJMstxmx35iCvQlw1pDZoz7xvJcf48vEjA4FFDiR3ablxzM2jCHmasMI5WtZn7u+HLmUeRN4LT6SdWK5iCjEX+4qyENKT4rv5c+KpdFbuT6wdeBHxinXCkHoVJ3UONl80hSISbNE8h9LD41/ZOAj58fCfZL3WITspnEm8OdfNEVsTR0ixDIqwkDPBYdkm+MUmzn23pTemckJfTeh1/zTCf3f7c1Q0l4C9b0u+buyQfJ2QVhXi0COpamv5cIpndPpAbnvAB7ye8dsm77jVP2/8PtxJK134veSg5yevofWHw==</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj2dKm5aX0gFmsID2XEUvcPToFyekC0TbFJoU0V9/k2IRED2cO+MMZrvZfXb3yZM0OI4j22tzDqmgCdOCTlN/hDF2JtUxNqDi1owyqYNRR9WqUbVda+yWbeJWxroWcJ5BwLjATDR120JlwyobqDayyp7teHa55Dj1B127hZTL0NKlZOnaKo4Y9/K0TT1LmZdgTrnHcAzcE8Qbtq8uPenp4QKT3mqsUeYJ09ZMiLlnmqQUAoEoIiWSxGbD3PFphNwb0inDIkvhPWfIm/r73peXl9KLU0rSqWlblmVadVP6hJxOT/XWSbEZwoBNkvXaxyxhlOCIvmEF6grELAm1djRNUipm8RehkYksFdqAFTEIKrNT3fxIkKM7MtIOyJRjg88wKoINYAIpMALar0HQ1E+Pm+B67yjFjE+SNOZ767+DBGwJUTKH0OBFZQW64yMeaFerAcQLGIkyTpfQVzSZYwJcu0lhQleXlEvyhVzLx6+tuPyjBcuA/M1YGuY2VgndPNCdDp0CF/9nZtvzWke5xVEGLZZ0BzcVdAeT+I1eBCh4iOd3kmjT+LmZQ9h2XoPajPt9vU/WDbfeN2XwVOuvaNat1Zxf6PZ6fHZO//3dniHm/xhbcXkp7trhQsTd25ptZ/9UL8f2bf22P3WdLHMegopYvj2d3VcryK5dnESEmsh8dlznyh4Ky59eXLsRIs9pt9e//sl/4OS1dvOWdbrTkR2Gvelz5TzpXkXkut/v+vdmn52d2+7yvPPz3lmcLMLl8xOdzebWhDhvNXY/um9+1LRdw66xkIRhNn4CIoqlokfQ0XpyXlh8Ly/KQkNjkrt6c6VRXAATekvtUtLiZVKAaOjJYa7X9fqZ5Varrt/tVCtlZNldVEHyv3rZRb162y00aI1iD6KfsAlVuZTKrvnzPUASexxYCKmxTDIyA65/E7GDBdYCNpCHI2EcRolUcb/e69Z7PeR2enXUc5Hf88t+VYJ2feRYtqNr/URcs+u0PRGQ7ip4bUfBB0DonIKSecVzLonOhWzJAi8zEaHSEpcYZPIiSJUWy31uxeQ0nkegAJtxEmYRlOazed4gk69/bQMTnlsH3VF+/r4sb/9b0QnpE1LlwFUtZyCnCQeuIlQU8mXByNouuAjfzkKqjplsq0gpWSPZ/fTBFkWTDVVkRY/+8BEVuDfuR2//vNP8BpS5349NonBJt9IWd6q8JqSItIppLnBpUcqWyyyfX00JZCrDy3OOkDkEkkmVex0lz8DMTQjzqEtmg3ov88a+iy8TMzYUWEAs2ablyyNeGEPg6oURyNOyOvb5spNS9k3AShyy+ZF8iCjE375ViEeUnzTfyJ+XJA0/xnUg1lYeWad8VgjKpmqlrpPXL0hBEhmWSv1L0u3ghwIcSr5r3DR5g0VINo0zAV9/0ZSwNXVMSJIxEXT03LAttjlO8ToH78PpU5hc0N9v6BX/8ob+fXU5lLIXY33jS//sbNCcLgR09RDIsTT1lXxwyuRsuiXu7wC39d23zqx2tVpp/0HfdytpfTJ/tmz1dP88tP4D</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSRxQSh3CLChLXlqX0QigsfamM44DbxKGxE+j++mOHhgKFLnukStST8cw3F38zVwwGvmk3GMMRJyFVeu2a+lIEs6oJYFFDVnWmWQWItJmBgOaaYIY8ZJrIslSlx1iMe5RxSHlNNQ1gaYalgfLIsGzTtItWvmRaz6oyxhETpoVK3lCVdeBTZqdua2ocUTuEjDCbwgAzmyPbaQxubaFpwwyTWr/aoEwdRvUF50tb11HexQj7PsqjMNCv9D2dK5fZDplTyOMIf/p0WU39vLtarfKrQj6M5rppGIZuVHWh4zIyv1TrF9ll7PaoF27OLUhDShD0yR8oQQ0wX4Su0vDnYUT4IjhhGujAkKY1vEYaAha9VPUvBym6My3tgYwY1NgCgszYEHs4whRh5WnYq6mX51Vwc3cUQcq8MArYwfnfIGGaYD9cYldjWWQZuvMtHklX/Qoju0eRHzOS4DvZJkuIMFMeIuyR9S1hovlcpqTlV9ZM/JGsyzD6l7Jc6btYBXT9SHbaZI4Z/z81263XxsoY+jGutwaDB2NIpyDK3Qe3odcf5nqF9u9uzlzVUgi7yhtQ23J/ng+bddtbn5dm5VHy+nj30Cw63mTQGABn2nF8L3mcPs+8dummxcbzcQU5ycC9TkB5/T5xb5lHnImZ/CpN23GQa+L75oIHH9eTi+e4O1mXhlZ13E9mNzl/PCVNHl2/VW580BpV71+vrZAMx9N+gh/ahHes+bzcevInScl/er6bvFVWYP5WcCatX/3yxVuOAzDFucde37D61c7sdV77imk3hn1hRglOPHvFiGdH2R69ttIV9YL8Z3qREuJqXqpqLyVHMY4pV+vylqQWOxYERFxbFHNzrpSbRqNUBK1Ou1S0gGF2QBGI/6pWBXSrjUrGQRsUBxBbIfWI9CVZdtM/PwNEgc0wdXGkJWGMFpipP1hsQw6VHh2KxxFShkehZHGr0zYaDaPbLRhGs9kyrFKzWLEKoFTplsvlqqrchfye3kcNj+Non8HLeww+xIgsCZY0L/uciUZnXKTkHSYx90E+gXmKYzEIIsnFtmlVijojwdLHErAehG7s4/xysUwTpLPNr6lBxFLpsDNK39/J8A6/ZZkQOi6RCkzG0sSimvjIKLKyQE4GDIzdgDPzjdgl8pmJtPKIoA2S/U9f3SLbZNsqIqKXlvMCMtxb9bOvf7+p/wBKP8zH1pGbkB232UwVY0KQSD2r5jvMv+fjJInT+pUlQUbCvC54EugORrFguY9R+IapvjWhnzVktqgPPG/l+/hivqAOhxwHotuU9HjGhuFgJjeMnngt63PXlz2XIm8cr/kxWcsXi4hE/OOugmwk9YT4Qfyswsj9KtcRWzt+RJxireCEzuVJjpOPE02BQmGWCP4Lo13jxwwcc74v3CZ5i4WLbprFHJ/+okhiq6kQoTCmvNdWU8Eu2aY4+ccS219K38ykhP45odfs5IT+Pbh1BO0FUN3qkr8rayRtF4RVuQikWGrqWiycwjmd75D7J8Bdfm8Zkt9LxcZf+H0/kvo38XfJTk4P30P9Pw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx0j38DYE5jhlpY2twOkbfrSEfJi1NqysWQu+fWVTEyAkJSegcFovdr99qJvdcFxEttBh3PIBU2ZNuy39J/OVH5ICAaZyR93SizD98EzgAA0Sd22Abu6NuS8gCHjAjPR0m3Tcg3TNSxvYnqB3Qzqbs22rR+69hVyLk1LlZqpa+skZjwo3bb0ImdBijnlAcMJ8ECQYNy5vgqkZoArTHr7YouydJi350JkAUKkFko8cUxqJE3QBTrQuQh5MKYRw6LI4clnyFv6097ValVbObU0j5BtmiYyfSR1Qk6j93r7XbUZwiGbpdt1D7OUUYJj+ogVqGsQ8zTUOnGU5lTMk1dMW8gylWkD1sQglsve6+jZQYnuTEsHIHOODT7HVmVsBDPIgRHQ7kfDlv7+vApu905yzPgszRN+tP43SMCWEKcZhAavIqvQnW/xRLraF0CCISNxwekSblSbZJgA1+5ymNH1FeWy+UKuleXX1lx+adVlQP6lLBdoH6uEjk5kp08j4OL/1Gy/XlsrX3FcQPvx4fcChzerTw+NmYUepoNrNrvqWl9Gj/etEsK+8hbUrtxP6+Nm3fXW06Yk+vB5+Os2WuXS0Q/kO37WLWyw7jfO/Q3vTl36LbT576IZfXZur6Z8EXvesrtZXDrISu7ij4sPI7GhIfeG06t3ZoTSxUfHzbOoM/g07X7C6Lq4K5LCfJxNGvf/NToPUE9XyY876/t4+bAu5pRFX5L+vNP5Gm4WLFu7zmjycZZeX/J3dq8RZXfJzbfPvY1b9wb2r/vWc0z7MRwKK0oYF9NfQES1VO0x7GuXsl5YvE0vSkJDY1aqBpniKC6ACb2tdilqCQpJQDQMZDG363rDc7oNs97wB426a5n2wKpb8p/vNq1Lv9OsOGiL4ghiL2Uzqnwplt32z9sASRJwYCHkxjItyBy4/obFPhZYG7KRPBwp4zBJJYv7g8te3+m6TrPe7Tm+bffqjmdeer5nO87A7+jaTSpu2W3emQnIDxjcMg8YfASEZhQUzas+57LRuZApWeBlIWKrtsQ1BoUcBLni4sB2m3XEaZLFoACjJA2LGGrZPCsThPj2aRuY8FI6GkzK8/dqeMfvqkxInZAqBa5i6YKsJpwYRW4VyOsBO/sBV+Y7RUjVMZNpFTklWySHr567RbXJrlVkRD97459WhXunfvb2lzvRG6DQcT52jsIl3XNbzVQ5JiSJtKtqLnBtUSuWy6Ksn6cIMpfmkeRJC42BFJLlNpP0NzC0M4HOGjI71Eeed/JDfIWYs7HAAhLZbVq5POOGMQaubhhDeVrW515fDlzKvAlYi1OyXiwvIgrxm3cVEhClJ8V38rFK8/C5XCds7fmRccprhZAcqVZqnGxeaQqSSrNU8l+a7xs/ZeCU80PhLsk7LEJ207QQ8PobTRFbS8eEpAUTw75eCvbJtsQpNhkEz0ovzJSE/jSh1/zVCf39+mosaS/B+k6X/l3ZoGW7ENDVRaDE0tLX8sIpnbNoj9yfAO7zu+86jtf0mvW/8PthJO0X4peSvZwen4f2Hw==</con:value></con:property><con:property><con:name>role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:5673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>5CB090A1DED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>99B08668CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>87B0A651CED654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>25931BDE69E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>5673B60569E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>9433787859E654102E1516549481F9A8</con:value></con:property><con:property><con:name>Country</con:name><con:value>LU</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdRTLCS}</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TEST_ACCOUNT_AND_USER_DATA_PURGE"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Test_Account_And_User_Data_Purge" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2aea9c18-2ae2-442c-93bb-9d3d027d044a"><con:settings/><con:testStep type="groovy" name="Set Node for Account Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("nodeid","RET");
log.info("Set node for account create");
log.info("Node set : " + tC.getPropertyValue("nodeid")+ "'");



</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "ucr5_username_"+new Date().format( 'yyyyMMdd_hhmms' )+ System.currentTimeMillis();
log.info("Create user : '"+uname+"'");
tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("Language1","en");
tC.setPropertyValue("PrimaryEmail","fztcoord190_pm@neustar.biz");
tC.setPropertyValue("password","Password1");

tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")
myTC.setPropertyValue("audience","urn:dece:org:org:dece:DLASP_CS_1");
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName())
log.info "myTC" + myTC.getName();
log.info("Audience Set : " + myTC.getPropertyValue("audience"));

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));

//
tS.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tS.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tS.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tS.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tS.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Node to Retailer"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","RET");
log.info("Set node for Rights Token Create API");
log.info("Node set : " + tC.getPropertyValue("nodeid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Create new RightsToken">
        <con:settings/>
        <con:config><script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTGRequest = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("RightsToken-Generation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

mydb = new dbRightsToken(log,testProject.getPropertyValue("targetHost"));;

def rtStatus = mydb.rightstokenGetStatus(testCase.getPropertyValue("DBrightstokenid"));
def rtDBinfo = mydb.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
def RT_Data5 = mydb.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());
testCase.setPropertyValue("rtDBinfo",rtDBinfo.toString());
log.info rtStatus;

	//	if ( rtStatus.toString()!='active'){
			log.info "Calling RightsToken Create API for a new RightsToken !"
			def runnerRTG = RTGRequest.run( null , false )
			assert runnerRTG.status == Status.FINISHED;
	//	}
	//	else{
	//		log.info "Rights Tokenid  is Valid :" + testCase.getPropertyValue("rightstokenid");
	//		def Val_DbResultRTSHXml =  new XmlSlurper().parseText(RT_Data5.toString());
	//		def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
	//		testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());
						
		//}</script></con:config>
      </con:testStep><con:properties><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1997-03-28</con:value></con:property><con:property><con:name>user_oid5</con:name><con:value>B61491DDD5B35410683553549481F9A8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>F7C40DFBEF5FCAC3E0401F0A07993BEA</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>F7C4108E8B5D2CAAE0401F0A05995A93</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>F816495745FC8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>F7C40DFBEF5FCAC3E0401F0A07993BEA</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_065353</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130902_065333</con:value></con:property><con:property><con:name>Username1</con:name><con:value>firstuser20130902_065313</con:value></con:property><con:property><con:name>username</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>User1</con:name><con:value>firstuser_111_20140326_0458401395833320311</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>transactionid</con:name><con:value>107</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>survive_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:F78891FF996086B8E0401F0A0599301D</con:value></con:property><con:property><con:name>survive_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:F78891FF995486B8E0401F0A0599301D</con:value></con:property><con:property><con:name>survive_assert</con:name><con:value>nVZbb+I4FH6fXxFlHkchTggBooIUbrtsYcpA2+n0ZWScE3AbnBA7XPrr1w4NBUq7zEpIyCfH3/nOxZ99xfEisj2fc0gFjZnW7zT036hWIXUcWkatTBzDqZSnBsZuaKBqDdXdSkhQvaxrfc4z6DMuMBMN3UaWYyDHsK1b5Hq26yGrVC2XH3XtHlIuoaVLCenaZhEx7uVhG3qWMi/GnHKP4QVwTxBv4g8HnvT0cMFJb17tWOYB0+ZciMQzTVIKgEAUkRKJF+aVeeRzFXBvQmcMiyyF15gBb+ive9frdWldLsXpzLQRQiaqm9In4HT2VW9+KTZD0GdhvFu3MYsZJTiiL1iRGoKYx4HmR7M4pWK++ADaMi2koA3YEINYDvuqm28BcnYXIh2RTDk2+BxbBdgYQkiBEdDuxv2G/vWyDu723qaY8TBOF/xk/WeUgK0gihMIDF5kVrC7HPFMuZpXQLw+I1HG6Qq+qzFJMAGujVII6WZAuRy+gGt5+7UNlz9aTBmQP2nLlXnIVVI3z1SnQ2fAxf/p2WG/dij3OMqg2Xoof6Md7LZ/PHS797Vx1U/ue1M0pc9xI6dw6LwjtW/36/p0WPez9brJZ8NBK0mfrusdPu4G2Ta0rLb1vF7Z+Ob5VzIc+UP2I/1WSeiym/6cusPl8lcwCB+iEVtu1tXM+T7q/XW9dboP8eOX6fZ6XiaAr/v245DY5tOoFnbY00uUjGAU9d1uyh7RCBCs79LWz2/bJ4EGycq9Xk9vWtPW3+O7sfvPy4+2fXPnL7/AxBkv0PRlnfz9MobU3Tz6jbecDnM4NhaSMMmmT0BEsVTj0e9oPdkvLD6XF2WhgRHmrl6iNIoLYEJvql1KWrxMChANPNnM3bpXrdXqVq9Xr7uo5rZqXeQgq4d8VKnXy8jqFBq0Y3FCsR2zkKpYSmV38/M5QbLwOLAAUmMVZ2QOXP8EsYMF1vpsLA9HzDjcxlLFex3bqViu03Zafsu2y3W7hyrlqtu2Oq7rVnu69j0WN+wm9UMB6bGC148UfAyEJhSUzKs553LQuZAlWeJVJiKrtMIlBpm8CFKlxZ7t1Comp4skAkXYXMRBFkEpmSd5gUy++7cNTHhuHXdv8/P3YXqn34pKSJ+AKgeucmmB7Ca8u4oqXqVI5MOELfsw4QLezwKqjpksq0gp2TE5/vQ2LWpM9qPSGfiT0e/25LdVMN9vuAxAluT9TvMTWuZpRfaBghU9CFvcqvKikDLSLPq5xKVlKVutsryDVSWRqYQ3pVJa5gRIJnVuexs/AzP3EOZF18ye9Unkvf2YXybmbCKwgIWcNy1fXvDGmABXb4y+PC+bSx8wRyFl3QRsxDlbO5JPEcX409cK8Yjyk+aR/FvHafDWrjNYB3FknvJhISibqZW6ULYfDAWJJSyVChinh+DnAM4FPzbui7znIuQ0TTMBH3/RlLQ1dExInDHR7+i54VBuc55im4D35vQOJpf01zt6wz+8ox+Gg4kUvgXW9770v50Nmo8LAV09BXIuDX0jn5wyOJsdyPsrwfMKX3E+U/jjTJrvzO8tBzU9PQ/NfwE=</con:value></con:property><con:property><con:name>SurName</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SAML_USER5</con:name><con:value>SAML2 Assertion=nVbvU6M8EP7uX8HgxxsKtNACYzuDVO966qmlPT2/3MSwtDkhqSTU6l//JlRqW6vXe2eYgSyb3Wd/5MkecZRnzSDkHApBGNUG/a7+u5NYbuq6vtHxAAwHdzzDS/2OgRzLh3bq+in2dG3AeQkDygWioqs3LdsxLPl0RpYXOO2g6TWann+naz+h4NK0VGlYurbIM8qDym1XLwsaMMQJDyjKgQcCB3F4cR5IzQDVmPTe0RJl5bDoTYWYBaaJGwlgyDLcwCw3j8wNnaOEBzGZUCTKAl59Jryrv+59enpqPLUarJiYTcuyTMs3pU7CyeRQ7x3UmyEZ0JQt1xGijBKMMvKCFKgLEFOWaGE2YQUR0/wD07ZpW8q0AQtsYNuhh7r55qBCt6elDZAFRwafIrs2NoQUCqAYtPFw0NUP96vgcu+oQJSnrMj51vrfIAGdQ8ZmkBi8jqxGt7/FHenqHQEOBhRnJSdz+KHaZIYwcO2qgJQszgmXzZdwrSq/tuDyIXWXAf6XshyZ61gldHNHdvpkAlz8n5qt12tp5SfKSui56XjhhsX16Ff6xRp2OtNfyfF37P1pDZ66FYR15SWoVblf19vNuuqt102P/CufnuXh6OwKP7hJq4y/tye+yTqtm1F2dfqSgOtcX57cxUK8jM3vz02LX7Jv7Ob6603/ZPzl8uQl/tXyBtNxP3o+SFzPCh/C9u3VRRiVfxwqkUaOGV084rszVnTub6ez2Op3foRJ+S29nd4vboa3X5z4271I2eU0vTvPx3l83Tp5aS4Oygcw787os4X6txc35OwqGnffYlqPYVNYU0Jc3v8BLOqlao9BXzuV9ULic3pREpIYaaUazBRHcQFU6D21S1FLUEoCIkkgi7lch23b8e1+v+8et1zHttpey3Xll+949qkfejUHLVFsQYwYTYnypVh22T+fA8R5wIEmUBhzVuIpcP0Ti30kkDagQ3k4GOUwYpLFQ9+K7LDtRI5/0jz13FZ06kWR5dl+1I5819W1H0xc0ssiTAUUGwxu2xsMPgRMZgQUzas+57LRuZApeUTzUmR2Y44aFEp5ERSKi4Om47kmJ/ksAwXYzFlSZtCYTWdVgky+fDcNhHklHZ6MqvP3YXjb/+pMSJ2EKAWuYjkGWU3YcRXZdSAfB+ysB1ybD8uEqGMm0yoKgpdINn+9dYtqk1WryIh+R/Fvu8a9Ut97+/ud5iegzO18rBwlc7Lmtr5T5TUhSaRXV/MRNR4b5XxeVvXrKIIspHlT8qRtxoBLyXLPI/YA1FyZMPe6ZFaotzyv5Jv4SjGlsUACctltWrXcY8KIgasJYyBPy2Lf8WXDpcybgIXYJYsyOYgoxJ/OKjjASk+Kr+TriRXJW7l22FrzI+OUY4UgdKJW6jp5/qApMJNmieQ/Vqwb32Vgl/NN4SrJKyxCdtN9KeDjP5oitq6OMGYlFYO+XgnWybbCKZ5nELwpvTNTEfrrDb3gH97QtxfnsaS9HOkrXfJ3ZYNU7YJBV4NAhaWrL+TAKZ3TyRq5vwJc5/dO5LWOw1YU/oXfNyPpvRO/l6zldPs89P4D</con:value></con:property><con:property><con:name>SAML_USER4</con:name><con:value>SAML2 Assertion=nVZrc6o8EP7eX8HQjx0EFBSZ6oyXtofeq7W3L500rJoWEyVBsb/+TVCsWtvjeWeYgSyb3WcvebLHHI2iot/gHGJBGNWCdk1/LdvItfol2/AwIMMp9sFA1bBvADjlsmf35X/QtYDzBALKBaKiphct2zEs+VTuLc93yr7lFuxq5UXXHiDm0rRUKVi6lo4iyv3MbU1PYuozxAn3KRoB9wX2u42rS19q+ijHpNePFygzh3F9KMTYN01cCAFDFOECZiPz2NzQOQ653yUDikQSw9JnyGv6cu9sNivMSgUWD8yiZVmmVTWlTsjJ4FCvH+SbIQxony3WLUQZJRhF5BMpUFcghizUGtGAxUQMRz+Ytk3bUqYNSLGBbYce6uaXgwzdnpY2QMYcGXyI7NxYB/oQA8Wg9TpBTT/cr4KLvfcxorzP4hHfWv8bJKBTiNgYQoPnkeXo9re4I131Y8B+QHGUcDKFa9UmY4SBa7cx9El6SbhsvpBrWfm1lMuH5F0G+F/KcmyuY5XQzR3ZaZMBcPF/arZer4WVBxQlUK/M7oZNfl6cum7lqBRF5wK9D+6atPHp1TII68oLUKtyL9fbzbrqreUmWj4i7njumFaaTCj0esVyg1R71nnUmDy8o+vBvX19iScO3P55FjdUpC/sCrHKEWOp6553n3qPcRJa8/R5mI4PnmZ3LzY5j7zi2cOw+nbrnJycDJvzZ8899brcuZp0jx6C1knx8friYt6+7lU/mx/hxZX5cDPwOmcV9+4PHnw8W50guDg6mAzOTvFjb3TxmbiPYcU5n3zUvmJaj2FTmFNCN3l7ByzypWqPoK2dynoh8Tu9KAkJjX6m6o8VR3EBVOh1tUtRi59IAiKhL4u5WFdLltNuuF7bbZZcx7bKXsl15VfV8ezTasPLOWiBYgtii9E+Ub4Uyy7653eAeORzoCHExpQleAhc/8ViGwmkBbQjDwejHO6ZZPFS0W55rny8k0qrXHaKTvPUqXq2/K56ba+qa9dMVvsmbvQFxBsMbtsbDN4BTMYEFM2rPuey0bmQKZmgaSIiuzBFBQqJvAhixcV+0fFck5PROAIF2ByxMImgMB6OswSZfPEuGgjzTNo5uc/O34/hbf/LMyF1QqIUuIqlCbKa8O0qcn03D+TngJ31gHPzjSQk6pjJtIqY4AWSzV9f3aLaZNUqMqLXVvfVznGv1Pfe/n2n+QsoczsfK0fhlKy5ze9UeU1IEqnn1ZygwqSQTKdJVr+KIshYmjclT9pmF3AiWW5+zz6AmisT5l6XzAr1lueVfBNfIoa0K5CAkew2LVvuMWF0gasJI5CnJd13fNlwKfMmIBW7ZK1IDiIK8a+zCvax0pPiW/masTj8KtcOW2t+ZJxyrBCEDtRKXSfzH5oCM2mWSP5j8brxXQZ2Od8UrpK8wiJkN70lAn7+oyliq+kIY5ZQEbT1TLBOthlOMR+D/6X0zUxG6MsbOuU/3tBPV5ddSXsjpK90yd+VDZK1C5bzqdTPsNT0VA6c0jkdrJH7EuA6v1daXqnZKLUaf+H3zUjq38TfJWs53T4P9f8A</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVbbcto6FH3vV3jcx47xHWNPYMbY0EObkBTIpX3pCHkDSmwZLBlIv/7IJnaAkBx6ZphhtL219toXLemCoSQ2PJ8xyDhJqTQI2/LvpqNPXceYKk3TchVLi2xlaulYiZxpCzvYMi3HkqUBYzkMKOOI8rZsaLqlaJZiWBPN9oymZxmNVtP9JUt3kDEBLVwamixtk5gyrwzblvOMeilihHkUJcA8jr2xf3XpCU8PVZzkzsWOZRkw6yw4X3qqihsRYIhj3MBpol6oBz4XEfPGZE4RzzN4iRmxtvyyd7PZNDZmI83mqqFpmqq5qvCJGJl/ljufqs0QDegs3a0DRFNKMIrJH1SQugK+SCPJj+dpRvgieQdaV3WtgFZgixWsW/SzrL4GKNmdiXRAMmNIYQukV2AjmEEGFIN0Oxq05c/ndXC3d5IhymZplrCj9d9RArqGOF1CpLAqs4rd+YgnytW5AOwNKI5zRtYwLMZkiTAw6SaDGdleEiaGL2JS2X5py8SPVFMG+G/acqHucxXU1RPVCckcGP8/Pdvv1w7lDsU5dDQMw8ebRTZyHxZXX9eP8D1rzr/o3+3kql1S2Hfekarb/bI+HtZ6tl424VF0vey1WJOE6D7Pr1J3dbsK7pKcJV9C1zV4k/5xevDjKW+t7s0fhm9zY/1s/NnSpIe+53eWfTOcG73hNSObT3Q1jTFM7vXm1+ZQnY8QxIuN9njrkK75z8/Zw89v983Anj4tSC8J1pvZkEJyDc+/HkxEtcfI7I+t7p1++XiLnvxP9PaLPnmeUNKd/xo1b8IU3bZfc9rP4dBYScI4nz4C5tWyGI9BKPVFvxD/WF4KC4mUWenqLQuNYhwolzvFrkJavFwIEIk80czduu8Elhb2u72+3Qv8wOxplqb3NV9zXNfs9vxKg3YsjigGKZ2RIlahsrv5+ZggTjwGNIJMWac5XgCTP0AMEUfSgI7E4Ugpg0kqVNzs2U5o+L7etC3HD7tm0HJDp+s7gd7s211dloYpv6bXmT/jkB0qeOtAwUeAyZJAIfPFnDMx6IyLkqzQOuex3lijBoVcXARZocWeYbVslZFkGUNBWE3SKI+hsVwsywKpbPdvKAiz0jrqTcrz9256x9+qSgifiBQOrMilC6KbcOIqMqtE3k1Y1/cTruD9PCLFMRNl5RnBOyaHn16npRiTelTCS3988zsY/9Yr5vWG8wBESd7uVD+gpR5XpA4Urcle2OpWFReFkJFO1c8Vaqwa+Xqdlx10ConMBLwqlFJXx4BzoXPPk/QJqFpDqGddMzXro8i1/ZBfzhd0zBGHRMybVC7PeGOMgRVvjIE4L9tzHzAHIUXdOGz5KVsQi6dIwfjD1wr2cOEnzDfib5Nm0Wu7TmDtxRF5iocFJ3RerIoL5fmdocCpgCVCAdNsH/wUwKngh8a6yDUXLqZpmnN4/4tUSFtbRhinOeWDUC4N+3Jb8uTPS/Bend7AlJL+ckdv2bt39MPV5VgIX4Lk2pf8t7NCynHBIBdPgZJLW96KJ6cITud78v5C8Fjhda3Va/l92wh8v1Z423Vt3zXrAh5k0nljfmvZq+nxeej8Cw==</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/C4jx3jSzA2nsCMwdA4DbkAoZeXjpDXRq2RwZIJ9NdXMjEBQvLRb4YZRuvV2bMXHemSoXlqeT5jkHOSUSUMWupPF0WR7aCphuLY1Oq2EWmuYbra1I0dK7YasWNjVQkZKyCkjCPKW6plmHXNqGtWfWzYntUQv1rjwvmhKhPImYAWLjVDVdbzlDKvDNtSi5x6GWKEeRTNgXkceyN/cOMJTw9VnNT25ZZlGTBvzzhfeLqOaxFgSFNcw9lcv9QPfC4j5o1IQhEvcniOGbGW+rz36emp9nRRy/JEtwzD0I2mLnwiRpKPavtDtRmikMbZdt1FNKMEo5T8QZLUAPgsixQ/TbKc8Nn8DWhTNw0JrcEaa9is04+q/hKgZHcm0gHJnCGNzZBZgQ0hhhwoBuVxGLbUj+d1cLt3nCPK4iyfs6P1v1ECuoI0W0CksSqzit35iCfK1b4E7IUUpwUjK7iVY7JAGJhyn0NM1jeEieGLmFK2X1kz8SPVlAH+l7Zc6vtcBXX9RHUCkgDj/6dn+/3aokxQWkA7+BZtfg8my9AwGJrU7UbQYRBPWKx/b5UU9p23pHbtfl4fD+tutp43Fbe/zH7joQvxlRs+rJ3vDrn7dvs1b/hf8iQcXnxZbPDS9X3ujAbO1P88d3/7yaekUeCryWZwFfgLlE07ExKbj8mHH71o7NdZvroOO9Zmkto3U2MY0F/51afPX0fL603jvggaw4GfsesvdvYjGC+dOGF96NpD575Jb3vDuz/X/vXs0/DmA702WZx0J1d3X5uL4aP9YLmtl5z2czg0VpIwKqa/APNqKccjDJS+6Bfi78uLtJBIi0tXbyE1inGgXG3LXVJavEIIEIk80cztuu9066bh9tyO3bW6vt8z6obZN3zDbjZtv3lRadCWxRHFbkZjImNJld3Oz/sE8dxjQCPItVVW4Bkw9R3EAHGkhHQoDkdGGYwzoeLNC8P3g07TDZyeY/ides/y3e6F1Tct0wk6XVW5zfgdvcv9mEN+qODugYIPAZMFASnzcs6ZGHTGRUmWaFXw1KytUI1CIS6CXGqxZ9VdW2dkvkhBEtbnWVSkUFvMFmWBdLb9tzSEWWkd9sbl+XszveNvVSWET0SkA5O5dEB0E05cRWaVyJsJm+Z+whW8X0REHjNRVp4TvGVy+OllWuSY7EYluPFH9z+7o59mxXy34TwAUZLXO/V3aOnHFdkFilZkL2x1q4qLQshIu+rnEtWWtWK1KsoOOlIicwGvC6U09RHgQujcZpz9BqrvIPSzrpkd66PIO/shv4LP6IgjDnMxb0q5POONMQIm3xihOC/rcx8wByFF3Tis+SlbNxVPEcn43dcK9rD0E+Z78feU5dFLu05g7cUReYqHBSc0kSt5oWzeGAqcCVgiFDDL98FPAZwKfmjcFXnHhYtpmhYc3v6iSGlrqQjjrKA8DNTSsC+3JU++WYD34vQKppT05zt6zd68o78NbkZC+OZI3fmS/3bWSDkuGFT5FCi5tNS1eHKK4DTZk/dngicV3u/b7yn8YSbtV+bXlr2aHp+H9l8=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>rtDBinfo</con:name><con:value/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value>urn:dece:rightstokenid:org:dece:F816494A8D2E08D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value>F816494A8D2E08D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsResTime</con:name><con:value>6255</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>retire_assertionUserIdFULL3</con:name><con:value>urn:dece:userid:org:dece:F788B745185A635BE0401F0A07995066</con:value></con:property><con:property><con:name>retire_assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:F7889317E89319E7E0401F0A0599432A</con:value></con:property><con:property><con:name>retire_assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:F788B745180D635BE0401F0A07995066</con:value></con:property><con:property><con:name>retire_assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:F788B7451801635BE0401F0A07995066</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>nVbbbuo6EH3vV0Tpc3ASAoSoIHFrmwp6gUKrvlSuMwGfnTg0doD2648dGgoUethHQkKejNesuXjZFxzHke21OIdU0IRpfrehv1aBlM3am2sQ27UMh1g1A5tQMeywXq45TmBWwNY1n/MMfMYFZqKh26blGKZj2NajWfXKVc92S7ZtvujaBFIuoaVLydS1VRwx7uVhG3qWMi/BnHKP4Ri4J4g3ag36nvT0cMFJb16sWeYB0+ZMiLmHECkFQCCKSIkkMbpAOz4XAfdGdMqwyFL4ihnwhv61d7lclpblUpJOkW2aJjLrSPoEnE7P9eZZsRkCn4XJet3BLGGU4Ih+YkVqAGKWBFormiYpFbP4CLSFLFNBG7AiBrEcdq6j7wA5uxORdkimHBt8hq0CbAghpMAIaOOh39DPT+vgeu9jihkPkzTme+u/owRsAVEyh8DgRWYFu9MRD5SreQHE8xmJMk4XcKvGZI4JcO0+hZCu+pTL4Qu4lrdfW3H5o8WUAfmbtlygba6SOjpQnS6dAhf/p2fb/VqjTHCUQROcu6dx5U3cPEfjp6uF6Y6fWg+xbQ1C0sgpbDuvSW3a/bXeH9bNbH1tIsixTNutLq96cGP2mGONJ6JGZ/cvw358G6CVbS6rLLwcT5L08roV26K6GA3Gt6PyS929ewrtCh4jUUYmepycicn8Dvy75MonH/PlarLsX91fd25uPq1P1unOuvPQtG8h8a/tG2f4/PbJ2cd9e9yrPy2Hg7HfCsfT4Nm/baPWw8vgrJLMuO/f4Kfun+FDlg3fcavxndN2DrvGQhJG2ds/QESxVOPhd7VL2S8sfpcXZaGBEeau3lxpFBfAhN5Uu5S0eJkUIBp4spnr9WXNdds1p2K5ZrdarrR7pmNal2bLrNXrFbNaLTRozWKPYidhIVWxlMqu5+d3giT2OLAAUmORZGQGXP8FsYsF1nw2lIcjYRweE6nilXatZtuu3am5Vatr93o9p92utuu9dtst25bU4ttE3LG7tBUKSHcVvL6j4EMgdE5Bybyacy4HnQtZkne8yERklRa4xCCTF0GqtNizHbeCOI3nESjCKE6CLILSfDbPC4T4+t82MOG5ddh7zM/f0fT2vxWVkD4BVQ5c5dIG2U04cBVZRSJHE7bs7YQL+FYWUHXMZFlFSsmaye6n72lRY7IZlW6/Nbp/7YxerYL5ZsNpALIkP3eiX2ih/YpsAgULuhW2uFXlRSFlpFn08x2X3kvZYpHlHawpiUwlPJJKaaERkEzq3Mdj8gcY2kCgk66ZDeu9yBv7Lr9MzNhIYAGxnDctX57wxhgBV28MX56X1akPmJ2Qsm4CVuKQrRPJp4hi/OtrhXhE+UnzvfxbJmnw3a4DWFtxZJ7yYSEom6qVulA+jgwFSSQslQqYpNvghwAOBd81boq84SLkNL1lAo5/0ZS0NXRMSJIx4Xf13LAttzlP8TEH79vpB0wu6V939IofvaOfB/2RFL4Y6xtf+t/OBs3HhYCungI5l4a+kk9OGZxNt+T9i+ARhbd+U/jdTJo/zD8tWzXdPw/NfwE=</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>fztcoord190_pm@neustar.biz</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PolicyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL5</con:name><con:value>urn:dece:userid:org:dece:A61491DDD5B35410683553549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL4</con:name><con:value>urn:dece:userid:org:dece:9304DA58D5B35410683553549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:F7C40DFBEF5ECAC3E0401F0A07993BEA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:F7C4108E8B5C2CAAE0401F0A05995A93</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID5</con:name><con:value>A61491DDD5B35410683553549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID4</con:name><con:value>9304DA58D5B35410683553549481F9A8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value>F7C40DFBEF5ECAC3E0401F0A07993BEA</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>F7C4108E8B5C2CAAE0401F0A05995A93</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nickname</con:name><con:value>nickName</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value/></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>ucr5_username_20140428_0100591398670259673</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeStreamCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E4CA22A51A3993CBE0401F0A07994735"</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F816494A8D2E08D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1995-05-03</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>73B365A3C5B35410683553549481F9A8</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>1998-04-11</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:DLASP</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_337a908a-2299-4a1c-86a0-9985b802d884</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_337a908a-2299-4a1c-86a0-9985b802d884</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C313E4099DB45410683553549481F9A8</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>0313A7B79DB45410683553549481F9A8</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0313A7B79DB45410683553549481F9A8</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>0313A7B79DB45410683553549481F9A8</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVbbbuo4FH0/XxGljyjkQtJAVJDC7QwtbbmVdvpSGWcDniYOjR2g/fqxA6FAaYczEhLyzvbaa1+87CuGotDyfMYg4SSmSqdZVV9sZzKF0sTVTBcCzUbY0NA0cLTypFS6vDRNq1SaqEqHsRQ6lHFEeVW1DNPWDFuz7JFx6Vmu55jFin35rCpjSJiAFi5FQ1XWUUiZl4WtqmlCvRgxwjyKImAex97Qv+16wtNDOSe1drVhmQVManPOF56u42IAGMIQF3Ec6Vf6gc9VwLwhmVHE0wS2MQNWVbd7V6tVcVUqxslMtwzD0I2KLnwCRmYXau1XvhmCDp3Gm3UD0ZgSjELygSSpW+DzOFD8cBYnhM+jb6BN3TQktAZrrGHTpheq/hkgY3cm0gHJhCGNzZGZgw1gCglQDMrDoFNVL87r4GbvKEGUTeMkYkfrP6MEdAlhvBDRWJ5Zzu58xBPlql0B9joUhykjS7iTY7JAGJjSS2BK1l3CxPAFTMnar6yZ+JF8ygD/SVuu9H2ugrp+ojpNMgPG/0/P9vu1QRmjMIXazFhc95qNQuuvuj5O+teV1d/Ozf24bPYfqhmFfecNqV27t+vjYd3N1nbTvG/Uu/z14+25YX0ATD5uJr2CHdzdD/r1gfkGESJj590Or5/WlVJhzduj1X05ekjGv+fzMplWBnXLGr9OH2fzWfxreQ3d+utj0p+2+M34fuX34uDmsesOrPrDrftU7s1Qu1964CG27cmH6z6XhshHzw8l1PrdLrCIW+/OsmAO0Fvw9KscXob8cbQwCrGejOPCqMOqnznt53BozCVhmE7+AczzpRyPTlNpi34h/rO8SAsJtGnm6i2kRjEOlKs1uUtKi5cKASKBJ5q5Wbfdht1que2GUfdbfsNsGbZhtg3fcCsVx/b9XIM2LI4oNmI6JTKWVNnN/PxMEEceAxpAoi3jFM+BqT8gNhFHSocOxOGIKYNRLFS8Va84rlF2mnZdsC41nYpxWXEavtFoNpyK5ajKXczv6X3iTzkkhwpeOVDwAWCyICBlXs45E4POuCjJG1qmPDSLS1SkkIqLIJFa7Fl22dEZiRYhSMJ6FAdpCMXFfJEVSGebf0tDmGXWQWuUnb9v0zv+lldC+AREOjCZSx1EN+HEVWTniXybsGntJ5zD+2lA5DETZeUJwRsmh58+p0WOyW5Uml1/2HtpDF/MnPluw3kAoiRfd+o/0NKPK7ILFCzJXtj8VhUXhZCRWt7PN1R8K6bLZZp10JUSmQh4XSilqQ8Bp0Ln3kfxK1B9B6Gfdc3sWB9F3tkP+aV8TocccYjEvCnZ8ow3xhCYfGN0xHlZn/uAOQgp6sZhzU/ZGqF4ikjGP75WsIelnzD3xN8qToLPdp3A2osj8hQPC07oTK7khfL+zVDgWMASoYBxsg9+CuBU8EPjrsg7LlxM0yTl8P0XRUpbVUUYxynlnaaaGfblNuPJ3xfgfTp9gckkfXtHr9m3d/TTbXcohC9C6s6X/LezRrJxwaDKp0DGpaquxZNTBKezPXnfEjyt8O6PCn+YSe2L+atlr6bH56H2Lw==</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1995-04-29</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>F816494A8BC408D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>accountname</con:name><con:value>ucr5_accname_20140428_0100551398670255211</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>B9C0650CABDF441087D0BF449481F9A8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d41dd7c0-63c7-4c83-99b6-d741b7d0fa56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c9e33d1-f790-497d-b47f-8eb4d75f0c68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d85c1bc9-4c78-4b41-bc03-224473d011aa</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8ddbbb77-867e-4d78-bdfe-bd543440a63c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("username",null);
testCase.setPropertyValue("password",null);
testCase.setPropertyValue("tokentype",null);
testCase.setPropertyValue("expectErrTypeSTS",null);
testCase.setPropertyValue("expectErrTypeSTSGet",null);
testCase.setPropertyValue("assertionUUID",null);
testCase.setPropertyValue("nodeaccountid",null);
testCase.setPropertyValue("nodeuserid",null);
testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("userrowoid",null);
testCase.setPropertyValue("accountrowoid",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assert",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username","jbaisakh");
testCase.setPropertyValue("password",callTC.getPropertyValue("password"));
testCase.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
testCase.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Disable QC Uploading">
        <con:settings/>
        <con:config>
          <script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS GET">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid</con:query>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>uname</con:name>
              <con:value>${#TestCase#username}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TestCase-Level Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false">
            <con:name>accountoid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath>
            <con:targetType>accountoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false">
            <con:name>useroid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath>
            <con:targetType>useroid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false">
            <con:name>userrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[1]</con:sourcePath>
            <con:targetType>userrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
            <con:name>acctrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[2]</con:sourcePath>
            <con:targetType>accountrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Setup base node-level information based on calling Node type">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def baseNodeType = testCase.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
testCase.setPropertyValue("cid",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("alid",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("deceorgid",testProject.getPropertyValue("deceorgid"));

//if (testProject.getPropertyValue("targetPort") == "443") {
	//testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
	//testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost"));
//} else {
//	testCase.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//	testProject.setPropertyValue("targetURL",testProject.getPropertyValue("targetHost") + ":" + testProject.getPropertyValue("targetPort"));
//}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
testCase.setPropertyValue("assert",testCase.getPropertyValue("assert"));
testCase.setPropertyValue("assertId",testCase.getPropertyValue("assertId"));
testCase.setPropertyValue("nodeaccountid",testCase.getPropertyValue("assertionAccountId"));
testCase.setPropertyValue("nodeuserid",testCase.getPropertyValue("assertionUserId"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def toTCName = testCase.getPropertyValue("tName");
def toTSName = testCase.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = testCase.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,testCase.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        
        <con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        <con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        <con:property><con:name>assertId</con:name><con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value></con:property>
        <con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value></con:property>
        
        <con:property><con:name>deceorgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>222259</con:value></con:property>
        
        
        
        
        <con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>SAMLassertion</con:name><con:value>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</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>null:null</con:value></con:property><con:property><con:name>tName</con:name><con:value>Get SAML Assertion - STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>jbaisakh</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        
        
        
        
        
        
        
        
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA row">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :sh</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_DATE/>
            <UPDATED_BY/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("accountoid",null);
testCase.setPropertyValue("useroid",null);
testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("nodetype",null);
testCase.setPropertyValue("streamhandle",null);
testCase.setPropertyValue("dbxmlresponse",null);
testCase.setPropertyValue("rightstokenid",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectTransactionid",null);
testCase.setPropertyValue("expectNickname",null);
testCase.setPropertyValue("expectJDBCSQL",null);
testCase.setPropertyValue("expectDBCreatedBy",null);
testCase.setPropertyValue("expectDBDeletedBy",null);
testCase.setPropertyValue("expectDBStatus",null);
testCase.setPropertyValue("expectDBCreateUser",null);
testCase.setPropertyValue("expectDBDeleteUser",null);
testCase.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
testCase.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
testCase.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
testCase.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
testCase.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
testCase.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
testCase.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
testCase.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
testCase.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
testCase.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
testCase.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (testCase.getPropertyValue("expectDBStatus") == "" || testCase.getPropertyValue("expectDBStatus") == null) {
		testCase.setPropertyValue("expectDBStatus","deleted");
}
if (testCase.getPropertyValue("expectDBCreatedByNodeType") == "" || testCase.getPropertyValue("expectDBCreatedByNodeType") == null) {
		testCase.setPropertyValue("expectDBCreatedByNodeType",testCase.getPropertyValue("nodetype"));
}
if (testCase.getPropertyValue("expectDBDeleteUser") == "" || testCase.getPropertyValue("expectDBDeleteUser") == null) {
		testCase.setPropertyValue("expectDBDeleteUser",testCase.getPropertyValue("useroid"));
}
if (testCase.getPropertyValue("expectDBCreateUser") == "" || testCase.getPropertyValue("expectDBCreateUser") == null) {
		testCase.setPropertyValue("expectDBCreateUser",testCase.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>${#TestCase#expectDBStatus}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def url       = testProject.getPropertyValue("targetHost");
def urnacct   = testProject.getPropertyValue("urnaccount");
def urnstream = testProject.getPropertyValue("urnstream");
def urnnode   = testProject.getPropertyValue("urnNode");
def acct      = testCase.getPropertyValue("nodeaccountid");

String XMLbody = testCase.getPropertyValue("dbxmlresponse");
String expectStreamHandle = testCase.getPropertyValue("streamhandle");
String expectAccountOID   = testCase.getPropertyValue("accountoid");
String expectRightsToken  = testCase.getPropertyValue("rightstokenid");
String expectUserOID      = testCase.getPropertyValue("expectDBCreateUser");
String expectStatus       = testCase.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = testCase.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + testCase.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = testCase.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>978DCC35FCDE7C08E0401F0A05996438</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ManageUserConsent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

if (testCase.getPropertyValue("policyExists") == "false") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
	testCase.setPropertyValue("policyResource",testCase.getPropertyValue("assertionUserIdFULL"));
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_10023-RightsTokenDelete - Policy -RTL - NoPolicyEnforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyResource") == null || testCase.getPropertyValue("policyResource") == "") {
	testCase.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.setPropertyValue("policyCreator",testCase.getPropertyValue("assertionUserIdFULL"));
}
if (testCase.getPropertyValue("policyRequestEntity") == null || testCase.getPropertyValue("policyRequestEntity") == "") {
	testCase.setPropertyValue("policyRequestEntity",testProject.getPropertyValue("urnNode") + testCase.getPropertyValue("nodeid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for LockerViewAll">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def exists = testCase.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:LockerViewAllConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10018-RightsTokenDelete - Policy -RTL_CS - AllowAdult - US - MMPA - Can create RightsToken that IS_ADULT = 'y' without policy</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8/User/urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:g</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10008-RightsTokenDelete - Policy -RTL - BlockUnratedContent - US - MMPA - G</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
testCase.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
testCase.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
testCase.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (testCase.getPropertyValue("policyCreator") == null || testCase.getPropertyValue("policyCreator") == "") {
	testCase.getPropertyValue("policyCreator") == testCase.getPropertyValue("assertionUserIdFULL");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for Policy">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for Policy if necessary">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", testCase.getPropertyValue("policyClass"));

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyCreate for Policy">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("policyRequestEntity",testCase.getPropertyValue("assertionUserIdFULL"));
//testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//testCase.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value>pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The policy was not found.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8/User/urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10023-RightsTokenDelete - Policy -RTL - NoPolicyEnforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ParentalControl:NoPolicyEnforcement" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ParentalControl:NoPolicyEnforcement" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeleteUserPolicies"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )
def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
log.info "username=="+username;

a.policyDelete(302,username,"deleted")
a.policyDelete(300,username,"deleted")
a.policyDelete(304,username,"deleted")
a.policyDelete(303,username,"deleted")</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVftc6I8EP9+fwXDfXwGA4iITHWGgtzR2lf7dvflJoaouUKiJCjtX/8ELFat7fVlpjNOls3ub3d/2d0ecJgmputxjjNBGFWioKv+QXETGq2RrcFx3NIs3Yw12LKx1pLyEYRG2zE6qhJxnuOIcgGp6Kqmbliabmp680q33ZbuGp2Gaeu/VeUGZ1yalioNXVWKNKHcrdx21TyjLoOccJfCFHNXIHfonQxcqenCGpPaO1ihrBxmvakQMxcA1IgxwkmCGoil4ABs6RzE3B2SCYUiz/CTz5h31ae7y+WysWw2WDYBpq7rQO8AqRNzMvmu9r7Vl3Ec0TFbnX1IGSUIJuQRlqBOsJiyWPGSCcuImKavmDaAoZemNVwgDRkW/a6CZwcVunda2gKZcajxKTRqY5d4jDNMEVauL6Ou+v19FVzdvcog5WOWpXzn/DFImC5wwmY41ngdWY3u/Rb3pKt3gJEbUZTknCzwaUmTGUSYK+cZHpNiQLgkX8yVqvxKweUfqVmG0UfKcgA2sUroYE92AjLBXHymZpv1Wlm5gUmOe9ZPw/txe3Mzf7C8yYXZ1AHiuheEwyXrVhA2lVeg1uV+Ou+Sdc2tp0v+oNU/sljo8yj6jenST5DM0q8H59dt+9fN+akdmscXhj8Kf47jSRGR08K/j/tng/bxxSBo3zL+2Dm8+3E2nzhH0bfg5u/d0W0Kz4MR4vz3/Wn/6OcMzaZ87mS3l6n+F4LHHJ78Z3gg9o79awYWQNj2/KqfpIPrRy+7FfN7AO3rQ+Pom2U6+o+CMmckwqK4wGGHdZ9j2oxhW1i3hGE++ouRqI8lPaJACWW9oHi7vZQSEmvjStWdlT2KC0yF2itvla3FzWUDIrEri7k6O6HRbB52QtOxw6Zl6J1Dy2r1m1bHcoyw4zl1D1qh2IHoMzompa+yy6748zZAlLoc0xhn2oLlaIq5+obFAAqoRPRSPg5GOb5isosH9qEdWF7oOHpgh7bTbrXaQWD3rbAThmbLUpVTJs7oWeaNBc62O3hnq4NfYkRmBJdtvuQ5l0TnQqZkDhe5SIzGAjYozuUgyMpe7JqW0wKcpLMEl4BByuI8wY3ZdFYlCPDVr6lBxCvpZf+qen+vhrf7rc6E1IlJqcDLWA6xrCbeM4r0OpBXAzbMzYBr814ek/KZybSKjKAVku1Pz2wpabKmiuf7/aE/rGGvtT9w+7OXg4E3PP/K3T/+8I/xWQOfd/01x4MvRD34atSSv1+8/vImeIOCYJf9a0fxgmy4rTcouRTIkdGr3+4cNuaNfLHIq9faLsdhJs0DA5gGGGKUy5n2cMXuMQVrE+BdK8Ua9Y7ntXwbXy6mdCigwKnsLUp1fMc+OcS83Ccj2RuL9y6rWy5l3gQuxD6Zn8i1s0T85maKXFTqSfG5/FmyLH4u1x5bG35knHKJFIROylO5PDy8QgrEpFkipx3LNo3vM7DP+bZwneQ1FiHZNMoFfv2LUo6xrgoRYjkVUaBWgs3RWuEUDzPsPiu9MFON76d9rOCv7mN3J4OhHHIpVNe65N/KGqnogrBarn0Vlq5ayH8vpHM62RjlTwA3p7nfN5pBX//nNN+OpPdC/FKykdPd99D7Hw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:CE13DE0F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:8F133B9F286F34109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<ErrorList xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The supplied policy was not found.</Reason>
      <OriginalRequest>${#Project#AppHost}:${#Project#AppPort}/rest/1/06/Account/urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E/User/urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10023-RightsTokenDelete - Policy -RTL - NoPolicyEnforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>useroid</con:name><con:value>9F133B9F286F34109B445E349481F9A8</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenDelete_User_20140203_122014</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_PERM_", "_FUNC_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases"; 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """- LLASP -""";
def newString = """- DLASP -""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsToken-Generation" searchProperties="true" id="4f1c4c19-7e5e-4134-ab4a-90346dd56c7d"><con:settings/><con:testStep type="groovy" name="Feed Rights Token Data"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TsRightsXMLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST");

//RightsToken Request and properties
TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "Request",RTKRequest);
//testRunner.testCase.testSteps["RightsTokenCreate Request POST"].setPropertyValue( "AccountID",'urn:dece:accountid:org:dece:10222259');

testCase.setPropertyValue("nodeid",RTCRequest.getPropertyValue("nodeid"));
testCase.setPropertyValue("assert",RTCRequest.getPropertyValue("SAML_USER1"));

testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
log.info("***AcountID : "+ testCase.setPropertyValue("AccountID",RTCRequest.getPropertyValue("NODE_ACCOUNT_ID_FULL1")));
//testCase.setPropertyValue("ALID",testProject.getPropertyValue("alid"));
//testCase.setPropertyValue("ContentID",testProject.getPropertyValue("cid"));
testCase.setPropertyValue("ALID","urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt");
testCase.setPropertyValue("ContentID","urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt");
testCase.setPropertyValue("SoldAsDisplayName","Avatar BestBuy Special Packaging" );
testCase.setPropertyValue("SoldAsLanguage","en");
testCase.setPropertyValue("SoldAsContentID",testProject.getPropertyValue("ContentID"));
testCase.setPropertyValue("PPContentProfile1","urn:dece:type:mediaprofile:hd");
testCase.setPropertyValue("PPDiscreteMediaRemaining1","1");
testCase.setPropertyValue("PPDiscreteMediaProfile1","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad1","true");
testCase.setPropertyValue("PPCanStream1","true");
testCase.setPropertyValue("PPContentProfile2","urn:dece:type:mediaprofile:sd");
testCase.setPropertyValue("PPDiscreteMediaRemaining2","0");
testCase.setPropertyValue("PPDiscreteMediaProfile2","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad2","true");
testCase.setPropertyValue("PPCanStream2","true");
testCase.setPropertyValue("PPContentProfile3","urn:dece:type:mediaprofile:pd");
testCase.setPropertyValue("PPDiscreteMediaRemaining3","0");
testCase.setPropertyValue("PPDiscreteMediaProfile3","urn:dece:type:discretemediaformat:securedigital");
testCase.setPropertyValue("PPCanDownLoad3","true");
testCase.setPropertyValue("PPCanStream3","true");
testCase.setPropertyValue("RSCreatedby","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("RSCreationDate","2011-02-17T15:12:03.000");
testCase.setPropertyValue("RRSValue","urn:dece:type:status:active");
testCase.setPropertyValue("RSDescription","new rights token");
testCase.setPropertyValue("LICAcqBaseLoc","ns3.google.com");
testCase.setPropertyValue("FFWebLocLocation1","https://dl.bestbuy.com/p/aaa");
testCase.setPropertyValue("FFWebLocPreference1","1");
testCase.setPropertyValue("FFWebLocLocation2","https://dl.bestbuy.com/p/bbb");
testCase.setPropertyValue("FFWebLocPreference2","1");
testCase.setPropertyValue("FFManifestLocLocation1","https://dl.bestbuy.com/p/ccc");
testCase.setPropertyValue("FFManifestLocPreference1","3");
testCase.setPropertyValue("FFManifestLocLocation2","https://dl.bestbuy.com/p/ddd");
testCase.setPropertyValue("FFManifestLocPreference2","1");
testCase.setPropertyValue("PINodeID","urn:dece:org:org:dece:"+testCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("PIRetailerTransx","transcation");
testCase.setPropertyValue("PIPurchaseAccount",RTCRequest.getPropertyValue("NODE_ACCOUNT_ID_FULL1"));
testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("NODE_USER_ID_FULL1"));
log.info("****User ID : " + testCase.setPropertyValue("PIPurchaseUser",RTCRequest.getPropertyValue("NODE_USER_ID_FULL1")));
testCase.setPropertyValue("PIPurchaseTime","2011-06-24T15:12:03.000");
testCase.setPropertyValue("VCAllowedUser","urn:dece:userid:org:dece:12222599");
testCase.setPropertyValue("RTC_rcStatusHistory","0");
testCase.setPropertyValue("expectErrTypeRTCreate","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");</script></con:config></con:testStep><con:testStep type="groovy" name="Call Rights Token Create API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Get Rights Token Data"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Create Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

log.info RTCRequest.getPropertyValue("TCaseName");

def runnerRTC = RTCRequest.run( null , false )

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def CallingTestCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info "new generated rights token is "+testCase.getPropertyValue("rightstokenid");

//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));




//assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Response">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def RTCRequest = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename)

log.info("By Sanjeet - rightstoken id returned :" + testCase.getPropertyValue("rightstokenid"));
//tC.setPropertyValue
def rightsTokenIDD = "";
String rightsTokenFull = testCase.getPropertyValue("rightstokenid").toString();
String [] rightTokenArr = rightsTokenFull.split(":");
log.info("Array Length by sanjeet : '" + rightTokenArr.length);
rightsTokenIDD = rightTokenArr[rightTokenArr.length -1];
log.info("Rights token extracted using split : "+ rightsTokenIDD)

RTCRequest.setPropertyValue("rightstokenid", rightsTokenIDD); // setting for my testcase
RTCRequest.setPropertyValue("rightstokenidFull",testCase.getPropertyValue("rightstokenid"));// setting for my testcase
RTCRequest.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
RTCRequest.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
RTCRequest.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
RTCRequest.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify the RightsTokenGet Response" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Verify theRightsTokenGet Response against DB Result" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Rights GET  Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:properties><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>ALID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQ54MSooIUAqxoS9sltNr25co4BtxNbIgdPvrr1w5NCpT2dq+EhDwZz5yZOT72JYdpYvsB5zgThFFt0G3p/zpOAzaBBw3bbjYNF1rI8C4gMJpNrz7xgB17nqtrA85zPKBcQCpaug0s1wCuYXtj0PAdy7ecmus0nnXtEWdchpYuNaBrmzSh3C/StvQ8oz6DnHCfwhRzXyA/CoY3vvT0YYlJb1/uUBYJs/ZciIVvmqgWY4STBNUQS81L88DnMuZ+RGYUijzDbzlj3tLf9q7X69raqbFsZtoAABM0TekTczI719tn5WYcD+iU7dYhpIwSBBPyChWoIRZzFmtBMmMZEfP0k9CWaQEV2sAbZCDLpee6+Z6gQPfNSAcgMw4NPodWGWyEpzjDFGHtYTRo6effm+Bu7ziDlE9ZlvKj9d9BwnSFE7bAscHLykp03494ol3tS4z8AUVJzskK3yqaLCDCXLvP8JRsbgiX5Iu5Voxf23D5IyXLMPqbsVya+1gldPNEd7pkhrn4PzPbn9cuyiNMctz+ia8vks6vfjxaLac0y2eeaLzWw6g+ZK0Cwr7zDlQ17rf1MVkrbr1t2rKtCPn4zl3ej68n60Yfv9rYmdFBvH0YxmP61FknwrwOf9xd5csfBM2WjKEEOJu16NjglSW/YaeXImvxj5icXeUv4ctwEYTdRrAdQROtbib33mT0ekUe78L08fliDcOn3zC2oqtn97YhptePP1+dyNrwKHoI6dVq2nue0XnnKRJnefdm3Mmi5+XDmATdzYW4CFrvNe3XcGgsJSHKJy8YiXKp6DHoan05Lyi+lhdlIbExLVz9hdIoLjAVelvtUtLi51KASOzLYe7Wfc+6cJv1hlvvdzwAmj3gAqsPAtBoNutBo19q0A7FEcSQ0SlRuZTK7vjzNUCU+hzTGGfGiuVojrn+RcQuFFAb0JE8HIxyPGZSxXt2x+mDrhP0gyDsN3pduxn07aYNen3Ldu2Ort0ycUfvsmAqcHag4BY4UPARRmRBsJJ5xXMuic6FbMkSrnKRWLUVrFGcy4sgU1rs265XNzlJFwlWgM2UxXmCa4v5omiQyXf/tgERL6yj3rg4f5+Wd/yt7IT0iYly4KqWDpbTxCeuIlAW8nnBzn7BZfggj4k6ZrKtIiNoh+Tw0ztbFE0qqsiKSsiV57HhIKp5XFCVKF4RVPG9uqilzksVaJfjWMLaspavVnkxgIZSuEyGN6XQWWaEUS5lajtmvzE1qxDmt26JCvVR5sp+iC8XcxoJKHAq6aIVy288ESLM1RNhIOm++e774yCl7JvAG3HKFibyJaEQf/nYQD5SftJ8L//WLIvfx3Ui1l4eWad8FwhCZ2ql7oPtJ6RATIYlUsBYth/8VIBTyQ+NVZMrLEKyaZIL/PkXTSlTS4cIsZyKQVcvDPtqWeAU2wX2350+hCkU+e2K3fBPr9hfw5tI6lYK9cqX/LezQQq6IKyrm7zA0tI38sUok9PZnjq/Afwo0G7gdUIHeF3vSKA7VQMPKml/MH+07PX0+Dy0/wA=</con:value></con:property><con:property><con:name>ContentID</con:name><con:value>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</con:value></con:property><con:property><con:name>DBrightstokenid</con:name><con:value>F816494A8D2E08D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property><con:property><con:name>expectErrTypeRTCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:hd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:sd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:pd"><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>transcation</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:CAC19DE62078514EE0401F0A2222592AE4</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:CAC19DE62086514EE0401F0A2222592AE4</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>FFManifestLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/ccc</con:value></con:property><con:property><con:name>FFManifestLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/ddd</con:value></con:property><con:property><con:name>FFManifestLocPreference1</con:name><con:value>3</con:value></con:property><con:property><con:name>FFManifestLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocLocation1</con:name><con:value>https://dl.bestbuy.com/p/aaa</con:value></con:property><con:property><con:name>FFWebLocLocation2</con:name><con:value>https://dl.bestbuy.com/p/bbb</con:value></con:property><con:property><con:name>FFWebLocPreference1</con:name><con:value>1</con:value></con:property><con:property><con:name>FFWebLocPreference2</con:name><con:value>1</con:value></con:property><con:property><con:name>LICAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PINodeID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PIPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>PIPurchaseTime</con:name><con:value>2011-06-24T15:12:03.000</con:value></con:property><con:property><con:name>PIPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</con:value></con:property><con:property><con:name>PIRetailerTransx</con:name><con:value>transcation</con:value></con:property><con:property><con:name>PPCanDownLoad1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanDownLoad3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream1</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream2</con:name><con:value>true</con:value></con:property><con:property><con:name>PPCanStream3</con:name><con:value>true</con:value></con:property><con:property><con:name>PPContentProfile1</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PPContentProfile2</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PPContentProfile3</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile1</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile2</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaProfile3</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining1</con:name><con:value>1</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining2</con:name><con:value>0</con:value></con:property><con:property><con:name>PPDiscreteMediaRemaining3</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsReqXml</con:name><con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>6255</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:F816494A8D2E08D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value/></con:property><con:property><con:name>RRSValue</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>RSCreatedby</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>RSCreationDate</con:name><con:value>2011-02-17T15:12:03.000</con:value></con:property><con:property><con:name>RSDescription</con:name><con:value>new rights token</con:value></con:property><con:property><con:name>RTC_rcStatusHistory</con:name><con:value>0</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>SoldAsContentID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar BestBuy Special Packaging</con:value></con:property><con:property><con:name>SoldAsLanguage</con:name><con:value>en</con:value></con:property><con:property><con:name>TCaseName</con:name><con:value>Test_Account_And_User_Data_Purge</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>TEST_ACCOUNT_AND_USER_DATA_PURGE</con:value></con:property><con:property><con:name>VCAllowedUser</con:name><con:value>urn:dece:userid:org:dece:12222599</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove ULC Policy" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("nodeid",null);
testCase.setPropertyValue("assertionUserIdFULL",null);
testCase.setPropertyValue("assertionAccountIdFULL",null);
testCase.setPropertyValue("assert",null);
testCase.setPropertyValue("policyExists",null);
testCase.setPropertyValue("policyClass",null);
testCase.setPropertyValue("policyRequestEntity",null);
testCase.setPropertyValue("policyResource",null);
testCase.setPropertyValue("policyCreator",null);
testCase.setPropertyValue("returnXMLResult","true");
testCase.setPropertyValue("policyStatus","urn:dece:type:status:active");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config><script>def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSname = testCase.getPropertyValue("sName");
def callTCname = testCase.getPropertyValue("tName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
testCase.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
testCase.setPropertyValue("assert",callTC.getPropertyValue("assert"));
testCase.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyGet for ULC Policy">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="PolicyDelete for ULC Policy">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
	
if (testCase.getPropertyValue("policyExists") == "true") {
	testCase.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

	def myTC = testProject.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",testCase.getName());
	myTC.setPropertyValue("sName",testSuite.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      <con:testStep type="groovy" name="DeleteUserPolicies"><con:settings/><con:config><script>import dbUtils.dbPolicy;

def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )
def username = context.expand( '${#TestCase#username}' )

a = new dbUtils.dbPolicy(log,testProject.getPropertyValue("targetDECEDB"));
log.info "useroid"+useroid;
log.info "username=="+username;

a.policyDelete(302,username,"deleted")
a.policyDelete(300,username,"deleted")
a.policyDelete(304,username,"deleted")
a.policyDelete(303,username,"deleted")</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdbc9o6EH7vr/C4jx3jC4YYT2DG5tK6hSTFNCfpS0fIMhYxErFkA/n1RzIxAULSNJnJDKP1Xr7VftrdnDOwSC3XYwxlHFOiBL22+qcFgY1sx9HiFoKaDVtNDbSmQLNNZ9q0YruO4qaqBIzlKCCMA8LbqmWYtmZYmnE2MQ23Ybh2s2ZZxm9VuUYZE66FSs1QlfUiJcwtw7bVPCMuBQwzl4AFYi6HbuiNhq7QdEGFSe2cb1GWAbNOwvnS1XVYixBEaQprkC70c/1A5zxibohnBPA8Q48xI9ZWH21Xq1VtVa/RbKZbhmHoRksXOhHDs89q51NljKKAxHR77gJCCYYgxQ9AghohntBI8dIZzTBPFi+4NnXTkK41tIYaNG3yWdWfApTo3ujpAGTGgMYSYFbOxihGGSIQKb/GQVv9/LYKbm0nGSAsptmCHZ3/DRIiBUrpEkUaqzKr0L3d44nr6pwj6AYEpjnDBbqQNFkCiJhylaEYr4eYCfJFTCnLr6yZ+MMVyxD8l7Kc6/tYBXT9xO308Awx/p6a7ddr6+UapDnq3A5WP776X9LrywTZsXPdG5xdkK/fktCk7RLCvvIW1K7cj+djsu649WiUzCa2fdGPv9C5t8qmF3dFMFpf+nPeX69u/atGNL5zprfL8bAf/Ow/FGbeGBV13E1+kvHETwa91Zw1foWLwo7zH59u9HRhhLaNf0yv/gus+8KffY/u5jT/dhXfRnQTb9YPFn34MvoGHpwGvvl+n8x5s4lu7/vejUGHQ8R9+J0A64x3P20abJ79Hs/7m2UyyegoSEftp5z2czgUVi0hzKdzBHl1lPQIespA1Avw19uLlOBIi0tVdyl7FOOIcLUjrWRrcXPRgHDkimJuz13Dty3baDkD37Bt02j5tt3o1+2W7ZiDludUPWiL4ghil5IYy1iyy2758zpAuHAZIhHKtILmMEFMfcVjD3CgBGQsHgclDE2o6OL1QbfV8xzP8f2WX/cHTr3hNIxBvd7w/W6v4anKBeWX5DLzYo6yww5eP+jgYwTxEiPZ5iXPmSA64+JK7kGR89SsFaBGUC4GQSZ7sWvZTkNneLFMkQSsL2iUp6i2TJblBels+2tpALJSOu5Pyvf3YnrH36qbEDoRlgpM5uIjUU10YhTVq0ReTri5n3Dl3ssjLJ+ZuFaeYbhFcvjpiS2SJjuqeN1uP+yGFeyd9j9Yv9e4N/TCq4/Y/umGf8z3Onh/6I8FHn4g6+FHsxb8/aD5c0v9FQrqx+zfBYoKvBe22qDEUiBGRqd6u/egdl/LiyIvX+uZHIeZcK+bumXqIYK5mGmbCb1DRN+50N+0UuxQH0XeyQ/x5TwhIQccLURvUcrjG/bJEDG5TwaiN67fuqwehBT3xtGan5J1U7F2SsSvbqbQhVJPiK/Ez4pm0VO5TvjaiyPyFEskx2QmT3J52LxACkiFWyymHc32nZ9ycCr4oXB3yTssXLBpmnP08hdFjrG2CiCkOeFBTy0F+6O1xMk3S+Q+KT1zU47vx31szV7cx25Gw1AMuQVQd7r478oaLukCkSrXvhJLW12Lfy9EcDLbG+WPAPenuSGm+VnzzPnbND/MpPNM/Fyyd6fH76HzPw==</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:00B476788FB044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:C0B424098FB044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>policyClass</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:policy:UserLinkConsent</con:value>
        </con:property>
        <con:property>
          <con:name>policyCreator</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyExists</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value>
        </con:property>
        <con:property>
          <con:name>policyGetXML</con:name>
          <con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:FBB4E1DF8FB044109B445E349481F9A8">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:C0B424098FB044109B445E349481F9A8</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
   </Policy>
</PolicyList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>policyRequestEntity</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyResource</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>policyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>returnXMLResult</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Copy of TC_DECE_10017 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>useroid</con:name><con:value>D0B434098FB044109B445E349481F9A8</con:value></con:property><con:property><con:name>username</con:name><con:value>Rights_TokenDelete_User_20140207_042040</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="Common Test Steps" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights Create Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Validate DB for RightsToken">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//log.info RT_Data2.toString(); 
log.info RT_Data.toString();

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

//log.info testCase.getPropertyValue("DbResultRTXml");
//log.info testCase.getPropertyValue("RightsReqXml");

// Assert RightsToken Information Expected &amp; Actual 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
def Val_DbResultRTSHXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT_StatusHistoryXml"));

def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());

// Assert RightsTokenID

assert Val_DbResultRTXml.ResultSet.Row.RIGHTS_TOKEN_OID == testCase.getPropertyValue("DBrightstokenid");

//Assert ALID information
assert  Val_DbResultRTXml.ResultSet.Row.ALID == Val_RightsReqXml.@ALID;

// Assert CID information 
assert  Val_DbResultRTXml.ResultSet.Row.CONTENT_ID == Val_RightsReqXml.@ContentID;

//Assert NodeID information
//Val_RightsReqXml.PurchaseInfo.NodeID 
assert  Val_DbResultRTXml.ResultSet.Row.NODE_OID.toInteger() == Val_RightsReqXml.PurchaseInfo.NodeID.toString().tokenize(':').last().toInteger();

log.info rcStatusHistory;
// return rc for Status History 

CallingTCase.setPropertyValue("RTC_rcStatusHistory",testCase.getPropertyValue("RTC_rcStatusHistory"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:A17388C835F7967BE0401F0A059962B0</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>A17388C835F7967BE0401F0A059962B0</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>A17388C835F7967BE0401F0A059962B0</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-04-21 19:21:47.412</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID='urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt' xsi:schemaLocation='http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd' ContentID='urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt' xmlns:ns4='http://www.decellc.org/schema/2010/10/dece' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><ns4:SoldAs><ns4:DisplayName Language='en'>Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:BundleID>urn:dece:bid:FILE:mystudio Version_525899.txt</ns4:BundleID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:standarddefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>0</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile='urn:dece:type:mediaprofile:portabledefinition'><ns4:DiscreteMediaRightsRemaining FulfillmentMethod='urn:dece:type:discretemediaformat:securedigital'>0</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy='urn:dece:org:org:dece:222259' CreationDate='2011-02-17T15:12:03'><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc xsi:type='ns4:ResourceLocation-type' ContentProfile='urn:dece:type:mediaprofile:highdefinition'><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107002urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>A17388C83604967BE0401F0A059962B0</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>A17388C835F7967BE0401F0A059962B0</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>RightsToken has been created.</DESCRIPTION>
      <CREATED_DATE>2011-04-21 19:21:47.431</CREATED_DATE>
      <CREATED_BY_NODE_OID>222259</CREATED_BY_NODE_OID>
      <CREATED_BY_USER_OID>799999</CREATED_BY_USER_OID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information-old" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.RightsToken.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:E08520F41F14C4E3E0401F0A05995354" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenFull ContentID="urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt" ALID="urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:222259" CreationDate="2013-07-02T09:40:18.808Z" ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:24.381Z">
            <Value>urn:dece:type:status:deleted</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:24.380Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>Rights Token is Deleted</Description>
            </Prior>
            <Prior ModifiedBy="urn:dece:org:org:dece:222259" ModificationDate="2013-07-02T09:40:18.813Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <PurchaseInfo>
         <NodeID>urn:dece:org:org:dece:222259</NodeID>
         <RetailerTransaction>transcation</RetailerTransaction>
         <PurchaseAccount>urn:dece:accountid:org:dece:E085176981C0A457E0401F0A05993E0A</PurchaseAccount>
         <PurchaseUser>urn:dece:userid:org:dece:E0851E8E263A0C2DE0401F0A05993E15</PurchaseUser>
         <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
         <TransactionType>urn:dece:type:transaction:category1</TransactionType>
      </PurchaseInfo>
      <RightsLockerID>urn:dece:rightslockerid:org:dece:E085176981C8A457E0401F0A05993E0A</RightsLockerID>
   </RightsTokenFull>
</RightsToken>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2876</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate SAML Assertion" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Assertion From FormAuth">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callTSname = testCase.getPropertyValue("TSuiteName");
def callTCname = testCase.getPropertyValue("TCaseName");

def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

testCase.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
testCase.setPropertyValue("username",callTC.getPropertyValue("username"));

String nodeID = testCase.getPropertyValue("nodeid").toString();
String userID = testCase.getPropertyValue("username").toString();
String useroid = "";
String acctoid = "";

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
                def a = new dbUtils.dbUser(log,testProject.getPropertyValue("targetDECEDB"));
                useroid = a.userGetUserOID(userID);
                log.info "useroid" + useroid;
                acctoid = a.userGetAccountOIDbyUsername(userID);
                log.info "acctoid" + acctoid;
} 
catch (Throwable e) {
                log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
/*
*  LP1 security contexts
*/

if (testProject.getPropertyValue("targetDECEDB").toString() == "LP1") {
                switch (nodeID) {
                                case "222259":  
                                       if (userID == "schfau1")
                                                {
												   callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                callTC.setPropertyValue("assertionUUID","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                testProject.setPropertyValue("assertionUUID","_69d2ec4b-e824-48ce-937e-28c7e4972087");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                log.info "Done setting the properties"
                                                                                                  
                                                } else if (userID == "schfau2") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                callTC.setPropertyValue("assertionUUID","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                testProject.setPropertyValue("assertionUUID","_1fbdcf3c-a3fc-4ad7-8835-eecda96f7cea");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("assertionUserId","AA908CE1AB0E23E7E0401F0A2222596223");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                
                                                } else if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                testProject.setPropertyValue("assertionUUID","_dcc514f9-37c5-4788-acc1-1de0688e072b");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107006");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("assertionUserId","9A9CCCF13ABCD94FE0401F0A05992F63");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                 
                                                                                                
                                                } else if (userID == "jbaisakh") {
                                                              callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                callTC.setPropertyValue("assertionUUID","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                testProject.setPropertyValue("assertionUUID","_0c31da58-1b91-49bd-8f1e-3259ebb4f578");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                break;
                                case "0701":  // Nodes with different roles other then Retailer/Retailer CS
                                case "0702":

									/* if (userID == "schfau1")
                                                
                                                {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                testProject.setPropertyValue("assertionUUID","423757d3-ff28-410f-95f5-eb7752e0ca73");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionAccountId","A49F28BF260F2548E0401F0A0599026A");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("assertionUserId","A49F28BF26142548E0401F0A0599026F");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                                                         
                                                } elseif 
                                                 */   
                                                if (userID == "SCHOrg1Full1") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                testProject.setPropertyValue("assertionUUID","ee76b231-724c-40aa-b8b9-1a6c36676d9a");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:107001");
                                                                callTC.setPropertyValue("assertionAccountId","107001");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("assertionUserId","9D0EDCB4F1187DC8E0401F0A059975D3");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                                callTC.setPropertyValue("useroid",useroid);
                                                /*                                                
                                                } else if (userID == "jbaisakh") {
                                                                callTC.setPropertyValue("assert","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");
                                                                callTC.setPropertyValue("assertId","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                testProject.setPropertyValue("assertionUUID","12ca387e-379a-4988-adc6-5d7fca082c85");
                                                                callTC.setPropertyValue("assertionAccountIdFULL","urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionAccountId","A1C0ED690DFF822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserIdFULL","urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("assertionUserId","A1C0ED690E01822FE0401F0A2222593D5E");
                                                                callTC.setPropertyValue("accountoid",acctoid);
                                                */                callTC.setPropertyValue("useroid",useroid);
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                
                                                break;
                              default:
                                                log.info "ERROR - NodeID supplied is not configured!";
                                                assert 1 == 2;
                                              break;
                }

}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Validate SamlGetAssertionExpDate">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUUID",callingTCase.getPropertyValue("assertionUUID"));

               
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
Uuid = testCase.getPropertyValue("assertionUUID");
rcSAMLuuid = myDbSaml.samlGetAssertionRowCount(Uuid,nodeid);
testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());

		if (rcSAMLuuid.toInteger() ==1){ 
			log.info "UUid : [$Uuid] Found, row count: $rcSAMLuuid";
			// check expiration date for the assertion	
			ValsamlExpDate = GetsamlExpDate(Uuid,nodeid);			
			ValSysDate = getSysDate();
			
				 if (CompareDates(ValsamlExpDate,ValSysDate).toString()=='true'){
			 		log.info  "SAML Assertion is Good !" 
			 		log.info "SAML Assertion Expiration Date till-[$ValsamlExpDate]";
			 		testCase.setPropertyValue("SAMLExpDate",ValsamlExpDate);
				 }
				 else{
				 	log.info "SAML Assertion is Expired."
				 	assert setSamlExpDate(Uuid.toString(),nodeid.toString(),4) == 1;	
				 	ValsamlRenwDate = GetsamlExpDate(Uuid,nodeid);
				 	SysDate = getSysDate();
				 	log.info "SAML Assertion Renewed till-[$ValsamlRenwDate]";
				 	assert CompareDates(ValsamlRenwDate,SysDate)== true;
				 	testCase.setPropertyValue("SAMLExpDate",ValsamlRenwDate);			 			 	
				 }
		
		}
		else{	
			log.info "UUid : [$Uuid] not Found, row count: $rcSAMLuuid";
			testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());	
			
		}


// Get SAML Expiration Date Mehtod
def GetsamlExpDate(String Uuid, String Nodeid){
def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
ExpDate = myDbSaml.samlGetAssertionExpDate(Uuid ,nodeid);
samlExpDateXML = new XmlSlurper().parseText(ExpDate.toString());
samlExpDate = samlExpDateXML.toString();
return samlExpDate;
}


def getSysDate(){
	sysDate = new Date().format("yyyy-MM-dd hh:mm:ss.S");
	return sysDate;
}
	
def CompareDates( String SamlDate, String SysDate){
	
		def testSuiteamlDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SamlDate.toString());
		def testSuiteysDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SysDate.toString());

		log.info "SamlDateTime in Millisec:" + tSamlDate.getTime() + "- SysDateTime in Millisec:" + tSysDate.getTime();
		if (tSamlDate.getTime() >= tSysDate.getTime()){
		return true;
		}
	
}	

def setSamlExpDate( String Uuid, String Nodeid, int Years){
		def myDbSaml = new dbSAMLAssertion(log,testProject.getPropertyValue("targetDECEDB"));;
		def rcsetSamlExpDate = myDbSaml.samlRenewAssertionYear(Uuid.toString(),Nodeid.toString(),Years.toInteger() );
		return rcsetSamlExpDate;
}

// Return SAML Assertion Validations 

callingTCase.setPropertyValue("SAMLExpDate",testCase.getPropertyValue("SAMLExpDate"));
callingTCase.setPropertyValue("rcUUID",testCase.getPropertyValue("rcUUID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_69d2ec4b-e824-48ce-937e-28c7e4972087</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">222259</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2016-08-19 06:59:22.0</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10004_RightsTokenDelete_Head_Method_RTL</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenUpdate_ByMethod_Invocation</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>schfau1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get SAML Assertion - STS" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get SAML Assertion from STS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

		testCase.setPropertyValue("nodetype",callingTCase.getPropertyValue("nodetype"));
		testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
		testCase.setPropertyValue("username",callingTCase.getPropertyValue("username"));
		testCase.setPropertyValue("password",callingTCase.getPropertyValue("password"));
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype",callingTCase.getPropertyValue("tokentype"));
		testCase.setPropertyValue("loopuntil",callingTCase.getPropertyValue("loopuntil"));
		testCase.setPropertyValue("expectErrTypeSTS",callingTCase.getPropertyValue("expectErrTypeSTS"));
		testCase.setPropertyValue("expectErrTypeSTSGet",callingTCase.getPropertyValue("expectErrTypeSTSGet"));


def GetSTS = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authorization Information Extraction via STS")

GetSTS.setPropertyValue("tName",testCase.getName());
GetSTS.setPropertyValue("sName",testSuite.getName());

def runnerTC = GetSTS.run( null , false )

assert runnerTC.status == Status.FINISHED;


// Return Property Values to the Calling testcase

callingTCase.setPropertyValue("nodeid", testCase.getPropertyValue("nodeid"));
callingTCase.setPropertyValue("nodetype",testCase.getPropertyValue("nodetype"));
callingTCase.setPropertyValue("username",testCase.getPropertyValue("username"));
callingTCase.setPropertyValue("password",testCase.getPropertyValue("password"));
callingTCase.setPropertyValue("accountoid",testCase.getPropertyValue("accountoid"));
callingTCase.setPropertyValue("useroid",testCase.getPropertyValue("useroid"));
callingTCase.setPropertyValue("SAMLassertion",testCase.getPropertyValue("assert"));
callingTCase.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));
callingTCase.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));
callingTCase.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callingTCase.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callingTCase.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>jbaisakh</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A1C0ED690E02822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A1C0ED690E01822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_5.txt</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A1C0ED690DFF822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A1C0ED690E00822FE0401F0A2222593D5E</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_120426b5-97ae-4376-976f-b1aa1743f38c</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10040 - RightsTokenDelete - Policy - ParentalControl:RatingPolicy -   UK - FILMTV - BBFC - r18 rating - Full User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>assertCommon</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDeleteRequest" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

log.info testProject.getName();


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");


def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAML_USER1"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("SAML_USER1"));

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

//SetUp test properties
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
/*
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("NODE_ACCOUNT_ID_FULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("rightstokenid"));
}	*/
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet API to have the ETAG"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

//Extractthe Response and Set the ETag Value at the Project Level Properties
RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request

def headers = new StringToStringMap()
headers.put("If-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Exact the ETag Details" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//Extractthe Response and Set the ETag Value at the Project Level Properties
def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request
if (etagValue.toString()!="null")
{
def headers = new StringToStringMap()
headers.put("IF-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
}
assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDeleteRequest");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDeleteRequest">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="${#Project#AppHost}:${#Project#AppPort}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5CK0y1RlF3YfW3kTbnr50YhIk3RAsCUr760+Cxaq13e4zwwxksbLWty75ss4ZSGLL7TCGM05Sqvi9lvpsWAAh0AAasKZnmt1s2BowYV2zQ3wKzqa2NXVCVfEZy7FPGQeUt1TLMG3NqGvW6dhounVLPDWzbj+pyj3OmDAtVGqGqhRJTJlbum2peUbdFDDCXAoSzFwO3aBzNXSFpgsqTGr7fIWydJi1I87nrq7DGsIQxzGswTTRz/UtnXPE3IDMKOB5hj98ItZSP/Yul8vasl5Ls5luGYahG01d6CBGZsdq+6jajJFPw3S19gBNKYEgJu9AgrrCPEqR0olnaUZ4lHxj2tRNQ5rWcAE1aNr0WNU/HZToDrS0BTJjQGMRMCtjIxziDFOIlcnIb6nHh1VwtXecAcrCNEvYzvrvIGG6wHE6x0hjVWQVusMt7klX+xxD16cwzhlZ4GvZJnMAMVNuMxySYkiYaD7ElLL8SsHEQ6ouw/BvynKub2IV0PU92emRGWb8/9Rss14rK/cgznH76WFxlndn9ZOk8fjud9+T6etwdO35gc5aJYRN5RWodbk/1rvNuu6tj03Lp3qE0P3sNLeiX7Pee3gZ2MwZmcnlI4CTyU19cqL3SDOaZtkYoW5wCk/6zp239KLHphE8Pv72unlQv6hbL8PiKLSNf9iF7Q288ZU+H0Y6mb0/FfaEJ3w5CsC/YeTd3j4s6+ikhy7n5GJ0fR/fhXcTv7/oo9vwsus8FYNbk13E5svRr8nUs/qFmdzkD94kpsU4bX3GtBnDtrCihCCfvmDIq6VsD7+nDES9AP+ZXqSEIC0sVd255CjGMeVqW+6S1OLmgoAIckUxV+uOYZmWbTa63d7Atk2jcdYzuuKraTfMQbPTqDhohWIHopfSkEhfkmVX/fMzQJi4DFOEM22R5jDCTP3BYg9woPh0JA5HShkWWVSfB3a/0W82rYEjMTqOVR/0HKfhNE/NbqNvmapynfIbepN1Qo6zLQY3rS0GH2FI5gRLmpd9zkSjMy5S8goWOY/N2gLUKM7FRZBJLnYtu+HojCTzGEvAepKiPMa1eTQvE6Sz1dvSAGSldNQfl+fv2/B2/1WZEDqISAUmY+liUU285yqyqkC+D9jZDLgy38kRkcdMpJVnBK6QbP/67BbZJutWERE9e8GzWeFeqx+8/etO/QdQ+m4+1o7Qgmy4re5UcU0IEmlX1XwFtddavljkZf3OJEFmwrwueNLUAwxzwXJv4/Q3pvrahH7QJbNGveN5Ld/Gl/OIBhxwnIhuU8rlARNGgJmcMHxxWopDx5ctlyJvHBd8n8yLxSAiEf84q0AXSj0hvhWvZZqhz3LtsbXhR8QpxgpO6Eyu5HXy9k1TwFSYJYL/0mzT+D4D+5xvC9dJXmPhopumOcff/1EksbVUAGGaU+731FKwSbYlTv42x+6n0hczJaF/3NAF+/aGfrwaBoL2EqCudcmflTVStgvEqhwESiwttRADp3BOZxvk/gFwk9+7Tc84dQyv8wd+346k/UX8VbKR093z0P4P" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDeleteRequest_with_NULL_trxid" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="${#Project#AppHost}:${#Project#AppPort}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest_with_NULL_trxid" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:B6ACE7F48352D3C9E0401F0A059915EC "/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_3184_UserCreate_AUTH_Creator_YOUTH_Standard_New_ADULT_Standard_201_CREATED_P1</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>UserCreate_GeoProfile</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:6CC399E60CDF441087D0BF449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:B9C0650CABDF441087D0BF449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
      <con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt" ALID="urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2014-02-10T08:30:44.312Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-02-10T08:30:44.312Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1547</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>RightsTokenInfo</con:value></con:property><con:property><con:name>assert</con:name><con:value>SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5CK0y1RlF3YfW3kTbnr50YhIk3RAsCUr760+Cxaq13e4zwwxksbLWty75ss4ZSGLL7TCGM05Sqvi9lvpsWAAh0AAasKZnmt1s2BowYV2zQ3wKzqa2NXVCVfEZy7FPGQeUt1TLMG3NqGvW6dhounVLPDWzbj+pyj3OmDAtVGqGqhRJTJlbum2peUbdFDDCXAoSzFwO3aBzNXSFpgsqTGr7fIWydJi1I87nrq7DGsIQxzGswTTRz/UtnXPE3IDMKOB5hj98ItZSP/Yul8vasl5Ls5luGYahG01d6CBGZsdq+6jajJFPw3S19gBNKYEgJu9AgrrCPEqR0olnaUZ4lHxj2tRNQ5rWcAE1aNr0WNU/HZToDrS0BTJjQGMRMCtjIxziDFOIlcnIb6nHh1VwtXecAcrCNEvYzvrvIGG6wHE6x0hjVWQVusMt7klX+xxD16cwzhlZ4GvZJnMAMVNuMxySYkiYaD7ElLL8SsHEQ6ouw/BvynKub2IV0PU92emRGWb8/9Rss14rK/cgznH76WFxlndn9ZOk8fjud9+T6etwdO35gc5aJYRN5RWodbk/1rvNuu6tj03Lp3qE0P3sNLeiX7Pee3gZ2MwZmcnlI4CTyU19cqL3SDOaZtkYoW5wCk/6zp239KLHphE8Pv72unlQv6hbL8PiKLSNf9iF7Q288ZU+H0Y6mb0/FfaEJ3w5CsC/YeTd3j4s6+ikhy7n5GJ0fR/fhXcTv7/oo9vwsus8FYNbk13E5svRr8nUs/qFmdzkD94kpsU4bX3GtBnDtrCihCCfvmDIq6VsD7+nDES9AP+ZXqSEIC0sVd255CjGMeVqW+6S1OLmgoAIckUxV+uOYZmWbTa63d7Atk2jcdYzuuKraTfMQbPTqDhohWIHopfSkEhfkmVX/fMzQJi4DFOEM22R5jDCTP3BYg9woPh0JA5HShkWWVSfB3a/0W82rYEjMTqOVR/0HKfhNE/NbqNvmapynfIbepN1Qo6zLQY3rS0GH2FI5gRLmpd9zkSjMy5S8goWOY/N2gLUKM7FRZBJLnYtu+HojCTzGEvAepKiPMa1eTQvE6Sz1dvSAGSldNQfl+fv2/B2/1WZEDqISAUmY+liUU285yqyqkC+D9jZDLgy38kRkcdMpJVnBK6QbP/67BbZJutWERE9e8GzWeFeqx+8/etO/QdQ+m4+1o7Qgmy4re5UcU0IEmlX1XwFtddavljkZf3OJEFmwrwueNLUAwxzwXJv4/Q3pvrahH7QJbNGveN5Ld/Gl/OIBhxwnIhuU8rlARNGgJmcMHxxWopDx5ctlyJvHBd8n8yLxSAiEf84q0AXSj0hvhWvZZqhz3LtsbXhR8QpxgpO6Eyu5HXy9k1TwFSYJYL/0mzT+D4D+5xvC9dJXmPhopumOcff/1EksbVUAGGaU+731FKwSbYlTv42x+6n0hczJaF/3NAF+/aGfrwaBoL2EqCudcmflTVStgvEqhwESiwttRADp3BOZxvk/gFwk9+7Tc84dQyv8wd+346k/UX8VbKR093z0P4P</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1584ee73-97f2-474b-955f-c1c6f5a8ea91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71721bdd-13aa-4a9d-b861-704bd42cc7b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights GET  Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken GET">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenGet Response">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenGet_RTR_FUNC_with_Valid_Accountid_and_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenGet_ByRightsTokenID_Retailer_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9BF67E75E0AD1C6DE0401F0A05992B3B</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-02-10 22:56:38.958</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03"><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-07T14:35:52.942Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>9BF67E75E0B81C6DE0401F0A05992B3B</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B31C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B21C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>highdefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B51C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B41C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>standarddefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASED_MEDIA_PROFILE_OID>9BF67E75E0B71C6DE0401F0A05992B3B</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9BF67E75E0B61C6DE0401F0A05992B3B</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>portabledefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>9BF67E75E0AE1C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>9BF67E75E0AF1C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>9BF67E75E0B01C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>9BF67E75E0B11C6DE0401F0A05992B3B</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9BF67E75E0AD1C6DE0401F0A05992B3B</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-10 22:56:38.852</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenGet RESPONSE">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

	String major = context.expand('${#Project#versionMajor}');
	String minor = context.expand('${#Project#versionMinor}');

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTGet",CallingTCase.getPropertyValue("expectErrTypeRTGet"));

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTGet");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

//log.info Resp_HTTPstatus;
//log.info Resp_HTTPconnection;
//log.info Resp_HTTPcontenttype;
//log.info Resp_HTTPcontentlength;

// Error Validation Flags &amp; Values

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

/*
if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";
*/

switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$Res_RTObjType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$Res_RTObjType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection == expectHTTPconnection;

//Content-Length

log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() > 0; 

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenGet_RTR_FUNC_with_Valid_Accountid_and_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenGet_ByRightsTokenID_Retailer_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsTokenList AccountID="urn:dece:accountid:org:dece:107006" RightsLockerID="urn:dece:rightslockerid:org:dece:7001" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsToken>
      <RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9BB325E8AABE6B2FE0401F0A222259320A">
         <RightsLockerID>urn:dece:rightslockerid:org:dece:7001</RightsLockerID>
         <RightsTokenData ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt">
            <SoldAs>
               <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
               <ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ContentID>
            </SoldAs>
            <RightsProfiles>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
               <PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition">
                  <DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</DiscreteMediaRightsRemaining>
                  <CanDownload>true</CanDownload>
                  <CanStream>true</CanStream>
               </PurchaseProfile>
            </RightsProfiles>
            <ResourceStatus>
               <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-07T14:35:52.942Z">
                  <Value>urn:dece:type:status:active</Value>
               </Current>
            </ResourceStatus>
            <LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</LicenseAcqBaseLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/aaa</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentWebLoc>
               <Location>https://dl.bestbuy.com/p/bbb</Location>
               <Preference>1</Preference>
            </FulfillmentWebLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ccc</Location>
               <Preference>3</Preference>
            </FulfillmentManifestLoc>
            <FulfillmentManifestLoc>
               <Location>https://dl.bestbuy.com/p/ddd</Location>
               <Preference>1</Preference>
            </FulfillmentManifestLoc>
            <PurchaseInfo>
               <NodeID>urn:dece:org:org:dece:222259</NodeID>
               <RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</RetailerTransaction>
               <PurchaseAccount>urn:dece:accountid:org:dece:107006</PurchaseAccount>
               <PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</PurchaseUser>
               <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
            </PurchaseInfo>
         </RightsTokenData>
      </RightsTokenFull>
   </RightsToken>
</RightsTokenList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Request" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
testRunner.testCase.getTestStepByName("RightTokenUpdateRequest PUT").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("RightsLockerID",CallingTCase.getPropertyValue("RightsLockerID"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RRSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTUReq","OK");
CallingTCase.setPropertyValue("FeedRTUReq",testCase.getPropertyValue("FeedRTUReq"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>RightsLockerID</con:name>
          <con:value>urn:dece:rightslockerid:org:dece:7001</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:222259</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node222259_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTUReq</con:name>
          <con:value>OK</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Update Information" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenUpdate Request XML">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info "RightsReqXml:" + testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName('RightTokenUpdateRequest PUT').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

log.info RightsResHttpStatus;
log.info "Response Time : $RightsResTime:ms";
testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
log.info "ResponseXML:" + testCase.getPropertyValue("RightsResXml");
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE"  xsi:schemaLocation="http://www.decellc.org/schema dece.xsd "  xmlns:ns4="http://www.decellc.org/schema/2010/10/dece"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:7001</ns4:RightsLockerID> <ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:ResourceStatus> 		<ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03.000"> 			<ns4:Value>urn:dece:type:status:active</ns4:Value> 			<ns4:Description>new rights token</ns4:Description> 		</ns4:Current> 	</ns4:ResourceStatus> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:ViewControl> 		<ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser> 	</ns4:ViewControl> </ns4:RightsTokenData> </ns4:RightsTokenFull>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>2756</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenUpdate Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenUpdate RESPONSE">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTUpdate",CallingTCase.getPropertyValue("expectErrTypeRTUpdate"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenUpdate Request").getTestStepByName("RightTokenUpdateRequest PUT").httpRequest.response.getResponseHeaders();

def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTUpdate");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");

	
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";
String orgRequest = "$DeceUrl:$DecePort/rest/0/9/Account/$accountid/RightsToken/$rightstokenid";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		processXMLFlag   = false;
		Responsebodynull = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	Resp_errorReason = "ContentID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotValid";
	Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	Resp_errorReason = "AssetLogicalID is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserNotActive";
	Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	Resp_errorReason = "Request Account ID not match";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	Resp_errorReason = "AssetLogicalID is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	Resp_errorReason = "AssetLogicalID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	Resp_errorReason = "BundleID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	Resp_errorReason = "FulfillmentLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	Resp_errorReason = "PurchaseUser is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "LICACQBASE_LOC_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/0/9/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection == expectHTTPconnection;

//Content-Length
if (Resp_HTTPstatus == "HTTP/1.1 200 OK")
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() == 0; 
}
else 
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() > 0; 
}
// Location
/*

if (Resp_HTTPstatus == "HTTP/1.1 201 Created")
{
log.info "Location:" + Resp_HTTPLocation;
assert orgRequest == Resp_HTTPLocation;
}
else
{
log.info "Location:" + Resp_HTTPLocation;
assert Resp_HTTPLocation == null;
}
*/
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

	// Verify response sizes...
	
ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
	// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
	// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

	// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTUpdate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights UPDATE  Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken UPDATE">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));


// Fetch RightsToken info from RIGHTS_TOKEN table

RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenUPDATE Request">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 

def actRTU_PPContentProfile  = new ArrayList();
def actRTU_PPDMR  = new ArrayList();
def actRTU_PPCanDownload  = new ArrayList();
def actRTU_PPCanStream  = new ArrayList();
def actRTU_PPDMProfile  = new ArrayList();
def actRTU_LicAcqBaseLoc = new ArrayList();
def actRTU_FFWebLoc_Location = new ArrayList();
def actRTU_FFWebLoc_Pref = new ArrayList();
def actRTU_FFManifestLoc_Location = new ArrayList();
def actRTU_FFManifestLoc_Pref = new ArrayList();
def expectRTU_PPContentProfile  = new ArrayList();
def expectRTU_PPDMR  = new ArrayList();
def expectRTU_PPCanDownload  = new ArrayList();
def expectRTU_PPCanStream  = new ArrayList();
def expectRTU_PPDMProfile  = new ArrayList();
def expectRTU_LicAcqBaseLoc = new ArrayList();
def expectRTU_FFWebLoc_Location = new ArrayList();
def expectRTU_FFWebLoc_Pref = new ArrayList();
def expectRTU_FFManifestLoc_Location = new ArrayList();
def expectRTU_FFManifestLoc_Pref = new ArrayList();

// RightsToken Update Request Information 

def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
RTObjType = testCase.getPropertyValue("RTObjType");
log.info RTObjType.toString();

		expectRTU_AccountID = testCase.getPropertyValue("Accountid");
		expectRTU_RightsTokenID =  Val_RightsReqXml.@RightsTokenID.toString();
		expectRTU_RightsLockerID = Val_RightsReqXml.RightsLockerID.toString();		
		expectRTU_ALID = Val_RightsReqXml.RightsTokenData.@ALID.toString();
		expectRTU_ContentID = Val_RightsReqXml.RightsTokenData.@ContentID.toString();
		expectRTU_SoldAsLang = Val_RightsReqXml.RightsTokenData.SoldAs.DisplayName.@Language.toString();
		expectRTU_DisplayName = Val_RightsReqXml.RightsTokenData.SoldAs.DisplayName;
		expectRTU_SoldAsContentID = Val_RightsReqXml.RightsTokenData.SoldAs.ContentID;
		expectRTU_SoldAsBUNDLE_ID = Val_RightsReqXml.RightsTokenData.SoldAs.BundleID;


// Rights Purchase Media Purchase Profiles
		expPMPPSize = Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..expPMPPSize-1 ){
	
			expectRTU_PPContentProfile +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			expectRTU_PPDMR +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			expectRTU_PPDMProfile +=(Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			expectRTU_PPCanDownload += 'Y';
			}
			else{
			expectRTU_PPCanDownload += 'N';
			}
			
			if ((Val_RightsReqXml.RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			expectRTU_PPCanStream += 'Y';
			}
			else{
			expectRTU_PPCanStream += 'N';
			}
		}


// Expected Rights Status 

		expectRTU_RS_CreatedBy = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		RS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		log.info RS_CreationDate;
		expectRTU_RS_CreationDate = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",RS_CreationDate.toString());
		log.info expectRTU_RS_CreationDate;
		expectRTU_RS_Value = (Val_RightsReqXml.RightsTokenData.ResourceStatus.Current.Value).toString();



//  Expected Rights Licence Acq Base Location

 		expLicAcqSize = Val_RightsReqXml.RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..expLicAcqSize-1 ){
		
			expectRTU_LicAcqBaseLoc += Val_RightsReqXml.RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Expected Rights Fullfillment WebLoc

	expFFWeblocSize = Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..expFFWeblocSize-1 ){
	
		expectRTU_FFWebLoc_Location += (Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		expectRTU_FFWebLoc_Pref += (Val_RightsReqXml.RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Expected Rights Fullfillment ManifestLoc

	expFFManifestSize = Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..expFFManifestSize-1 ){
	
		expectRTU_FFManifestLoc_Location += (Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		expectRTU_FFManifestLoc_Pref += (Val_RightsReqXml.RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Expected Rights Purchase Info
		expectRTU_PI_NodeID = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.NodeID).toString();
		expectRTU_PI_RetailerTrax = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		expectRTU_PI_PurcaseAccount = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		expectRTU_PI_PurchaseUser = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsReqXml.RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		expectRTU_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Expected Rights Status History 

		log.info "Rights Status History Row Count Before Rights Token Update ;" + testCase.getPropertyValue("RTC_rcStatusHistory");
		expectRTU_rcSatusHistory = ((testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger() + 1).toString();


// DB Rights Token Information 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));
def Val_DbResultRTSHXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-StatusHistoryXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();


		// Rights Token 
		actRTU_Accountid =  "urn:dece:accountid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		actRTU_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		actRTU_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		actRTU_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		actRTU_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		actRTU_SoldAs_Lang = (Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID).toString();
		actRTU_SoldAs_PRODUCT_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID).toString();
		actRTU_SoldAs_DisplayName = (Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME).toString();
		actRTU_SoldAs_ContentID = (Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID).toString();
		actRTU_SoldAs_BUNDLE_ID = (Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID).toString();

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		actRTU_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		actRTU_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//actRTU_PPDMProfile = 
		actRTU_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		actRTU_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		actRTU_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		actRTU_RS_CreationDate =  new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",CreationDate.toString())
		actRTU_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		actRTU_LicAcqBaseLoc += (Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i]).toString();
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		actRTU_FFWebLoc_Location += (Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString();
		actRTU_FFWebLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		actRTU_FFManifestLoc_Location += (Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1]).toString();	
		actRTU_FFManifestLoc_Pref += (Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1]).toString();
	
		}

		// Rights Purchase Infomation
				
		actRTU_PI_NodeID = "urn:dece:org:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.NODE_OID).toString();
		actRTU_PI_RetailerTrax = (Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION).toString();
		actRTU_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID).toString();
		actRTU_PI_PurchaseUser = "urn:dece:userid:org:dece:"+ (Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID).toString();
		actRTU_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

		// Rights Status History
		
		def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
		testCase.setPropertyValue("RTU_rcStatusHistory", rcStatusHistory.toString());
		log.info "Rights Status History Row Count After Rights Token Update ;" + testCase.getPropertyValue("RTU_rcStatusHistory");
				
		actRTU_rcSatusHistory = testCase.getPropertyValue("RTU_rcStatusHistory");


// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenUpdate Accountid Expected : [$expectRTU_AccountID] - Actual Recieved: [$actRTU_Accountid]";
 		assert expectRTU_AccountID == actRTU_Accountid ;

// Assert RightsToken LockerId

		log.info "Rights TokenUpdate Lockerid Expected : [$expectRTU_RightsLockerID] - Actual Recieved: [$actRTU_Lockerid]";
		 assert expectRTU_RightsLockerID == actRTU_Lockerid;

// Assert RightsToken id 

		log.info "Rights TokenUpdate Tokenid Expected : [$expectRTU_RightsTokenID] - Actual Recieved: [$actRTU_RightsTokenID]";
		assert expectRTU_RightsTokenID == actRTU_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenUpdate Alid Expected : [$expectRTU_ALID] - Actual Recieved: [$actRTU_ALID]";
 		assert expectRTU_ALID.toString() == actRTU_ALID.toString();

// Assert RightsToken ContentID 

		log.info "Rights TokenUpdate ContentID Expected : [$expectRTU_ContentID] - Actual Recieved: [$actRTU_ContentID]"; 
 		assert expectRTU_ContentID.toString() == actRTU_ContentID.toString();

// Assert RightsToken SoldAS Language

		log.info "Rights TokenUpdate SoldAs Language Expected : [$expectRTU_SoldAsLang] - Actual Recieved: [$actRTU_SoldAs_Lang]";
		assert expectRTU_SoldAsLang == actRTU_SoldAs_Lang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenUpdate SoldAs DisplayName Expected : [$expectRTU_DisplayName] - Actual Recieved:[$actRTU_SoldAs_DisplayName]";
 		assert expectRTU_DisplayName == actRTU_SoldAs_DisplayName;

		if (expectRTU_SoldAsContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenUpdate SoldAs ContentID Expected : [$expectRTU_SoldAsContentID] - Actual Recieved:[$actRTU_SoldAs_ContentID]";
 		assert expectRTU_SoldAsContentID == actRTU_SoldAs_ContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenUpdate SoldAs BUNDLE_ID Expected : [$expectRTU_SoldAsBUNDLE_ID] - Actual Recieved:[$actRTU_SoldAs_BUNDLE_ID]";
		assert expectRTU_SoldAsBUNDLE_ID == actRTU_SoldAs_BUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenUpdate Purchase ContentProfile Expected : $expectRTU_PPContentProfile - Actual Recieved:$actRTU_PPContentProfile";
		assert expectRTU_PPContentProfile == actRTU_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenUpdate Purchase DiscreteMediaRightsRemaining Expected : $expectRTU_PPDMR - Actual Recieved:$actRTU_PPDMR";
		assert expectRTU_PPDMR == actRTU_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenUpdate Purchase CanDownload Expected : $expectRTU_PPCanDownload - Actual Recieved:$actRTU_PPCanDownload";
		assert expectRTU_PPCanDownload == actRTU_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenUpdate Purchase CanStream Expected : $expectRTU_PPCanStream - Actual Recieved:$actRTU_PPCanStream";
		assert expectRTU_PPCanStream == actRTU_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenUpdate ResourceStatus CreatedBy Expected : [$expectRTU_RS_CreatedBy] - Actual Recieved: [$actRTU_RS_CreatedBy]";
		assert expectRTU_RS_CreatedBy == actRTU_RS_CreatedBy;
		
		log.info "Rights TokenUpdate ResourceStatus CreationDate Expected : [$expectRTU_RS_CreationDate] - Actual Recieved: [$actRTU_RS_CreationDate]";
		//assert expectRTU_RS_CreationDate == actRTU_RS_CreationDate; //  No Validation on  RS Creation Date 

		log.info "Rights TokenUpdate ResourceStatus Value Expected : [$expectRTU_RS_Value] - Actual Recieved: [$actRTU_RS_Value]";
		assert expectRTU_RS_Value ==  actRTU_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenUpdate LicenceAcqBase Location Expected : [$expectRTU_LicAcqBaseLoc] - Actual Recieved: [$actRTU_LicAcqBaseLoc]";
		assert expectRTU_LicAcqBaseLoc == actRTU_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenUpdate FF Web location Expected : [$expectRTU_FFWebLoc_Location] - Actual Recieved: [$actRTU_FFWebLoc_Location]";
		assert expectRTU_FFWebLoc_Location == actRTU_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenUpdate Web FF preference Expected : [$expectRTU_FFWebLoc_Pref] - Actual Recieved: [$actRTU_FFWebLoc_Pref]";
		assert expectRTU_FFWebLoc_Pref == actRTU_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenUpdate FF Manifest location Expected : [$expectRTU_FFManifestLoc_Location] - Actual Recieved: [$actRTU_FFManifestLoc_Location]";
		assert expectRTU_FFManifestLoc_Location == actRTU_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenUpdate FF Manifest  preference Expected : [$expectRTU_FFManifestLoc_Pref] - Actual Recieved: [$actRTU_FFManifestLoc_Pref]";
		assert expectRTU_FFManifestLoc_Pref == actRTU_FFManifestLoc_Pref ;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenUpdate PurchaseInfo  NodeID Expected : [$expectRTU_PI_NodeID] - Actual Recieved: [$actRTU_PI_NodeID]";
		assert expectRTU_PI_NodeID == actRTU_PI_NodeID;

		log.info "Rights TokenUpdate PurchaseInfo  RetailerTrax Expected : [$expectRTU_PI_RetailerTrax] - Actual Recieved: [$actRTU_PI_RetailerTrax]";
		assert expectRTU_PI_RetailerTrax == actRTU_PI_RetailerTrax;

		log.info "Rights TokenUpdate PurchaseInfo  PurcaseAccount Expected : [$expectRTU_PI_PurcaseAccount] - Actual Recieved: [$actRTU_PI_PurcaseAccount]";
		assert expectRTU_PI_PurcaseAccount == actRTU_PI_PurcaseAccount;
		
		log.info "Rights TokenUpdate PurchaseInfo  PurchaseUser Expected : [$expectRTU_PI_PurchaseUser] - Actual Recieved: [$actRTU_PI_PurchaseUser]";
		assert expectRTU_PI_PurchaseUser == actRTU_PI_PurchaseUser;

		log.info "Rights TokenUpdate PurchaseInfo  PurchaseTime Expected : [$expectRTU_PI_PurchaseTime] - Actual Recieved: [$actRTU_PI_PurchaseTime]";
		def actPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",actRTU_PI_PurchaseTime.toString());
		def expectPurchaseTime = new Date().parse("yyyy-MM-dd hh:mm:ss.SSS",expectRTU_PI_PurchaseTime.toString());

		log.info "Expected Purchase time :" + expectPurchaseTime.getTime() + " ms || Actual PurchaseTime :" + actPurchaseTime.getTime() + " ms";
		assert expectPurchaseTime.getTime() == actPurchaseTime.getTime();

// Assert Rights History Table
		log.info " Record Count RightsToken History Table" 
		log.info " Expected Rights TokenUpdate Status HistoryCount:[$expectRTU_rcSatusHistory] - Actual Recieved: [$actRTU_rcSatusHistory]";
		assert expectRTU_rcSatusHistory == actRTU_rcSatusHistory;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_RightsTokenUpdate_FUNC_RTL_With_Valid_Accountid and Valid RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenUpdate_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107006</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C196308C6811497E0401F0A2222593EAE</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>222259</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107002</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node222259_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-02-12 16:34:23.655</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
      <UPDATED_DATE>2011-02-14 14:39:44.832</UPDATED_DATE>
      <UPDATED_BY>222259</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenFull RightsTokenID="urn:dece:rightstokenid:org:dece:9C196308C6811497E0401F0A2222593EAE"  xsi:schemaLocation="http://www.decellc.org/schema dece.xsd "  xmlns:ns4="http://www.decellc.org/schema/2010/10/dece"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <ns4:RightsLockerID>urn:dece:rightslockerid:org:dece:7001</ns4:RightsLockerID> <ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt"> 	<ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		<ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"> 			<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining> 			<ns4:CanDownload>true</ns4:CanDownload> 			<ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	<ns4:ResourceStatus> 		<ns4:Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2011-02-17T15:12:03.000"> 			<ns4:Value>urn:dece:type:status:active</ns4:Value> 			<ns4:Description>new rights token</ns4:Description> 		</ns4:Current> 	</ns4:ResourceStatus> 	<ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc> 		<ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:222259</ns4:NodeID> 		<ns4:RetailerTransaction>RetailerTransaction_1_node222259_RetailerNode</ns4:RetailerTransaction> 		<ns4:PurchaseAccount>urn:dece:accountid:org:dece:107006</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser> 		<ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> 	<ns4:ViewControl> 		<ns4:AllowedUser>urn:dece:userid:org:dece:12222599</ns4:AllowedUser> 	</ns4:ViewControl> </ns4:RightsTokenData> </ns4:RightsTokenFull>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value>RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_SOLD_AS_OID>9C196308C68C1497E0401F0A2222593EAE</RIGHTS_SOLD_AS_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <PRODUCT_ID>null</PRODUCT_ID>
      <CREATED_DATE>2011-02-12 16:34:23.489</CREATED_DATE>
      <LANGUAGE_ID>en</LANGUAGE_ID>
      <BUNDLE_ID>null</BUNDLE_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0670F89F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0670E89F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>highdefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0671189F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0671089F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>standarddefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <PURCHASED_MEDIA_PROFILE_OID>9C4004C0671389F4E0401F0A05997DE3</PURCHASED_MEDIA_PROFILE_OID>
      <DISCRETE_MEDIA_PROFILE>73656375726573643A6370726D</DISCRETE_MEDIA_PROFILE>
      <PURCHASE_PROFILE_OID>9C4004C0671289F4E0401F0A05997DE3</PURCHASE_PROFILE_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <DOWNLOAD>Y</DOWNLOAD>
      <STREAM>Y</STREAM>
      <DISCRETE_MEDIA_RIGHTS_REMAIN>1</DISCRETE_MEDIA_RIGHTS_REMAIN>
      <PURCHASED_CONTENT_PROFILE>portabledefinition</PURCHASED_CONTENT_PROFILE>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <FULFILLMENT_LOC_OID>9C4004C0670A89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='2'>
      <FULFILLMENT_LOC_OID>9C4004C0670B89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Web</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='3'>
      <FULFILLMENT_LOC_OID>9C4004C0670C89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>
      <PREFERENCE_ORDER>3</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
    <Row rowNumber='4'>
      <FULFILLMENT_LOC_OID>9C4004C0670D89F4E0401F0A05997DE3</FULFILLMENT_LOC_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <TYPE>Manifest</TYPE>
      <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>
      <PREFERENCE_ORDER>1</PREFERENCE_ORDER>
      <CREATED_DATE>2011-02-14 14:39:44.636</CREATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_STATUS_HISTORY_OID>9C35E526F029BE8BE0401F0A22225933E5</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:05:44.346</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='2'>
      <RIGHTS_STATUS_HISTORY_OID>9C4004C0670989F4E0401F0A05997DE3</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 14:39:44.768</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='3'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C42A0515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:33:39.789</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='4'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C4360515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:39:33.805</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
    <Row rowNumber='5'>
      <RIGHTS_STATUS_HISTORY_OID>9C36B498C41E0515E0401F0A05997A39</RIGHTS_STATUS_HISTORY_OID>
      <RIGHTS_TOKEN_OID>9C196308C6811497E0401F0A2222593EAE</RIGHTS_TOKEN_OID>
      <STATUS>active</STATUS>
      <DESCRIPTION>Rights Token is Updated</DESCRIPTION>
      <CREATED_DATE>2011-02-14 03:33:05.227</CREATED_DATE>
      <CREATED_BY>222259</CREATED_BY>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>4</con:value>
        </con:property>
        <con:property>
          <con:name>RTU_rcStatusHistory</con:name>
          <con:value>5</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Delete Information" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenDelete Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName('RightsTokenDeleteRequest').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

//def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

// Evaluate RightsToken Success &amp; Failure
log.info RightsResHttpStatus[0];
if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus[0].toString()}";
log.info "Response Time : $RightsResTime:ms";

}
else{
log.info " RightsToken Delete failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1593</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenDelete_FUNC_RTL_with_Valid_Accountid_and_Valid_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_TestCases</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenDelete Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenDelete RESPONSE">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode","nothing");
testCase.setPropertyValue("errorReason","nothing");
testCase.setPropertyValue("errorID","nothing");
def ValerrorID;
def QAResp_ErrorID;

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrTypeRTDelete",CallingTCase.getPropertyValue("expectErrTypeRTDelete"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHostq");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenDeleteRequest").getTestStepByName("RightsTokenDeleteRequest").httpRequest.response.getResponseHeaders();

def rightstokenid = testCase.getPropertyValue("rightstokenid");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrTypeRTDelete");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");


log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
log.info Resp_HTTPcontentlength[0];
log.info errorRespType;

// Error Validation Flags &amp; Values


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "ForbiddenAccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;


	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = ""
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestDiscreteMediaLimitExceeded"
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;
	
	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;

	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	QAResp_ErrorID = ""
	break;
	
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	QAResp_ErrorID = "BadRequestLicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;

	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:NotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	QAResp_ErrorID = "BadRequestRightsTokenStatusChangeNotAllowed"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "RT_ALREADY_DELETED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	QAResp_ErrorID = "BadRequestRightsTokenStatusAlreadyDeleted"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

 }


testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());

log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
//assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length

if(errorRespType!= "SUCCESS")
{
log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property><con:name>Accountid</con:name><con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value></con:property>
        
        <con:property><con:name>ErrorDataVal</con:name><con:value>0</con:value></con:property>
        
        <con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value>nothing</con:value></con:property>
        
        <con:property><con:name>errorStatusCode</con:name><con:value>nothing</con:value></con:property><con:property><con:name>expectErrTypeRTDelete</con:name><con:value>SUCCESS</con:value></con:property>
        
        <con:property><con:name>expectErrTypeRTGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property>
        <con:property><con:name>QAerrorID</con:name><con:value>null</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        <con:property><con:name>rightstokenid</con:name><con:value>urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8</con:value></con:property>
        
        <con:property><con:name>RTObjType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TCaseName</con:name><con:value>TC_DECE_10001_RightsTokenDelete_FUNC_RTL_with_Valid_Accountid_and_Valid_RightsTokenId</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>R1_RightsTokenDelete_RTL_TestCases</con:value></con:property>
        
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rights DELETE  Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsToken DELETE">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));

log.info CallingTCase.getPropertyValue("rightstokenid");
log.info CallingTCase.getPropertyValue("Accountid");

testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("rtStatus",CallingTCase.getPropertyValue("rtStatus"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());
testCase.setPropertyValue("DbResultRT-StatusHistoryXml",RT_Data5.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsTokenDelete Response">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 

// RightsToken Delete Request Information 

	expectRTD_AccountID = testCase.getPropertyValue("Accountid");
	expectRTD_RightsTokenID = testCase.getPropertyValue("rightstokenid");
	Pr_rtStatus = testCase.getPropertyValue("rtStatus");
	expectRTD_RightsTokenID_Status = "deleted";

// Expected Rights Status History 

		log.info "Rights Status History Row Count Before Rights Token Delete : " + (testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger();
		expectRTD_rcSatusHistory = ((testCase.getPropertyValue("RTC_rcStatusHistory")).toInteger() + 1).toString();


// DB Rights Token Information 

	def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
	def Val_DbResultRTSHXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-StatusHistoryXml"));


		// Rights Token 
		actRTD_RightsTokenID = "urn:dece:rightstokenid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_TOKEN_OID;
		actRTD_Accountid =  "urn:dece:accountid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		actRTD_RightsTokenID_Status = Val_DbResultRTXml.ResultSet.Row.STATUS_ID;
		
		// Rights Status History
		
		def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
		testCase.setPropertyValue("RTD_rcStatusHistory", rcStatusHistory.toString());
		log.info "Rights Status History Row Count After Rights Token Delete " + testCase.getPropertyValue("RTD_rcStatusHistory");
				
		actRTD_rcSatusHistory = testCase.getPropertyValue("RTD_rcStatusHistory");


// Assert RightsToken Information DB and RightsTokenDelete Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenDelete Accountid Expected : [$expectRTD_AccountID] - Actual Recieved: [$actRTD_Accountid]";
 		assert expectRTD_AccountID == actRTD_Accountid ;

// Assert RightsToken id 

		log.info "Rights TokenDelete Tokenid Expected : [$expectRTD_RightsTokenID] - Actual Recieved: [$actRTD_RightsTokenID]";
		assert expectRTD_RightsTokenID == actRTD_RightsTokenID;
		
// Assert RightsToken id Status

		log.info "Rights TokenDelete Tokenid Expected : [$expectRTD_RightsTokenID_Status] - Actual Recieved: [$actRTD_RightsTokenID_Status]";
		assert expectRTD_RightsTokenID_Status == (actRTD_RightsTokenID_Status).toString();

// Assert Rights History Table
		log.info " Record Count RightsToken History Table" 
		log.info " Expected Rights TokenDelete Status HistoryCount:[$expectRTD_rcSatusHistory] - Actual Recieved: [$actRTD_rcSatusHistory]";
		assert expectRTD_rcSatusHistory == actRTD_rcSatusHistory;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10001_RightsTokenDelete_FUNC_RTL_with_Valid_Accountid_and_Valid_RightsTokenId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>FE5685C7BEA144109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <ACCOUNT_OID>7356D989AEA144109B445E349481F9A8</ACCOUNT_OID>       <USER_OID>3456E21AAEA144109B445E349481F9A8</USER_OID>       <RIGHTS_LOCKER_OID>E356D989AEA144109B445E349481F9A8</RIGHTS_LOCKER_OID>       <NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</NODE_OID>       <PURCHASE_NODE_ACCOUNT_OID>6356D989AEA144109B445E349481F9A8</PURCHASE_NODE_ACCOUNT_OID>       <RETAILER_TRANSACTION>transcation</RETAILER_TRANSACTION>       <TRANSACTION_TYPE>urn:dece:type:transaction:category1</TRANSACTION_TYPE>       <PURCHASE_NODE_USER_OID>2456E21AAEA144109B445E349481F9A8</PURCHASE_NODE_USER_OID>       <PURCHASE_TIME>oracle.sql.TIMESTAMP@e9bd4c6</PURCHASE_TIME>       <ALID>urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt</ALID>       <CONTENT_ID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</CONTENT_ID>       <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>       <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>       <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>       <LICENSE_ACQ_BASE_LOC>ns3.google.com</LICENSE_ACQ_BASE_LOC>       <CREATED_DATE>oracle.sql.TIMESTAMP@79a039ee</CREATED_DATE>       <CREATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY>       <UPDATED_DATE>oracle.sql.TIMESTAMP@63b76a4</UPDATED_DATE>       <UPDATED_BY>C0CEF8E08CE1C7D6E0401F0A0599120B</UPDATED_BY>       <STATUS_ID>deleted</STATUS_ID>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DbResultRT-SoldAsXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <RIGHTS_SOLD_AS_OID>7F5685C7BEA144109B445E349481F9A8</RIGHTS_SOLD_AS_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <DISPLAY_NAME>Avatar BestBuy Special Packaging</DISPLAY_NAME>       <CONTENT_ID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</CONTENT_ID>       <PRODUCT_ID>null</PRODUCT_ID>       <CREATED_DATE>oracle.sql.TIMESTAMP@74b77e01</CREATED_DATE>       <LANGUAGE_ID>en</LANGUAGE_ID>       <BUNDLE_ID>null</BUNDLE_ID>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-PMPPXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <PURCHASE_PROFILE_OID>4F5685C7BEA144109B445E349481F9A8</PURCHASE_PROFILE_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <DOWNLOAD>Y</DOWNLOAD>       <STREAM>Y</STREAM>       <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>       <PURCHASED_CONTENT_PROFILE>pd</PURCHASED_CONTENT_PROFILE>       <CREATED_DATE>oracle.sql.TIMESTAMP@32965583</CREATED_DATE>       <UPDATED_DATE>null</UPDATED_DATE>     </Row>     <Row rowNumber='2'>       <PURCHASE_PROFILE_OID>5F5685C7BEA144109B445E349481F9A8</PURCHASE_PROFILE_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <DOWNLOAD>Y</DOWNLOAD>       <STREAM>Y</STREAM>       <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>       <PURCHASED_CONTENT_PROFILE>sd</PURCHASED_CONTENT_PROFILE>       <CREATED_DATE>oracle.sql.TIMESTAMP@49c0d76b</CREATED_DATE>       <UPDATED_DATE>null</UPDATED_DATE>     </Row>     <Row rowNumber='3'>       <PURCHASE_PROFILE_OID>6F5685C7BEA144109B445E349481F9A8</PURCHASE_PROFILE_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <DOWNLOAD>Y</DOWNLOAD>       <STREAM>Y</STREAM>       <DISCRETE_MEDIA_RIGHTS_REMAIN>null</DISCRETE_MEDIA_RIGHTS_REMAIN>       <PURCHASED_CONTENT_PROFILE>hd</PURCHASED_CONTENT_PROFILE>       <CREATED_DATE>oracle.sql.TIMESTAMP@137ed7a1</CREATED_DATE>       <UPDATED_DATE>null</UPDATED_DATE>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-FFLocXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <FULFILLMENT_LOC_OID>[15, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</FULFILLMENT_LOC_OID>       <RIGHTS_TOKEN_OID>[-2, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</RIGHTS_TOKEN_OID>       <TYPE>Web</TYPE>       <LOCATION>https://dl.bestbuy.com/p/aaa</LOCATION>       <PREFERENCE_ORDER>1</PREFERENCE_ORDER>       <CREATED_DATE>oracle.sql.TIMESTAMP@625c5cc1</CREATED_DATE>     </Row>     <Row rowNumber='2'>       <FULFILLMENT_LOC_OID>[31, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</FULFILLMENT_LOC_OID>       <RIGHTS_TOKEN_OID>[-2, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</RIGHTS_TOKEN_OID>       <TYPE>Web</TYPE>       <LOCATION>https://dl.bestbuy.com/p/bbb</LOCATION>       <PREFERENCE_ORDER>1</PREFERENCE_ORDER>       <CREATED_DATE>oracle.sql.TIMESTAMP@1dcdb55a</CREATED_DATE>     </Row>     <Row rowNumber='3'>       <FULFILLMENT_LOC_OID>[47, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</FULFILLMENT_LOC_OID>       <RIGHTS_TOKEN_OID>[-2, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</RIGHTS_TOKEN_OID>       <TYPE>Manifest</TYPE>       <LOCATION>https://dl.bestbuy.com/p/ccc</LOCATION>       <PREFERENCE_ORDER>3</PREFERENCE_ORDER>       <CREATED_DATE>oracle.sql.TIMESTAMP@2c3d36ff</CREATED_DATE>     </Row>     <Row rowNumber='4'>       <FULFILLMENT_LOC_OID>[63, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</FULFILLMENT_LOC_OID>       <RIGHTS_TOKEN_OID>[-2, 86, -123, -57, -66, -95, 68, 16, -101, 68, 94, 52, -108, -127, -7, -88]</RIGHTS_TOKEN_OID>       <TYPE>Manifest</TYPE>       <LOCATION>https://dl.bestbuy.com/p/ddd</LOCATION>       <PREFERENCE_ORDER>1</PREFERENCE_ORDER>       <CREATED_DATE>oracle.sql.TIMESTAMP@328d56a8</CREATED_DATE>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rtStatus</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT-StatusHistoryXml</con:name>
          <con:value><![CDATA[<Results>   <ResultSet fetchSize='10'>     <Row rowNumber='1'>       <RIGHTS_STATUS_HISTORY_OID>8F5685C7BEA144109B445E349481F9A8</RIGHTS_STATUS_HISTORY_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <STATUS>active</STATUS>       <DESCRIPTION>RightsToken has been created.</DESCRIPTION>       <CREATED_DATE>oracle.sql.TIMESTAMP@1daf560b</CREATED_DATE>       <CREATED_BY_NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>       <CREATED_BY_USER_OID>3456E21AAEA144109B445E349481F9A8</CREATED_BY_USER_OID>     </Row>     <Row rowNumber='2'>       <RIGHTS_STATUS_HISTORY_OID>AF560AD8BEA144109B445E349481F9A8</RIGHTS_STATUS_HISTORY_OID>       <RIGHTS_TOKEN_OID>FE5685C7BEA144109B445E349481F9A8</RIGHTS_TOKEN_OID>       <STATUS>active</STATUS>       <DESCRIPTION>Rights Token is Deleted</DESCRIPTION>       <CREATED_DATE>oracle.sql.TIMESTAMP@6239fb66</CREATED_DATE>       <CREATED_BY_NODE_OID>C0CEF8E08CE1C7D6E0401F0A0599120B</CREATED_BY_NODE_OID>       <CREATED_BY_USER_OID>3456E21AAEA144109B445E349481F9A8</CREATED_BY_USER_OID>     </Row>   </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RTD_rcStatusHistory</con:name>
          <con:value>2</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreateRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("SAMLassertion",CallingTCase.getPropertyValue("assert"));


testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
else
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));
testCase.setPropertyValue("RTC_rcStatusHistory",CallingTCase.getPropertyValue("RTC_rcStatusHistory"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreate Request POST");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      
      <con:tearDownScript><![CDATA[def RightsTCLogs;
def testSteps = new ArrayList();
def testSteplog;
def date = new Date(); 
def RightsTClogFile = new File ("c:\\RightsLog\\RightsTClogFile.txt");

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

count  = 0;

for( r in testRunner.results )
{
   count++ ;
     if (r.toString().indexOf ("Request") != -1)
   {    
   	   def rawRequest = new String( r.rawRequestData );   		     	

   	    testSteplog = "\n\n" + "[" + count.toString() +  "] ###################" + "\n\n" +       
       	"TimeStamp :" + r.getTimeStamp() + "[$date]" +"------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " + "\n\n" +   "---------"+ " CallingTestCase Name :  " + CallingTCase.getName() + "\n\n" + "------------"+ r.testStep.name + "Request Message --------" + "\n\n" + rawRequest.tokenize('\n').last() +"\n\n" + "-------------" + r.testStep.name +" Response Message Header--------" +"\n\n"+ r.getResponseHeaders()+ "\n\n" + " Response Message Body--------" +"\n\n"+ r.testStep.getProperty("response").getValue()+ "\n\n" +"-----"+ r.testStep.name + " Assertions-------" +"\n\n" +   r.messages +
        	" ###################" + "\n\n" ;
   }
    else
   {	
   	 testSteplog = "\n\n" + "[" + count.toString() +  "] ###################### " + "\n\n" +
       "TimeStamp :" + r.getTimeStamp() + "[$date]" + "------TestStep < " + r.testStep.name + " > finished with status < " + r.status + " > Time Taken ::< " + r.timeTaken + " > ms " +"\n\n" +   "---------"+ " CallingTest Case Name :   " + CallingTCase.getName() +
   	  " ###################" + "\n\n";	
   }
   
   testSteps.add(testSteplog); 
   
RightsTCLogs = testSteplog.toString();
log.info RightsTCLogs;
//RightsTClogFile << RightsTCLogs;
}]]></con:tearDownScript>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>ns3.google.com</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>iscportal1</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:2456E21AAEA144109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>transcation</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:hd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value>urn:dece:type:mediaprofile:sd</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:pd</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securedigital</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:RET</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03.000</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsToken-Generation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:12222599</con:value>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsError Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Validate Rights Errors">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RightsErrors = new dbErrors(log,testProject.getPropertyValue("targetDECEDB"));;


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("QAerrorID");
//log.info errId.tokenize(':').last();
/*if(errId.contains('Policy'))
{
	log.info 'Policy:' + errId.tokenize(':').last();
	ErrorID = 'Policy:' + errId.tokenize(':').last();
}
else
{
	log.info errId.tokenize(':').last();
	ErrorID = errId.tokenize(':').last();
}
*/

def xmlData = "";

try {
			 xmlData = RightsErrors.errGetIdInfo(errId.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                testCase.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                testCase.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                testCase.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (testCase.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                testCase.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",testCase.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",testCase.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",testCase.getPropertyValue("errorID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDelete Response Validation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>HTTP/1.1 404 Not Found</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>The rights token was not found.</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value>RightsTokenNotFound</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Statuses" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Node Statuses for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;
NodeStatusXML = myDb.SelectFromDB("select Status from NODE_STATUS where Status != 'active'","LP1");

log.info NodeStatusXML.toString();

testCase.setPropertyValue("NodeStatusXML",NodeStatusXML.toString());
callingTCase.setPropertyValue("NodeStatusXML",testCase.getPropertyValue("NodeStatusXML"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Statuses for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

log.info CallingTCase.getName();
//log.info CallingTCase.getPropertyValue("nodeid");

myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeStatus",CallingTCase.getPropertyValue("NodeStatus"));

nodeid = testCase.getPropertyValue("nodeid");
NodeStatus = testCase.getPropertyValue("NodeStatus");

myNode.nodeSetStatus(nodeid ,NodeStatus);

Upd_NodeStatus = myNode.nodeGetStatus(nodeid);

testCase.setPropertyValue("NodeStatus",Upd_NodeStatus);

CallingTCase.setPropertyValue("NodeStatus",testCase.getPropertyValue("NodeStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10006_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_Nodeid</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET_CS_1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set RightsToken Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get RightsToken Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbRightsToken;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

RightsTokenId = callingTCase.getPropertyValue("rightstokenid");
dbRighttoken = RightsTokenId.tokenize(':').last();
testCase.setPropertyValue("dbRighttoken", dbRighttoken);

myRT = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

RTStatus = myRT.rightstokenGetStatus(dbRighttoken);

log.info "Current RightsTokenStatus : " + RTStatus.toString();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

RTStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info RTStatusXML.toString();

testCase.setPropertyValue("RTStatusXML",RTStatusXML.toString());
callingTCase.setPropertyValue("RTStatusXML",testCase.getPropertyValue("RTStatusXML"));

testCase.setPropertyValue("RTStatus",RTStatus.toString());
callingTCase.setPropertyValue("RTStatus",testCase.getPropertyValue("RTStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set RightsToken Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbRightsToken;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();


RightsTokenId = callingTCase.getPropertyValue("rightstokenid");
dbRighttoken = RightsTokenId.tokenize(':').last();
testCase.setPropertyValue("dbRighttoken", dbRighttoken);

myRT = new dbRightsToken(log,testProject.getPropertyValue("targetDECEDB"));;

RTStatus = callingTCase.getPropertyValue("RTStatus");

RTStatus = myRT.rightsTokenSetStatus(dbRighttoken.toString(),RTStatus.toString());

log.info RTStatus.toString();

testCase.setPropertyValue("RTStatus",RTStatus.toString());
callingTCase.setPropertyValue("RTStatus",testCase.getPropertyValue("RTStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10023-RightsTokenDelete - Policy -RTL - NoPolicyEnforcement - US - MMPA - Can create RightsToken that IS_ADULT = 'y' with policy and all rating as per Matrix</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_Policy_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>RTStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RTStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS_ID>other</STATUS_ID>
    </Row>
    <Row rowNumber='2'>
      <STATUS_ID>pending</STATUS_ID>
    </Row>
    <Row rowNumber='3'>
      <STATUS_ID>suspended</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>dbRighttoken</con:name>
          <con:value>3033D5EBBB6F34109B445E349481F9A8</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Account Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Account Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

//AccountID = callingTCase.getPropertyValue("accountoid");

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

log.info SqlStr;

AccountStatusXML = myDb.SelectFromDB(SqlStr, "LP1");

log.info AccountStatusXML.toString();

testCase.setPropertyValue("AccountStatusXML",AccountStatusXML.toString());
callingTCase.setPropertyValue("AccountStatusXML",testCase.getPropertyValue("AccountStatusXML"));

AccXML = new XmlSlurper().parseText(AccountStatusXML.toString());

AccountStatus = AccXML.ResultSet.Row.STATUS

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Account Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

log.info callingTCase.getPropertyValue("accountoid");

AccountID = callingTCase.getPropertyValue("accountoid");


//testCase.setPropertyValue("AccountID",AccountID);

AccountStatus = callingTCase.getPropertyValue("AccountStatus");

myAccount = new dbAccount(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myAccount.accountSetStatus(AccountID.toString(),AccountStatus.toString());

log.info AccountStatus.toString();

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10010_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_Account</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set User Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get User Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

USerID = callingTCase.getPropertyValue("useroid");
myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userGetStatus(USerID);

log.info UserStatus.toString();

myDb = new dbUtils(log,testProject.getPropertyValue("targetDECEDB"));;

SqlStr = callingTCase.getPropertyValue("SqlStr");

UserStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info UserStatusXML.toString();

testCase.setPropertyValue("UserStatusXML",UserStatusXML.toString());
callingTCase.setPropertyValue("UserStatusXML",testCase.getPropertyValue("UserStatusXML"));

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set User Status for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();



USerID = callingTCase.getPropertyValue("useroid");
testCase.setPropertyValue("UserOid",USerID.toString());

UserSetStatus = callingTCase.getPropertyValue("UserStatus");

myUser = new dbUser(log,testProject.getPropertyValue("targetDECEDB"));;

UserStatus = myUser.userSetStatus(USerID.toString(),UserSetStatus.toString());

log.info UserStatus.toString();

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10012_RightsTokenDelete_FUNC_RTL_CS_with_Inactive_User</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_RTL_CS_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>UserOid</con:name>
          <con:value>EDCDDE5B724361B5E0401F0A0599682B</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Role" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Set Node Role for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeRole", callingTCase.getPropertyValue("NodeRole"));

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

nodeid = testCase.getPropertyValue("nodeid");
NodeRole = testCase.getPropertyValue("NodeRole");

rcNode = myDbNode.nodeSetRole(nodeid,NodeRole);

log.info  testCase.getPropertyValue("NodeRole") + " has been NodeRole Updated" ;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Node Role for RTD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDbNode = new dbUtils.dbNode(log,testProject.getPropertyValue("targetDECEDB"));;

testCase.setPropertyValue("nodeid", callingTCase.getPropertyValue("nodeid"));

nodeid = testCase.getPropertyValue("nodeid");

NodeRole = myDbNode.nodeGetRole(nodeid);

log.info "NODE Role : " + NodeRole.toString();

testCase.setPropertyValue("NodeRole",NodeRole.toString());
callingTCase.setPropertyValue("NodeRole",testCase.getPropertyValue("NodeRole"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10020 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Access_Portal_CS</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenDelete_Invocation_ByPermission_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal:customersupport</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Create Information" searchProperties="true" id="6655da1f-83a3-44e3-b7bc-5009ea446e02">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML">
        <con:settings/>
        <con:config><script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonTestSteps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");
def RightsResLocation = RightsResHeader.getAt("Location");
log.info RightsResHttpStatus[0];
log.info RightsResLocation;

log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus[0] == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResLocation[0].tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
/*testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );
log.info RTKLoc[RTKLoc.indexOf("Account").next()];
testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);*/

def decodedRTKLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("RightsToken").next()],"UTF-8");
log.info "decodedRTKLoc=="+decodedRTKLoc;

testCase.setPropertyValue("rightstokenid",decodedRTKLoc);

log.info RTKLoc[RTKLoc.indexOf("Account").next()];
def decodedAccountIDLoc = URLDecoder.decode(RTKLoc[RTKLoc.indexOf("Account").next()],"UTF-8");
log.info "decodedAccountIDLoc=="+decodedAccountIDLoc;
testCase.setPropertyValue("Accountid",decodedAccountIDLoc);

//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ " + RightsResHttpStatus[0] + " ]"
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsToken-Generation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:F816494A8D2E08D8E0401F0A07995A7B</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>F816494A8D2E08D8E0401F0A07995A7B</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"   xmlns:ns4="http://www.decellc.org/schema/2013/10/coordinator"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema  file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="urn:dece:alid:file:EXAMPLE_ALID_Version_662629942.txt" ContentID="urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt"> 	 <ns4:SoldAs> 		<ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName> 		 <ns4:ContentID>urn:dece:cid:file:WEB_PORTAL_NUMBERS_971358717.txt</ns4:ContentID> 	</ns4:SoldAs> 	<ns4:RightsProfiles> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:hd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:sd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 		<ns4:PurchaseProfile  MediaProfile="urn:dece:type:mediaprofile:pd"> 			<ns4:CanDownload>true</ns4:CanDownload> 			 <ns4:CanStream>true</ns4:CanStream> 		</ns4:PurchaseProfile> 	</ns4:RightsProfiles> 	 <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc> 	<ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd"  xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentWebLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		<ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location> 		 <ns4:Preference>1</ns4:Preference> 	</ns4:FulfillmentWebLoc> 	<ns4:FulfillmentManifestLoc  MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location> 		<ns4:Preference>3</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 		 <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location> 		<ns4:Preference>1</ns4:Preference> 	 </ns4:FulfillmentManifestLoc> 	<ns4:PurchaseInfo> 		<ns4:NodeID>urn:dece:org:org:dece:RET</ns4:NodeID> 		 <ns4:RetailerTransaction>transcation</ns4:RetailerTransaction> 		 <ns4:PurchaseAccount>urn:dece:accountid:org:dece:F816494A8BC308D8E0401F0A07995A7B</ns4:PurchaseAccount> 		<ns4:PurchaseUser>urn:dece:userid:org:dece:F816495745FB8009E0401F0A07995A7F</ns4:PurchaseUser> 		 <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime> 	</ns4:PurchaseInfo> </ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>6255</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      <con:property><con:name>tName</con:name><con:value>TC_DECE_3184_UserCreate_AUTH_Creator_YOUTH_Standard_New_ADULT_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserCreate_GeoProfile</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Request" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Get Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
//testCase.setPropertyValue("nodeid","0701");
//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
//headers.put("Authorization","SAML2 assertion=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");

testRunner.testCase.getTestStepByName("RightsTokenGet byTokenID").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("PolicyLockerViewAllConsent",CallingTCase.getPropertyValue("PolicyLockerViewAllConsent"));
/*
if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}*/	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",testCase.getPropertyValue("FeedRTCReq"));</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenGet byTokenID");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=SAML2 Assertion=nVZbc6o6FH7vr2DoYwe5CK0y1RlF3YfW3kTbnr50YhIk3RAsCUr760+Cxaq13e4zwwxksbLWty75ss4ZSGLL7TCGM05Sqvi9lvpsWAAh0AAasKZnmt1s2BowYV2zQ3wKzqa2NXVCVfEZy7FPGQeUt1TLMG3NqGvW6dhounVLPDWzbj+pyj3OmDAtVGqGqhRJTJlbum2peUbdFDDCXAoSzFwO3aBzNXSFpgsqTGr7fIWydJi1I87nrq7DGsIQxzGswTTRz/UtnXPE3IDMKOB5hj98ItZSP/Yul8vasl5Ls5luGYahG01d6CBGZsdq+6jajJFPw3S19gBNKYEgJu9AgrrCPEqR0olnaUZ4lHxj2tRNQ5rWcAE1aNr0WNU/HZToDrS0BTJjQGMRMCtjIxziDFOIlcnIb6nHh1VwtXecAcrCNEvYzvrvIGG6wHE6x0hjVWQVusMt7klX+xxD16cwzhlZ4GvZJnMAMVNuMxySYkiYaD7ElLL8SsHEQ6ouw/BvynKub2IV0PU92emRGWb8/9Rss14rK/cgznH76WFxlndn9ZOk8fjud9+T6etwdO35gc5aJYRN5RWodbk/1rvNuu6tj03Lp3qE0P3sNLeiX7Pee3gZ2MwZmcnlI4CTyU19cqL3SDOaZtkYoW5wCk/6zp239KLHphE8Pv72unlQv6hbL8PiKLSNf9iF7Q288ZU+H0Y6mb0/FfaEJ3w5CsC/YeTd3j4s6+ikhy7n5GJ0fR/fhXcTv7/oo9vwsus8FYNbk13E5svRr8nUs/qFmdzkD94kpsU4bX3GtBnDtrCihCCfvmDIq6VsD7+nDES9AP+ZXqSEIC0sVd255CjGMeVqW+6S1OLmgoAIckUxV+uOYZmWbTa63d7Atk2jcdYzuuKraTfMQbPTqDhohWIHopfSkEhfkmVX/fMzQJi4DFOEM22R5jDCTP3BYg9woPh0JA5HShkWWVSfB3a/0W82rYEjMTqOVR/0HKfhNE/NbqNvmapynfIbepN1Qo6zLQY3rS0GH2FI5gRLmpd9zkSjMy5S8goWOY/N2gLUKM7FRZBJLnYtu+HojCTzGEvAepKiPMa1eTQvE6Sz1dvSAGSldNQfl+fv2/B2/1WZEDqISAUmY+liUU285yqyqkC+D9jZDLgy38kRkcdMpJVnBK6QbP/67BbZJutWERE9e8GzWeFeqx+8/etO/QdQ+m4+1o7Qgmy4re5UcU0IEmlX1XwFtddavljkZf3OJEFmwrwueNLUAwxzwXJv4/Q3pvrahH7QJbNGveN5Ld/Gl/OIBhxwnIhuU8rlARNGgJmcMHxxWopDx5ctlyJvHBd8n8yLxSAiEf84q0AXSj0hvhWvZZqhz3LtsbXhR8QpxgpO6Eyu5HXy9k1TwFSYJYL/0mzT+D4D+5xvC9dJXmPhopumOcff/1EksbVUAGGaU+731FKwSbYlTv42x+6n0hczJaF/3NAF+/aGfrwaBoL2EqCudcmflTVStgvEqhwESiwttRADp3BOZxvk/gFwk9+7Tc84dQyv8wd+346k/UX8VbKR093z0P4P" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#AppHostq}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet.d" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="c5208353-bc0b-470a-82b0-07423a7e5e36">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of RightsTokenGet.d" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="a90fef60-121c-4a45-90a9-745101e80745">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Copy of DevAuth RightsTokenGet.d" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Copy of DevAuth RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="f1bc91db-d525-48b7-9255-110e098291d9">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A9101167132C21E1E0401F0A222259052A"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenGet byTokenID-CaseTesting" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenGet byTokenID-CaseTesting" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="2125d221-e5c1-489c-a3fe-48e8b86f7956">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:a49f28bf260f2548e0401f0a0599026a"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:DEce:b6331cc03cfd1a3be0401f0a2222595915"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="BasicAuth-RightsTokenGet.d" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenGet[byTokenID]" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="BasicAuth-RightsTokenGet.d" mediaType="application/xml" sslKeystore="0798_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.d.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:assertion type="Schema Compliance" id="aa25319f-f138-442c-9440-2e32d3da9973">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>schfau1</con:username>
              <con:password>Password1</con:password>
              <con:domain>DECE</con:domain>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="urn:dece:accountid:org:dece:B63430FA5E97FC0EE0401F0A0599303B"/>
              <con:entry key="RightsTokenID" value="${#TestCase#RightsTokenID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:B9C0650CABDF441087D0BF449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:6CC399E60CDF441087D0BF449481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyLockerViewAllConsent</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:6356D989AEA144109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract RightsToken-Get Information" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsTokenGet Response">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName('RightsTokenGet byTokenID').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());


// Rights Response Object type

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));
def Resp_RightTokenObj = Val_RightsResXml.children().collect{ it[0].name()};
testCase.setPropertyValue("RTObjType", Resp_RightTokenObj[0]);
log.info Resp_RightTokenObj[0];

// Evaluate RightsToken Success &amp; Failure

if(RightsResHttpStatus[0] == "HTTP/1.1 200 OK")
{
log.info "Response Code : ${RightsResHttpStatus.toString()}";
log.info "Response Time : $RightsResTime:ms";
log.info "RightsObject Returned :"+ testCase.getPropertyValue("RTObjType");
}
else{
log.info " RightsToken Get failed - [ $RightsResHttpStatus ]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
callingTCase.setPropertyValue("RTObjType",testCase.getPropertyValue("RTObjType"));
def expectedHeader=callingTCase.getPropertyValue("expectErrTypeRTGet");

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath +"\\" +testSuite.project.name +".xls")

if ((RightsResHeader.ETag.toString()=="null")||(RightsResHeader.ETag.toString()==''))
{
testProject.setPropertyValue("ETag","*");
}
else
{
log.info "ETag Value=="+RightsResHeader.ETag.value[0].toString();
testProject.setPropertyValue("ETag",RightsResHeader.ETag.value[0].toString() );
}


logFile.append("${callingTCaseName}"+"\t" +RightsResHeader.ETag.toString() +"\t"+ "$expectedHeader" +"\t"+"${RightsResHttpStatus.toString()}"  +"\n");

</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:FE5685C7BEA144109B445E349481F9A8" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenInfo ContentID="urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt" ALID="urn:dece:alid:file:RTDELETE_R3_EXAMPLE_ALIDVersion_760911.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTDELETE_R3_EXAMPLE_CIDVersion_760911.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2014-02-10T08:30:44.312Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2014-02-10T08:30:44.312Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
   </RightsTokenInfo>
</RightsToken>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>1547</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenDeleteRequest</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RightsTokenInfo</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenGet Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateRightsTokenGet RESPONSE">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode","nothing");
testCase.setPropertyValue("errorReason","nothing");
testCase.setPropertyValue("errorID","nothing");

def QAResp_ErrorID;
def ValerrorID;

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));

testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));
testCase.setPropertyValue("expectErrTypeRTGet",CallingTCase.getPropertyValue("expectErrTypeRTGet"));
testCase.setPropertyValue("RTObjType",CallingTCase.getPropertyValue("RTObjType"));


myNode = new dbNode(log,testProject.getPropertyValue("targetDECEDB"));;
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request").getTestStepByName("RightsTokenGet byTokenID").httpRequest.response.getResponseHeaders();
def errorRespType = testCase.getPropertyValue("expectErrTypeRTGet");

def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Res_RTObjType = testCase.getPropertyValue("RTObjType");

log.info Resp_HTTPstatus[0];
log.info Resp_HTTPconnection[0];
log.info Resp_HTTPcontenttype[0];
log.info Resp_HTTPcontentlength[0];
log.info errorRespType;

// Error Validation Flags &amp; Values


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

String major = context.expand('${#Project#versionMajor}');
String minor = context.expand('${#Project#versionMinor}');


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "$DeceUrl:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:retailer'||'urn:dece:role:retailer:customersupport'&amp;&amp; Res_RTObjType == 'RightsTokenFull'){
               
               	log.info "Valid RightsToken Object-type Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$Res_RTObjType]";
		}
              else {

              	 log.info " InValid RightsToken Object-type Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$Res_RTObjType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "ForbiddenAccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;
	
	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	QAResp_ErrorID = "NotFoundContentIDNotFound"
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	QAResp_ErrorID = "BadRequestContentIDNotValid"
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;


	case "UnAuthorized":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive"
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	QAResp_ErrorID = "ForbiddenUserIdUnmatched"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "ForbiddenAccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	
	break;
			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	QAResp_ErrorID = "BadRequestAssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	QAResp_ErrorID = "ForbiddenAssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	QAResp_ErrorID = "NotFoundAssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	QAResp_ErrorID = ""
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	QAResp_ErrorID = "NotFoundBundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	QAResp_ErrorID = "BadRequestDisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;

	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	QAResp_ErrorID = "BadRequestContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	QAResp_ErrorID = "BadRequestFulfillmentLocNotValid";
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	QAResp_ErrorID = "BadRequestStandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	QAResp_ErrorID = "BadRequestPurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	QAResp_ErrorID = "BadRequestPurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	QAResp_ErrorID = "BadRequestPurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	QAResp_ErrorID = ""
	break;
	
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	QAResp_ErrorID = "BadRequestLicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;

	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	QAResp_ErrorID = "BadRequestBundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	QAResp_ErrorID = "NotFoundRightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	QAResp_ErrorID = "BadRequestRightsTokenIDNotValid"
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "ForbiddenUserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;

	case "AdultContentNotAllowed":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
	QAResp_ErrorID = "ForbiddenAdultContentNotAllowed";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
	break;

	case "RatingPolicyExists":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
	QAResp_ErrorID = "ForbiddenRatingPolicyExists";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
	break;

	case "UnratedContentBlocked":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
	QAResp_ErrorID = "ForbiddenUnratedContentBlocked";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
	break;

 }


testCase.setPropertyValue("errorID",Resp_ErrorID.toString());
testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
log.info "From ValidateRights ---" + Resp_ErrorID;

if(ValerrorID.toString() == '1') {
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsError2 Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate Rights Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus[0];
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection[0];
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length

log.info "Content-Length:"+ Resp_HTTPcontentlength[0];
assert Resp_HTTPcontentlength[0].toInteger() > 0; 

//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype[0];
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>222259</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_10020_RightsTokenGet_RTL_FUNC_DiscreteMediaRightCreate_PERM_Access_Control_Rights_Positive</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>R1_RightsTokenGet_ByRightsTokenID_RTL_TestCases</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:DECDCC6C2A2911F6E0401F0A2222593AA5</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:DECDC85B1177C9B3E0401F0A05992F94</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<RightsToken RightsTokenID="urn:dece:rightstokenid:org:dece:DECDCC6C2A2911F6E0401F0A2222593AA5" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RightsTokenFull ContentID="urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt" ALID="urn:dece:alid:file:RTGET_R3_EXAMPLE_ALIDVersion_244299.txt">
      <SoldAs>
         <DisplayName Language="en">Avatar BestBuy Special Packaging</DisplayName>
         <ContentID>urn:dece:cid:file:RTGET_R3_EXAMPLE_CIDVersion_244299.txt</ContentID>
      </SoldAs>
      <RightsProfiles>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
            <DiscreteMediaRightsRemaining FulfillmentMethod="urn:dece:type:discretemediaformat:bluray:packaged urn:dece:type:discretemediaformat:dvd:cssrecordable urn:dece:type:discretemediaformat:dvd:packaged urn:dece:type:discretemediaformat:securedigital">1</DiscreteMediaRightsRemaining>
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
         <PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
            <CanDownload>true</CanDownload>
            <CanStream>true</CanStream>
         </PurchaseProfile>
      </RightsProfiles>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") CreationDate="2013-06-10T13:32:12.090Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
         <History>
            <Prior ModifiedBy="urn:dece:org:org:dece:"+testProject.getPropertyValue("NodeID") ModificationDate="2013-06-10T13:32:12.095Z">
               <Value>urn:dece:type:status:active</Value>
               <Description>RightsToken has been created.</Description>
            </Prior>
         </History>
      </ResourceStatus>
      <LicenseAcqBaseLoc>ns3.google.com</LicenseAcqBaseLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/aaa</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/bbb</Location>
         <Preference>1</Preference>
      </FulfillmentWebLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ddd</Location>
         <Preference>3</Preference>
      </FulfillmentManifestLoc>
      <FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd">
         <Location>https://dl.bestbuy.com/p/ccc</Location>
         <Preference>1</Preference>
      </FulfillmentManifestLoc>
      <PurchaseInfo>
         <NodeID>urn:dece:org:org:dece:222259</NodeID>
         <RetailerTransaction>transcation</RetailerTransaction>
         <PurchaseAccount>urn:dece:accountid:org:dece:DECDC85B1177C9B3E0401F0A05992F94</PurchaseAccount>
         <PurchaseUser>urn:dece:userid:org:dece:DECDC85B1186C9B3E0401F0A05992F94</PurchaseUser>
         <PurchaseTime>2011-06-24T15:12:03.000Z</PurchaseTime>
      </PurchaseInfo>
      <RightsLockerID>urn:dece:rightslockerid:org:dece:DECDC85B117FC9B3E0401F0A05992F94</RightsLockerID>
   </RightsTokenFull>
</RightsToken>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>nothing</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>nothing</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>RTObjType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RightsTokenFull</con:value>
        </con:property>
        <con:property>
          <con:name>QAerrorID</con:name>
          <con:value>null</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Pem" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");
log.info "nodeId: "+nodeId;
String certPath;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
{
  log.info "it's Windows";
  certPath = testProject.getPropertyValue("certsPath_Windows");
} 
else 
{
  log.info "it's not Windows"
  certPath = testProject.getPropertyValue("certsPath_Linux");
}

log.info "certPath====="+certPath;

File f1;
if(nodeId=="loadtest:retailer"){
                                f1 = new File(certPath+"loadtest_retailer_concat.pem");
                }else{
                                f1 = new File(certPath+nodeId + "_concat.pem");
                }

File f2 = new File(certPath+nodeId + ".jks");
File f3 = new File(certPath+"truststore-"+nodeId + ".jks");
boolean imFine = true;
if(f1.exists()) 
{
                if(nodeId=="loadtest:retailer"){
                                keyStorePath = certPath+"loadtest_retailer_concat.pem";
                }else{
                                keyStorePath = certPath+nodeId + "_concat.pem";
                }
                pwd = "123"       
}
else if(f2.exists())
{
               keyStorePath = certPath+nodeId + ".jks";
                pwd = "abcd1234"           
}
else if(f3.exists())
{
               keyStorePath = certPath+"truststore-"+nodeId + ".jks";
                pwd = "abcd1234"           
}
else
{
               log.info "Error!";
               imFine = false;
}

/*switch (nodeId) {
                case "sriniretailer":
                                keyStorePath = certPath+"\\"+nodeId + ".jks";
                                pwd = "abcd1234"
                break;
default:
keyStorePath = certPath+"\\"+nodeId + "_concat.pem";
pwd = "123"
break;
}
*/

if(imFine)
{
                log.info "keyStorePath: "+keyStorePath;
                def callTSname = testCase.getPropertyValue("sName");
                def callTCname = testCase.getPropertyValue("tName");
                
                def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
                
                callTC.setPropertyValue("keyStorePath","$keyStorePath");
                
                
                SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
                SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
                log.info 'pwd='+pwd
}

assert imFine == true;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>RightsTokenGet Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of RightsTokenDeleteRequest" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required Rights Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
testCase.setPropertyValue("assert",CallingTCase.getPropertyValue("assert"));

// setUp Node Properties

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

//SetUp test properties
testCase.setPropertyValue("RightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
//testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
//testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));

if (testProject.getPropertyValue("encodeURN").toUpperCase() == "YES")
{
	testCase.setPropertyValue("encodedAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("AccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRightsTokenID",URLEncoder.encode(CallingTCase.getPropertyValue("RightsTokenID"),"UTF-8"));
}	
else
{
	testCase.setPropertyValue("encodedAccountID",CallingTCase.getPropertyValue("AccountID"));
	testCase.setPropertyValue("encodedRightsTokenID",CallingTCase.getPropertyValue("RightsTokenID"));
}	
//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call RightsTokenGet API to have the ETAG"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;

//Extractthe Response and Set the ETag Value at the Project Level Properties
RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request

def headers = new StringToStringMap()
headers.put("If-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ testCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);

assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="Exact the ETag Details" disabled="true"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//Extractthe Response and Set the ETag Value at the Project Level Properties
def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract RightsToken-Get Information")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

def etagValue=testProject.getPropertyValue("ETag");
log.info "etagValue=="+etagValue;
//Set the Etag value as Header to the RightsTokenDelete API Request
if (etagValue.toString()!="null")
{
def headers = new StringToStringMap()
headers.put("IF-Match",etagValue);
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("assert"));
testRunner.testCase.getTestStepByName("RightsTokenDeleteRequest").testRequest.setRequestHeaders(headers);
}
assert runnerRTC.status == Status.FINISHED;</script></con:config></con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def testCase = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject(); 

testCase.setPropertyValue("keyStorePath",null);

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Set Pem")
myTC.setPropertyValue("nodeId",testCase.getPropertyValue("nodeid"));

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenDeleteRequest");
def keyStorePath = testCase.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="RightsTokenDeleteRequest">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="${#Project#AppHost}:${#Project#AppPort}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=pVdbc9o6EH7vr/C4jx3jC4YYT2DG5tK6hSTFNCfpS0fIMhYxErFkA/n1RzIxAULSNJnJDKP1Xr7VftrdnDOwSC3XYwxlHFOiBL22+qcFgY1sx9HiFoKaDVtNDbSmQLNNZ9q0YruO4qaqBIzlKCCMA8LbqmWYtmZYmnE2MQ23Ybh2s2ZZxm9VuUYZE66FSs1QlfUiJcwtw7bVPCMuBQwzl4AFYi6HbuiNhq7QdEGFSe2cb1GWAbNOwvnS1XVYixBEaQprkC70c/1A5zxibohnBPA8Q48xI9ZWH21Xq1VtVa/RbKZbhmHoRksXOhHDs89q51NljKKAxHR77gJCCYYgxQ9AghohntBI8dIZzTBPFi+4NnXTkK41tIYaNG3yWdWfApTo3ujpAGTGgMYSYFbOxihGGSIQKb/GQVv9/LYKbm0nGSAsptmCHZ3/DRIiBUrpEkUaqzKr0L3d44nr6pwj6AYEpjnDBbqQNFkCiJhylaEYr4eYCfJFTCnLr6yZ+MMVyxD8l7Kc6/tYBXT9xO308Awx/p6a7ddr6+UapDnq3A5WP776X9LrywTZsXPdG5xdkK/fktCk7RLCvvIW1K7cj+djsu649WiUzCa2fdGPv9C5t8qmF3dFMFpf+nPeX69u/atGNL5zprfL8bAf/Ow/FGbeGBV13E1+kvHETwa91Zw1foWLwo7zH59u9HRhhLaNf0yv/gus+8KffY/u5jT/dhXfRnQTb9YPFn34MvoGHpwGvvl+n8x5s4lu7/vejUGHQ8R9+J0A64x3P20abJ79Hs/7m2UyyegoSEftp5z2czgUVi0hzKdzBHl1lPQIespA1Avw19uLlOBIi0tVdyl7FOOIcLUjrWRrcXPRgHDkimJuz13Dty3baDkD37Bt02j5tt3o1+2W7ZiDludUPWiL4ghil5IYy1iyy2758zpAuHAZIhHKtILmMEFMfcVjD3CgBGQsHgclDE2o6OL1QbfV8xzP8f2WX/cHTr3hNIxBvd7w/W6v4anKBeWX5DLzYo6yww5eP+jgYwTxEiPZ5iXPmSA64+JK7kGR89SsFaBGUC4GQSZ7sWvZTkNneLFMkQSsL2iUp6i2TJblBels+2tpALJSOu5Pyvf3YnrH36qbEDoRlgpM5uIjUU10YhTVq0ReTri5n3Dl3ssjLJ+ZuFaeYbhFcvjpiS2SJjuqeN1uP+yGFeyd9j9Yv9e4N/TCq4/Y/umGf8z3Onh/6I8FHn4g6+FHsxb8/aD5c0v9FQrqx+zfBYoKvBe22qDEUiBGRqd6u/egdl/LiyIvX+uZHIeZcK+bumXqIYK5mGmbCb1DRN+50N+0UuxQH0XeyQ/x5TwhIQccLURvUcrjG/bJEDG5TwaiN67fuqwehBT3xtGan5J1U7F2SsSvbqbQhVJPiK/Ez4pm0VO5TvjaiyPyFEskx2QmT3J52LxACkiFWyymHc32nZ9ycCr4oXB3yTssXLBpmnP08hdFjrG2CiCkOeFBTy0F+6O1xMk3S+Q+KT1zU47vx31szV7cx25Gw1AMuQVQd7r478oaLukCkSrXvhJLW12Lfy9EcDLbG+WPAPenuSGm+VnzzPnbND/MpPNM/Fyyd6fH76HzPw=="/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="AccountID" value="${#TestCase#encodedAccountID}"/>
  <con:entry key="RightsTokenID" value="${#TestCase#encodedRightsTokenID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="RightsTokenDeleteRequest_with_NULL_trxid" disabled="true">
        <con:settings/>
        <con:config service="RightsTokenDelete" resourcePath="${#Project#AppHost}:${#Project#AppPort}/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/RightsToken/{RightsTokenID}" methodName="RightsTokenDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="RightsTokenDeleteRequest_with_NULL_trxid" mediaType="application/xml" sslKeystore="222259_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdbd6LKEn73V7jcj1kJDXhfk6zVXCSoqCBeX86CpgUUQWkQ9NefBqNjMpnZc85Dol3W5auqj6L6B7H2AdeFhOA48aOwqkqvNauN7U5nU3+2WvRfHTn0m8Vvnh27bndQx+6AFqhVVUJSrIYkscLktcYBln0G7WeWMznQrXe6oPPS5hvrWnWOY0I9U5UXapXvg5B0y6ivtTQOu5FFfNINrT0m3QR1p1Abdqlm17pBqr39uIIsA8ZvXpIcugyDXhyMcBCgFxTtmR/MJ50fDulOfTe0kjTGHzEd8lr7sM2y7CXjX6LYZTgAAAM6DNVxiO/+U3ur3Iyxo4ab6HoWrTAKfWQF/sUqQGk48SKnCgM3iv3E2//GNcuwoHD9jHP0jNh6+E+N+RmgRPeXnj6BjIn1TDyLvTkz8AbHOES4OjPU19o/f9XAq6kZWyHZRPGefDn/b4hweMJBdMDOM7kldgP39x6/qdbbD4y6aoiClPgnPCpYcrAQJtVJjDd+PvQJ5Z5DqmX3qzm5EQyj/6UjP5hHnBQ2801lJN/FJPl/2vXYqquXuRWk+G0+lXnD1MU4Qjo4eW19rfCsl537LngtITwqX0HdO/1x/srTO60+jJy+xIt2OAdrbpjBgXWaxJ41Rk/ntWYtVqN56/ykjVOFjzxWH0dq22LqYMgN08WJG0s4HUSzdmhrzWRzPlgVsX8MhfOJxYFk8HJoGO9y1OgnhrHltkEH12O0ZNvLpYHwYChMlHoGNu/Y7i22uNUXeH+pEjRpGVMw8kir0hyHiglW6VqUg8yPmvWn7PVnTo85FHkN8LlMsvi+bICOZCXW/SAWg2JDn84Ev2mqKqUXUYTnqQszVYAu/dvCkeDujt7OVzoZEKCu96AkCsFWHmpwp0B2JgueJs7nWi5eYF9wR3NqaFZgsBY0Q86kbCXNdf1dzjzTUeZnWwnS9UUeaZCUxqKnyYY8lwxT1jQYXWW5JtlKvtWmWqbqK6lCHUhyfrg4SifBSu4jTm1o0wa3mjbS9XJO5b3zcD862aYcaKKmiNOjMlVtXtLlPjRWC8T1Ump7Ge4PUWU1Ex6M+ge8hbiXARoTXjRzl2nmjBtJhlXKzM8yTVX6mk4yUS+zUipy1p/PLj9rIQqa6OzlXDbh5FoLZIq9EVgv+8RaNELNgJnklsYDOXPGNyCaDrKKeK3VUM4M2ZiNepqhZjIsZZKcBcTmRp6teCfE63nfhNvHxoi6vOiF9PfQOKFz41ixlB6093MW8YaH/IZvLaPMXbczSV/1B9FapW5GUJcFQYcUEIBFarT+AhwK88b44Hc4Hw83vWiPvbiisdFgd7rkoO3zY3cyWjSkza41UfwJbzkeowaI2/I7qKrYGbCebjnGijGk0L80x4PZEvvx6pKMGjrb9NuNirFIZ0spClrO+3I1GzzlK6Sb48l0tphc8nx03LYvQfI+Ft7jaV+T3PEI4wlBTwyweoLZlhri6n1L+bQxAG5UoKsJECpb15V9SmDhfXsl4buhyZS8UBMzRVyIyhQqypOsCpKub3oeO0HKPJ2xI02VnYCW6bxaGkFlLQoS7RSwFuvDiuuBtQmd0plel3uuPms89Zd4rY8Cc57A7DDfhCwLlIP+vtEyF2kFAxw1mwr0KRIqqQpn1vjQB/lg3gTsUXeC/rQDZ3w+5Xb52HPX55273tGmrB4enZUJg7n5wDGVUmxR0U3Z0GD7+rzlmjrjjQDt84O9R7lk0p6VxpEpyEZPB7NckuDgKiMm5HKyushbTZRL+wrMNYvS4mQvPbIKR/7YlFNK2vSBLlubA//KsYJilc8cO4pQh185Jl85JsPN8UltSyxpNMUDWWSuoMhHvTUf9jsHoC+Hu4rw1GPcxA/q47CdmYOnBXvOWt5WXyw6quSJT+Fm5fF2IgDrgnTc37UU39hJYbMenLWhpjdmPhOcwRYfMzKsjFQ2lPnk0mM6cfok7Nf+/nLh69xsP5mmJ3VmDQh79uzjopNtJ+9NhomVc+PSWp/03jJCq+t75OuQvAuvY5R5HLCfJvBt9Zqm9haj5HYs3sOqVO3Rl6OV/HmNKyS+87wpVbuHYhckCQ6T2lthVaxw3ZQuer7TpW/O6xnWOz2uLfS4JlvnGvW2DOqA7QEIGp0O4Jq92653RfEFohiFG7+IVSyz15f1nwGifdfGVozj2h88FXWqqqFBt48oJNiMXmv/sW0A7A3PI9uyWdxptC3QBnWeb7VtvmnbLN+kuOus3eZr1VGUjMNxDDcJjh92Zf7rrmxg5B98XCzUH2sFSWhNjtYpTQL25WS9hDilG3dcLL1drt5uMMTfHwJcIGf2kZMG+OXgHcoKMeT6yT1biJRSB2+sNEieyaFcen6b7tffbpWhOo5fKJAiIwHTruJfVv92t3FL55e0uW+vCDf3MHX8YrehZU5iH12RfP7pJ2sKutwpA1qd9g3zXfWvTTu/mjJ/QMR8LcY9knPyH+LeLjB0J6drW3lvIbSjR+vl+JKeTmnZw1axksbUPcMygJlilNK18mxGOxwydw/M3yz0d8xf4t7ln9GliRdOEzoN9pRu1fL475e5T9a0AAnOk+9kYkCvb0XwP97wUBcVelQ8oR9ZFDs/6/6Nr4c4FHIxyfzQLU7FJn7+3N6Px6SLIurVp8Msih99f2f/XezPwnu57lASygo7TfDvf6kWU4peqRGK0jBRpVopeJycJebkfMDdn0q/uClX4Y+7Tf67iyzLLLXhFHl4b9Xuuv6/Kz/7ZeMRplbEL7G81nJ6S6fBQ/dhUn8A/H5Yg943wxreC/gpk7dfxL9KHmr6ldlv/wU=" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting>
            </con:settings>
            <con:endpoint>${#Project#AppHost}:${#Project#AppPort}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:username/>
              <con:password xsi:nil="true"/>
              <con:domain xsi:nil="true"/>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
              <con:entry key="RightsTokenID" value="urn:dece:rightstokenid:org:dece:B6ACE7F48352D3C9E0401F0A059915EC "/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>Copy of TC_DECE_10017 - RightsTokenDelete - PERM - SecurityRoleValid - Invocation with Retailer</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>RightsTokenDelete_without_DST</con:value>
        </con:property>
        <con:property>
          <con:name>RightsTokenID</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:4DB455E39FB044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:00B476788FB044109B445E349481F9A8</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>RET</con:value>
        </con:property>
      <con:property><con:name>encodedRightsTokenID</con:name><con:value>urn:dece:rightstokenid:org:dece:4DB455E39FB044109B445E349481F9A8</con:value></con:property><con:property><con:name>encodedAccountID</con:name><con:value>urn:dece:accountid:org:dece:00B476788FB044109B445E349481F9A8</con:value></con:property><con:property><con:name>FeedRTCReq</con:name><con:value>OK</con:value></con:property><con:property><con:name>RightsResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed">
      <Reason Language="en">The user does not have permission to access this content because of its rating.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/21/Account/urn:dece:accountid:org:dece:00B476788FB044109B445E349481F9A8/RightsToken/urn:dece:rightstokenid:org:dece:4DB455E39FB044109B445E349481F9A8</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/21/error/en/ErrorList.html#Policy:AdultContentNotAllowed</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>RightsResTime</con:name><con:value>1533</con:value></con:property><con:property><con:name>RTObjType</con:name><con:value>Error</con:value></con:property><con:property><con:name>assert</con:name><con:value>pVdbc9o6EH7vr/C4jx3jC4YYT2DG5tK6hSTFNCfpS0fIMhYxErFkA/n1RzIxAULSNJnJDKP1Xr7VftrdnDOwSC3XYwxlHFOiBL22+qcFgY1sx9HiFoKaDVtNDbSmQLNNZ9q0YruO4qaqBIzlKCCMA8LbqmWYtmZYmnE2MQ23Ybh2s2ZZxm9VuUYZE66FSs1QlfUiJcwtw7bVPCMuBQwzl4AFYi6HbuiNhq7QdEGFSe2cb1GWAbNOwvnS1XVYixBEaQprkC70c/1A5zxibohnBPA8Q48xI9ZWH21Xq1VtVa/RbKZbhmHoRksXOhHDs89q51NljKKAxHR77gJCCYYgxQ9AghohntBI8dIZzTBPFi+4NnXTkK41tIYaNG3yWdWfApTo3ujpAGTGgMYSYFbOxihGGSIQKb/GQVv9/LYKbm0nGSAsptmCHZ3/DRIiBUrpEkUaqzKr0L3d44nr6pwj6AYEpjnDBbqQNFkCiJhylaEYr4eYCfJFTCnLr6yZ+MMVyxD8l7Kc6/tYBXT9xO308Awx/p6a7ddr6+UapDnq3A5WP776X9LrywTZsXPdG5xdkK/fktCk7RLCvvIW1K7cj+djsu649WiUzCa2fdGPv9C5t8qmF3dFMFpf+nPeX69u/atGNL5zprfL8bAf/Ow/FGbeGBV13E1+kvHETwa91Zw1foWLwo7zH59u9HRhhLaNf0yv/gus+8KffY/u5jT/dhXfRnQTb9YPFn34MvoGHpwGvvl+n8x5s4lu7/vejUGHQ8R9+J0A64x3P20abJ79Hs/7m2UyyegoSEftp5z2czgUVi0hzKdzBHl1lPQIespA1Avw19uLlOBIi0tVdyl7FOOIcLUjrWRrcXPRgHDkimJuz13Dty3baDkD37Bt02j5tt3o1+2W7ZiDludUPWiL4ghil5IYy1iyy2758zpAuHAZIhHKtILmMEFMfcVjD3CgBGQsHgclDE2o6OL1QbfV8xzP8f2WX/cHTr3hNIxBvd7w/W6v4anKBeWX5DLzYo6yww5eP+jgYwTxEiPZ5iXPmSA64+JK7kGR89SsFaBGUC4GQSZ7sWvZTkNneLFMkQSsL2iUp6i2TJblBels+2tpALJSOu5Pyvf3YnrH36qbEDoRlgpM5uIjUU10YhTVq0ReTri5n3Dl3ssjLJ+ZuFaeYbhFcvjpiS2SJjuqeN1uP+yGFeyd9j9Yv9e4N/TCq4/Y/umGf8z3Onh/6I8FHn4g6+FHsxb8/aD5c0v9FQrqx+zfBYoKvBe22qDEUiBGRqd6u/egdl/LiyIvX+uZHIeZcK+bumXqIYK5mGmbCb1DRN+50N+0UuxQH0XeyQ/x5TwhIQccLURvUcrjG/bJEDG5TwaiN67fuqwehBT3xtGan5J1U7F2SsSvbqbQhVJPiK/Ez4pm0VO5TvjaiyPyFEskx2QmT3J52LxACkiFWyymHc32nZ9ycCr4oXB3yTssXLBpmnP08hdFjrG2CiCkOeFBTy0F+6O1xMk3S+Q+KT1zU47vx31szV7cx25Gw1AMuQVQd7r478oaLukCkSrXvhJLW12Lfy9EcDLbG+WPAPenuSGm+VnzzPnbND/MpPNM/Fyyd6fH76HzPw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\certs\RET_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>1584ee73-97f2-474b-955f-c1c6f5a8ea91</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>71721bdd-13aa-4a9d-b861-704bd42cc7b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>account_oid</con:name><con:value>F816494A8BC408D8E0401F0A07995A7B</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeidRTLCS}</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>/opt/dece/certs</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>C:/certs</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>ENV</con:name><con:value>LP1</con:value></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20121024/html</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7001</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>RequestXML</con:name><con:value/></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value>	<ConfirmationEndpoint>confirmed</ConfirmationEndpoint> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#"> 	<Name> 		<GivenName>${#TestCase#GivenName}</GivenName> 		<SurName>${#TestCase#SurName}</SurName> 	</Name> 	<DisplayImage> 		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL} 		</DisplayImageURL> 	</DisplayImage> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#TestCase#PrimaryEmail}</Value>	<ConfirmationEndpoint>confirmed</ConfirmationEndpoint> 			</PrimaryEmail> 			<AlternateEmail> 				<Value>${#TestCase#AlternateEmail}</Value> 				</AlternateEmail> 			<Address> 				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress> 				<PostalCode>${#TestCase#PostalCode}</PostalCode> 				<Locality>${#TestCase#Locality}</Locality> 				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince> 				<Country>${#TestCase#Country}</Country> 			</Address> 			<TelephoneNumber>			 					<Value>${#TestCase#TelephoneNumber}</Value> 				</TelephoneNumber> 				<MobileTelephoneNumber> 					<Value>${#TestCase#MobileTelephoneNumber}</Value> 				</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#TestCase#Language1}</Language> 	</Languages> 	<DateOfBirth MeetsAgeOfMajority="${#TestCase#MeetsAgeOfMajority}">${#TestCase#DateOfBirth}</DateOfBirth> 	${#TestCase#LegalGuardian} 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password ${#Project#RandomPwdFlag}>${#TestCase#password}</Password> 	</Credentials> 	<UserRecoveryTokens> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID1}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse> 		</RecoveryItem> 		<RecoveryItem> 			<QuestionID>${#TestCase#QuestionID2}</QuestionID> 			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse> 		</RecoveryItem> 	</UserRecoveryTokens> 	${#TestCase#ResourceStatus} </User>]]></con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2v1c3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPV2QIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfv2GQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8v1ha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>ScriptLibrary</con:name><con:value>C:\scripts\Scripts_Praveen</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\soapUIScripts</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20130923</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20121024</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140218</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20130220</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20121024</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>YES</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>user20130726_035217</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property></con:properties><con:afterLoadScript>import java.io.*;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath 
def logFile = new File(projectPath +"\\" +project.name +".xls")

log.info project.name;



</con:afterLoadScript><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>