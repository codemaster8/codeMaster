<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="R15_UVTC_PrimaryEmail" resourceRoot="${projectDir}" soapui-version="4.6.1" defaultScriptLanguage="Groovy" activeEnvironment="Default" id="1985e072-a50d-4e35-b93e-5f010f219343" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="E:\DECE API\STS\Builds\R3\106.2.3\Reports106\STSAPI_Payload_NodeOId_TCs_R3"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/soapUIProjects/LP/Reports</con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" id="8252ba06-b20f-4a82-a0b6-fd7f3523ede0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="ed70a636-717d-4786-b6de-deabd446719b"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403 503</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET" id="09857898-3271-43d8-a451-d5bf44ce4858"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201 303 200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 500 405 403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountGET_BasicAuth" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="AccountGET_SAML" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" sslKeystore="500500.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:username/><con:password/><con:domain/><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="bda852c0-5ccd-41d2-911c-bdec0459e462"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="AccountGet" method="GET" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 401 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:Account</con:element></con:representation><con:request name="AccountGet" mediaType="application/xml" sslKeystore="500500.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request><con:request name="AccountGet_BasicAuth" mediaType="application/xml" sslKeystore="500580.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:username>${#Project#UserName}</con:username><con:password>Password1</con:password><con:domain>DECE</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="AB1E09D1A009474DE0401F0A07995BBC" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountDelete" method="DELETE" id="3dd5e135-f342-47db-9631-1bec111dba45"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="80080010.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountUpdate" method="PUT" id="5cccdc43-2b89-4e8c-88a3-390b7ef3f239"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUpdate" mediaType="application/xml" sslKeystore="80080010.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="http://www.decellc.org/schema/2010/10/dece"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="Account_Del_Methods" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="35503fc8-e6ad-4898-8509-ab5ca6bba1f1"><con:settings/><con:parameters/><con:method name="Get" method="GET" id="53188268-55d2-4c63-b63c-e63054ca71f3"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:Account</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="30578482-2661-423e-a9a4-553701d5d477"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="PUT" method="PUT" id="fa893486-a1f6-4fea-adf0-8b79632b4120"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8ecdc3cd-24ab-4cca-a153-3832ca1ae3e4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="POST" method="POST" id="26760b95-5c30-4f0a-868d-c7ee25f0fae6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="2b26026e-5a55-4884-8c1f-b9932771442c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="HEAD" method="HEAD" id="67d96d41-f20f-4f07-ae83-62ec5238cbb2"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:request name="Request 1" mediaType="application/xml" id="738f5c4b-1a96-413a-8b35-5dab5ea15221"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="FirstUserCreate" type="rest" id="63e68881-a234-4670-82d0-16b5421c30a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:resource name="UserAPI" path="/{UserID}" id="8c72fe92-42e8-4bcc-bfc3-29cb8a3ca9cb"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="User_StatusUpdate" path="/ResourceStatus/Current/Update" id="b0f04600-c6bc-42f8-b382-bdb9ef258eee"><con:settings/><con:parameters/><con:method name="UserStatusUpdate" method="PUT" id="5e4818b9-48a0-429e-aa1a-3379298d12be"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ResourceStatus</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="UserStatusUpdate" mediaType="application/xml" postQueryString="false" id="ae263fb2-2f71-4002-b6e4-7831863b5d6f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="${#Project#NODEUSERID}"/>
</con:parameters></con:request></con:method></con:resource><con:method name="UserGet" method="GET" id="55de7616-71c0-4cac-bade-e9aa4166e711"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:User</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserList" path="/List" id="16a08242-2ac7-42a8-b9c6-ca954b9794d4"><con:settings/><con:parameters/><con:method name="UserList" method="GET" id="e58e8f42-4a16-498a-86e7-a405a0125794"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:UserList</con:element></con:representation><con:request name="UserList" mediaType="application/xml" id="869ab87f-d5fa-4e59-8a29-1bca986023a1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:method name="FirstUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="FirstUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn%3Adece%3Aaccountid%3Aorg%%3A${#TestCase#NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource><con:resource name="UserDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="b4da2587-c2fe-45c4-aa0b-7bfdda8db2c0"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>${#TestCase#NODE_ACCOUNT_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_ACCOUNT_ID}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value>${#TestCase#NODE_USER_ID}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#NODE_USER_ID}</con:default></con:parameter></con:parameters><con:method name="DeleteUser" method="DELETE" id="02c9752d-c22c-4713-874a-3f6c2b982142"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="0f18fdda-5e02-4f21-8def-a3f312f61ac8"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="AccountUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="9ed9c404-b207-4c25-a786-7bd711105b44"><con:settings/><con:parameters/><con:method name="AccountUserCreate" method="POST" id="557bc5f3-c2ce-4146-81fc-71cdc6358536"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>404 403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404 403 503 502</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 405 400 500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="AccountUserCreate" mediaType="application/xml" postQueryString="false" id="54c781b4-bf2d-4e55-ab6c-fc7337e96457" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>NewnameShikha</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AddNewUser" type="rest" id="785934cf-6e29-492d-9dd8-504d1aeb0b28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#HostName}</con:endpoint></con:endpoints><con:resource name="AddUser" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="a8f8ca6d-db1b-4090-9ffc-68be2d519618"><con:settings/><con:parameters/><con:resource name="UserAPI" path="/{UserID}" id="20cfed44-6bef-4e69-8937-8a0ed4466e50"><con:settings/><con:parameters><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="ec0bb443-5d9b-4e69-b1d5-c6cf6535c7e4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>UserID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserDelete" mediaType="application/xml" sslKeystore="80080010.pem" id="d0bc938e-dbab-4193-8cc9-85cb4f10c8bf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
  <con:entry key="UserID" value="urn:dece:userid:org:dece:${#Project#NODEUSERID1}"/>
</con:parameters></con:request></con:method><con:method name="UserGet" method="GET" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 500 400</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 400 405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserGet" mediaType="application/xml" sslKeystore="80080010.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserUpdate" method="PUT" id="b4c52e6c-50f0-4ebf-b8e3-ab596e55b443"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:accountid:org:dece:${#Project#NODEACCID}</con:default></con:parameter><con:parameter><con:name>UserID</con:name><con:value>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:value><con:style>TEMPLATE</con:style><con:default>urn:dece:userid:org:dece:${#Project#NODEUSERID}</con:default></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 500 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>404 503</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UserUpdate" mediaType="application/xml" sslKeystore="500500.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AddUser" method="POST" id="c8e33bf9-7e9a-4fc7-a85d-b9258d44e3b4"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AddUser" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" id="8f456815-cfce-46c5-9b39-907b23b9d134"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>Harbor</SurName>
	</Name>	
	<ContactInfo>
	<PrimaryEmail>			
          <Value>shikha.gupta@neustar.biz</Value>
         <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>shikha82@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
		<Username>${#Project#UserName}</Username>		  
                <Password>mypWd007</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" basePath="" definitionUrl="" id="6c3d536c-c34c-4909-b68e-c56202e901a4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate_UserPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicyGET" method="GET" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyGET" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="UserPolicy_DELETE" method="DELETE" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyDELETE" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#Project#NODEUSERID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate_AccountPolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="8ea94816-f6ab-4fdb-a7cf-e216079a2d87"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST" id="1852f785-6b55-4441-927b-2090f020122a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="PolicyCreateSinglePolicyPost" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="999901_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:EndUserLicenseAgreement "/>
  <con:entry key="NodeAccountId" value="urn:dece:accountid:org:dece:${#Project#NODEACCID}"/>
</con:parameters></con:request></con:method><con:method name="AccountPolicyGET" method="GET" id="c23d9652-8201-4a6d-a343-8eaeb0193004"><con:settings/><con:parameters/><con:request name="AccountPolicyGET" mediaType="application/xml" id="846a1ca0-681d-46b1-a5d8-0a63053da965"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="AccountPolicyDELETE" method="DELETE" id="33e2e7d9-2b5b-406b-ba40-cad2d4922d0a"><con:settings/><con:parameters/><con:request name="AccountPolicyDELETE" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="PolicyClass" value="List" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Rights Token" type="rest" id="2cc5edf0-44c3-45c0-af0b-d6e19735bdd5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="Rights Token Get_List" path="${#TestCase#endPoint}" id="80183adb-1c5a-4de7-9d84-191f16c47def"><con:settings/><con:parameters/><con:method name="Rights Token Get" method="GET" id="8b4cec3d-fe23-4572-9b38-8f6059da115f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:RightsTokenList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:RightsToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="dc5964a7-d54c-453b-85c8-f1cc8f5c4976"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Rights Token Create" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{RIGHTSTOKEN}/RightsToken" id="483f410c-4aec-4f56-bdb8-b53566c9bb97"><con:settings/><con:parameters><con:parameter><con:name>RIGHTSTOKEN</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Rights Token Create" method="POST" id="1c20f275-4760-4c4b-994f-d981d038615c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="0565a9cc-8569-46e9-a479-f8aacc70fa3f"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Stream" type="rest" basePath="" definitionUrl="" id="233e54e8-cd77-4d4d-8f1e-6d240a4b070f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="StreamView" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream/{STREAM}" id="0931ace2-e7f3-4c79-968d-a04d73600c30"><con:settings/><con:parameters><con:parameter><con:name>STREAM</con:name><con:value>${#Project#urnstream}1234</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnstream}1234</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnaccount}${#TestCase#assertionAccountId}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="9683ed0f-6cc9-4f65-847b-0f131541e354"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="bcfd0ffb-67ca-4ab7-94f1-27b7e0a4af61" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Stream" id="cf353486-e4bd-4e29-9fa0-16678ce3ed16"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="8e9894cd-2bd1-4e02-ab04-37036dd75fc6"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="f8992888-776a-4588-8ff0-130c8c626196"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeTest" type="rest" id="6ba05ee5-e87a-41e2-93b7-5fac7723d364" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeTest" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" id="d3ab43df-328b-4e09-8562-58a80596481d"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="449e438d-5c8b-4814-8ea3-5b23b2d9c7fc"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="cfd0be42-a0ab-4e51-972d-c4a67c9d1208"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMerge" type="rest" id="38577162-173b-4e3b-b7a4-7084681116dd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMerge" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" id="6ecab418-a971-4402-baea-c83b2ded7efc"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>RetiredAccountID</con:name><con:value>RetiredAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RetiredAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4659148b-17e0-4ad5-a68e-924d516aa757"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="acbfb94a-f132-4a9c-8d15-8b85ecc78c8c" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUVSsnVQNFwlGNCBeX77CYQSUizIg6K8/A26NZif77PM9pMw00z2ruxfNmp/YCny2BzBGceJFYVWVnmv/23Sam9a6YzWasAUbLR7BRpffWOS/Lt1imSYNrU2tqmKcIjXEiRUmzzWWZpoNutlgeJNu91psj2s9sXR3VavOUIxJaLLlia5V88APca889rmWxmEvsrCHe6EVINxLYG8CtGGP7OxZV0y1l58XlOWB8YubJPseRcEnG0Hk+/AJRgH1k3rY89PGvYnnhFaSxujXmTZ+rv3yzbLsKWs+RbFDsTRNUzRPkT029pwftZfK1RnZariJLmvRCqPQg5bvna0ClIYSN7KrwHei2Evc4JvQDMXQRegGymEDMq3wR436OKBE95eRHkDG2Gpg12KuwQy0QTEKIapODfW59uPvOnjxNWMrxJsoDvCn9X+DhMIj8qM9shv4mtkV3d9H/KJcLz8R7Kkh9FPsHdGooMnegghX32O08fKhhwn5bFwt21/N8ZVhCP6Xlvyk7nES2NQXlZE8B+Hk/+nXfa8uUWaWn6KXXI2d8M2SxtrQmeTjlQnoLZx0ZnLmPJcQ7jdfQN1a/Wv9mag3Xv1y0jZd+lCfxpvhCEFXOq60bmBxC44fs4o/PATjZTte8trIkUzROvLteYtdjsRkNqGwzw0RPzeNFd1nopVOwQpKjrtOyAz4oLudniXVW2AtXEfZajaM11x/O2VSHDj1MUoWM+s4YrtuwmC3Xp/X1abHRqyhHzkNrKEB17OKQYtma7v1vZYKzJXbByl4/sjpPocirzd0KpMs/l9wNC9ZiXVbiMWk2JDXM0EvmqpK6VkUwWnigEwVgEP+tmAkOLuDu/MUPqMFoOt9IImCv5WHGtgpgJnKgquJs5mWi2cwEJzRjDiaFeCvBM2QMylbSjNdf5Uz17SV2Wmt+OnqLI80gEtn0dVkQ55JhilrGogutlyT1kq+1SZapupLqUICSHK+P9sKnyAl9yCrctqEY5cTLl0tZsTePw2D0XFtyr4maoo4OSgTdd2UdHkAjOUcsv2U+J6HwT6qLKfCndNgj7YA9TOanAnOmrnLNHPKjiTDKm3mo01TlYGm40zUy6yUipwNZtPzRy1EQRPtQM5lE7xfagFNsT+iV4sBtuZcqBkgk5zS+U3O7PEViKbTWUW81GooZ4ZsTEd9zVAzGZQ2Sc58vGZH7lpxj7Cp5wMTbO8bI+ryvB+S56FxhCfuULGUPlgHMwY2DRd6nGctosxZdTNJXw7eopVKwoyALguCDgggGhSpkfoLYCjMuPHe41kPDTf9KEBuXNGY6G13POd012uOnffRnJM2u8674r03LdulVB+y2+YOqCqy3xhXt2xjSRlS6J3b47fpAnnx8pyMOJ1pe12uYszT6UKK/I79ulhO3+r5Eurm+H0ynb+f83x02HbPfvI6Fl7jyUCTnPEIoXcM6xRt9QWzK3Hi8nVL+LQxaMRVgKMJAChbx5E9QmDhdXsh4auhyYS8QBMzRZyLygQoSl1WBUnXN32XeYfKLJ0yI02VbZ+U6bRcGH5lJQoS6RRtzVf7JdunyVixy2B6S+47+pSrDxZopY98c5aAbD/bhAxDK3v9daNlDtQKBthqNhHIWyRUUhVMrfF+QOdvszbNHHTbH0x4MG3mE3aXj11nddo5qx1pyvLu1VmawJ+ZdxxTCcXmFd2UDQ10L+9brqnTpuHDIN+vA5hLJulZ6RyZgmz0dXqaSxJ4u9iwCdgcL8/yVhPl0r8Ccs0itDiuFy5ehiNvbMopIW16R5ftmqX/lWMFxSqPHDuIQAefOSZfOCaDzaGudiUGc21xj+eZIyjyQe/MhgN+T+uL4a4i1PuUk3h+axx2M/OtPmdOWcfd6vM5r0quWA83S7e5TgTaOkMdDXYdxTN2Uthu+SdtqOnc1KP8E71FhwwPKyOVCeVmcu5TfJzWhWDlBedzs8VOg/dJelSn1htmTu76MOez7ftrm6Ji5cSdO6uj3l9EcHn5jnwekjfjZYxS9wP2YQJftdckXW8RTK7L4jusStU++ThayZ91XGHx7Mam3NrbF2IQJyhMai+FV6HheilRep7dI1/Oy1rqttg2x8gCw3dlwLZkukUzfRrQHZ5vcm3uKvYuKD5BFKNw4xVnFXL28rH+M0AY9DAKbRQ3jlEKXYRrf4hY1KuqhgZRIVGIkRkRudzuCu12h5VZmZY7Qr9NS0QLyy0R8C2O4UW+Vh1FyTgcx2CToPhRKvMPUtlA0Nt7qNDThajARFXghJTkYB3TxGeejtZTiFKiuONC9PbYVpejsBfsfVQApoLITn30tHf3ZYEofPllGxbEpbXTpulS7Xyb3+dn11KQPbZXbMBFMgIi7URfiP7WNZNvM2bY+4yv4UFqe4WoIXVNYg9ekDw++qBLwZMbV4qUrphvWz8bHsJSnzO6nWQfPXhj/O1ORCQ1EV0v14YcrKfDU3o8pmULOoWgjEl4iqHoNjVBMCWq8GRGOxRStxDUXwnyG+pPJ9/sj/jSxA0nCXmbA0KYarn8i9vYBOHiNqYSwud/e9V7OJLULUF58pVN9MmlrUD8x3sd7MFiHzG/k58siu2Pdn0R6+4ckmcxvrzQKVaF/D59wwoYkbAeGWFRfB/8qwBfHf5ovBX5hiUhbFqnCfr+SbWYTc81C8IoDRNVqpWG+3lZ4kxOe9T72PRbmFIA/7rR5PjbG81CG07I5Aqs2m2v9++bG15JF4iIF/ZKLM+1nFzOyeGhczeffwH8ekR3/ziiHzN5+c38u+Wupp/fh5d/AA=="/>
  &lt;con:entry key="Authorization" value="SAML2 Assertion=nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXrxBGQBGQAUF//RkwGs1O9tnne0iZaaZ7VncvmjWvyDh4dBcgBKPYDfyyzL9V/mcxDNmuG62a0aq3aw0S1msdkyFrcEM2yLphkpZBVcoyQgmUfRQbfvxWoUmqXiPrNaqjk81uo9UlqZdOg1lXynMYIRwab3khK+Xs4PmoWxz7VkkivxsYyEVd3zhA1I3N7hQowy7e2TVumCrvr1eUxYHRuxPHYZcgzBcLmtDzzBczOBCvxNOeVwt1p67tG3ESwY8zLfRW+fBN0/Qlrb8EkU3QJEkSZIfAeyzk2r8q76WbM7Rkfxtc15zhB75rGp57MXJQCoydwCoDzw4iN3YOP4SmCIrMQ9dgZtZMquH/qhCfBxTo/jLSE8gIGTXk4CZ8BNPgFkbQN2F5pslvlV9/18Grrx4ZPtoG0QF9Wf83SNA/QS8IoVVDt8xu6P4+4jflen+FZlf2TS9B7gmOcpqEhglReRLBrZsNXYTJZ6Fy0f5yhm4Mg+Z/ackr8YgTwya+qQzv2hDF/0+/Hnt1jTI3vAS+E+LO8wZue+P0U6XPu5zTm874yXaBuVpAeNx8BXVv9cf6K1HvvPpw0mxHlY2YllqTem9z1vn2xmukVRZcQMsm6bS9jjsWN5A3l3GgR0q23ynygW5yQ1hN5mGk9IdNi/ZW8upgqSXTQWF/GEI/JAVlOgonhNpL25BYDw9xXal6kqbOm5Pjxc/801gC88H5aFFeqrfQuLpTdmF6Jlc7bxbF9Hxbaqh9jWH98dbaj+utrXsh0NtnTo855HkN4LlIMv9/yZAd3oiN+4LLJ8UWv54xfFdkmU8uHAfOUxukMgts/LcDI9beH529K3VSkgWqKgKeY72dMFTAXgLUTGAdhZvPlYy7gD5rj+bYUS8Bb80qmpDy6Yqfq2pPSB3dkubnjeQl64swUgAqnDlHETRhzmu6oCgguNoyhd9I2U6ZKqmsrvgSDsALWXixpE4Mpcw1aZlRpgy9mjLJejnHdvE8PIxOG13wFE6RuOlRmsqbOq8KfaCtFiYtJtj3MjyEQWk1Yx+c+iHcASimJD4TXBR9nyr6jB7xmlHY9GebIkt9RUUppxZZSSUh7c9nl89acKzCWQchE3QwudbC1DlxRK6XfWQsGF/RQMrbhfNASK3xDYiikmmJu9ZqKKSaoM1GoqLJqQAKGy+kHtrQI2cjOSezrmZ9HeweG8OpwkL08XNfO5ln5lgyJBFsDnPKrGuO6TKusQxSe91OeXXVHwRrGYcZAVVgWRVgQCTIU8P1Z8GQnTPj0O3QLhxuxeAAnaikUMFgf7pkZNutj+3JaMHw231rIrmTumE5hOyZ9K6+B7IMrQHlqIalrQiN991LczyYLaEbrS7xiFGppttmStoimS35wGtZveVqNqhmK1PVx5PpbDG5ZNnouGtfvLg3ZnvRtK/w9ngE4QSZVYI0RFZv8wy36u0wn7YaCZkSsBUWAGln24KLCcz2dlcS9jRFwOQFCpdK3IKTpkCSqoLM8qq6FR1qYkrzZEaNFFmwPFym82qpeaU1x/K4U6SxWIcrWiTXOrCKYGpDEG11xlT7S7hWR54+j0Eazrc+RZFSqPa2SmqbSs4AS06nLH6L2FIig5kxDvtkNpg3SeqoWl5/2gGzejal99nYsdfnvb3e46asHl6dlQ68uf7AMRlTbFFSdUFTQPv6vmWKPKtrnnnIws3BzHgd96xwDnRW0ESVnGU8DwZXG9IBnaHVRdgpnFD4l0CmGJgWp83SQSt/5I51IcGkTR7ostvQ5L9yLKdY6ZljRw6o4CvHhCvHBLA9VuU2TyGmyYVokdqsJBzV1nzY74SkuhzuS2xVJOzY9Rpjv53qg+qCOqctZ6cuFh2Zd7iqv1059U3MksbFVGF/35Jcbc/7zYZ3VoaKysxcwjuTO3hM0bA0kilfqMcXkehESZU9rN3D5VJv0LPDZJqc5JkxQNTZ2RwXnXQ36TUJIpLOzKW1PqniMjBX1+/I1yF5N17HKPE4YJ8m8E17TZPNDprxbZl/h2W+LOKPoxH/WcflFteqbYut3TAXgyiGflx5z71yDddNsNJzrS7+cl7XfLtBt9oUAKABKKEpCli0UCIJyFanwzQ74Cb2rii+QOQCf+vmZ+Vy9vqx/jNA89BF0LdgVDsFielAVPlDxLxeZdnXsAoJfAT1AMtljmRYQHIt/E43WiLbFltNsQMYkRE4ssPUhUp5FMRjfxyBbQyjZ6nceZLKGjTd0IW5ns5FBcKqAsW4JEfjlMQe9XIyXnyYYMUd5aK3SzfaDIHcQ+jBHDBxCKzEgy+hExYFItD1l64ZJiqsrSZJFmrnx/y+PruVAu+x3HwDypNhIW4n/E30N7vMLZMfM6box4xv4UFiubmowXWNI9e8Inl+9EmXnCd3ruQp3TDft341PIUlvmZ0P8k6uead8fc7EZbUWHS93xpyNF6OL8nplBQtaOWCMsLhCYogm8QUmglWhWc92EOfuIcg/kqQ31F/Ofluf8aXxI4/jfHbfMCEKRfLv7iNTSHKb2MyJnz2t1e9pyNx3WKYxd/ZOA9f2nLEf7zXmV0z34fNE/yTBpH12a5vYj2cg/PMx5fr2/kql9/nH1hhBjisi0dYED0G/y7Ad4c/G+9FvmOJMZs2SQx/flLOZ9NbxTDNIPFjma8Uhsd5WeCMzyHsfm76LUwhgD9uNBn68UazVIZTPLkORuW+1/33zTW3oIsJsRdyCyxvlQxfzvHhvv0wnz8Afj+i6+yfRvRzJu+/mX+3PNT06/vw/g8="/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842651EB198EA24E0401F0A07993565</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:active">urn:dece:userid:org:dece:D842781AAA4A1E6FE0401F0A0799569A</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842651EB188EA24E0401F0A07993565"/>
  <con:entry key="RetiredAccountID" value="urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD842781AAA3B1E6FE0401F0A0799569A"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountMergeUndo" type="rest" id="216cdb32-edc4-42ff-940d-0a24ddc5b6ef" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountMergeUndo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" id="a3a07d2e-db6c-4d70-a443-af62d5a50a00"><con:settings/><con:parameters><con:parameter><con:name>SurvivingAccountID</con:name><con:value>SurvivingAccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>SurvivingAccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="4995638c-d575-4d0f-a861-2a267308a8d9"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="9f81ce2b-c5b6-493d-9b1f-7c101faacf30"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserResourceStatusUpdate" type="rest" id="3c0ff9bd-188e-4595-ac97-ec945cbf1b34" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="UserResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" id="a72ea2ab-ce4e-47cc-b28d-787420d41eae"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>UserID</con:name><con:value>UserID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>UserID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserResourceStatusUpdate" method="PUT" id="bae01694-be77-463a-bcef-02134d4e45fb"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ResourceStatus</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="d9791dad-3957-43a7-9916-acc98d6cfcfe"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountResourceStatusUpdate" type="rest" id="d2b48757-d9d7-48b6-99e2-5ffaec2a0276" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountResourceStatusUpdate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" id="087a86a9-8ddc-4222-aa5e-8ea5f58f3b44"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ResourceStatusUpdate" method="PUT" id="a3720389-3d1d-49ca-8d11-1e6c7977a6b6"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="c5de7daa-09fc-46a7-9439-7290f79b45c1"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" id="2b399c77-329a-43cb-9c65-b90e43e27bf5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="c9f3de54-1283-4f02-b8ea-7030652e5a47"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST" id="dd8dec87-e935-415f-91f4-ef072cb2b292"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8eccae92-53c1-462c-ad88-7bb2ab6bc7a9"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="f7ffc3a2-890e-4d43-8f2a-582eb82ffd58"><con:settings/><con:parameters><con:parameter><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="STSGet" method="GET" id="5edddbc8-bc7c-4b0d-9fa5-394b1f0932ed"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" id="198a8863-08df-42da-87ef-91fde7f4ac06"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" id="a6b47e2a-6ec0-4d51-b70d-0fe2c39c89bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="6abea313-2ae4-47a2-919b-8639b056a406"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST" id="22790dc9-f087-4d6b-8978-8ee7e6e5feac"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="aff24390-0479-473a-9b57-a08afc5cc4b7"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${Project#V1}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="01c41851-b1a7-4127-914c-05f1b1a625d6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET" id="92c030af-0ac7-4174-8453-94f6ff1b243c"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="46083e56-5c6f-4481-9c0a-5ccd55d9b1b5"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#V1}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="c050c9c4-c157-4876-98ca-eb88fd076897"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT" id="503e1641-389f-43b9-a04e-39adeeff15cb"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="8c4de049-fe81-4441-983b-b6c82114b741"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserDelete" path="rest/${Project#V1}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" id="4314b275-2cc6-4662-95d4-c8af507855a6"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="UserDelete" method="DELETE" id="bd0ca0c4-9525-43b9-90ca-e9d09cb7fbff"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="6961de71-6c81-490c-94f4-2f29f24b3231"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserValidationEmail" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}" id="a01dc7eb-7661-4cf5-b171-59b58901908c"><con:settings/><con:parameters><con:parameter><con:name>TokenType</con:name><con:value>TokenType</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>TokenType</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>subject</con:name><con:value>{UserIdentifier}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>{UserIdentifier}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="UserValidationEmail" method="GET" id="b1210006-4691-4ab1-9c92-dc56eb1eaf17"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="ce4a5cd4-53d5-4695-827a-3df84f5b5792"><con:settings/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserValidationTokenCreate" type="rest" basePath="${#Project#HostName}" definitionUrl="C:\Users\ksaxena\Desktop\UserValidationTokenCreate_1.wadl" id="4f4a849b-b89a-43d5-a0b4-593ad65b8695" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ksaxena/Desktop/UserValidationTokenCreate_1.wadl"><con:part><con:url>file:/C:/Users/ksaxena/Desktop/UserValidationTokenCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserValidationTokenCreate"/>
  <resources base="${#Project#HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="UserValidationTokenCreate">
      <doc xml:lang="en" title="UserValidationTokenCreate"/>
      <param name="UserIdentifier" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="TokenType" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="404">
          <representation mediaType="text/html"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="GET" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="HEAD" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request/>
        <response status="404">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="DELETE" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="PUT" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
      </method>
      <method name="OPTIONS" id="UserValidationTokenCreate">
        <doc xml:lang="en" title="UserValidationTokenCreate"/>
        <request>
          <param name="PrimaryEmailAddress" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <param name="TokenType" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        </request>
        <response status="405">
          <representation mediaType="text/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints/><con:resource name="UserValidationTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" id="041ce502-c4cb-4299-be96-54e0534c37cf"><con:settings/><con:parameters><con:parameter><con:name>UserIdentifier</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserValidationTokenCreate" method="POST" id="8860eebd-e1bb-4608-821e-756343a83174"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d518e1c7-22e6-457b-bbb7-348cd8659ece" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-2" method="HEAD" id="77956218-7016-484c-94ed-cf0fd81bbbc5"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-3" method="DELETE" id="b753535b-46bc-4dcb-9b8f-10266889c673"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="20541f67-eb37-4cab-b933-da6048380d80" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-4" method="PUT" id="ec497ae3-f11f-4413-a938-22485a06e336"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:request name="Request 1" id="689307f0-db5d-4de3-a1cd-9ec7079e2e19" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-5" method="OPTIONS" id="147699b7-fa45-4062-ad84-1827df27cbbd"><con:settings/><con:parameters><con:parameter><con:name>PrimaryEmailAddress</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>TokenType</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8614e2c4-c855-40e4-bd6c-8f191c66c89f" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-Get" method="GET" id="e0cc3994-3695-4025-a381-bc2041a1aabe"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="b4513cf2-bdef-44a9-8cfc-3d81d2002ffd"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="UserValidationTokenCreate-Del" method="DELETE" id="5c35a7ab-06e8-4932-abc2-9ac154c2a91e"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" id="9f3f7f65-3b6e-4e9e-a66f-8467c2195260"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Accounts" type="rest" basePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" definitionUrl="C:\Documents and Settings\kalyan.ineni\My Documents\Account_1.wadl" id="8c41e81f-12dc-481d-a910-1ea5217f5885" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/kalyan.ineni/My%20Documents/Account_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/kalyan.ineni/My%20Documents/Account_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Accounts"/>
  <resources base="https://qa.p.dece.neustar.com:443/rest/0/9/Account">
    <resource path="" id="/">
      <doc xml:lang="en" title="/"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
    <resource path="" id="Accounts_API">
      <doc xml:lang="en" title="Accounts_API"/>
      <resource path="" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>
            <representation mediaType="application/json"/>
          </response>
          <response status="201">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
          <response status="400">
            <representation mediaType="text/xml"/>
          </response>
          <response status="400 401 500">
            <representation mediaType="application/xml" element="sch:AccountCreate-resp" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
          </response>
        </method>
      </resource>
      <resource path="{AccountID}" id="{AccountID}">
        <doc xml:lang="en" title="{AccountID}"/>
        <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
        <method name="DELETE" id="DELETE">
          <doc xml:lang="en" title="DELETE"/>
          <request/>
          <response status="">
            <representation mediaType="application/xml" element="sch:ResponseStandard" xmlns:sch="http://www.decellc.org/schema/2010/10/dece"/>
            <representation mediaType="application/json"/>
          </response>
        </method>
      </resource>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint></con:endpoints><con:resource name="/" path="" id="34e31d5f-1db5-483c-b6b2-9e025625596f"><con:settings/><con:parameters/><con:resource name="AccountCreate" path="" id="ba62b806-09c5-4420-bdc8-8ad992814d1c"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="6de95631-bcd9-41ac-abec-ff1f3eeac4bc"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="ba0907a0-1472-47a8-a9d2-8f515ea08da9"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST-1" method="POST" id="b888b5c6-6545-4379-be64-4c9e122abed0"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="REQUEST" id=""><con:mediaType>application/json</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:AccountCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d5007309-a2ed-4302-b920-ed106306a989" mediaType="application/xml"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="{AccountID}" path="{AccountID}" id="bf5f3ac7-52af-47ec-b46f-563afee1f355"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="663b1665-5524-486f-ac49-73233c33dcc6"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="b67659b6-3ea9-4d4a-ae51-0d5b1ea2b597" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE-1" method="DELETE" id="f3472034-59e0-4e20-ab14-289fac528e9d"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ResponseStandard</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8192ab3b-baad-46c7-b338-4286566cf615" mediaType="application/json"><con:settings/><con:endpoint>https://qa.p.dece.neustar.com:443</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:resource></con:interface><con:testSuite name="CommonTestSteps" disabled="true" id="6deffdf6-8888-4ac0-bba9-62ac3f5a0a8b"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate_API" searchProperties="true" id="11a715f3-fabc-4fee-900a-f24ebd6d9c5a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish_TestCase_Properties" id="9ce61892-9d8a-4055-b161-e19938292410"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="4dc8aec7-2e8e-4eef-9a55-46dedaad9403"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Generate_AccountName" id="b8ba87db-df08-4f36-8c88-c580bb3ec25b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="1671024d-d72f-4387-92d2-ba0ce6079396"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 
import soapUIUtils.soapUIUtils;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def certPath = groovyUtils.projectPath

//Set fileKeyStorePath value 
//log.info "certPath: "+certPath;
//tP.setPropertyValue("certPath",""+certPath);

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Account_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="63a3307b-6106-4786-9cd4-e176efd0bf16"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/Account</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Response_Body&amp;Headers" id="23303af8-41d1-41dc-8fef-fb959f9c4a2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="bd82d430-2a93-49e7-b2a1-7b84f0809636"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;


      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_the_NodeAccountId_to_the_Calling_TestCase" id="35d38137-3ff3-47da-9602-9bed11652bbf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16ACF97A75BD18ACE05305991F0A9199</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">16ACF97A75BD18ACE05305991F0A9199</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">accname_20150522_073433</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:16ACF97A75BD18ACE05305991F0A9199</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:16ACF97A75BD18ACE05305991F0A9199</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountStatusUpdate API" searchProperties="true" id="51ed92e6-c568-4115-881a-88771404b0de" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2842594e-4ff8-47cb-afd9-7d9447bd34b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1c828cc6-c718-4458-8285-8f3412120ef1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="aec46fe2-046b-4208-9b99-b3f8610a7a8d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountResourceStatusUpdate" id="e434e6ab-627f-454e-a457-6101a23db2bf"><con:settings/><con:config service="AccountResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/ResourceStatus/Current/Update" methodName="ResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="dececs_concat.pem" id="af994e3d-917a-456a-9637-299c22acc0e6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bef51ec6-85bf-456b-9ec3-670fd87002cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="518795a7-9465-4ca9-aaa5-d30618461158"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import java.net.URLDecoder;
import java.net.URLEncoder;


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
log.info "errorRespType"+errorRespType;

def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";

//String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus   = "HTTP/1.1 303 See Other";
		XMLbodynull        = true;
		processXMLFlag  = false;
		httpLocationHeader = true;
		
	break;

	case "INVALID_STATUS_UPDATE":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;

		case "INVALID_STATUS_UPDATE_ON_USER":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusTransitionRequestedNotAllowed";
		//errorReason = "Requested Status transition is not allowed for the resource";
		errorReason = "The requested status transition is not allowed for the resource. - Status requested cannot be applied on the user";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusTransitionRequestedNotAllowed";
	break;


	
	case "API_NOT_AUTH":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	//errorReason = "API call not authorized";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NULL_BODY":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		expectHTTPcontenttype = "text/xml";
		XMLbodynull        = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "XML_PARSE_ERROR":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID = "urn:dece:errorid:org:dece:SaxParserException";
		errorReasonFlag = false;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		//errorReason = "User ID does not match security token";
		errorReason = "The member’s user ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;

	
	case "USER_INACTIVE":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	//errorReason = "The requestor is not active.";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	log.info 'Error Response Type is'
	log.info errorRespType
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	//errorReason = "Requesting User ID Not Specified";
	errorReason = "A user ID is required.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		log.info 'Error Response Type is'
		log.info errorRespType
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		//errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "The requesting member does not have permission to perform this action."
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		//errorReason = "Request Account ID not match";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	case "NO_MNG_USER_CNST":

	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		//errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;
	case "TOU_NOT_ACCEPTED":
		log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The account status cannot be modified. - First User has to accept TOU to move the Account to active status";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusCannotBeModified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusCannotBeModified";
	break;

     case "ACCT_INACTIVE":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		//errorReason = "The identified account is not active.";
		errorID     = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		//errorReason = "The request is unauthorized.";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;

     case "SAME_CURRENT_STATUS":
     	log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		//errorReason = "Resource is already in the status requested";
		errorReason = "The resource is already in the requested status.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
     break;

     case "MTHD_NOT_ALLOWED":
     log.info 'Error Response Type is'
		log.info errorRespType
	     expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		errorID     = "urn:dece:errorid:org:dece:ResourceAlreadyInRequestedStatus";
		errorReason = "Resource is already in the status requested";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceAlreadyInRequestedStatus";
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info 'Expected: '+expectHTTPstatus
log.info 'Actual: '+context.expand( '${#TestCase#httpStatus}' )
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;
def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	//def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	//assert b.getPath().matches("$errorHost/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;

	    if(errorReasonFlag)
	    {
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;
	    }
		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
} 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.7. Account Status Changed through Resource Update: Account Unlocked [Your UltraViolet account has been unlocked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 303 See Other</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juR8twUxQrSdUgoKh4A68vp2AYEOUmA4L++jOY6EqyknXWPi/iND3dX1/o+eYZm4HPdgHGKEm9KKyq0kvtP4KFOLbV5hqCzTuNpsWihmXxfKPVsRjIMBxtW0ytqmKcITXEqRmmLzWWZrgGzTdY3qD5LkN3Oe6JbQm7WnWFEkxME5UnulYtAj/E3Zvbl1qWhN3IxB7uhmaAcDeFXR1o4y7R7Jp3TLXX5zeUN4fJ6z5N4y5FwScbQeT78AlGAfVMfdJ5tnFX99zQTLMEvfu08UvtfW+e50859xQlLsXSNE3RAkV0bOy5/9ReK/fNyFZDJ3pb98wwCj1o+t7VLEFpKN1HdhX4bpR46T74wTRDMXRpuoEK2IBMM/ynRv1ycEP3l5Y+gUyw2cB7k7kbWyAHJSiEqLpcqC+1f/6ugm97jcQMsRMlAf6y/neQUHhGfhQju4Hvkd3R/b3Fb9L1+oxgVw2hn2HvjCZlm8QmRLg6S5DjFWMPk+azcfVW/mqB7x2G4L8pyTP1ESeBTX2TGclzEU7/n3p9rNWblZXpZ+h1tEGzc09SVoMITuGRNi5nvdhFvenh+HKD8FH5DdSj1O/rr4366Kv3TTBQ+tv6QKRaOdd3lmzfadWHQ784jK9+PwgKxvLb2mIWnXnR2iS2MMuRqjgzwwg3Np+dFOfoZs2Ddxz5/KASnizqNDD6So+eJkW+TXNJaXHHUNmitAiGkj4YnCYnOhDxfGLNZzo1MqOJdCkGzUiQfaUFZgatHZPdHoyjiiPPj+tkwTS13WmZCnqyd19+xfQxhjKuEbrcgiz/b1q0IJmp+Vj0yknhkM8zRa+aqvbqUq8HUM8FuSoCVxXHVzAR3eNpf/T6Qk6LYL5UgAQu2gLkkruVVvP5SM7t1crfrVRFEbVFMx+ArVQhLyS5WEm7zZA217t4yyr0ThdFe7OILG4Y24NjPtjDiWZo+cRQL9pBLiaGTK9vMrcg66t20JipseQq64MoaAs5l/KbR0nO95PdehFvl0IOr/JcA80+YJZyb68NjGDFQG6xhwd5rIHjTS7utd5qpRWyAWYV0Z2sSGxGT9nFMLBjK/D3H4wPiHHD7q8uVt/Pdlf5oPXkfk8/9XXV4qS5PASL7dJar47mWjlX4GACrLtHr+WZmyh3d51cmm+Ho2in7s9wAuayKM4BSRcNNLU/BFFfBFoTeMW1dxD5qGcrOTVkcaUu+H1+c/FOG2z2ad9kOh1mO17zsxMvyWF9N8qsw17bb5RpfaTb56WQCtctPtfPvOkxsIid+UYepKPCGcz1ijWTig0c1G13SPlXQUm09hAk18ve19xFuuan+GJ5jrMWN9Om33Z8jVvEju/EF1w3ovkxoXmRTEJqezmP0gpwNRGA/mF5EOea2CmTaqv5fKuJJlDkNAPXA5uO2NVpODj7cMuBqBitybf4XhhbymWRyucyaSu50pGAXRZhoC9l5QCWousmoisr4hxKYL5VR/mW5Gs5IMpf86jc8ujKIpC5HeCFQYVb0kI6TfVmE1xCcRkqwl47FWubD+j2CcljfRI3cw1PnHC3jo5a4CXLJNOXo9FkXFhG1j8eyKxyaH105nYV+XyMgTcZGfujFEnmLN5u07gewgSmahxoanGd7vCh41kBPay3GHFGS7DNLgMrX/ZNeTdKXJ0ZDRbhjGsLFZw5l0FQP3Tydd3Q+bht90JHulyoXbKiIxApwqJ1sguWPe6X+ZjPnSE4WiY7KXxBvAjyaGfAfDEfrfWg3qq0zuNxQF8NqjmJp7nez5vyfF7nbNEYGDhOvG3WcYtkGtrs1kz5845e8V7sHwU2OxrNmFu5ASnW7GzHbW1WmTc3cBe47RgOqQV1BnLbGav9i3U1r3EwhW8D9Ot0eAjf5gf1cbJ8Gj130qGTbkUwvS/LA0iVqgo5Fcz0zwSmlHh2w7mpduOSBeEUhWnttdxVkpduRiiOZ3fJkfG2lmlaaHd6rKAApsPIkkw3aUahAd0SBLbN8XeW84biC8ReFDpe6avkcW+n1J8BwqCLUWijpHGOMrhHuPYHi2W+qmq4IMdvFGJkRIQnttgWEAEDOL7VYsgPL3O8rLAcxypKS2L4WnUSpdNwmgAnRclnjih84ogLBL3YQyWRLE9TTI5TnJKUnMxzlvrM09l8ClFGqGZSsr0u2+y0KOwFsY9KwFQQ2ZmPnuJ9fEsQhd+ebMOE+CYtswvx7aD/McKv7+7JIDq2VyrgMhwRkYKib/gue4/lx5gZ9mPMd/Mgs73yPCeZTRMPviH5/OpXw5Sd8uiW2w/Ed9gP7a+CT5apr0E9nNlnDz7a/nEjIISSUI7Xe1VO5tPpKTufs1sd2iWdSoh5iqFontIRzAgnuhjREYXUwwT1V3T0gfqL54f8M74s3Yd6Sj7pgHRN9bb8i7uIjnB5F1FJ1xd/e9H55JLkLUVF+p2s55MrS4n4j7ca2IWlHhHPyCOPEvtXub6x9cEPibOcYV7olquSfF5+aAwYEbMemWNR8tH4dwa+c/5Z+EjyA0tKusnKUvTzm2o5oF5qJoRRFqaqVLsJPg7NG870EqPuL6XfzNzo3zufL/CPfH6jjXUyvgKz9tD1/rdyw7u1C0RkF/ZuWF5qBbmaEueh+2FIvwP8bU4LLC01m5LcJMf4pznNyo8Efork9Tfx75IPOf36Pbz+Fw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\UsersAPIs\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE0097920D44DE4BAE0401F0A0599272E</con:value></con:property><con:property><con:name>status</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate API" searchProperties="true" id="32279977-861a-426e-81a7-71cea06f5005"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="2df40bdd-6cc9-44f1-90c3-1a4151e7cfd7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ETag",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e3a33296-6687-4004-98ad-43216c8953e0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
			</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="61a1894e-5bca-4a1f-acbe-c5e726a3a6b9"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");	
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="c1c25c09-87d7-4c13-a6f4-1abb82fc51b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="1b78c8af-d076-49a8-89ad-96aa23408bda"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_CS_1_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
<!--		<Password>${#TestCase#password}</Password>-->
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
<!--	${#TestCase#ResourceStatus}-->
</User>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="41ca1f7d-5625-4f51-8ca4-25567c822ce4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="f2bf8bc6-5e0d-41ba-b6c2-bfdc1e394e92"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "USER_PRIVILEGE_CANNOT_BE_CHANGED":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UserPrivilegeCannotBeChanged";
	errorReason ="The member's permission level cannot be changed.";
	errorLink   ="$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeCannotBeChanged";
	break;

	case "NOT_ALLOWED_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateUserInformation";
	errorReason = "The requesting member cannot update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserInformation"
	break;

	case "REQUESTOR_PRIVILEGE_INSUFFICIENT_TO_UPDATE_USER_CLASS":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID :org:dece:RequestorPrivilegeInsufficientToUpdateUserClass";
	errorReason = "The requesting member does not have permission to change the member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToUpdateUserClass"
	break;

	case "COUNTRY_CANNOT_BE_CHANGED_ONCE_SET":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:CountryCannotBeChangedOnceSet";
	errorReason = "The country cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CountryCannotBeChangedOnceSet"
	break;

	case "UNAUTH_CLG_CHANGE":
	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:UnauthorizedCLGChangeInRequest";
	errorReason = "The connected legal guardian (CLG) change request is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UnauthorizedCLGChangeInRequest";
	break;
	
	case "UNAUTH_NODE_TO_UPDATE_INFO":
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorID:org:dece:NodeUnauthorizedToUpdateUserInformation";
	errorReason = "The node is not authorized to update member information.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation"
	break;

	
	case "REQUESTOR_NOT_ALLOWED_TO_UPDATE_OTHER_USERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID :org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

	case "INVALID_STATUS":
	XMLbodynull     = false;
	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "FULL_ACCESS_USER_MUST_BE_18_OR_OLDER":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:A full-access member must be 18 or older";
	errorReason = "A full-access member must be 18 or older.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;

	case "LAST_FULL_ACCESS_USER_CANNOT_BE_DEMOTED_TO_STANDARD_OR_BASIC_PRIVILGE":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorIDorg:dece:LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege";
	errorReason = "The permission level of the last remaining full-access member in an account cannot be changed.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserCannotBeDemotedToStandardOrBasicPrivilege"
	break;


	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DOB_NOT_EDITABLE":
	XMLbodynull     = false;
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID  =  "urn:dece:errorid:org:dece:DateOfBirthNotEditable";
	errorReason = "A member's date of birth cannot be changed.";
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
     errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#DateOfBirthNotEditable" ;
	break;



	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "NOT_ALLOWED_TO_UPDATE_ACS_LEVEL":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 403 Forbidden";
	errorID  = "urn:dece:errorid:org:dece:RequestorNotAllowedToUpdateUserAccessLevel";
	errorReason = "The requesting member cannot update a member's permission level.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateUserAccessLevel"
   break;


	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "NOT_ALLOWED_TO_UPDATE_OTHERS":
	XMLbodynull     = false;
 	expectHTTPstatus  = "HTTP/1.1 400 Bad Request";
	errorID  = "urn:dece:errorID:org:dece:RequestorNotAllowedToUpdateOtherUsers";
	errorReason = "The requesting member cannot update another member.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToUpdateOtherUsers"
	break;

     case "URL_NOT_FOUND":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	expectHTTPcontenttype = "text/xml"
	XMLbodynull     = true;
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/plain; charset=UTF-8"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
	expectHTTPstatus = "HTTP/1.1 404 Not Found";
	errorID     = "urn:dece:errorid:org:dece:UserNotFound";
	errorReason = "The user ID was not found.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
/*
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		//assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		//assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		//assert myXML.Error.ErrorLink.toString() == errorLink;
	}
} </script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>UNAUTH_NODE_TO_UPDATE_INFO</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:NodeUnauthorizedToUpdateUserInformation">
      <Reason Language="en">The node is not authorized to update member information.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE/User/urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToUpdateUserInformation</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">848</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02012_UserUpdate_FUNC_CHILD_Update_CHILD_Access 400 Bad Request</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile_CS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8YMCmklTJExgwk834csrI8gCe8IANX39kCOwkO9k35z6B2q3u1YNaS8+J4Xt0FyQJilM3DKqK+FL7Z9eyOgzsmI32rtlqMDTHNrgWQzaQ1WQY2GQsps3WqkqSZEgJktQI0pcaTVLNBsk2qLZOsl261aXZJ6rNbWvVJYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuBtRRF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0tVcOzDSLEZvPs3kpfa2N8/zp7z5FMY2QZMkSZAcgXXMxLV/1V4r983IVAIrvK0FIwgDFxqeezFKUCpKndCsAs8OYzd1/G9MUwRFlqYbqIANSDHBrxrx28EV3Q8tfQAZJ0YjcQzqbmyOLBSjAKLqYq681H79rIK3vXpsBIkVxn7yaf3fIKHghLwwQmYjuUd2R/dzi1+k6/UZwa4SQC9L3BMal20SGRAl1WmMLLcYuQluPjOpXstfLZJ7hyH4X0ryTLzHiWETX2RGdG2UpP9Pvd7X6mZlaXgZemWjzhCq4+mOnCC2SfaPUtPTIsPqWYeXK4T3yjdQj1K/rT836qOv3jZ5gxMrpAdLFk6UU8wtskhXG2FLG5dLDlnHWmiiTnnDneaZIeTSlRppNtnq+EMJjSaivrWV0bA1PNvkHLEVZ7/RWSdb0bvj7qixeS84K/OWIcHxcdKr99cpNQWjQpYtj++srI0rprM1IthIydtyX1+CsZA241lzQs21rLKf7UfGqDUYsfVeKLLT+pZ5+R3T+xjKuIbofA2y/L9ukZxopMZjIZSTwsLHM0WvqqIIdVEQABJskCs8sBV+dAFj3j4cnYPb43KSB7OFDERwVucgF+2NuJzNhlJuLpfedqnIMq/OmbwPNmIFfxClYilu1wPSWG2jDS2TW43nzfU83DUHkdk/5H0HjlVdzce6clb3UjHWJXJ1ldkFXl/UvUpN9EWzstrznDqXcjG/ehSl3BlvV/Nos+ByeJFmKmB6gFpIgqP2dX9JwebcgXtppILDVc47qrBcqoWkg2mFt8dLHJsuyNsI+ma08z3nnfE+Nq6bveV51/Oy7UXaq4LUE7RjT1N2TXEmDcB8s9itlgdjJZ8qsD8Gu7tHt+Ua6zC3t2wuzjaDYbhVnBMcg5nE8zOA00UCVekNQNjjgcoAt7gIe74dCqacEwM6qdQ5r9den93jOjF6pGdQLEttRqv29NgWpaC+HWa7vaM6a3lSH2rmacGl3GWTnOqntuFSsIis2Vrqp8PC6s+0ym4qFmvYr5v2gPAunByrnQGIL2fHU+15umpPkvPOtawVv54wXsfy1OY8sjwrOid1PZwdYrLNoyZNbM6nYVoBtsoD0Nsv9vxM5dkyqaaSzzYqbwBZSjNw2dPpkF4eB/2TBzdNEBbD1WR/eCuMKeYST+QzCbeVVGFFYJZF6GsLSd6DBW/bMW9LMj+DIphtlGG+wfla9LHy5zzK1zzaEg+k5ha0uX6luSC5dJJqDAPOAb8IZM5Rj8XKbPtk54ikkTaOmFxNxlawXYUH1XfjRZxpi+FwPCp2etY77PGsskhteGpuK9LpEAF3PNSdgxiKxjTabNKoHsAYpkrkq0pxmWyTPevufHJQb1H8lBRhh174u3zRM6TtMLY1atifB9Nmh6skmXXu+/U9m6/qutaOOqYQWOL5TGzjJRmCUObmraNZ0PTBWeSjdm4NwGFn0OPC4/gzJw23Oszns+FK8+utSus0GvnkRSeYcTTJtV7OSLNZvWnyel9PotjdZKxdxJPApDdG2j5tyWXbjbwDR2cHnYmaS9vHxZqezKijTiszZg23vt2J4ICYEycgdayR0jvvLsYl8ifwNkA/T4eH8DY/iPeT5cPouZMODXcrgul9WV5AiliV8a1gpH8nMKXENRvWVbUblSwoSVGQ1l7LXSV56WaY4rhmF18Zt7XEkGILXx4cRzcFgeUkkiEpmQRkh+NICkh3lnND8QmiEAaWW/oqedztlvo7QOh3ExSYKG6cwgw6KKn9xWKZr6oSzPH1GwYJ0kPME2mKavMSJQGWJYWWKLUkQMuUyJMi3+YFjq5Vx2E6CSYxsFIUf+CIFPWBI84RdCMXlUSyvE0TfJ0mKU7J0ThlqUc9nYynAGWYasYl2+vSDNsiEtePPFQCJvzQzDz0FDnRNUFEcvulGwZMrlKBFCSZlUhWwDdDR2w/EtviOIom+SsF+Db2z9/uacI6plsqJGWgPMKlRl8wYeoe5ffZYN5n424eZKZb3vQ452nswhuSj59+t1LZQ48+mkv6P4L2D3XH/VD/LPhgmvgc1cObeXLh40Q8HguYa2I28nov2NF4Oj5lp1N2LVGnZFoxNk9QBNkhNAQzTJfOenhAAfEwQfyIqT5Qf/L8kH/El6VOoKX4tPu4oarX5Q+eKRpKymeKgg9E8dM30AeXOG8pKtKvZIKHXzMl4r8+eGAXlnpYPMU/eRibv8v1ha13fnCc5XhzA7tclbz0/E1nwBCbdfGIC+P3xr8y8JXzj8JHkh9YUtxNuyxF33+plrPrpWZAGGZBqoi1q+D9PL3iTM8R6v5W+sPMlRm+Uf0i+Zbqr9WRhiebb9Qeuu7/Vm6413aBCO9K3CuWl1qBX63YeWC/m99vAL8c4Swn/22Ef4zk9Q/xn5J3Of18Hl7/BQ==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19E24F0C476894EE0401F0A05992542</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-08-19</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>UserName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E40D520098B5CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E26875D79D093C60E0401F0A05996273</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130816_015753</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40D5200989FCC89E0401F0A079901AE</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE40D52009981CC89E0401F0A079901AE</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E40D520099C8CC89E0401F0A079901AE"</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-03</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-08-16</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API" searchProperties="true" id="cacb2fcd-1bef-4e8b-ad7e-32941fd262fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="13ed78eb-2ef5-49c2-8928-b781b8b5af4c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="2da08880-9621-4c99-bb72-a05db9926419"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="0a35dbf2-9159-44f6-ad92-92198b59d2b6"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="RET_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="648c8b18-139e-414a-9886-48bfa4f700e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="46d94cac-1e0c-439c-a664-6dcacbd493b4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requestor is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("ACCID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
		 	                                
		tC.setPropertyValue("ACCID",accountid);
				
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == 0;
		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="3c193123-be70-4eea-988c-07e25df3eee6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>accname_20131213_120852</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:ED65AF16687A5614E0401F0A07997557</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:ED65AF1668805614E0401F0A07997557</UserReference>
   </UserList>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-13T06:37:49.710Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-13T06:38:07.216Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1126</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP5+fkWnfmRK+kZLO8IMt4DWg+IVdcQvTkhTiJYUmpQXf/1JikVA9HLuDDNMtpvdZ1/y7J4zOE1Mv8UYzjhJqRK2G+oL9OJRPXYsrW6PYs22I0+Drh1r0UiPzFGEsWU7qhIyluOQMg4pb6imbliaYWqGda87vlX3daPqWPqzqjzijAnTQqWqq8pqmlDmF24bap5RP4WMMJ/CKWY+R/6gdd3zhaYPS0xq83yDsnCYNSecz3wAUDXCCCcJqqJ0Cs7Bns55xPwBGVPI8wx/+IxYQ/24u1wuq0urmmZjYOq6DnQPCJ2IkfGZ2vxVXsZRSON0cw4gTSlBMCHvUIK6xnySRkorGacZ4ZPpN6YNYOjStIZXSEOGTc9U8OmgQHeipT2QGYMam0CjNHaHY5xhirDycBc21LPTKri5e59ByuI0m7KD899BwnSBk3SGI42VkZXoTrd4JF3Nc4z8kKIkZ2SBb2SbzCDCTLnNcExWPcJE80VMKcqvrJj4kbLLMPqbspyDXawCOjiSnTYZY8b/T81267Wx8giTHDcrThdc2tx67A8jB1XcmTvKef/qct1rNQoIu8obUNtyf5wPm3XbWx+Xevnsdf3aH04qnUseBN3hJQLOdeUKDLP35BZ0YevR6V7VgrE9fFvZ8+v3iwtzbfaGb8ZiyZ313WuX6EvSClN4//ar++CY8YiGC4882R2zHcRXoDL/nTwQy60vnMHzY/99/fyQZM/mfP0WjsJ/veTdCbKK++RCI3izLi+mT8O8ZrX7w1/BcnHTZR1BEL1b/nAFZ7/1xmdMuzHsC0tKGOSjV4x4eZTtEbaVrqgX5D/Ti5SQSIsLVX8mOYpxTLnalLcktfi5ICAS+aKYm3On7dRaXcNx6nW95hh2R7d1o6u3dNfz3FrNLTlog+IAYpDSmEhfkmU3/fMzQDT1GaYRzrRFmqMJZuoPFtuQQyWkd+JxpJTh+1SwuABou0bL89qBZ1jtumsZXS9wrbYXBLqlt1TlJuV92s9aMcfZPoN7ewx+hxGZESxpXvY5E43OuEjJHC5ynhjVBaxSnItBkEku9k27XgOMTGcJloDBNI3yBFdnk1mRIMA2/6YGESukd5374v19G97htzITQiciUoHJWP7Bopr4yyhy/VoZyLcBG+ZuwKX5Vh4R+cxEWnlG0AbJ/qfPbpFtsm0VEdFLMHgxStxb9ZOvf70JfgAFDvOxdRQtyI7bcqaKMSFIpFlWcw6r82q+WORF/VxJkJkwDwRPGmCAUS5Ybn2fvmEKtibASUNmi/rA81a+jy/nEzrgkOOp6DalOJ6wYQwwkxtGKF7L6tT1Zc+lyBvHK35MFiRiEZGIf9xVkI+knhDfir9lmkWf5Tpia8ePiFOsFZzQsTzJcbL+pilQKswSwX9ptmv8mIFjzveF2yRvsXDRTWLy4O+/KJLYGipEKM0pD9tqIdgl2wInX8+w/6n0xUxB6B8TesW+ndBP172BoL0pVLe65L+VNVK0C8KqXAQKLA11JRZO4ZyOd8j9A+BxfnfNn/h9P5LmF/FXyU5OD99D8w8=</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ED65AF1668D55614E0401F0A07997557:CED286F"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CEDB3CA1FFCEE0401F0A07991BDA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API" searchProperties="true" id="50689f7a-271a-48af-ac58-51a00dcf25e1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="cf3b865a-29ea-477d-b95b-c43f031f13b6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="efdeccdb-6452-4757-8742-168412fcf27b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="7dfbf775-9a67-431b-bdda-786ea95cc0e0"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="RET_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="IF-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e33b673a-0ef4-4681-bc6f-abfbbf10e33c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="aa74adfe-6f1a-4eb3-8891-56556b47f6c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="dde6c1d9-0409-4792-9624-1bf5b7836eff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def responseTypeAccountDelete = context.expand( '${#TestCase#ResponseTypeAccountDelete}' )
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The account is not active.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/11/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">689</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU+o6EP5+fkWnfmRK+kZLO8IMt4DWg+IVdcQvTkhTiJYUmpQXf/1JikVA9HLuDDNMtpvdZ1/y7J4zOE1Mv8UYzjhJqRK2G+oL9OJRPXYsrW6PYs22I0+Drh1r0UiPzFGEsWU7qhIyluOQMg4pb6imbliaYWqGda87vlX3daPqWPqzqjzijAnTQqWqq8pqmlDmF24bap5RP4WMMJ/CKWY+R/6gdd3zhaYPS0xq83yDsnCYNSecz3wAUDXCCCcJqqJ0Cs7Bns55xPwBGVPI8wx/+IxYQ/24u1wuq0urmmZjYOq6DnQPCJ2IkfGZ2vxVXsZRSON0cw4gTSlBMCHvUIK6xnySRkorGacZ4ZPpN6YNYOjStIZXSEOGTc9U8OmgQHeipT2QGYMam0CjNHaHY5xhirDycBc21LPTKri5e59ByuI0m7KD899BwnSBk3SGI42VkZXoTrd4JF3Nc4z8kKIkZ2SBb2SbzCDCTLnNcExWPcJE80VMKcqvrJj4kbLLMPqbspyDXawCOjiSnTYZY8b/T81267Wx8giTHDcrThdc2tx67A8jB1XcmTvKef/qct1rNQoIu8obUNtyf5wPm3XbWx+Xevnsdf3aH04qnUseBN3hJQLOdeUKDLP35BZ0YevR6V7VgrE9fFvZ8+v3iwtzbfaGb8ZiyZ313WuX6EvSClN4//ar++CY8YiGC4882R2zHcRXoDL/nTwQy60vnMHzY/99/fyQZM/mfP0WjsJ/veTdCbKK++RCI3izLi+mT8O8ZrX7w1/BcnHTZR1BEL1b/nAFZ7/1xmdMuzHsC0tKGOSjV4x4eZTtEbaVrqgX5D/Ti5SQSIsLVX8mOYpxTLnalLcktfi5ICAS+aKYm3On7dRaXcNx6nW95hh2R7d1o6u3dNfz3FrNLTlog+IAYpDSmEhfkmU3/fMzQDT1GaYRzrRFmqMJZuoPFtuQQyWkd+JxpJTh+1SwuABou0bL89qBZ1jtumsZXS9wrbYXBLqlt1TlJuV92s9aMcfZPoN7ewx+hxGZESxpXvY5E43OuEjJHC5ynhjVBaxSnItBkEku9k27XgOMTGcJloDBNI3yBFdnk1mRIMA2/6YGESukd5374v19G97htzITQiciUoHJWP7Bopr4yyhy/VoZyLcBG+ZuwKX5Vh4R+cxEWnlG0AbJ/qfPbpFtsm0VEdFLMHgxStxb9ZOvf70JfgAFDvOxdRQtyI7bcqaKMSFIpFlWcw6r82q+WORF/VxJkJkwDwRPGmCAUS5Ybn2fvmEKtibASUNmi/rA81a+jy/nEzrgkOOp6DalOJ6wYQwwkxtGKF7L6tT1Zc+lyBvHK35MFiRiEZGIf9xVkI+knhDfir9lmkWf5Tpia8ePiFOsFZzQsTzJcbL+pilQKswSwX9ptmv8mIFjzveF2yRvsXDRTWLy4O+/KJLYGipEKM0pD9tqIdgl2wInX8+w/6n0xUxB6B8TesW+ndBP172BoL0pVLe65L+VNVK0C8KqXAQKLA11JRZO4ZyOd8j9A+BxfnfNn/h9P5LmF/FXyU5OD99D8w8=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ED65AF1668725614E0401F0A07997557</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>ACCT_INACTIVE</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ED65AF1668D55614E0401F0A07997557:CED286F"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validations" searchProperties="true" id="1cc8c7f1-8717-461e-801a-f31149324c32"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="43c5dbf9-3574-4373-9d3f-f1b49a7247c5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("user_oid",null);
tC.setPropertyValue("account_oid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="c50fe2d3-1534-4f7d-94a8-bf12161b0236"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserUpdate"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="01831dcd-e7f2-4900-9668-eaaf97116e9b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("IsMinor","");

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

def BirthDate = null;
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

Result = b.userGetRow(userID);

myXML1 = new XmlSlurper().parseText(Result);

log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
 if(context.expand( '${#TestCase#ResponseType}')=='SUCCESS')
     {
        assert  myXML1.ResultSet.Row.size() == 1;
       	
       // assert myXML1.ResultSet.Row.STATUS == 'pending';
        assert myXML1.ResultSet.Row.PRIVILEGE == context.expand( '${#TestCase#Privilege}' );
        assert myXML1.ResultSet.Row.USERNAME == context.expand( '${#TestCase#UserName}' ) ;
        assert myXML1.ResultSet.Row.GIVEN_NAME == context.expand( '${#TestCase#GivenName}' ) ;
        assert myXML1.ResultSet.Row.SURNAME == context.expand( '${#TestCase#SurName}' ) ;
        assert myXML1.ResultSet.Row.PRIMARY_EMAIL == context.expand( '${#TestCase#PrimaryEmail}' ) ;
        assert myXML1.ResultSet.Row.TELEPHONE == context.expand( '${#TestCase#TelephoneNumber}' ) ;
        assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == context.expand( '${#TestCase#MobileTelephoneNumber}' ) ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#CHILD_DOB_XML}' ))
        {

        	 log.info "I am CHILD";
        	 
           BirthDate = context.expand( '${#Project#CHILD_DOB_XML}' );
           assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';

           tC.setPropertyValue("IsMinor","true");
           
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
         //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
       
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#YOUTH_DOB_XML}' ))
        {
        	log.info "I am YOUTH";
        	
          BirthDate = context.expand( '${#Project#YOUTH_DOB_XML}' );
          assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';

          tC.setPropertyValue("IsMinor","true");

                    
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
        //  assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;

         } 
        else
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#Project#ADULT_DOB_XML}' ))
        {

        	log.info "I am ADULT";
        	
          BirthDate = context.expand( '${#Project#ADULT_DOB_XML}' );
          
          assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';

          tC.setPropertyValue("IsMinor","false");
          
        /* if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
          */ 
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}' );

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User Validations Passed";
               
   }// end if for success response check
  else
  {
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  }
  

   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="646f252a-1208-41ee-b592-29898615c1ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );
def nodeid =context.expand('${#TestCase#nodeid}' );

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);
c=  new dbUtils.dbNode(log,dbHost);
//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = '$userID'""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

log.info results;

/*
*  If zero length, no need to continue;
*/
 assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (context.expand( '${#TestCase#ResponseType}' ) == 'SUCCESS')
{
	assert myXML.ResultSet.Row.size() > 0;


	if(nodeid=="dece:cs"|| nodeid=="coord:cs" || nodeid=="portal" || nodeid=="portal:cs")
     {  
       assert myXML.ResultSet.Row.size() == 4;  
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";     
     }
     else
     { 
       assert myXML.ResultSet.Row.size() == 5;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' );    
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="c2556cd7-c040-4e74-899c-dd36e9895fad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID ='$userID'""";
  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="14df3c78-1881-4452-ae4b-ee45fc2dba4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if(context.expand( '${#TestCase#IsMinor}' )=="true")
{
def dbHost = context.expand( '${#Project#targetsystem}' );
def userID = context.expand( '${#TestCase#user_oid}' );

  a = new dbUtils.dbUtils(log,dbHost);
  b = new dbUtils.dbUser(log,dbHost);

  String sql = """select POLICY_CLASS,STATUS from POLICY P, POLICY_RELATIONSHIP PR where PR.POLICY_ACTOR = '"""+b.userGetfromNodeUserId(userID)+"""'
  and P.POLICY_OID = PR.POLICY_OID""";

  results = a.SelectFromDB(sql,dbHost);

  /*
  *  If zero length, no need to continue;
  */
   assert results.length() > 0;

   def myXML = new XmlSlurper().parseText(results);
  
   log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";

   assert myXML.ResultSet.Row.size() > 0;
	
   assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  

   log.info "Legal Guardian Validation Passed";	
}
else
{
	log.info "No Legal Guardian Validation Required";
}
</script></con:config></con:testStep><con:properties><con:property><con:name>IsMinor</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00004_UserUpdate_FUNC_CLG_Update_CHILD_DOB_TO_YOUTH_AGE</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_GeoProfile</con:value></con:property><con:property><con:name>userType</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>Username</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>SurName</con:name><con:value>seconduser20130813_120746</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>DOB_NOT_EDITABLE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E3CF68DF2A8CD783E0401F0A07994C97</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid1</con:name><con:value>E2A349A2ABBCCB1DE0401F0A059926E1</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E3CF68DF2A8DD783E0401F0A07994C97</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E3CF692D5BE44697E0401F0A05993AD3</con:value></con:property><con:property><con:name>attested</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreate_API" searchProperties="true" id="0559683a-89a8-4543-9672-06581fc3aece"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="57a6b4c1-0694-446e-8f36-05e83c7ce9d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="d1c7a146-8d82-464f-a13c-88e5647b362d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def callTS = tP.getTestSuiteByName(callTSname);

tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="d83a7aa0-a338-4337-bd80-8a6555265525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set Tou Resource"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="AccountName Generation"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="0bddecd5-3dd5-46cb-98f9-531d8470ab22"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="27c30235-4efa-497e-9a3c-48ad98048da8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
	<UserList>
	${#Project#Request_XML}

    <PolicyList>
              <Policy>
                     <PolicyClass>urn:dece:type:policy:TermsOfUse</PolicyClass>
                     <Resource>${#Project#Policy_TOU}</Resource>
				 <RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</RequestingEntity>
                     <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
              </Policy>
		<Policy>
			<PolicyClass>urn:dece:type:policy:ManageUserConsent</PolicyClass>
			<RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeId}</RequestingEntity>
			<PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
		</Policy>
          </PolicyList>
          </User>
               </UserList>
</Account>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16ACF97A740E18ACE05305991F0A9199/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0d5f80a7-2de4-498f-ae54-f37855d409a6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="81aa2acc-00f2-4213-83b4-8d8b8a3892bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}



      if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode"))
      {                              
                      assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");                             
      } else {
                      assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
      }

	urlStr = URLDecoder.decode(urlStr);
		def arrayString = urlStr.split("Account/");
			arrayString= arrayString[1].split("/User/");
				log.info "Node_User_ID== " + arrayString[1]
				log.info "Node_Account_ID== " + arrayString[0]
	
			int lastColon = arrayString[1].lastIndexOf(':');
			accountid     = arrayString[0].substring(lastColon+4);
			userid     = arrayString[1].substring(lastColon +1);
		def useridfull = arrayString[1];    
		def accountidfull = arrayString[0];       
	 
	tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	
	tC.setPropertyValue("NODE_USER_ID",userid);
	tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);

                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="634c2e6f-087e-4579-9cce-60d8b6645b9e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())
		                 log.info tC.getPropertyValue("UserName");
		                 assert u.length() > 0;
		                 assert a.length() > 0;
	                 
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("ACCOUNT_OID", a);
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                assert 1 == 2; 
//   assert 2 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_the_Username_and_NodeUserId_to_the_Calling_TestCase" id="36b6711f-6cce-40c3-b9aa-ddc166e106d4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DateOfBirth</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>1822F318F5BA677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB/User/urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-05-26</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:16ACF97A75D318ACE05305991F0A9199</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>1822F318F5C2677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>AccountName</con:name><con:value>accname_20150610_09364</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserCreate API" searchProperties="true" id="30aefa36-5265-4855-8432-a953e41b8771"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="cc7ab515-dee1-4301-a271-69c0066d67df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);

tC.setPropertyValue("Country",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");

//def request_XML_Buffer = context.expand( '${#Project#Request_XML_Buffer}' )

//tP.setPropertyValue("Request_XML",request_XML_Buffer);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="815bff3b-842a-4070-86bb-cece5b19c7a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));


tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set_pem" id="5aec259f-6efc-4047-958a-f404549b66a3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="bdbb05a4-3195-40a4-a273-e98edb919cda"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="30b98b92-23e7-43db-9bda-2834baac4b80"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request>${#Project#Request_XML}&lt;/User>
</con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16ACF97A740E18ACE05305991F0A9199/User</con:originalUri><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="bc996057-be4c-4bee-a9ac-43bd22a866c4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Test Case Name with Expected Result" disabled="true" id="6606defe-0900-4d4c-835a-feae6fcf695b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def httpStatus = context.expand( '${#TestCase#httpStatus}' )

logFile.append("${callTCname}"+"\t"+"$httpStatus" +"\n");</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b31e8838-e244-4a70-b23e-27ecedeb39ef"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="95f3189f-715e-4cef-bc91-14a1b4138b68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                //String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 //assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                //tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="419e9428-03d9-4db9-8ef2-4eaee630ffe1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="d54de616-6e27-4415-9595-dc1c9befc230"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="restrequest" name="Copy of User_Create" disabled="true" id="c17a5bb4-45e8-4769-a033-1d1cc450c284"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Copy of User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="59af7952-b735-4188-a974-c8deec6f7ce3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
<!--	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>-->
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_API</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20150610_091926@uvvutesting.biz</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20150610_080730@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-05-26</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643/User/urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH3cU3qh3DrCDDfdqMgWUNGXMyFdQLRNSpNy8dfvpEClKB7OeepkdeVb37rkSy45CnzbbXAOkSCM5taBT7mbWGtaHFGXIU64S1EA3BXYHTZ6d66dN12036Lluu2a9o/lVHC5XKnoVtks6o5XRHrFQY5eqVq4VChiQMiTrpzH0KVcICpqmm1aRd0s6ZY5MguuU3LtYt4qV1+13BNEXGJLl7yp7UiteU2bCxG6hrFarfKrQp5FM8M2TcsY9+6GeA4B0uqX24ySQFF954/zHmDwfZzHLDAujYzPpcfdIZlRJOIIdrG8U7FMw6wa0sfjZHahpXvB69IpS5YtRBklGPnkA6n69EDMmZdr+DMWETEPTiZhmQpYhzXWseXQC83IUjsTKMMw4kjnc2TtsAYwhQgohtzjoFvTLs7rWrJ1FCHKpywKeHb53/gAXYLPQvB0vk9rR+18wG8qVb8E7HYp9mNOlnCvhjVEGPium4DPh8r9iWBK1neEywFdc8XOOKR3tNxWo01mwMX/adBBc7YgT8iPoR693/xezvq/rGa7M37Eg1/vbxX07kz65KGWEDh0Tgxpa7fLo6FMh2i7ww+uF4t++NhZexN4+T0cvt0Xnpqlm/H0+vbjY7C+Lr+OB1ds+jiuNift2HgmL8TuDILJTb/MR8/VoGP03jtee3ldHj2I0XvntdUV7NFpNVDDpnb/EcL71tpuLl6Ht8Ug6r1cf3w4/YeK0Xm5vQ9n4+e3xtvm9el67HhWPIxbjQ3GXvlFNutuE4r2FVpuyjcfTdbrs1qazgH/rG1/5ofx5A2w2C/VGHTbuSvZJSR+FjNlIZ4+TVzdUIkPF0CFVle7lHa4sZQ74rmyh9u1VbHtSqVZMkudTqFZsTtmsVDoVKvWldkol5zCXmS2LI4othidEhVLSe52bH4miAOXA/Ug0pcslkrHtR8Q20igXJcO5CFglMOIKXk2p29ltohWi+nGmqyxaXuFeGXygpa7Z6JP+1FjKiDKanIpo8kDwCQkoIRbzTWXg82FrMUCLWPhW/klylOIpbRHSmVd26kUDU6C0AfF1AiYF/uQD+dhUhmDb7+2jjBPrIPOKDltJ/M6/rcvgfTxiHLgKpcmyDbCN5eLtU/kdMLVw4T38I3YI+pgyXqKiOAtk+yvzzFR85HOiMxoTzn1PDZkUI3jhNJA3pLgdNDT61qquDz39X07FsjKL/LxchknHXCcghFJeEOlaJi2MQQcS2XajNg7UCNFMc66BlLiR8FTe5ZiLOZ0KJCAQE5MLlmece8Pgat7vytHfX3uoyITUpZOwFp8Z2v58s2iGP/4rMEuVn7S/Ed+Viz6TPw7rIM4Mk957QtCZ2qlroDNibnATMISKV4sOgT/DuC74FljWuSUi5ADNYkFnP6TU6pU0xDGLKai29YSw6FSJjzFJgT30+kLTCLG6euM/PvzTCfJCGCQbzpOEnx1ybrqCNDZgdrugp4Q3PZPgptlV/9i/mo5qNPxjNf/Ag==</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-05-26</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>182288B607363B82E0533E991F0A7643</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-12-20</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_UserCreate API" searchProperties="true" id="590b402e-4d94-4c2b-a26d-a4d3267a4ef0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f27028f3-2af9-46ac-a1de-e4256a56b696"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);

tC.setPropertyValue("ResponseType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d5b51071-2ee3-4d2b-9d9f-bc6a6ac92aee"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def uname= "UVTCPrimaryEmail_childuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("Privilege","basic");
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("userType","CHILD");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="50763b73-9049-4b58-a596-22b9c44d28ce"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
	{
		tP.setPropertyValue("GeoProfile","US");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="CA")
	{
		tP.setPropertyValue("GeoProfile","CA");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","13");
		tP.setPropertyValue("CHILD_MAX_AGE","12");
	}
else
if(tP.getPropertyValue("Country")=="GB")
	{
		tP.setPropertyValue("GeoProfile","GB");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AU")
	{
		tP.setPropertyValue("GeoProfile","AU");          
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="NZ")
	{
		tP.setPropertyValue("GeoProfile","NZ");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="IE")
	{
		tP.setPropertyValue("GeoProfile","IE");             
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="AT")
	{
		tP.setPropertyValue("GeoProfile","AT");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="DE")
	{
		tP.setPropertyValue("GeoProfile","DE");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","14");
		tP.setPropertyValue("CHILD_MAX_AGE","13");
	}
else
if(tP.getPropertyValue("Country")=="CH")
	{
		tP.setPropertyValue("GeoProfile","CH");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("YOUTH_MIN_AGE","16");
		tP.setPropertyValue("CHILD_MAX_AGE","15");
	}
else
if(tP.getPropertyValue("Country")=="FR")
	{
		tP.setPropertyValue("GeoProfile","FR");           
		tP.setPropertyValue("ADULT_MIN_AGE","18");
		tP.setPropertyValue("CHILD_MAX_AGE","17");
	}


	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
		log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
		log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":	
		Date dob = (new Date());
		dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
		log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
		tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
		tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "AdultPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "ADULTMinus":	
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHPlus":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, -1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHPlus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob); 
		tC.setPropertyValue("YOUTH_DOB_XML",dob);
	break;

	case "YOUTHMinus":   	
	   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, +1);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHMinus DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("CHILD_DOB_XML",dob); 
	break;

	case "ADULTToday":	 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "ADULTToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("ADULT_DOB_XML",dob); 
	break;

	case "YOUTHToday":
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar today = Calendar.getInstance();
		int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
		int curMonth = today.get(Calendar.MONTH);
		int curDay = today.get(Calendar.DAY_OF_MONTH);
	
		if(curDay==29){
			curDay==28
			}
	
		Date now = new Date(curYear1-1900,curMonth,curDay);  
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(now);  
		calendar.add(Calendar.DAY_OF_YEAR, 0);
		def dob = sdf.format(calendar.getTime());
		log.info "YOUTHToday DateOfBirth: "+dob;
		tC.setPropertyValue("DateOfBirth",dob);
		tC.setPropertyValue("YOUTH_DOB_XML",dob); 
	break;

	default:
		log.info "userType is not matched!!"
	break;

	}</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="e60197f4-457a-471d-9c07-8c2288d7ab27"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")

myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Create");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="de24c3ce-5f05-4e09-b55f-cc972dd6ed20"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="FirstUserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="4a2c0ac7-caa1-4732-ab36-bfcf53d5331b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#TestCase#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
		<GivenName>${#TestCase#GivenName}</GivenName>
		<SurName>${#TestCase#SurName}</SurName>
	</Name>
	<DisplayImage>
		<DisplayImageURL Height="1" MimeType="" Width="1">${#TestCase#DisplayImageURL}
		</DisplayImageURL>
	</DisplayImage>
	<ContactInfo>
		<PrimaryEmail>
			<Value>${#TestCase#PrimaryEmail}</Value>
			</PrimaryEmail>
			<AlternateEmail>
				<Value>${#TestCase#AlternateEmail}</Value>
				</AlternateEmail>
			<Address>
				<PostalAddress>${#TestCase#PostalAddress}</PostalAddress>
				<PostalCode>${#TestCase#PostalCode}</PostalCode>
				<Locality>${#TestCase#Locality}</Locality>
				<StateOrProvince>${#TestCase#StateOrProvince}</StateOrProvince>
				<Country>${#TestCase#Country}</Country>
			</Address>
			<TelephoneNumber>			
					<Value>${#TestCase#TelephoneNumber}</Value>
				</TelephoneNumber>
				<MobileTelephoneNumber>
					<Value>${#TestCase#MobileTelephoneNumber}</Value>
				</MobileTelephoneNumber>
	</ContactInfo>
	<Languages>
		<Language>${#TestCase#Language1}</Language>
	</Languages>
	<!-- <DateOfBirth> depricated </DateOfBirth> -->
	<LegalGuardian>${#TestCase#urnUser}${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
	<Credentials>
		<Username>${#TestCase#UserName}</Username>
		<Password>${#TestCase#password}</Password>
	</Credentials>
	<UserRecoveryTokens>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID1}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse1}</QuestionResponse>
		</RecoveryItem>
		<RecoveryItem>
			<QuestionID>${#TestCase#QuestionID2}</QuestionID>
			<QuestionResponse>${#TestCase#QuestionResponse2}</QuestionResponse>
		</RecoveryItem>
	</UserRecoveryTokens>
	${#TestCase#ResourceStatus}
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="03a76851-c6af-43f8-9a56-27b1c0fbd654"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="db9995f9-2d03-4edc-a7b5-1a27806f9df4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	   case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";		
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;


   case "INVALID_USER_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameNotValid";
		errorReason = "The sign-in name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameNotValid";
	break;

   case "INVALID_GIVEN_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserGivenNameNotValid";
		errorReason = "The given name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserGivenNameNotValid";
	break;

    case "INVALID_PASSWORD":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorReason = "The password is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
	break;

    case "INVALID_SECURITY_ANS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSecurityAnswerNotValid";
		errorReason = "The answer to the security question is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSecurityAnswerNotValid";
	break;

    case "INVALID_ADDRESS":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAddressNotValid";
		errorReason = "The address is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAddressNotValid";
	break;

	case "INVALID_SURNAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserSurnameNotValid";
		errorReason = "The surname is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserSurnameNotValid";
	break;


	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid." + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
	break;
	
	case "INVALID_ALTERNATE_EMAIL":
			expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
			errorID     = "urn:dece:errorid:org:dece:AccountUserAlternateEmailNotValid";

			if(tP.getPropertyValue("AlternateEmail")=="")
			{
			  errorReason = "The alternate email address is not valid.";
			}
			else
			{
				errorReason = "The alternate email address is not valid. - " + tP.getPropertyValue("AlternateEmail");
			}
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlternateEmailNotValid";
	break;	
	
	
	case "INVALID_TELEPHONE":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserTelephoneNumberNotValid";
		errorReason = "The telephone number is not valid. - "+ context.expand('${#Project#TelephoneNo}');
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserTelephoneNumberNotValid";
	break;
	
	
	case "INVALID_PRIMARY_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryLanguageNotValid";
		errorReason = "The primary language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryLanguageNotValid";
	break;
	
	case "INVALID_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageNotValid";
		errorReason = "The language is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageNotValid";
	break;
	
	case "DUPLICATE_LANG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserLanguageDuplicated";
		errorReason = "The language is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserLanguageDuplicated";
	break;
	
	case "DUPLICATE_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserEmailAddressDuplicated";
		errorReason = "The email address is a duplicate.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserEmailAddressDuplicated";
	break;

		
	case "USERNAME_EXISTS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUsernameRegistered";
		errorReason = "The sign-in name already exists.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUsernameRegistered";
	break;

	case "INVALID_DOB":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserBirthDateNotValid";
		errorReason = "The date of birth is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserBirthDateNotValid";
	break;
	
	case "INVALID_CLG_STATUS":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGStatusInRequestNotValid";
		errorReason = "The status of the connected legal guardian (CLG) must be active or pending.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGStatusInRequestNotValid";
	break;
	
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

	case "MAX_USERS_IN_ACCOUNT":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountActiveUserCountReachedMaxLimit";
		errorReason = "The maximum number of active members allowed has been reached.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountActiveUserCountReachedMaxLimit";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

	case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The requesting member does not have permission to create a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The requesting member does not have permission to create a member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserMustBe18OrOlderToRegister";
		errorReason = "The member must be 18 or older.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserMustBe18OrOlderToRegister";
	break;
	
	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first member must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
	case "FAU_MUST_BE_ABOVE18":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "A full-access member must be 18 or older.";
		errorID     = "urn:dece:errorid:org:dece:FullAccessUserMustBe18OrOlder";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FullAccessUserMustBe18OrOlder";
	break;
	
	case "LEGAL_GUARDIAN_REQD":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserRequiresLegalGuardianDeclared";
		errorReason = "The connected legal guardian (CLG) must be declared.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserRequiresLegalGuardianDeclared";
	break;
	
	case "CREATOR_MUST_BE_CLG":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:CLGMustBeSameAsCreator";
		errorReason = "An underage member must be created by a connected legal guardian (CLG).";			       
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#CLGMustBeSameAsCreator";
	break;
	
	case "CREATOR_RESTRICTED_TO_BE_CLG":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The requesting member cannot create an underage member.";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateChildOrYouthUsers";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateChildOrYouthUsers";
	break;

	case "CLG_NOT_FOUND":
	     expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserNotFound";
		errorReason = "The connected legal guardian (CLG) was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserNotFound";
	break;

	case "CLG_MUST_BE_FAU":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";		
		errorReason = "A connected legal guardian (CLG) must be a full-access member.";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianMustBeFullAccessUser";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianMustBeFullAccessUser";
	break;

	case "CLG_STATUS_INVALID":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The connected legal guardian (CLG) is not in a valid status.";
		errorID     = "urn:dece:errorid:org:dece:PendingCLGDeclaredNotInValidStatus";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#PendingCLGDeclaredNotInValidStatus";
	break;

     case "ACC_STATUS_INVALID":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountStatusNotValid";
		errorReason = "The account status is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountStatusNotValid";
	break;

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "STATUS_NOT_ALLOWED":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "The resource status element is not allowed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
     break;

          case "DOB_NOT_CONSISTENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserDOBNotConsistentWithAgeOfMajorityDeclaration";
		errorReason = "The member's date of birth conflicts with the value of the AgeOfMajority attribute.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserDOBNotConsistentWithAgeOfMajorityDeclaration";
     break;

     case "AGE_OF_MAJORITY_BOOLEAN_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.1: \'' is not a valid value for \'boolean\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

	case "DOB_DATATYPE_ERROR":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:SaxParserException";
		errorReason = "cvc-datatype-valid.1.2.3: \'' is not a valid value of union type \'DayOptionalDate-type\'.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SaxParserException";
     break;

     case "INSUFFICIENT_PRIVILEGES":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;    

	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
/*
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
*/

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);
			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
//			tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      	}
                                
} else 
	{
       	assert context.expand( '${#TestCase#httpLocation}') == "";
	}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info "Errorlink from Coord : " + myXML.Error.ErrorLink.toString();
		log.info "Errorlink  expected" + errorLink;
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID" id="6560a526-a158-4680-bb3e-7becdd8e8e22"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {
		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName").toLowerCase())

		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                tP.setPropertyValue("account_oid", a);
		                }
		          catch(Throwable e) 
		          	{
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		          	}
		}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" id="3cb92131-dcff-4db9-b779-7d67fa6de2d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("user_oid",tC.getPropertyValue("user_oid"));

callTC.setPropertyValue("ADULT_DOB_XML",tC.getPropertyValue("ADULT_DOB_XML"));
callTC.setPropertyValue("YOUTH_DOB_XML",tC.getPropertyValue("YOUTH_DOB_XML"));
callTC.setPropertyValue("CHILD_DOB_XML",tC.getPropertyValue("CHILD_DOB_XML"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="2b0912aa-5f74-432f-b079-69e9e921e8a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      } else {
         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tC.setPropertyValue("NODE_USER_ID",userid);

         tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
         tC.setPropertyValue("NODE_USER_ID_FULL2",node_User);
      }
                                
} else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}





//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-08</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20140622_031426@uvvutesting.biz</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2003-06-25</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>urn:dece:userid:org:dece:FC681EA8335C19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2003-06-25</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE19F934C4E6BFA99E0401F0A05993DA2</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE19F95D7CFC268C9E0401F0A079952C9</con:value></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTCPrimaryEmail_childuser20140622_1403421275119</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:FC685C5797914FBBE0401F0A05997F09/User/urn:dece:userid:org:dece:FC68611EE542BFD0E0401F0A05992438</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C5797914FBBE0401F0A05997F09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C5797914FBBE0401F0A05997F09</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">FC68611EE542BFD0E0401F0A05992438</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC681EA8335C19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:FC68611EE542BFD0E0401F0A05992438</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E56665ABC808DB00E0401F0A07993371</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20140622_031426@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chFyi5qCCF25ZS2i7QdtuXI+NMwG3ihNihtL/+2KFJgaU93SMhIU/GM9/MfP7sU4biyPJ8xiDjJKHKsNdS/zEMCztzsLU6ck+0hoVDzbFCrFkIh0GjAc06tlRlyFgOQ8o4orylWobZ0IymZlkzw/bMhmc5NctwH1TlFjImQguXmqEqmziizCvSttQ8o16CGGEeRTEwj2Nv6o8vPOHpoRKT2j7doiwSZu0l56mn67gWAIYowjWcxPqpvudzGjBvShYU8TyDt5wBa6lve5+fn2vP9VqSLXTLMAzdcHXhEzCy+K62v5WbIRjSMNmuu4gmlGAUkVckQY2BL5NA8aNFkhG+jD8IbeqmIUNrsMEaNhv0u6q/JyjQfTHSHsiMIY0tkVkGm0AIGVAMys1k2FK/f22C272zDFEWJlnMDtZ/BwnoGqIkhUBjZWUluq9HPNKu9ilgb0hxlDOyhktJkxRhYMp1BiHZXBAmyBcwpRi/smHiR0qWAf6bsZzqu1gFdP1Id3pkAYz/n5ntzmsb5RZFObTvLN8565/BwHbI5ocRPcUktSw3DOl9q4Cw67wFVY37bX1I1opbb5vG8etgs6C/OpuXB9/pWCPu3Kf1xx/95nRUH569kvufYzzt3vyeuaPfL8+9u9mN31/eBuN8wO9+XDv6YHIdGqPQ/tWHb3aa193HxvmN3sFPptn01z8vw9SlM7J+SKywfp7ezm39otsLh/P52A/Xxtl5YzW7anaQc/lAfdxhZr6a8Mng6vrb3dS4fxkll87NLZr0R7eji3HrvabdGvaNpSRM8/kjYF4uJT2GPWUg5oX45/IiLSTQwsLVS6VGMQ6Uq225S0qLlwsBIoEnhrldD7pNx+z7Tr1+0jXdvts3GoY5MHzDdt16r2mXGrRFcQCxm9CQyFxSZbf8+Rwgjj0GNIBMWyc5XgJTP4nYQxwpQzoRhyOhDGaJUHHCHokDT4tAqKhpu49zM1objXD1pCqXCb+iV5kfcsj2pNs09qR7ApikBKS+S4IzwXDGRS9WaJ3zyKytUY1CLm6ATIqwZzWcE52ROI1AItXjJMgjqKXLtOiMzrb/loYwK6yT/qw4eB/WdfitbIHwCYh0YLKWDogxwpE7yCwL+bjg+m7BZXg/D4g8X6KfPCN4i2T/0ztNJD8qjoiKSsiV56FhL6p+WFCVKFgTXBG9uqGFwIvj3y7HsUK1VS1fr/NiALaUtkyE14XCmfoUcC706WWWPAHVqxD6l66HCvVB5sq+jy/nSzrliEMs6KIUyy+8DabA5NtgKHi++erDYy+l6BuHDT9m60biCSERf/rKwB6WfsJ8Lf6ekyx4H9eRWDt5RJ3iQcAJXciVvAhePiAFTkRYIpQryXaDHwtwLPm+sWpyhYULNs1zDh9/UaQktVSEcZJTPuyphWFXJguc/CUF793pjzCFFL/drRv24d36e3wxFYIVI7XyJf/trJGCLhhUeYUXWFrqRjwVRXK62JHlN4CHynzSPbFd2zUbg06nUuYT17UHhls1cK+S9h/mPy07PT08D+1/AQ==</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=null</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>StandardUserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTCPrimaryEmail_childuser20140622_1403421275119</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00091_UVTC_PrimaryEmail_maps_to_multi_user_with_more_than_one_child_and_node_role_Retailer__Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>UC_RequestBody_Mandatory</con:name><con:value/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_childuser20140622_1403421275119</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>FC68611EE543BFD0E0401F0A05992438</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-07</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f23d9bb0-0bd1-4723-928b-a9c1d99c147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>95f3189f-715e-4cef-bc91-14a1b4138b68</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet" searchProperties="true" id="18d6dbdf-5594-4023-8f59-664e83628798" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40b51506-e7ed-484f-9cef-144c355c10b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="0e921030-fc0e-4088-8519-d2ea05acede9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("UserGetResponseType"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="8dac2685-8684-45a7-9383-18906924bc23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserGET");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserGET" id="9edfc5bd-e710-4adb-a343-f24a81968540"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserGET" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="5be437dd-519a-4ddb-9991-82608accc06d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserGET');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a34e05a2-007f-4659-9d23-4e5f076e5223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_14015 - STSCreate - Portal:CS - unamepasswd - User created by node RTL - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>4_STS Create - Node Role - CREATED_BY_NODE_OID</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC2F5A7DCFDE454AE0401F0A0799394E</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserStatusUpdate API" searchProperties="true" id="19cc486a-a16d-4ec8-86ef-9f451f07ebed" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="46e67ffd-7362-4e1c-a502-21e353b9227c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("status",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="277c6a80-14fb-4da5-bd51-3f2ccc23180d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("status",callTC.getPropertyValue("status"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("ResponseType") == null ||
	tC.getPropertyValue("ResponseType") == "") {
		tC.setPropertyValue("ResponseType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="11565952-3245-4993-9a90-b45b77daa42f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserResourceStatusUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserResourceStatusUpdate" id="aa2ec204-f680-47ad-98fb-51d2d96fbf59"><con:settings/><con:config service="UserResourceStatusUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}/ResourceStatus/Current/Update" methodName="UserResourceStatusUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserResourceStatusUpdate" mediaType="application/xml" postQueryString="false" sslKeystore="" id="6406a5fb-7a95-4021-b171-7b5f55e010f9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ResourceStatus xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
  <Current>
    <Value>urn:dece:type:status:${#TestCase#status}</Value>
    <Description>Account Updated</Description>
  </Current>
</ResourceStatus>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="367744f1-376f-4646-9264-0e788eced0b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserResourceStatusUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="e8904455-2076-49b1-9371-9836b5d0c1cf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.15. User Status Changed through Resource Update: User Locked [Your UltraViolet membership has been locked]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>859</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:InvocationPathHasNonEncodedParameters">
      <Reason Language="en">The parameters in the invocation path must be escape-encoded.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DF7C3C9C94E2F31EE0401F0A07992917/User/urn:dece:userid:org:dece:DF7C3E49DCFC8E50E0401F0A05995F38/ResourceStatus/Current/Update</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/06/error/en/ErrorList.html#InvocationPathHasNonEncodedParameters</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8sAgihWkqphU1TcwPXmLRwGRNlk11//DiZ6TE5yvrxf5cJM09P99DI9zzzHhuc2uyCOUZQ4gV9VxJfaPxzTJBkWNRt00zIbDLczG0aT6uBlh2pRBkVZDFerKnGcIsWPE8NPXmpNkqIbJNugOJ1sdelOl+k8sSyzrVWXKIqxaazyRNaqhef6cffq9qWWRn43MGIn7vqGh+JuArsaUEddrNk1bphqr89vKK8Oo9d9koRdgoBPJoLIdeETDDzimfig82zGXc2xfSNJI/Tu04xfau978zx/yumnILKJJkmSBMkRWMeMHftX7bVy24xMxbeCt7Vg+IHvQMN1LkYJSkXJPjCrwLWDyEn23jemKYIiS9MNVMAGpBj/V4347eCK7oeWPoCMYqMR7w3qZmyOLBQhH6LqYq681H79rIJve/XI8GMriLz40/q/QUJ+htwgRGYjvkV2Q/dzi1+k6/UZwa7iQzeNnQyNyzYJDYji6jRCllOMnBg3nxlXr+WvFvGtwxD8LyV5Jh5xYtjEF5kRHRvFyf9Tr8davVlZGm6KXgGVdJC/9rRR1qunMuNpHH8O80vnQL5cITwqv4G6l/p9/blR7331vmkizeSkl02UHWImJKhPLrBlSqucXmx1rW+QuUJL9mAEt9qw3TZMYw6glp6QSazSvdXL8mBdEELCd5RLqFdcuJ0o7eKkjdzW+UgeXd8VNDSVpuqRS0HeonkhPE5mobsMZcsMBQseTO7ILkfncM+yxakN/Nhklwf2rO8qy0l4CS7H1B4yUXDOaWO9efkd02MMZVxDdL4GWf6/bpGcaCTGfSGUk8LCxzNBr6qiCHVREAASbJArPLAVfnQBY94+nvZHp8flJA9mCxmI4KzOQS7aG3E5mw2l3Fwu3e1SkWVenTN5H2zECv4gSsVS3K4HpLHahpumTG41njfX82BHD0Kzf8z7ezhWdTUf68pZPUjFWJfI1VVmF3h9UQ8qNdEXdGV14Dl1LuVifvUoSvl+vF3Nw82Cy+FFmqmA6QFqIQl7ta97SwrS8z08SCMVHK9yfq8Ky6VaSDqYVnh7vMSx6YK8DaFnhjvP3T8Y72Pjutlbnnc9N91epIMqSD1BO/U0ZUeLM2kA5pvFbrU8Gis5q8D+GOxuHp2WY6yD3N52cnG2GQyDrbLP4BjMJJ6fAZwuEqhKbwCCHg9UBjjFRTjwbCCYck4MmnGlzrk9dn12TuvY6JGuQXU61Ga0YqcnVpT8+naY7g57db+WJ/WhZmYLLuEumzirZ6zhULAIrdla6ifDwurPtMpuKhZr2K+b9oBwL5wcqe0BiC7nvava82TFTuLzzrGsFb+eMG7bclV6HlquFZ7juh7MjhHJ8ohuEptzNkwqwFZ5AHqHxYGfqXynTKqp5LONyhtAlpIUXA7NZNhcngb9zIUbGgTFcDU5HN8LY4q5xBP5TMJtJVU6IjDLIvS1hSQfwIK37Yi3JZmfQRHMNsow3+B8LfpY+XMe5WsebYkHEr0FLNev0AuSSyaJxjDg7PMLX+b26qlYmaxHtk9IGmnjkMnVeGz521VwVD0nWkSpthgOx6Nip6e94wHPKovUhhm9rUjZMQTOeKjvj2IgGtNws0nCug8jmCihpyrFZbKNDx1n55GDeovip6QI282Ft8sXPUPaDiNbo4b9uT+l21wlTq1z36sfOvmqrmts2DYF3xLPZ2IbLckABDI3b53Motk87hf5iM2tATjujOa4cPEo46ThVof5fDZcaV69VWllo5FHXnSCGYeTXOvljDSb1WmT1/t6HEbOJu3YRTTxzebGSNhsSy5ZJ3SPXDM96kxIL20PF2uamWFbnVZmzBpuPbsdwgExJzIgta2R0jvvLsYl9CbwbYB+ng534dv8IB4ny4fRcyMdGu5WBJPbsryAFLEq41vBSP5OYEqJYzasq2o3LFlQnCA/qb2Wu0ry0k0xxXHMLr4y3tai3BZoieFEQRY6UouUSIakZBKQLY5ryXTnxnLeUHyCKAS+5ZS+Sh73dkv9HSD0ujHyTRQ1siCFexTX/mKxzFdV8ef4+g38GOkB5okMIGmB4QX8x9ACxTG8SLdFSQJcu0UJfKdWHQfJxJ9EwEpQ9JEjdj5wxDmCTuigkkiWt2mMr9M4wSk5GVmauNRTZjz5KMVUMyrZXrfJdFpE7Hihi0rAhBeYqYuewn14TRARv/02GwaMr1KBFCS5I5EdAd8MbZF9TCzVJPkrBfg29s/fbmnCOqZTKsRloDzCpUZfMGH6FuW32aCox2zczIPUdMqbHuc8iRz4huTjp9+tVPbQvY/mkv6PoP1D3XDf1T8LPpgmPkd192ZmDryfiPtjAXNNzEZebwU7GU+npzTL0muJ2iXTirB5giJIltAQTDFdOuvBEfnE3QTxI6Z6R/3J813+EV+a7H0twafdww1VvS5/8EzRUFw+UxR8IIqfvoE+uMR5S1CRfCUTXPyaKRH/9cEDu7DUw+Ip/smDyPxdri9sPfjBcZbjzfHtclXy0vM3nQEDbNbBIy6IHo1/ZeAr5x+F9yTfsSS4m3Zpgr7/Ui1n10vNgDBI/UQRa1fB4zy94kzOIer+VvrDzJUZvlP9Iv6W6q/VkYYnm2fU7rrO/1ZuONd2gQjvip0rlpdagV+t2LlvP8zvd4B/jHCBEzhGaso0Jd0nTZvjmhzVvifwQySvf4j/lDzk9PN5eP0X</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF7C3E49DCFC8E50E0401F0A05995F38</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7C3C9C94E2F31EE0401F0A07992917</con:value></con:property><con:property><con:name>status</con:name><con:value>blocked</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_API" searchProperties="true" id="3ad94f34-6a5c-418b-b8f8-a203cab10bc0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a41d2cef-51b0-46b7-b40c-1d6923e3263d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="e0e1fe9a-79d7-42ce-8931-9ee2304fe307"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserDelete"));

tC.setPropertyValue("ETag",callTC.getPropertyValue("ETag"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));

			</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="dc69f304-d0b1-4059-89ba-47e13860aae8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserDelete" id="f64f1781-9c0e-4af0-98c4-96319bba32ff"><con:settings/><con:config service="FirstUserCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="DeleteUser" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserDelete" mediaType="application/xml" id="86860311-fe06-418d-9e53-0c4d81aa0896" sslKeystore="iscportalcs1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="UserID" value="${#TestCase#NODE_USER_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="1e9ae371-1bd0-4759-940c-81391e47aabd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserDelete');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="fc5935eb-e5d0-495a-bb33-6346b3b9fdb4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

     
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate_Response" disabled="true" id="ffb7d87f-5213-4536-a1b4-773bf47f9502"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportalcs1_concat.pem</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUserUpdate API" searchProperties="true" id="7862a908-a45a-4b81-bc0e-801e8e24856e" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="e8e7711f-eb52-4a17-984b-8a6a0236e395"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="fc0f6904-5506-463b-adf0-9309f4db6c7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="15098d07-3e28-4bd9-8ce6-eddc712c561b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="02239d7c-1ce6-4d58-9ae0-6470a8e1e472"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserUpdate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="UserUpdate" id="a1716223-f6c8-4dc3-856d-e8679a537744"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserUpdate" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="3af7e03a-0317-48f5-92bd-e35a465a120e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserUpdate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5d887a92-965a-45ab-ab45-7daaea74c225"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.21. User Email Address Changed by Another User [Your UltraViolet email address has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwiAtWkqpBUFHRgLjevIXDgCibDJv++nfQ6DE5yfnyflc6PT3dTy/0PPOMDc9lOwBjFMVO4Jdl8aXyT7PFcg2Th7WGVedqnNFu1Np0m6+xvGnVG3R7uzWYSlnGOEGyj2PDj18qLM3Ua3SzxvA6U+806E69+USz3KZSXqAIE9NE5YmulHPP9XHn4valkkR+JzCwgzu+4SHciWFnBpRxh2h2jBumyuvzFeXFYfS6i+OwQ1HwyUQQuS58goFHPVMfdJ5N3Jk5tm/ESYTefZr4pfJ+Nsuyp6z+FEQ2xdI0TdE8RXRM7Ni/Kq+l22Fkyr4VXNddww98BxquczYKUAqKd4FZBq4dRE68874xzVAMXZiuoRzWIMP5vyrUbwcXdD+09AFkhI0a3pEivBvTkIUi5ENUnmvyS+XXzyp4PatHho+tIPLwp/V/g4T8FLlBiMwavkV2Q/dzi1+k6/UZwY7sQzfBToomRZuEBkS4/BYhy8nHDibNZ+LypfzlHN86DMH/UpJn6hEngU19kRnRsRGO/596PdbqamVhuAl6bc4Ye7D3+oln7yJRsFdmQ+NWIuqGwcsFwqPyFdS91O/rz41676v3Q9aSsua+vTwziatnYX7O1S7XPMxTS287OQgHbhuej/l5U9dVaz3Ydkchv6H9pDoc5Nvxymc0zemP9y0eSNtSg6/i5bq614ataj5fRlqaCNXT0lw38154ipqWeaB8VU0MwVjM1UzdU6c8dLhwoEtWjH1/82ZQPSMVFG0pl05QYbdiHhyEQ+jUe8yEll5+x/QYQxHXCJ0uQRb/Vw2aF43YuC+6xaSwyOcZo1dFlrtVsdsFqGuDTBaALQvjM5gI9uG4Ozh9PqMFoM57QAQnRQOZaK/FhaqOpMxcLNzNQu71CD4uG4C1WCIbopQvxM1qSBvLTbhme/RmJgjmSgu29WFoDg7ZYAcniq5kE10+KXspn+gSvbzI7Jysz8peYab6vF5a7gVe0aRMzC4eRSnbTTZLLVzP+QyeJVUBXB8wc6m7Uwa6t2BgXdvBvTRWwOEiF3ZKd7FQckkHbyXBnixIbHq3twmhZ4Zbz909GB8Q47rZX5y2fTfZnKW90pX63dmxP5O3dVGVhkBbz7fLxcFY9tISHEzA9ubRaTjGKsjsTTsT1fVwFGzkXQonQJUEQQUkXTRQ5P4QBH0BKBxw8nN3LzSDrtnLqCGLS1Xe7TdXJ+e4wkafdg2m3WbW42Xz7dgUJb+6GSXb/U7ZrXrT6mhmpnM+5s9rnFbTpuEwMA8tdSUN4lFuDdRZafsm5is4qJr2kHLPfC9SWkMQnU87V7G1eNmc4tPWsaylsJpybstylboWWq4VnnBVD9RDRDcFVGep9SkdxSVgKwIA/f18L6iK0C6SasqZulYEA/SkOAHnPRuP2MVxOEhduK6DIB8tp/vDe2FMMZMEKlMl0lZSqS0CsyjCYDaXenswF2w7EmypJ6hQBOpaHmVrkq/5gCh/zmPvkkdbEoBU34AmPyjV5zQfT+MZx4GTL8z9Hr9TjvnSbHp064ik8WwScpmCJ5a/WQYHxXOieZTM5qPRZJxv9aR/2JNZZdGzUVrflKT0EAJnMtJ3BzEQjbdwvY7Dqg8jGMuhp8j5ebrB+7az9ehhtcEIb7QIW+zc22bzviFtRpE9Y0YDzX+rt/gSTqzTwKvu29myqs+aYcvs+pZ4OlGbaEEHIOjxWuNo5ix72M2zcTOzhuCwNdhJ7vLCiZdGGx1mmjpazrxqo9RIx2OPPusUNwmn2ayfcZKqVuumoA90HEbOOmnbeTT1TXZtxM10Qy+aTugeeDY56FxYX9geKdZbaoYt5a2kciu48exWCIeURqVAalljuX/ano1z6E3hdYB+ng534XV+UI+T5cPouZGOGelWBOPbsriAZLHcI7eCEf+dwBQSx6xZF9VOWLAgHCM/rrwWpwry0kkIxXHMDrkyrmux164zXFvoMQ2eEeotieZopkcDusXzLbYBbizniuITxG7gW07hq+Bx11vq7wCh18HIN1FUS4ME7hCu/MVika+y7Gvk+g18jPSA8MSWxDFCQxJbvNBmWbbREOgGgS5227TYZFhQKU+CeOpPI2DFKPrIEZsfOKKGoBM6qCCSxW2KyXWKY5KSo5Emscs8pcaTjxJCNaOC7XVYrt2gsOOFLioAU15gJi56CnfhJUEUvv6yNQPii1ST9H/kWfdy038b4ue9WzaIjukUCriIR0CkougLwsvegvk+aP4x6Jt5kJhOcaGT1MaRA69IPm797piiVe7tQqK6Qb5rfhZ8sEp9DujuyEwdeO/5+3OAsEnCN15vJTkaT8enJE2TSxFaBZeKiHmKoegmNUMwIYTopAcH5FN3E9SPuOgd9SfPd/lHfEm882cx+Z490jLly/IHD5EZwsVDRCYtn//0lfPBJclbjPL4K1nXJe+VAvFfnzSwAws9In4jP1kQmb/L9YWtBz8kzmKAOb5drArmefqmKWBAzDpkiAXRo/GvDHzl/KPwnuQ7lph00zaJ0fc75WI6vVQMCIPEj2WxchE8TswLzvgUos5vpT/MXLjfO5nP8bdkfqWMZ2R2eUblruv8b+Wac2kXiMgp7FywvFRy8i4lzn37YUK/A/x6SHPgb0P6YySvf4j/lDzk9PP38Pov</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF83148BF14A1B37E0401F0A0799725A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-06-24</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF831D3BDEBB69DEE0401F0A05992E1F</con:value></con:property><con:property><con:name>UserName</con:name><con:value>fullusername_20130619_072217</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CLGTransfer" searchProperties="true" id="9d562b4c-2b21-4e4b-9dee-ea86ba8721ce" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="b6c59ddd-f128-45cc-acc1-fcb9c7601c10"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType",null);
tC.setPropertyValue("userType",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d2122245-f595-48c8-b54c-ea78d0db3f52"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("CLG_NODE_USER_ID", callTC.getPropertyValue("CLG_NODE_USER_ID"));
tC.setPropertyValue("FULL_NODE_USER_ID", callTC.getPropertyValue("FULL_NODE_USER_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("userType", callTC.getPropertyValue("userType"));
tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" id="7060fe95-13b3-41ca-a150-3f0edc3adc54"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("GeoProfile")=="US")
{
  tP.setPropertyValue("Country","US");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="CA")
{
  tP.setPropertyValue("Country","CA");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("GeoProfile")=="GB")
{
  tP.setPropertyValue("Country","GB");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("GeoProfile")=="AU")
{
  tP.setPropertyValue("Country","AU");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="NZ")
{
  tP.setPropertyValue("Country","NZ");                
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("GeoProfile")=="IE")
{
  tP.setPropertyValue("Country","IE");  
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
/*Setting DOB for Adults*/
Date dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("ADULT_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));

/*Setting DOB for Youth*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);

tP.setPropertyValue("YOUTH_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));


/*Setting DOB for Child*/

dob = (new Date());
  
dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);

tP.setPropertyValue("CHILD_DOB",dob.format('dd-MMM-yy'));
tP.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));


if(tC.getPropertyValue("userType")=="ADULT"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}else if(tC.getPropertyValue("userType")=="YOUTH"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("YOUTH_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else if(tC.getPropertyValue("userType")=="CHILD"){
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("CHILD_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","false");
}else{
	tC.setPropertyValue("DateOfBirth",tP.getPropertyValue("ADULT_DOB_XML"));
	tC.setPropertyValue("MeetsAgeOfMajority","true");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="20e9cc33-a9bd-4521-aef3-430d62debf4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("CLGTransfer");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="CLGTransfer" id="f04ef3e0-3f34-4fd7-b08e-576d088813e1"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CLGTransfer" mediaType="application/xml" sslKeystore="dececs_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>${#TestCase#UserName}</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>${#Project#PrimaryEmail}</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmailAddress}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}</LegalGuardian>
      <LegalGuardian Status="urn:dece:type:status:pending">urn:dece:userid:org:dece:${#TestCase#FULL_NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2479ab41-1198-444b-88a0-f69cfd793c9b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('CLGTransfer');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5db4b6fe-99bc-4dbd-b846-0fe097588a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
 
def url       = context.expand( '${#Project#Provision_HostName}' );
 
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");
 
def RequestorType = "";
def RequestorClass = "";
def Requestee = "";
 
def usernamestring = "";
def givennamestring = "";
def surnamestring = "";
 
int firstmask = 0;
int lastmask = 0;
 
boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;
 
String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
                errorHost = "http://error.decellc.org";
} else {
                errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";
 
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus   = "HTTP/1.1 200 OK";
                break;
 
                case "API_NOT_AUTH":
                expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
                errorReason = "API call not authorized";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
                break;
 
                case "FORBIDDEN":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                processXMLFlag  = false;
                                errorIDFlag     = false;
                                errorReasonFlag = false;
                                errorLinkFlag   = false;
                break;
                
                case "USER_NOT_VALID":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
                                errorReason = "The supplied UserID is invalid.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
                break;
 
                case "USER_INACTIVE":
                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
                errorReason = "The requestor is not active.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
                break;
 
     case "URL_NOT_FOUND":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                expectHTTPcontenttype = "text/xml"
                XMLbodynull     = true;
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "MTHD_NOT_ALLWD":
                expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
                expectHTTPcontenttype = "text/plain; charset=UTF-8"
                processXMLFlag  = false;
                errorIDFlag     = false;
                errorReasonFlag = false;
                errorLinkFlag   = false;
                break;
 
                case "USER_NOT_IN_ACC":
                expectHTTPstatus = "HTTP/1.1 404 Not Found";
                errorID     = "urn:dece:errorid:org:dece:UserNotFound";
                errorReason = "The supplied UserID was not found.";
                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
                break;
 
     case "USER_NOT_PERMIT":
                                expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
                                errorReason = "The user does not have permission to perform the requested action.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
                break;   
 
                case "ACC_NOT_MATCH_TOKEN":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
                                errorReason = "Request Account ID not match";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
                break;
 
                case "NO_MNG_ACC_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
                break;
 
                case "NO_ENABLE_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Enable Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
                break;
 
                case "NO_MNG_USR_CNST":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorReason = "The setting of the \"Manage User Consent\" policy prevents the requested action from being completed.";
                                errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
                break;
 
                case "ACCT_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
                                errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
                                errorReason = "The identified account is not active.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;
 
     case "SPL_CS_ALLOWED_ACCT":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;
 
     case "SPL_CS_ALLOWED_USER":
                     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
                                errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
                                errorReason = "The request is unauthorized.";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;
 
    case "REQUESTEE_INACTIVE":
                     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
                                errorReason = "The user has been removed.";
                                errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
                                errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
                break;
      
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
 
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
 
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;
 
//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
                //assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
                assert context.expand( '${#TestCase#httpContentLength}').toInteger()== 0;
}
 
//Location Header
if (httpLocationHeader) {
                assert context.expand( '${#TestCase#httpLocation}') != null;
 
                def a = context.expand( '${#TestCase#httpLocation}');
                def b = a.toURL();
                def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}
 
                assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                
                int lastColon = urlStr.lastIndexOf(':');
                int lastSlash = urlStr.lastIndexOf('/');
                accountid     = urlStr.substring(lastColon + 1);
                
                tC.setPropertyValue("ACCID",accountid);
                
} else {
                assert context.expand( '${#TestCase#httpLocation}') == "";
}
 


 
//XML body should be null test
if (XMLbodynull) {
 
                assert XMLbody == "";
}
 
if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
                
                def myXML = new XmlSlurper().parseText(XMLbody);
  
                if (errorRespType != "SUCCESS" ) {
                                // Verify response sizes...
                                assert myXML.Error.size() == 1;
                                assert myXML.Error.Reason.size() == 1;
                                assert myXML.Error.OriginalRequest.size() == 1;
                                assert myXML.Error.ErrorLink.size() == 1;
                                
                                // ErrorCode
                                this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
                                assert myXML.Error.@ErrorID.toString() == errorID;
                
                                // ErrorReason
                                this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
                                assert myXML.Error.Reason.toString() == errorReason;
 
                                // ErrorLink
                                this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
                                assert myXML.Error.ErrorLink.toString() == errorLink;
                } 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT
 
   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');
 
    // Following Fields returned for Everyone
    
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;
 
         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
             
         assert myXML.ContactInfo.size() == 1;
       //  assert myXML.ContactInfo.Address.size() == 1;
      //   assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
       //  assert myXML.ContactInfo.Address.PostalCode.size() == 1;
       //  assert myXML.ContactInfo.Address.Locality.size() == 1;
     //    assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
     //    assert myXML.ContactInfo.Address.Country.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.size() == 1;
      //   assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
       //  assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
 
         if(RequestorType == "CS")
         {
           assert myXML.ResourceStatus.History.size() > 0;   
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0;                
         }
 
   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels
 
   if(Requestee == "CHILD")
    {
 
                  this.log.info "Getting CHILD details";
                  
                 if((RequestorType == "CLG") || (RequestorType == "Self"))
                  {
                   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
        assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
                 }
                 else
                  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
                   
 
         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************
   
         firstmask = usernamestring.indexOf('â');
         lastmask = usernamestring.lastIndexOf('¢');
 
         usernamestring = usernamestring.substring(firstmask,lastmask+1);
 
         assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
       //*************Verifying Masking of CHILD GivenName details ******************
          
        firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.lastIndexOf('¢');
 
         givennamestring = givennamestring.substring(firstmask,lastmask+1);
 
         assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
 
         //*************Verifying Masking of CHILD SurName details ******************
          
        firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.lastIndexOf('¢');
 
         surnamestring = surnamestring.substring(firstmask,lastmask+1);
 
         assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";         
    }
                 if(RequestorType == "CS")
          {
             this.log.info "Getting CHILD LG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else
             if(myXML.LegalGuardian.size() == 2)         
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)                    
                {
                   this.log.info "Getting CHILD Active CLG details for NonCS";
                 
                   assert myXML.LegalGuardian.size() == 1;   
                   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";        
               }
           else
               {
                 this.log.info "Getting CHILD Pending CLG details for NonCS";
                 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "CS"))
    {
                                  
                    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")                
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 
 
              if(myXML.LegalGuardian.size() == 1)        
             {
                 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");  
             }
             else if(myXML.LegalGuardian.size() == 2)                
             {
                 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                                assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
                {
                  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";    
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)                  
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
           else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }                  
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";          
           //assert myxml.LegalGuardian.size() == 0;                
                                assert myXML.LegalGuardian.size() == 0;              
        }
    }  
     else 
    {   
                 //   this.log.info "BAU geting other's details";
                    
                    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() >> 0; 
 
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH") 
          {
            if(myXML.LegalGuardian.size() != 0)           
            {
                 assert myXML.LegalGuardian.size() == 1;   
                 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";          
            }
          else
            {
                 assert myXML.LegalGuardian.size() == 0;  
            }  
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 
          }                    
    }       
    
  }            // end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>1.31. CLG Change Completed [The legal guardianship setting for an underage UltraViolet member has been changed]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dececs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33KwzPo2EziANGd0cUgoqKIzi93MCiGJRJikm//hbauu3e3fvuc1/ESrIyVw5krXrFuueyHYAximIn8Muy+Fb5D982aNjQ27V9q8nUOJ5u1PZGE9ZgnWk1aYZrtPZ8pSxjnCDZx7Hux28VlmbqNbpZY3iVYTsc36HZlwbd2lXKKxRhYpqovNCVcu65Pu5c3b5VksjvBDp2cMfXPYQ7MewsgTLuEM2OfsdUeX+9obw6jN7tOA47FAVfDASR68IXGHjUK/VJ59XAnaVj+XqcROjDp4HfKh97syx7yeovQWRRLE3TFM1TRMfAjvVP5b1034wM2TeD27qr+4HvQN11LnoBSkGxHRhl4FpB5MS294NphmLownQN5SR9DOf/U6F+Obii+0tLn0BGWK9hW2fuxhbIRBHyISprC/mt8s/fVfC2V410H5tB5OEv638HCfkpcoMQGTV8j+yO7u8tfpOu91cEO7IP3QQ7KZoUbRLqEOHyLEKmk48dTJrPwOVr+cs5vncYgv+mJK/UM04Cm/omM6JjIRz/P/V6rtXNykp3E/TuyUIGD9To4Kz6m0G+mqqebMHQTBfa2xXCs/IN1KPUH+uvjfroq49Nvom2vBb6zqSrVJdSHc0uDNI0rX5m3KQXKs4md7e0H3PrFhsf061Nj05NdcP1VtrQmgB5jf3LxN/3N6JrlpSumc+r9TNX5UO6MWvSeDWecOP2KbCs4WXsJXbT32/8wclh2E2uL0/Was7tq+yskWvnoRtjmZ1Jl53tO5RZUvdOmrZlLrT9qDU1jzjevv2K6TmGIq4ROl+DLP5vGjQv6rH+WHSLSWGSzzNG74osd6titwtQ1wKZLABLFsYXMBGs48k+On0+owUw13pABGdlATLR2oqr+XwkZcZq5e5Wcq8nKAsuG4CtWCIvRClfibvNkNbXu3DL9ujdUhCMzSLY14ehMThmAxtOFFXJJqp8Vg5SPlElen2VWTlZX5SDwkxVrV5aHwReWUiZmF09ilJmT3brRbjV+AxepLkCuD5gNKlrKwPVWzGwvrDhQRor4HiVC7bSXa2UXFLBrCRYkxWJTe32diH0jHDvufaT8QExrhr91Xnfd5PdRTooXanfXZ76S3lfF+fSECy22n69OurrXlqCgwnY3z06DUffBJm1a2fifDscBTvZTuEEzCVBmAOSLhoocn8Igr4AFA44+aV7EJpB1+hl1JDFpSrv9pubs3PaYL1PuzrTbjPb8bo5OzVFya/uRsn+YCv2pjetjpZGqvExf9nitJo2dYeBeWjON9IgHuXmYL4s7WdivoGDqmENKffC9yKlNQTR5Wy7irWI180pPu8d01wLmynntkxXqS9C0zXDM66qwfwY0U0B1Vlqe05HcQlYigBA/6AdhLkitIukGnI23yqCDnpSnIDLgY1H7Oo0HKQu3NZBkI/W08PxozCGmEkClc0l0lZSqS0CoyjCYKlJvQPQBMuKBEvqCXMogvlWHmVbki9tQJS/5rF3zaMlCUCq70CTH5TqGs3H03jJceDsC5rf423llK+Npke3TkgaLychlyl4Yvq7dXBUPCfSomSpjUaTcb5Xk/7xQGaVSS9HaX1XktJjCJzJSLWPYiDqs3C7jcOqDyMYy6GnyPllusOHtrP36GG1wQgzWoQtVvP2mdbXpd0ospbMaLDwZ/UWX8KJeR541UM7W1fVZTNsGV3fFM9nahet6AAEPX7ROBk5yx5tLRs3M3MIjnudneQuL5x5abRTYbaYj9ZLr9ooNdLx2KMvKsVNwmm27GecNCfzxBDUgYrDyNkmbSuPpr7BbvW4me7oVdMJ3SPPJkeVC+sryyPFmqVG2FJmpTm3gTvPaoVwSC2oFEgtcyz3z/uLfgm9KbwN0K/T4SG8zQ/qebJ8Gj130rEk3YpgfF8WB5AslnvkVNDjPxOYQuIYNfOq2gkLFoRj5MeV92JXQV46CaE4jtEhR8ZtLfbaLEcLosSKTbHLSxLN0UyPBnSD51tCu3FnOTcUXyB2A990Cl8Fj7udUn8GCL0ORr6BoloaJNBGuPIHi0W+yrK/IMdv4GOkBoQnggYjtQHgu5LQYKVGlxPaXIsWabrBsW0SS6U8CeKpP42AGaPoM0dsfOKICwSd0EEFkSxOU0yOUxyTlJz0NIld5iXVX3yUEKoZFWyvw3LtBoUdL3RRAZjyAiNx0Utoh9cEUfj2ZGs6xFdpkV2Irwf9jxF+fXdPBtExnEIBF+EIiBQU/cZ3253GPZafY24/x3w3DxLDKc5zktk4cuANyedXvxqm6JRHt1x/IL7Dfmh/FXyyTH0N6uHMSB34aPvHjYAQSkI53u9VOekvp5ckTZNrHVoFnYqIeYqh6Ca1RDAhnOisBkfkUw8T1F/R0QfqL54f8s/4ktj2lzH5pD3SNeXr8i/uIkuEi7uITLo+/9uLzieXJG8xyuPvZF2XXFkKxH+81cAOLPSIeEYeWRAZv8r1ja0nPyTOYoY5vlWsCvJ5/qExYEDMOmSOBdGz8e8MfOf8s/CR5AeWmHTTPonRz2/KxYB6q+gQBokfy2LlKngemlec8TlEnV9Kv5m50r8PPp/jH/n8Rhkvyfjy9MpD1/nfyjXn2i4QkV3YuWJ5q+Tkakqc+9bTkP4A+P2c7vJ/mtOfI3n/Tfy75CmnX7+H9/8C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF8240BDE2C9DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\dececs_concat.pem</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-06-22</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF82425275355BDBE0401F0A079960F2</con:value></con:property><con:property><con:name>UserName</con:name><con:value>standardusername_20130619_062045</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>DF8240BDE2D6DC9EE0401F0A05997B85</con:value></con:property><con:property><con:name>FULL_NODE_USER_ID</con:name><con:value>DF82425275645BDBE0401F0A079960F2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" id="16c677b6-f520-424c-859c-233d39f17e8a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="f245ec71-a809-4a70-848c-36b8eb1bb550"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="92749247-f54a-4541-95a2-b53ad6c8ad1d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="aa874b4b-0aa5-41ba-933b-be696ac3d33a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU" id="aa640512-7782-42ad-b469-536a81c03732"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16ACF97A740E18ACE05305991F0A9199/User/urn:dece:userid:org:dece:16AD160FD79413DBE05307991F0A0996/Policy/urn:dece:type:policy:TermsOfUse</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="b2aa4e66-efd9-4533-8e23-d5191b75b3e3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="844d6c80-e576-4d3d-95e2-868bce023ff2">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/URN:DECE:ACCOUNTID:ORG:DECE:182288B606ED3B82E0533E991F0A7643/User/URN:DECE:USERID:ORG:DECE:182288B607353B82E0533E991F0A7643/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I6EP0rTP3olL7y1hFmEPCKgm+g4+OXOyHdlmibYJMW9NffpECliF7u/dTJdrN7dvfkJGccxZHtdTmHRBBGK6s4otzLrW0tTajHECfcoygG7gnsTbrjkWdXTQ9tt2iVYb+t/Y1dp9FstAK9NfNbuts0sd6qz2y9hnDQCGa1houb0pXzFIaUC0RFW7NNq6abdd0yp6bjuXXPsasN23nRKk+QcBlbulRNbQNqxdvaXIiFZxjL5bK6dKosCQ3bNC3jeTya4DnESOucrSvKEyWdjT+u+oAhinAVs9g4M0o+Zz73JiSkSKQJbHL5P+UyDbNlSB+fk/BEK/aCP6QBy5c9RBklGEXkE6n+jEHMmV/pRiFLiJjHPxZhmSqwDiusY8ulJ5pRhnZkoBLChCOdz5G1ifUAASRAMVQeH4Zt7eS4qeVbpwmiPGBJzMvL/4YHaAYRW4Cv821ZG2jHBzzQqc4ZYG9IcZRyksGNIusCYeCbaQI+PlTlLoGArEaES4KuuEJn7MLbW6670SchcPF/BrQznHWQJxSl0PkY9Japm00XcXZaO7/ujW+7uGatYNIat3MAu865oRjterlHyoJE6x3h6NU2JoP7xqh/MRIvszvLvn1BDg0vhufInLpRWks/WPzJGl0JILqonya9K7Me/gn5RIxE8HR/OZlFY7f/suzOwtfeAAWr2pXJLXfU9e+d5m3r+hJDPzUR7X6e+sZQXP81HV8/x5ibnwOY4/v34OrWJtlr5D6unh5TFBvGM1u+JJd88Ac9NHpv80YvuIluNuXu4S/btmd+ks5eAYvtUtFg2K9cyCkh8buYKQvx9SB39RZKfLgAKrSO2qW0w0ul3BHfkzNcr62mbTeb53Wz4dSc86Y9MGuOM2i1rAuz26i7zlZk1ij2IPYYDYjKpSR3TZvfAeLY40B9SPSMpVLpuPZLxD4SqDKkD/IQMMphyqQ8W8vwlbAls96XJFnO4izK3j649RprlRsmbult0g0EJGVNrpc0+QEwWRBQwq14zSWxuZC9eEdZKiKrmqEqhVRKe6JU1rPdZs3gJF5EoJAaMfPTCKqL+SLvjMHXX1tHmOfWh8E0P20/1rX/b9sC6eMT5cBVLecgxwgHLhd7W8jPBbd2C96G76Y+UQdL9lMkBK+RlH990UTxo+CIrGgLufDcN5SiGvsFFYn8jOCC6MV1LVVcnvvOdhzvyKq+V9MsS/MJuK5jJDK8oUo0THniAadSmT6m7A2oUUQxjroGCuB7yQt7GWIq5nQikIBYMqaSL4+49yfA1b0/lFRfHfuoKKWUrROwEodsvUi+WRTiX5812MPKT5rv5GfJEv9rYgdi7eSRdcprXxAaqpW6Aj5+4AVmMiyR4sWS3eCHAhxKXjYWTS6wCEmoWSrg5z8VpUptDWHMUiqGfS037CpljlN8LMD7cvoWJhfj4nVG/v15ppOcAhjkm46TPL66ZD11BGi4o7abpAcFtz7o/ya4ZXSdb+bvlp0+7XO88w8=</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>182288B607353B82E0533E991F0A7643</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92749247-f54a-4541-95a2-b53ad6c8ad1d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateCLGAttestation" searchProperties="true" id="69fd4170-842f-452d-b5ba-2a3dcb222763"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="50376d6d-121f-49b7-a38e-5003f16c248f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:CLGAttestation");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:CLGAttestation", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="6f62f720-8990-433e-b87f-e5bfb4b7fa27" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

//tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:CLGAttestation");


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="53731713-82f6-4689-b18d-e2d614c0f00a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_CLGAttestation" id="e1f50a3a-0e4f-4409-85f8-0e805d506f11"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_CLGAttestation" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:CLGAttestation</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CHILD}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="9d9dbe4a-7055-4988-8e66-537efed92ca4">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_CLGAttestation');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6ac2bd45-adeb-4c9a-8295-932d1e7e4a30">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73V1h+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrV2iD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>Child_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Child_User_Create_API</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E48705C62976FCB4E0401F0A079971D7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:CLGAttestation</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E486FC50804D1AE5E0401F0A05991EF2</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E2E22E83505CC024E0401F0A0599357E</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>CHILD_NODE_USER_ID</con:name><con:value>E2E25B1DF5BEDD19E0401F0A07991448</con:value></con:property><con:property><con:name>NODE_USER_ID_CHILD</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMAC" searchProperties="true" id="7d85ebf5-2378-47de-9c73-bcc3be05c78c" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="d4371971-21ff-4a90-a0e0-37d68d88fa6b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="1de7ab16-bf7b-4512-ae11-1599f01163bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageAccountConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="4285855e-3060-462c-b83f-1d458ec03956"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MAC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MAC" id="cbeadbfd-394a-4b1c-9e9a-4c96b103c67e"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MAC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageAccountConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:accountid:org:dece:${#TestCase#NODE_ACCOUNT_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="bf51df31-427c-436d-aab8-95c2f091660b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MAC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="9df4ad07-5eae-44d6-bbbf-fa0607afb8ef">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZk6LKEn73VxjOo2Gzucd0RxSLNCoqiOvLCSxKQFmUAkF//S1wtLWne86c+9BhV5KZ9WXmV1lZP7Hpe2wXYIyi2A2DsiK+Vv5pNqFFWyxd27Ibq1Y30bbWaba4GsNxrdamSbe2zU2lrGCcICXAsRnErxWWZrga3ajRHYOud+tct954aTCddaU8RxEmronKC10pZ74X4G6x7WsliYJuaGIXdwPTR7gbw+4UqMMu0eyaN0yVt59XlMWG0ZsTx4cuRcEXC0HkefAFhj71k3rS+Wnh7tS1AzNOIvRrTwu/Vn7Zpmn6knIvYWRTLE3TFN2hiI6FXftH5a10M0aWEmzD61owgzBwoem5FzMHpaLYCa0y8OwwcmPH/8Y1QzF07rqGMliDTD34UaE+NijQ/aWnJ5ARNmvYMZmbMx1tUYQCiMozXXmt/Pi7Cl5tjcgM8DaMfPxp/d8goeCEvPCArBq+RXZD9/cev0jX208Eu0oAvQS7JzTKaXIwIcLlSYS2bjZ0MSGfhctF+csZvjEMwf9Skp/UI04Cm/oiM6JrIxz/P/V6rNXVy9z0EvQmWzvFn2yGBhOttYx6X66rBu11BCiFrwWER+UrqHupf60/E/XOq19G+xnsUdVLMuZ6ekpN14O9M9FAf9hsj0M8mZ4YD67aR6AKy4HV8O3jfBcyozZoR3rUV7lRc6gtk1Bp6aw98UtH2bEW+hG5lqDu7SMftweXfmZG65geuoiTW1bnwDQ3K5n32WS5wLjVwkrHXzPNkQa5o4J3avss6Lu2s4alZDXEVHVYx02r2qr3L4wRvn7E9BhDHtcAnYsg8/+XDbojmrF5Xwh5p9iS4xmjN1VRxOQiCOA8tUGq8MAmfzsw4u390dm7cieleaBpPSAKvLeThirYy4CZSbyjCvO5mgkX0Oft0ZwYGiXgrXlVl1IxXYlzTXuXUsew5Pl5I3vJ+iKNVIALY8FRJV2ai7ohqSoIr7JMFTdytlOnaqpoK7FEHIhSdrhYcidGcuZCVmmo0wa7mjaS9XJO5L3z0B+dNobkqYIqC9OjPFU2nKhJfaCvFpDtJcT2MvQPYWk14x+M+ge0A6iX0mRPcFGNfaoaM3Yk6mYhM55lqiL3VQ2nglZEJZektD+fXT5yIfCqYPlSJhlgcs0FNITeiF4v+9hcNAJVB6loF8YDKbXGNyCqRqcl4ZqroZTqkj4b9VRdSSVQyEQp9fCGHTkb2TlBTsv6Btg9FkbQpEUvIN8D/QTPjWPJlHtg488ZyOkOdBuuuQxTe91ORW3VH4RrhbgZAU3ieQ0QQDTIQyP558GQnzfGB7fDumi47YU+cqKSyoSD/emS0W2XG9uT0aIhbvetiexOONNyKMWD7I7bA0VB1oBxNNPSV5QuBu6lOR7MlsiNVpd41NCYpttulPRFMluKodey3per2aCaraBmjCfT2WJyybLRcde+ePH7mH+Ppn1VtMcjhCYYVina7PFGW2wIq/cd4dNWp1GjBGyVB0De2bbkEgLz77srCd91VSLkJcczlYWFIE+BLFclhRc1bdtzmAmU58mMGamKZHkkTefVUvdKa4EXSaVoc7E+rNgevTaAVTjT6lLP1maNan+J1trIM+YxSA/zbcAwtHzQ3rdqakM1Z4ClpFOenCK+lChgZo4PfTobzJs0c9Qsrz/tgBmXTdl9Nnbs9Xlvr/ekKKuHo7MygDc3HjimEIotSpoh6SpoX89bpiozTvegnx02PsxEg9SsMA4NXtJ7Gj3LRBEMrjJsADbDq4u0UwWpsC+BTDUJLU6bpYNXwcgdG1JCSJs80GW3Yel/5VhOsdIzx44C0MBnjklXjklge6wqbZHBjaZwwIvU5mXpqLXmw37nQGvL4b7EV3uUHbtefRy0U2NQXTDntOXstMWio4iOUA22K4fbxDxtXqCG+vuW7Op7MWjWvbM6VLXGzKW8M71DxxQPSyOFCSQuvvSoTpRUeX/t+pcLV2dn/mSanJSZOcDM2dkcF510N3lvUlQknxuX1vqk9ZYhXF3vkc9N8i68tlHqscE+deDb7DVNNjsE49syv4cVsdwjl6MZ/3mOyyWuVdsWqt1DPgziGAVx5S23yme4bkImPdfqkpvzuhaFOtvm221W4Jge3xYkuk4zPRrQrU6nKTa427B3RfEJohAGWzffKx9nr5f1nwFCv4tRYKGodgoT6CBc+YPHPF9lJdDJFBIGGJErq/JPi+FEscHyHCtxLbrdoJudVhO06Z5IxHQTVMqjMB4H4whsYxQ9j8qtp1FZR9A9uCifp/OhApOpAsckJUfzlMQe83IyXwKUkIk7yofeLltvNyjs+gcP5YApP7QSD70cnEORIApff9maCXEhbTVpuph2vo3v87dbKoiO5eYKOA+GR6Sc6Iuhn7tF8m3EDP0Y8c09SCw3H2pIXuPIhVckz58+6JLz5M6VPKQb5rvqZ8GTW+pzRPedrJML74y/v4nISE2GrrdbQY7my/ElOZ2SogStfKCMiHuKoegmNUUwIVPh2Qj3KKDuLqi/GsjvqD/tfJc/40tiJ5jG5DT7hDDlYvkXr7EpwvlrTCGEz/72qfe0JclbjLL4K5ngkUdbjviP7zrYhbkeEU/ITxpG1ke5vvD1sA+JM29fbmDnq3z8Pn/DChgSty5pYWH06PwrB19t/iy8J/mOJSZs2iQx+v5LOe9NrxUTwjAJYkWsFILHflngjM8H1P1Q+s1NMQD/etFk+NsXzVIdTknn8s3KXdf9d+WaW9AFImKF3QLLayUjj3OyeWA/9OdfAL9u0Sz3pxb9HMnbb+LfJQ85/Xwe3v4H</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11018 - STSCreate - retailer - unamepasswd - Different users on save account share same node accountID - P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>1_STS Create Tokentype unamepasswd - Payload</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>DC428B882C31FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>829</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:DC428B882C23FB8CE0401F0A07996D53/Policy/urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageAccountConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADC428B882C23FB8CE0401F0A07996D53</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\STSAPI_Projects\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeTestRequest" searchProperties="true" id="1ed1186f-c5dd-457e-8f01-8a0cc98d07bb"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeTest API" id="e55544f2-194d-400f-9b20-0f2f08c38bf1"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("RetiredAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("RetiredAccountID"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status",CallingTCase.getPropertyValue("user1Status");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("mergeUser1"));
testCase.setPropertyValue("user2Status",CallingTCase.getPropertyValue("user2Status");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("mergeUser2"));
testCase.setPropertyValue("user3Status",CallingTCase.getPropertyValue("user3Status");
testCase.setPropertyValue("mergeUser3",CallingTCase.getPropertyValue("mergeUser3"));
testCase.setPropertyValue("user4Status",CallingTCase.getPropertyValue("user4Status");
testCase.setPropertyValue("mergeUser4",CallingTCase.getPropertyValue("mergeUser4"));
testCase.setPropertyValue("user5Status",CallingTCase.getPropertyValue("user5Status");
testCase.setPropertyValue("mergeUser5",CallingTCase.getPropertyValue("mergeUser5"));
testCase.setPropertyValue("user6Status",CallingTCase.getPropertyValue("user6Status");
testCase.setPropertyValue("mergeUser6",CallingTCase.getPropertyValue("mergeUser6"));

//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("RetiredAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMergeTest_API").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeTest",CallingTCase.getPropertyValue("expectErrTypeAccountMergeTest"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeTest_API" id="ff916405-df6f-46b9-a011-a6689d00989e">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeTest_API");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeTest_API" id="ed28c5b3-0007-40cc-849a-38beaea556d6"><con:settings/><con:config service="AccountMergeTest" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Test/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeTest_API" mediaType="application/xml" postQueryString="false" accept="" id="68af8f81-3609-4b53-bd4f-ed894f860322"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#RetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="26183098-d0ae-4f26-b4bb-e416676cf6a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeTest_API');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="d8f0ba87-2757-4ec7-ac6d-427210632ea1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>SurvivingAccountID</con:name><con:value/></con:property><con:property><con:name>RetiredAccountID</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyGet" searchProperties="true" id="23d09377-9e3c-47e0-92cd-8d7e2ed8d6fd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="3f9a5121-1ba4-4ce7-9098-b2a7278fb180"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("policyCLASS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="21cf2586-d1ed-4fdc-832a-472a816d6528"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
	
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			log.info ""+URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8");
			tC.setPropertyValue("policyClass",URLEncoder.encode("urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"), "UTF-8"));
			
			
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("policyClass","urn:dece:type:policy:"+callTC.getPropertyValue("POLICY_CLASS"));
			}

tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyGetResponseType"));


if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}




</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem" id="eaa96ed5-3cca-4156-8a09-c54bea8b60f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Get" id="10fe7e27-0ca1-4b5b-900d-075f1886f604"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicyGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Get" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#policyClass}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="3764bed9-292d-4b3e-8638-5dd84e1225de">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Policy Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);


 </script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="3bb99271-32ca-4459-9ddc-4ca05ee135c6">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert XMLbody.size() > 0;

if (XMLbody != null) {
                def myXML = new XmlSlurper().parseText(XMLbody);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}

log.info "xmlPolicyClass [$xmlPolicyClass] - tcPolicyClass[$tcPolicyClass]";
                                
if (httpStatus == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("PolicyID",PolicyID);
}


tC.setPropertyValue("policyExists", policyWasFound);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return policyId" id="db2d7a86-6720-4405-a764-6b8d396ae082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));

</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6pKE333V1jux5ThoqhYO6kaLhKMqFy8vnyFw4gogjIgyK8/A26NZif77PM9pMw0PT2ruxfNmp/Y3vtsF2CMotgLg6oqvdT+10A0z3HtRp1r20y9ybf5+qrRseuw1aLXbMu2uRaqVVWME6QGOLaD+KXG0kyjTjfqDG/RXJdpdDn6mW63lrXqFEWYhCYuz3Stmu39AHfLY19qSRR0Qxt7uBvYe4S7MeyaQBt0iWfXvmKqvf68oCwPjF43cXzoUhR8dhBEvg+fYbinflIPPj8d3DU9N7DjJEK/znTwS+3X3jRNn9PGcxi5FEvTNEXzFPFxsOf+qL1WrpuRowbr8LIW7SAMPGj7Xm4XoDQUb0KnCnw3jLx4s/8mNEMxdBG6jjJYh0wz+FGjPg4o0f1lpAeQEbbreGMz12AGWqMIBRBVJ4b6Uvvxdx287LUiO8DrMNrjT+v/BgkFJ+SHB+TU8TWzK7q/j/hFuV5/IthVA+gn2DuhYUGTgw0Rro4jtPaygYcJ+RxcLdtfzfCVYQj+l5b8pO5xEtjUF5WRPBfh+P/p132vLlGmtp+gV9sMBHfXbPPnBuwvcl7XLKfZMuwx33wpIdw7X0DdWv1r/ZmoN1792rSd77DPOD3JT89j+riF4WIXQR3kST4Yj9KhstrzDS7ghe0CurTpjxWVbaKDcE4Yhl/uUqHVlyQ3cHuC9F5Zb8eJZybaiUmpPdSDzrH/JMFjzO5yzo4P5lv/CZ3W6ZA/SUKeqcF+8AYGa6+PBAuu7SdHbqkKd4zdviKCyiydthlT5xNjn6s9Lj5R+OUjp/scirze0blMsvh/ztG8ZMf2bSEWk2JNXs8YvWqqKiW5KIKz6YJUFYBL/rZgSAp93Ow8hU9pAeh6D0ii4G/lgQZ2CmAmsrDRxOlUy8Qc9AV3OCUbrQrwl4JmyKmULqSprr/J6cZylOl5pfjJMpeHGsDlZnGjyYY8lQxL1jQQXmyZJq2UbKuZWqrqC6lCAkhydsgdhY+RknmQVTnN5NiFySXL+ZTYe+fBfnhaWbKviZoimkfFVFcNSZf7wFjMINtLyN58sD+ElcVEuNvUP6AtQL2UJmeCXLN2qWZN2KFk2KXNerRpqtLXdJyKepmVUpHT/nSSf9RCFDTR2cuZbIHxpRbQEntDejnvY3vGBZoBUsktN7/LqTO6AtF0Oq2Il1oN5NSQjcmwpxlqKoPSJsmpj1fscLNSNifY0LO+Bbb3jRF1edYLyPPAOMEzd6zYSg+s9lMGNowN9DjPnoepu+ykkr7ov4dLlYQZAl0WBB0QQDQoUiP1F8BAmHKjg8ezHhqse+EebaKKxoTvu1Oe0R2vMXLHwxknrXftseKNG7azoVQfstvGDqgqct6ZjW47xoIypMDLW6P3yRx50SKPh5zOtLwOVzFmyWQuhX7beZsvJu9P2QLq1mhsTmbjPMuGx20n9+O3kfAWmX1NckdDhMYYPlG03ROsjsSJi7ct4dPaoBFXAa4mAKBsXVf2CIGFt+2FhG+GJhPyAk1MFXEmKiZQlCdZFSRdX/c2zBgq02TCDDVVdnxSpvNibviVpShIpFO0PVseFmyPXlrAKYPpTbnn6hPuqT9HS33oW9MYpIfpOmAYWjnob2stdaFWMMBRU1Mgb5FQSVQwsUeHPp29T1s0c9Qdv2/yYNLITHaXjTbu8rxzyZxwl4u7V2dhAX9q3XFMJRSbVXRLNjTQubxvmaZOGoYP99lhtYeZZJGelZtDS5CNnk5PMkkC7xcbtgCb4UUubzVRLvdXQKbZhBan1XyDF8HQG1lyQkib3NFlu2Lpf+VYQbHKI8eOItDBZ47JF47JYH18UjsSg7mWeMCz1BUU+ai3p4M+f6D1+WBXEZ56lBt7fnMUdFLr/WnGnNP2ZqvPZrwqbcSnYL3YNFaxQNs51FF/11Y8YycFraZ/1gaazk08yj/TW3RM8aAyVJlAbsR5j+Kj5EnYL719njea7GQ/NpOTOrHfMXPerI4zPt2O31oUFSlnLm8vT3pvHsLF5TvyeUjejJcxSt0P2IcJfNVeZrLaIhhfl8V3WJWqPfJxtOM/67jC4jn1denaPRRiEMcoiGuvxa5Cw3UTovQ8p0u+nJe11GkybLvR4UC7DQS+J9NNmunRgG7zfLvNS1exd0HxCaIYBmuvOKuQs5eP9Z8Bwn0Xo8BBUf0UJnCDcO0PEYt6VdXAICokDDCyQiKXW1yD7Ygdpg1anAQIYNDmANdpsoIosqDH1KrDMB4FowisYxQ9SuXOg1Q2EPQOHir0dCEqMFEVOCYlOdqnJPaZ55P9HKCEKO6oEL1dttnhKOztDz4qAFP70El89HzYHMoCUfjyy9ZtiEtru0XTpdr5Nr/Pz66lID6OVzjgIhkBkXaiL0R/85rJtxkzzH3G1/AgcbxC1JC6xpEHL0geH33QpeDJjStFSlfMN9fPhoew1OeMbic5Jw/eGH+7ExFJTUTX67UhR/v5+JycTknZgnYhKCMSnmIoukWZCCZEFZ6tcIcC6haC+itBfkP96eSb/RFfEm8CMyZv854Qplou/+I2ZiJc3MZUQvjsb696D0eSusUoi7+yiT65tBWI/3ivg11Y+BHzmPykYeR8tOuLWHfnkDyL8eUFbrEq5Pf5G1bAkIT1yAgLo/vgXwX46vBH463INywxYdMqidH3T6rFbHqp2RCGSRCrUq003M/LEmd8PqDuh9NvYUoB/OtGk+FvbzRzbWCSybW3azdf79+d615JF0ju8sS/xPJSy8jlnBweuHfz+RfA30Z0gxNotsXToNW+jWiO5zmW4W8FfMjk9Tfz75a7mn5+H17/AQ==</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_ 20008 - SAMLExchange - retailer - saml2 - FORBIDDEN - Active full user - with deleted ULC</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create and SAML Exchange - FUNC</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>837</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6">
      <PolicyClass>urn:dece:type:policy:UserLinkConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D</Resource>
      <RequestingEntity>urn:dece:org:org:dece:7600</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:D84127385A77AB9FE0401F0A0799779D" CreationDate="2013-03-19T05:14:46.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>952</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5935459c-5982-4cb1-9974-1d4d88038a65</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9bbb88e5-07dd-4d4f-ba3c-1c734ce9be3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserUpdate" searchProperties="true" id="16f91eb6-d036-4044-a104-3416700f4139" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9ecbac18-bd7a-4df2-b9d2-c9fb4bc9817c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("userStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="dc3fbb0f-7f56-43ad-b37a-35c38bae3724"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyDeleteResponseType"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
				tC.setPropertyValue("PolicyID",URLEncoder.encode(""+callTC.getPropertyValue("PolicyID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			tC.setPropertyValue("PolicyID",""+callTC.getPropertyValue("PolicyID"));
			}
			
if (tC.getPropertyValue("expectErrType") == null ||
	tC.getPropertyValue("expectErrType") == "") {
		tC.setPropertyValue("expectErrType","SUCCESS");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="98cfc05d-90a4-4012-b47d-f1f449632e22"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Update");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Update" id="fb4ef185-64fb-4374-8300-43409b18034e"><con:settings/><con:config service="AddNewUser" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}" methodName="UserUpdate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Update" mediaType="application/xml" sslKeystore="RET_concat.pem" id="0a991f82-1623-4495-b24c-9cc11cc37183" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#userStatus}" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#UserName}</GivenName>
		<SurName>Ganji</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	       <Value>raju.ganji@compugain.com</Value>
               <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>rajuganji@gmail.com</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>UK</Country>
	</Address-->
	</ContactInfo>
        <Languages>
		<Language>de</Language>	
	</Languages>
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
      <LegalGuardian>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</LegalGuardian>
       <Credentials> 
               <Username>${#TestCase#UserName}</Username>	
                <Password>${#Project#password}</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
  <con:entry key="UserID" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b23cb4e2-2bd7-421f-91f3-9470fd51d912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Update');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="cd84f76e-b48f-43aa-8526-34731eaf10da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	userid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("NODE_USER_ID",userid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case" disabled="true" id="c3f3c863-6773-4ad7-883e-f4966c2bcb43"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("SecondUserName",tC.getPropertyValue("SecondUserName"));
callTC.setPropertyValue("password",tP.getPropertyValue("password"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70082 - STSCreate - llasp - unamepasswd - for the user who updated to Standard from Basic</con:value></con:property><con:property><con:name>sName</con:name><con:value>STS Create Tokentype usernamepassword - Linked LASP Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D82F859216DC97E2E0401F0A05996483</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130122_043244</con:value></con:property><con:property><con:name>SAML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\DECE\RET_concat.pem</con:value></con:property><con:property><con:name>userStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete" searchProperties="true" id="853b66b1-2855-4d93-8f16-0c0514cd932e"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6a0df690-63bf-4b9c-ae59-c6c2ff9420bf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("Policy Delete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete2" id="afcc2bf8-a03d-442a-bb54-83b79c3a8deb"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="UserPolicy_DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete2" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema/2010/10/dece" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:EndUserLicenseAgreement</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#Project#NODEUSERID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#Project#NODEUSERID}">
            <dece:Value>active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Policy Delete" id="1ada6391-4467-46ac-b5a9-f8d47363030a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="AccountPolicyDELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy Delete" mediaType="application/xml" id="7926fdfc-6744-494b-ad3f-86dbd869e045" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="17df3acf-9f74-4983-9c2c-7ca80c9272ea">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('Policy Delete');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

log.info status[0];
log.info contentLocation;
log.info connection[0];
log.info contentType[0];
log.info contentLength[0];

tC.setPropertyValue("status",status[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
//tC.setPropertyValue("contentLocation", contentLocation[0]);

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal[0];

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.size());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="3d442766-d852-4dda-8d00-1ca77ae70830">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");
log.info(expectErrType);
def XMLbody       = tC.getPropertyValue("XMLbody");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = true;
		doContentLocaton  = false;
		dobodyXML = false;
		
	break;
	case "FORBIDDEN":
	default:
		errorReason = "assertion_not_found";
		errorID = "urn:dece:errorid:org:dece:securitycontext:unauthorized";
		errorLink = "https://qa.q.uvvu.com:7001/deceerrors/error/error_response.html";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
/*if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
} */</script></con:config>
      </con:testStep><con:properties><con:property><con:name>NODE_USER_ID</con:name><con:value>D84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwumAlqQIBRcUVN27ewmFAlE2G1V//Dho9SU5yvrzflU5PT/fTCz3PPCPDc+kujxCMYifwq4r4UvvHoKy9CcG+0TQBaLCsBRv7NttqdGALdEwDAthhalUFoQQqPooNP36p0STFNEiuQVEa2eo2mW6Te2pzjF6rrmGEsGms8kTWqrnn+qh7dftSSyK/GxjIQV3f8CDqxqC75NVxF2t2jTum2uvzDeXVYfR6iOOwSxDgCUOErgueQOARz8QHnWcTdZeO7RtxEsE3nyZ6qb2dzbLsKWOegsgmaJIkCZIjsI6JHPtX7bVyPwxNxbeC27pn+IHvAMN1LkYJSoXxITCrvGsHkRMfvG9MUwRFlqYbMAcNQLH+rxrx28EV3Q8tfQAZIaOBDgZ1N7aAFoygD2B1tVBear9+VsHbWS0yfGQFkYc+rf8bJOin0A1CaDbQPbI7up9b/CJdr88QdBUfuAlyUjgp2yQ0AETVWQQtJx87CDefiarX8ldzdO8wCP5LSZ6J9zgxbOKLzIiODVH8/9Trfa1uVtaGm8DXqekHKGkfizgNqPF6z9X3vKzavpWfXq4Q3ivfQD1K/bb+3KiPvno7BNZHitWms71eX+68MI20Y1CMW/GMiPXD+tQppsLFzTfaTs9D5rjT2dYYHXpyT2H7WfNopfFE7Aj0eLSxNLbSPPUnyW7qDDpN3XAhKcoztXCbCpCbEVswCtPMT6K8BmhEZGZSH+lpwLnNgOrslYCONuOF5F2SYt1eC/KqMqGzrT1hhgtCO7Oqv2VN8uV3TO9jKOMaweIaZPl/2yQ50YiNx6JXTgoLf54xfFUVpVcXez0e9mw+UwTeVoTxhZ8I9ul8ODl9LiMFfr6SeZEv1AWfifZOXM/nIykz12tXXyuyLKgLNhvwO7GCN0QpX4v6dkgaGz3c0TKpLwXB3C6CPTMMzcEpGxzARNXUbKIphXqU8okmkZurzM7x+qIeVWqqrZjK5ihw6kLKxOzqUZSyw0TfLMLdisvARZqrPNvnqZXUO6gDzVtTgFkcwFEaq/zpKhcOam+9VnNJ42cVwZ6scWxaT9ZD4Jnh3nMP74wPsHHN7K+Lfd9N9It0VHtSv7c895fKnhHn0pBf7Fb7zfpkbOS0AgYTfn/36DQdYxtktt7JxPluOAp05ZCCCT+XBGHO43SRvKr0h3zQF3iV5Z380jsKraBnyhkxpFGlzrn91rZwzltk9EnXoDodajfetGbnlij5dX2U7I8H9bCVp/XR0kxXXMxddiitpy3DoUAeWvOtNIhHuTWYLyv7mZhvwaBu2kPCvXBypLaHfHQpDq5qL+JNa4qKvWNZG2E7Zd225arMIrRcKyxQXQvmp4hsCZChiV2RjuIKb6sCz/ePq6MwV4VOmVRTyeY7VTB4WYoT/nKk4xG9Pg8HqQt2DB/ko830eHorjClmkkBkcwm3lVTpiLxZFmGwXEnykV8Jth0JtiQLcyDy850yynY4X6sBVv6cR/maR1sSeInR+RY3qDArkoun8ZJl+cIXVr7MHdRzvjFbHtk+Q2m8nIRspqKJ5eub4KR6TrSKkuVqNJqM872W9E9HPKsscjlKGb0ipaeQdyYj7XASA9GYhbtdHNZ9EIFYCT1VyS9THR07zt4jh/UmJcxIEbTplbfPVn1D0keRvaRGg4U/Y9pcBSVWMfDqx062qWvLVtg2e74lFgWhR2sy4AOZWzTPZk7Tp8MqG7cya8if9gY9yV1OKDhppGsgW8xHm6VXb1aa6XjskReNYCfhNFv2M1aaz+uMKWgDDYWRs0s6dh5NfZPeGXEr1cl1ywndE0cnJ40NmbXt4WLNUjNsq7PKnN0C3bPbIRgSCyLlpbY1VvrF/mJcQm8KbgP083R4CG/zg3g/WT6MnjvpWOJuhSC+L8sLSBGrMr4VjPjvBKaUOGbDuqp2w5IFoRj6ce21PFWSl26CKY5jdvGVcVtLLapNSpLcYiSalmlSIlmSkkmebHIcKzHcneXcUHyC2At8yyl9lTzudkv9HSDwugj6JowaaZCAA0S1v1gs81VV/AW+fgMfQS3APFGUqU6z3RFbFCtSJNOUmk2J69C8JJJNkWnRteokiKf+NOKtGEYfOSL3gSMuIHBCB5ZEsrxNEb5OUYxTcjbSJHapp9R48mGCqWZUsr0uzXaaBHK80IUlYMILzMSFT+EhvCaIQLdfumEAdJUuJO0fZdm73vTfhvh5754NrGM6pQIq4xEgrij8gvCy92C+DZqi3wd9N88nplNe6Di1ceSAG5KPW787pmyVR7vgqO6QH5qfBR+sEp8DejgyUwc8ev7xHMBsEvON13tJzsbT+SlJ0+RahHbJpSJsnqAIsk0sIUgwISq04AR94mGC+BEXfaD+5Pkh/4gviQ/+Msbfs4dbpnpd/uAhsoSofIgouOXzn75yPrjEeYthHn8l67n4vVIi/uuTBnRBqYfFM/yTBZH5u1xf2HrnB8dZDjDHt8tVyTyLb5oCBNisg4dYEL03/pWBr5x/FD6S/MAS427aJzH8fqdaTqeXmgFAkPixItaugvcT84ozLkLY/a30h5kr93sj8zn6lsxv1fESzy7PqD10nf+t3HCu7QIgPoWcK5aXWo7fpdi5b7+b0G8Avx7SPfFvQ/pjJK9/iP+UvMvp5+/h9V8=</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00011_US_UserGet_FUNC_YOUTH_SAU_Get_CHILD_Blocked_tou_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Get_GeoProfile</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>765</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD84127385A77AB9FE0401F0A0799779D</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD841235B02690A67E0401F0A05995219</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AD8412DEC2C19E6E5E0401F0A059962B6</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E608A05B1126BA3FE0401F0A059926D1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
    <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
        <Reason Language="en">The policy was not found.</Reason>
        <OriginalRequest>https://qa.p.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E6170EEF63CD2F20E0401F0A05994E39/Policy/urn:dece:policyid:org:dece:E617180F360A7374E0401F0A05995FE1</OriginalRequest>
        <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/07/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="9eefa1a9-efcc-493d-a73f-76683cebfde6"><con:settings/><con:testStep type="groovy" name="Set Pem" id="6512c4b0-42ef-4467-b104-ffa33eace57b"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true" id="e67f8294-fae8-473e-af1e-f2345ab28bc8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String nodeId = testCase.getPropertyValue("nodeid");

log.info "nodeId: "+nodeId;

if (nodeId == "dece:cs")
	{
		nodeId = "dececs";
	}
else if (nodeId == "coord:cs")
	{
		nodeId = "coordcs";
	}
else
	{
		nodeId = nodeId;
	}
String certPath = testProject.getPropertyValue("certPath");

File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
File f2 = new File(certPath+"/"+nodeId + ".jks");
File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");

boolean imFine = true;

if(f1.exists()) 
	{
		keyStorePath = certPath+"/"+nodeId + "_concat.pem";
		pwd = "123"	
	 }
 else if(f2.exists())
	 {
	 	keyStorePath = certPath+"/"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else if(f3.exists())
	 {
	 	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
		pwd = "abcd1234"	
	 }
 else
	 {
	 	log.info "Error!";
	 	imFine = false;
	 }


if(imFine)
{
	log.info "keyStorePath: "+keyStorePath;
	def callTSname = testCase.getPropertyValue("sName");
	def callTCname = testCase.getPropertyValue("tName");
	
	def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
	
	callTC.setPropertyValue("keyStorePath","$keyStorePath");
	
	SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
	SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
	log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>UVTCAlternateEmail_PostRequest</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonTestSteps</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" id="e2c4e4ac-425a-4711-bf15-1e0925e0b8a1"><con:settings/><con:testStep type="groovy" name="Rename Test Cases from external" id="bf86a2d2-4144-4811-a43f-1013547ebc99"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "STS Create Tokentype unamepasswd - Portal:CS";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\raju.ganji\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

	newTestCaseName = br.readLine();
	log.info "Input Test Case Name: "+newTestCaseName;
	
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		targetTestCase.name = newTestCaseName;	
	//}

}</script></con:config></con:testStep><con:testStep type="groovy" name="Rename Test Cases internal" id="4380f443-dbba-469e-a609-36e3fa51657a"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "STS Tokentype DeviceAuthToken - Device Role";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		//targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace("Copy of ", "");	
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeRequest" searchProperties="true" id="789968d3-8176-4b31-8f47-431e3011758b"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMerge API" id="80d70818-b5a8-4794-8ce0-8d82f461f03e"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("sName");
def callTCasename = testCase.getPropertyValue("tName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
testCase.setPropertyValue("RetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"),"UTF-8"));
	testCase.setPropertyValue("encodedRetiredAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("survive_assertionAccountIdFULL"));
	testCase.setPropertyValue("encodedRetiredAccountID",CallingTCase.getPropertyValue("retire_assertionAccountIdFULL"));
}

//User Details for Merging two Accounts
testCase.setPropertyValue("user1Status","active");
testCase.setPropertyValue("mergeUser1",CallingTCase.getPropertyValue("survive_assertionUserIdFULL"));
testCase.setPropertyValue("user2Status","active");
testCase.setPropertyValue("mergeUser2",CallingTCase.getPropertyValue("retire_assertionUserIdFULL"));

testCase.setPropertyValue("survive_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("survive_assert"));
testCase.setPropertyValue("retire_assert","SAML2 assertion="+ CallingTCase.getPropertyValue("retire_assert"));
//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMerge",CallingTCase.getPropertyValue("expectErrTypeAccountMerge"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMerge_API" id="476e4efc-f319-4609-aa59-39cb705eb97a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountMerge");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMerge" id="5112a73a-602e-4296-8f8b-3bf52b94d139"><con:settings/><con:config service="AccountMerge" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/{RetiredAccountID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMerge" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="" id="1b6b496a-33ed-4a80-a599-3f09e2d5fd02"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#retire_assert}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#survive_assert}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:AccountMerge xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/schema/md/v1.2/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decellc.org/schema/2012/12/coordinator dece.xsd ">
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user1Status}">${#TestCase#mergeUser1}</dece:UserReference>                
<dece:UserReference ResourceDisposition="urn:dece:type:status:${#TestCase#user2Status}">${#TestCase#mergeUser2}</dece:UserReference>                
</dece:AccountMerge>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SurvivingAccountID" value="${#TestCase#encodedSurvivingAccountID}"/>
  <con:entry key="RetiredAccountID" value="${#TestCase#encodedRetiredAccountID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="8b0dbffb-cde9-43ff-b2ab-4d8ab9a34c14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMerge');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="1d6adba7-5667-4993-a3d5-c0da8990549f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMerge}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = false;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.40. Account Merged Notice [Your UltraViolet account has been merged with another UltraViolet account]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SurvivingAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>RetiredAccountID</con:name><con:value>urn:dece:accountid:org:dece:DF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedSurvivingAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D818E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>encodedRetiredAccountID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF7DD728D87CE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user1Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser1</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D828E14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>user2Status</con:name><con:value>active</con:value></con:property><con:property><con:name>mergeUser2</con:name><con:value>urn:dece:userid:org:dece:DF7DD728D88AE14DE0401F0A05997D5C</con:value></con:property><con:property><con:name>expectErrTypeAccountMerge</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\User_Notifications\RET_concat.pem</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>survive_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8uwuWElqRoEFRU3cOPmLRyGRdlkQNBf/w4aPUlOcr6835VOT0/30ws9zzxjw/fYDsAYxYkbBmVZfKn80zR52uI4prbjjXat3uKMWrvO1GscbEKWqUOaa9CVsoxxiuQAJ0aQvFRYmuFqdLPG8Brd6nBch6k/MTyjV8orFGNimqg8kVO57wW4c3X7UknjoBMa2MWdwPAR7iSwowJl3CGaHeOOqfL6fEN5dRi/OkkSdSgKPpkIIs+DTzD0qWfqg86ziTuqawdGksbozaeJXypvZ7Mse8q4pzC2KZamaYrmKaJjYtf+VXkt3Q8jUw6s8LbuGkEYuNDw3ItRgFJQ4oRmGXh2GLuJ439jmqEYujBdQzmsQaYe/KpQvx1c0f3Q0geQMTZq2DGYu7EFslCMAojKy4X8Uvn1swrezmqxEWArjH38af3fIKHghLwwQmYN3yO7o/u5xS/S9fqMYEcOoJdi94QmRZtEBkS4PIuR5eZjF5PmM3H5Wv5yju8dhuB/Kckz9R4ngU19kRnRtRFO/p96va/VzcrK8FL0enaCfr81lePJOdHTlF0sj8amsRifMHi5QnivfAP1KPXb+nOjPvrq7VC0GjI6rM9ZCTsLlV16Q6clyJm/dy6UfzY1MXNlzeSkw7CvGkm0STWKEqeZprfj4Xrh2pvNyZ6sPcqUp7MS3ZIOl8CXdtXqaioOR64UNIbe1K5uq3LspOcmSgMutvoNDfGj8cAK3BaeJBultdHOvfZRrdaXE7Mpy3SoiyViq79pu9NVtT1O5BmdNw8vv2N6H0MR1widr0EW/zcNmheNxHgsusWksMjnmaBXRZa7VbHbBahrg0wWgC0L4wuYCPbh6BzcPp/RApgve0AEZ2UBMtHeiqv5fCRl5mrl6Su51xOURT0bgK1YIhuilK9EfTOkjbUebdkerauCYG4W4Y4bRubgkA0cOFE0JZto8lnZS/lEk+j1VWbnZH1R9goz1ZZcab0XeGUhZWJ29ShKmTPR14tou+QzeJHmCqj3AbOUuo4y0PwVA7mFA/fSWAGHq1xwlO5qpeSSBmYlwZ6sSGxat6dH0Dejne8574wPiHHN7K/Ou76X6hdpr3Slflc99lV5x4lzaQgW2+VuvToY696pBAcTsLt7dBuusQkzW29n4nw7HIW67JzgBMwlQZgDki4aKHJ/CMK+AJQ6cPNLdy80w67Zy6ghi0tV3us3N2f3uMFGn/YMpt1mtuN1c3ZsilJQ1Ufpbu8ozqY3rY5U87TkE/6yxafqqWm4DMwja76RBskotwZztbSbifkGDqqmPaS8C9+LldYQxJez4yn2Ilk3p/i8cy1rLWymda9leQq3iCzPis64qoXzQ0w3BcSx1PZ8GiUlYCsCAP39ci/MFaFdJNWUs/lWEQzQk5IUXPZsMmJXx+Hg5MEtB8J8tJ7uD2+FMcVMEqhsLpG2kkptEZhFEQbqUurtwVKw7ViwpZ4whyKYb+VRtiX5Wg6I8uc89q55tCUBSJwOmvygxC1pPpkmar0OzoGwDHq8oxzztdn06dYRSWN1EtUzBU+sQF+HB8V342WcqsvRaDLOd1raP+zJrLJodXTi9JJ0OkTAnYw05yCGojGLttskqgYwhokc+YqcX6Y63rfdnU8Pqw1GmNEibLFLf5ct+4akj2JbZUaDRTDjWnwJp9Z54Ff37Wxd1dRm1DK7gSWez5Qer+gQhD1+0TiaOcsenGU2bmbWEBx2BjvJPV4489JI12C2mI/Wql9tlBqn8dinLxpVn0TTTO1ndWk+r3KmoA00HMXuNm3beTwNTHZrJM2TTq+abuQdeDY9aPWIW9k+KdbsZEYtZVaa1zdQ9+1WBIfUgjoBqWWN5f55dzEukT+FtwH6eTo8hLf5Qb2fLB9Gz510qKRbEUzuy+ICksVyj9wKRvJ3AlNIXLNmXVU7UcGCcIKCpPJanCrISyclFMc1O+TKuK3FXksUW2xbbLNtiamLEl2nmR4N6AbPt8RG985ybig+QeyGgeUWvgoed7ul/g4Q+h2MAhPFtVOYQgfhyl8sFvkqy8GCXL9hgJEWEp7ICSzL0IDpNntsj23U2zxNSz2elqQG3aIZUClPwmQaTGNgJSj+wBEZ+gNHXCDoRi4qiGRxm2JyneKEpORonNLEY55OxlOAUkI144Ltddh6u0Fh1488VACm/NBMPfQUOdE1QRS+/bI1A+KrdCFp/8hq93rTfxvi5717NoiO6RYKuIhHQKSi6AvCS9+D+T5o7n3Qd/MgNd3iQiepTWIX3pB83PrdMUWrPNqFRHWH/ND8LPhglfoc0MOReXLho+cfzwHCJgnfeL2X5Gg8HZ/S0ym9FqFVcKmYmKcYim5SKoIpIURnLTyggHqYoH7ERR+oP3l+yD/iSxMnUBPyPfukZcrX5Q8eIirCxUNEJi2f//SV88ElyVuC8uQrWdcj75UC8V+fNLADCz0inpGfLIzN3+X6wtY7PyTOYoC5gV2sCuZ5/qYpYEjMumSIhfF7418Z+Mr5R+EjyQ8sCemmXZqg73fKxXR6qRgQhmmQyGLlKng/Ma84k3OEOr+V/jBz5X5vZD7H35L5jTJWyezyjcpD1/3fyjX32i4QkVPYvWJ5qeTkXUqcB/a7Cf0G8Oshzfx1SH+M5PUP8Z+Sdzn9/D28/gs=</con:value></con:property><con:property><con:name>retire_assert</con:name><con:value>SAML2 assertion=nVdZc6pME773V1ieS8sAggtWkio2FRWN4MrNWzgMi7LJsOmvfweNHpOTnC/vd6XT09P99ELPM8/I8L1mj0MIxokbBlVZfKn9s6ObVKezazVIyFINhmyDRrfFMA2GYRlmZ+1Yq8XWqjJCKZQDlBhB8lJrkhTdINsNil2QnR5N95jmE9Ol9Vp1BWOETWOVJ7JWLXwvQL2L25daGge90EAu6gWGD1EvAT2NUyY9rNkzbphqr89XlBeH8auTJFGPIMCTCQH0PPAEQp94Jj7oPJuop7l2YCRpDN99muil9n42z/OnnH4KY5tokiRJkCyBdUzk2r9qr5XbYWjKgRVe14IRhIELDM89GyUoBSZOaFY5zw5jN3H8b0xTBEWWphuwAA1AMcGvGvHbwQXdDy19ABkjo4Ecg7oZU6EFYxgAWF2q8kvt188qeD27iI0AWWHso0/r/wYJBhn0wgiaDXSL7Ibu5xa/SNfrMwQ9OQBeitwMTss2iQwAUfUthpZbTFyEm89E1Uv5qwW6dRgE/6Ukz8QjTgyb+CIzomtDlPw/9Xqs1dXKyvBS+EquYqe+ynZTYspNDGE8L4w1suP8uLdfLhAela+g7qV+X39u1HtfvR9S+fNYP+/71hkO9vT2kOh+2NlClW4XzHQy49k34yREwmmmuXKsJ/N2fGzyszFxXLfDeVPlVWuxnSYsE9sgqbiSeETUUY9zyG6GEU2Qe6E/G0yCtXtaa3Hbm4yccHfWgLskO0OVifaplq11lZkBKtjb0flEtDyTbCNnZFROZ1/S9CSjQZ3huakyy5cvv2N6jKGMawxPlyDL/5sWyYpGYtwXQjkpLPx5JvBVkWWhLgoCBwWby2Wes2V+cuamvH04Ogd3wOYkz82XfU7kTorK5aK9FVfz+VjKzdXK01dyv88rKpMPua1YwRuiVKxEfTMijbUebZt9Utd43tyo4Y4eRebwkA8dMFUWSj5dyCdlLxXThUSuLzK7wOuzsleo2WJJV9Z7nlVUKRfzi0dRyp2pvlaj7ZLNwVmaKxwz4KilJDjKcOGvKECrDthLE4U7XOS8owirlVJIC+6twtvTFY5tIfT1CPhmtPM958H4EBtfmIPVaTfwUv0s7RVBGgjacaDJO1qcSyNO3S5369XBWPezChhOud3No9tyjU2Y23o3F+fb0TjUZScDU24u8fycw+kiOUUejLhwwHMKw7nFWdjz7VAw+zkxaqJKnfUG7c3JPW6QMSA9g+p2qe1k3X47tkUpqOvjdLd3FGfTn9XHmpkt2YQ9b1FWz9qGS4EisuYbaZiMC2s41yq7N7HYgGHdtEeEd2b7sdIZcfH55HiKrSbr9gyddq5lrfnNjPE6lqfQamR5VnRC9UU4P8Rkm4d0k9iesnFS4WyF57jBfrnn5wrfLZNqyvl8q/AG15eSlDvvm8m4uTqOhpkHtjQXFuP1bH94L4wp5hJP5HMJt5VU6YqcWRZhqC2l/p5b8rYd87bU5+dA5OZbeZxvcb6WQ6z8OY/9Sx5tieckWufa7LBCL0k2mSUaw3CngF8GfdZRjsXabPtk5wiliTaNmFxBUyvQ1+FB8d14GafacjyeTordIh0c9nhWWaQ2zmi9ImWHiHOn44VzEEPReIu22ySqByAGiRz5ilycZzrad92dT47qLYp/I0XQaS79Xb4cGJI+jm2NGg/V4I3usBWUWqehX99383V9obWjjikElng6EXq8IkMu7LNq62gWzebBWeaTdm6NuMPOaE4Lj+VPrDTWFyBX5+O15tdblVY2mfjkeUEw02iWa4OckebzOm3yi+ECRbG7Tbt2Ec8Cs7k1knamk6u2G3kHtpkeFkxEr2wfF+stM6OO8laZMxug+3YnAiNCJTJO6lgTeXDanY1z5M/AdYB+ng534XV+EI+T5cPouZEODXcrBMltWV5Asljt41vBSP5OYEqJazasi2ovKlkQSmCQ1F7LUyV56aWY4rhmD18Z17XY74hip9kVu11OohhRIhmS6pMc2WLZjtgSbizniuITRCEMLLf0VfK46y31d4DA7yEYmDBuZGEKHIhqf7FY5qsqByq+fsMAwUWIeSJFdlu0yIptVqCojtBvMgLVpwVRovoU3e4Lteo0TGbBLOasBMYfOCJFfuCIKgRu5MKSSJa3KcLXKUpwSo5GliYe9ZQZTwFMMdWMS7bXazLdFoFcP/JgCZjwQzP14FPkRJcEEej622wYAF2kqrT4R9aEy03/bYif927ZwDqmWyqgMh4e4orCLwgvfQvm+6Dpx6Bv5rnUdMsLHac2iV1wRfJx63fHlK1ybxcc1Q3yXfOz4INV4nNAd0dm5oJ7z9+fA5hNYr7xeivJ0Xg6PqVZll6K0Cm5VIzNExRBtgkNghQTotMiPMCAuJsgfsRF76g/eb7LP+JLEyfQEvw9+7hlqpflDx4iGkTlQ0TGLV/89JXzwSXOWwKL5CuZ4OH3Son4r08a0AOlHha/4Z88jM3f5frC1oMfHGc5wNzALlcl8zx90xQgxGZdPMTC+NH4Vwa+cv5ReE/yHUuCu2mXJvD7nWo5nV5qBgBhGiSyWLsIHifmBWdyimDvt9IfZi7c753MF+hbMr9RJhqeXb5Ru+u6/1u54V7aBUB8CrkXLC+1Ar9LsfPAfpjQ7wC/HtId4W9D+mMkr3+I/5Q85PTz9/D6Lw==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountMergeUndoRequest" searchProperties="true" id="bb7e7d8b-e8e3-4dc9-9073-6b2a9c8ac469"><con:settings/><con:testStep type="groovy" name="Feed Data for the AccountMergeUndo API" id="979f1903-1ef6-4a21-b7ed-3c829bec85dc"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import dbUtils.dbAccount;
import dbUtils.dbUser;
import com.eviware.soapui.support.types.StringToStringMap

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//Set the Node Details
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//Surviving and Retiring Account Details
testCase.setPropertyValue("SurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
if (testProject.getPropertyValue("V2")=="06")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",URLEncoder.encode(CallingTCase.getPropertyValue("SurvivingAccountID"),"UTF-8"));
}
else if (testProject.getPropertyValue("V2")=="02")
{
	testCase.setPropertyValue("encodedSurvivingAccountID",CallingTCase.getPropertyValue("SurvivingAccountID"));
}


//Set the SAML Details of the Full Users to the AccountMergeTest API

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("survivingAccountUserAssertion"));

testRunner.testCase.getTestStepByName("AccountMerge").testRequest.setRequestHeaders(headers);

//Set the Expected Value
testCase.setPropertyValue("expectErrTypeAccountMergeUndo",CallingTCase.getPropertyValue("expectErrTypeAccountMergeUndo"));
</script></con:config></con:testStep><con:testStep type="groovy" name="pem set for AccountMergeUndo_API" id="9d27ef5d-226b-4710-91da-6a452b364641">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("AccountMergeUndo");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs\\0702_concat.pem";
	break;
	case "500500":
		keyStorePath = "C:\\DECE\\certs\\500500.pem";
	break;
	case "222312":
		keyStorePath = "C:\\DECE\\certs\\222312_concat.pem";
	break;
	case "222333":
		keyStorePath = "C:\\DECE\\certs\\222333_concat.pem";
	break;
	case "222332":
		keyStorePath = "C:\\DECE\\certs\\222332_concat.pem";
	break;
	case "222334":
		keyStorePath = "C:\\DECE\\certs\\222334_concat.pem";
	break;
	case "222335":
		keyStorePath = "C:\\DECE\\certs\\222335_concat.pem";
	break;
	case "222336":
		keyStorePath = "C:\\DECE\\certs\\222336_concat.pem";
	break;
	case "222337":
		keyStorePath = "C:\\DECE\\certs\\222337_concat.pem";
	break;
	case "222338":
		keyStorePath = "C:\\DECE\\certs\\222338_concat.pem";
	break;
	case "222339":
		keyStorePath = "C:\\DECE\\certs\\222339_concat.pem";
	break;
	case "222340":
		keyStorePath = "C:\\DECE\\certs\\222340_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="AccountMergeUndo" id="ff86e280-8efc-438f-a0f8-c455f69b9e1e"><con:settings/><con:config service="AccountMergeUndo" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{SurvivingAccountID}/Merge/Undo" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountMergeUndo" mediaType="application/xml" postQueryString="false" id="22c585b1-1f10-4c58-92e6-5c4ff6026645"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="SurvivingAccountID" value="${#TestCase#SurvivingAccountID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="355f30c0-6988-4a19-b98d-00eb17001332"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountMergeUndo');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="7b43b087-c6b1-41fa-9958-b3af8215ddd8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = context.expand( '${#TestCase#expectErrTypeAccountMergeTest}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

     case "RESOURCE_STATUS_NOT_ALLOWED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:ResourceStatusElementNotAllowed";
		errorReason = "Resource Status Element Not Allowed";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ResourceStatusElementNotAllowed";
	break;
	case "FORBIDDEN_SURVIVING_ACCOUNT_HAS_BEEN_MODIFIED":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:SurvivingAccountHasBeenModified";
		errorReason = "Changes have been made to the Surviving Account since the Merge happened";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#SurvivingAccountHasBeenModified";
	break;

	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	//streamidFULL = urlStr.substring(lastSlash + 1);

	//this.log.info "streamid[$streamid] - streamidFULL[$streamidFULL]";

	tC.setPropertyValue("ACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>600743e6-779f-43ea-8db9-37ac0891f773</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>424ec930-ca02-4bff-8ed5-51aa458ee303</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_nodes" searchProperties="true" id="3217055c-57f5-4f6b-8986-5c97d330161d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="7b00abc6-17e9-4793-8beb-c38a75a236da"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="a0a81299-e499-4d96-8fe3-ee9125bfe1ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="afad6394-18c1-41f0-834e-d5fd2a0de724"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="8c721406-10ad-4003-9fcd-4043b3af0f90"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>

<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="4ed4c6fb-f157-4d76-90cf-c2111034e717">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                               log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7065e381-9693-46c0-afa3-f3f540ed93ee">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D14403889CD0F3ECE0401F0A07992161/User/urn:dece:userid:org:dece:D14403889CDFF3ECE0401F0A07992161/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>policyId</con:name><con:value>urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:UserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3DD6C150D6CC4DCE0401F0A0799470D</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_nodes" searchProperties="true" id="02e196fd-6a33-458f-a779-20bdcb8f65f6"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="4a1fa38b-4b5a-43bc-b4ac-c8b2cd422c62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("ENCODED_NODE_USER_ID",null);
tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="78a51972-e97c-4fcc-a444-ae8c86a62bc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));

if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			tC.setPropertyValue("ENCODED_NODE_USER_ID", URLEncoder.encode("urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", URLEncoder.encode("urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
			}else{
				tC.setPropertyValue("ENCODED_NODE_USER_ID", "urn:dece:userid:org:dece:"+callTC.getPropertyValue("NODE_USER_ID"));
			tC.setPropertyValue("ENCODED_NODE_ACCOUNT_ID", "urn:dece:accountid:org:dece:"+callTC.getPropertyValue("NODE_ACCOUNT_ID"));
			}
			
tC.setPropertyValue("SAML","SAML2 Assertion="+callTC.getPropertyValue("assert"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("PolicyCreateResponseType"));
tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="45db53d0-e287-4b60-a809-f9e6735e4f2f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="a34ac438-f9e9-46e6-aa72-085a95955c04"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="7600.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7602</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7603</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>

   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:7604</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#ENCODED_NODE_USER_ID}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#ENCODED_NODE_ACCOUNT_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="517a95b3-ce83-437a-827d-5e49fdb10fa1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
/*

def expXML = tStep.httpRequest.response.getResponseContent();
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/
tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                              log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="6a93b9aa-b6dc-4adf-983f-0d78466e7a19">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";
if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfbkqLKEn33Kwzn0bC5ibeY7ojiImKLCuL15QQWJaAISoGgX78LHG3t6Z49+zx02JVUZq3MXCSrfmJr77MdgDGKYi8Myqr0Wvkf30R83eZRrQ4Zpla36E3NWrON2qbV3LRZG67tNlspqxgnSA1wbAXxa4WlGa5GczWWNxm6U293aPqFa7RXlfIMRZiEJlte6Eo52/sB7hTHvlaSKOiEFvZwJ7D2CHdi2JkAbdAhOzvWDVPl7ecVZXFg9ObG8aFDUfDFRhD5PnyB4Z76ST3t+WnjzsRzAitOIvTrTBu/Vn75pmn6knIvYeRQLE3TFN2myB4be86Pylvp5oxsNdiE17VoBWHgQcv3LlYOSkOxG9pl4Dth5MXu/pvQDMXQeegaymANMvXgR4X6OKBA95eRnkBG2Kph12JuwQy0QREKICpPDfW18uPvOnj1NSMrwJsw2uNP6/8GCQUn5IcHZNfwLbMbur+P+EW53n4i2FED6CfYO6FhTpODBREujyO08bKBhwn5bFwu2l/O8I1hCP6XlvykHnES2NQXlZE8B+H4/+nXY6+uUWaWn6C38UrSqWDcG8nn9XSihLgnXS7Z1FjX1dcCwuPmK6h7q3+tPxP1zqtfTj3a2U8nTqi2GL4BxWYUpiBR8FZJdlGPmUm7YNg4XS6c7u4kVtyOqvUWUt05VM79dXhsu6B1nk/E9ozbbLel6pjjpqA1gbvM2gRznFCzSRXGYyVdDAPZ2qheuA3n/RbHZ/p4wKirPlflhrsGVBdO60R1OecgYUrZL3BjWgrhZqoK+plNVzE+sntuQb9+5PSYQ57XOzoXSeb/L3i6LVmxdV+I+aTYkNczRm+aqkrJRRTBeeKAVBWAQ/62YCg4u6O785R2SgtA17tAEgV/Kw80sFMAM5UFVxNnMy0TL6AvOMMZcTRLwF8JmiGnUrqUZrrek1PXtJXZea34yeoiDzWAC2fR1WRDnkmGKWsaCK+2TJPWSrbVJlqq6kupRAJIcna42Eo7RkrmQVbltQnPLid8slrMiL17HuyHp7Up+5qoKeLkqEzUNSfpch8YyzlkuwnxvQz2h7C0nAoPTv0D2gLUTWlyJrho5i7VzCk7lAyrsJnPNk1V+pqOU1EvslJKctqfTS8ftRAFTbT3ciabYHytBTTF7pBeLfrYmvOBZoBUcgrndzm1Rzcgmk6nJfFaq4GcGrIxHXY1Q01lUNgkOfXxmh26a8U9QU7P+ibYPjZG1OV5NyDPA+MEz/yxZCldsN7PGMgZLvR4z1qEqbNqpZK+7L+HK5WEGQJdFgQdEEA0yFMj9RfAQJjxo4PXZj002HTDPXKjksaE77vTJaNbHjdyxsM5L212zbHijTnLdinVh+yW2wFVRfY74+qWbSwpQwq8S2P0Pl0gL1pe4iGvMw2vxZeMeTJdSKHftHuL5fS9mi2hbo7Gk+l8fMmy4XHbuvhxbyT0oklfk5zREKExhlWKtrqC2ZJ4cdnbEj5tDBrxJeBoAgDK1nFkjxBY6G2vJOwZmkzICzQxVcS5qEyAolRlVZB0fdN1mTFUZsmUGWqqbPukTOflwvBLK1GQSKdoa746LNkuvTKBXQTT63LX0ad8tb9AK33om7MYpIfZJmAYWjnovY2WOlDLGWCr6UQgb5FQSlQwtUaHPp29zxo0c9Rtvz9pgymXTdhdNnKd1XnnrHakKcuHV2dpAn9mPnBMJRSbl3RTNjTQur5vmaZOOcOH++yw3sNMMknPCufQFGSjq9PTTJLA+9WGTcBmeHmRt5ooF/4lkGkWocVpvXDxMhh6I1NOCGmTB7ps1yz9rxzLKVZ65thRBDr4zDH5yjEZbI5VtSUxmG+IBzxPHUGRj3pzNui3D7S+GOxKQrVLObHn10dBKzXfq3PmnDbdrT6ft1XJFavBZuly61igrQvUUX/XVDxjJwWNun/WBprOTz3KP9NbdEzxoDRUmUDm4kuXakdJVdivvD0Z13V2uh9PkpM6td4xc3bXx3k73Y57DYqKlDN/aa5OencRwuX1O/J5SN6N1zFKPQ7Ypwl8016TZL1FML4t8++wKpW75ONoxX/WcbnFs2ubYmvnkItBHKMgrrzlXrmG6yRE6Xl2h3w5r2upJchNiWFEgWbaLZqX6TrNdGlAN9ttVmaYm9i7ovgEUQyDjZeflcvZ68f6zwDhvoNRYKOodgoT6CJc+UPEvF5lNTCICgkDjMyQyOVuA9RlVmozdLdNt5p0V+IaYrMtyBIttbkWqJSHYTwKRhHYxCh6lsrck1Q2EPQOHsr1dC4qMFEVOCYlOVqnJPaZl5P1EqCEKO4oF70dtt7iKeztDz7KAVP70E589HJwD0WBKHz9ZWsWxIW12aDpQu18m9/nZ7dSkD22l2/AeTICIu1Ev4n+Voe/ZfJ9xo3HjG/hQWJ7uaghdY0jD16RPD/6oEvOkztX8pRumO9bPxuewlKfM7qfZJ88eGf8/U5EJDURXW+3hhytl+NLcjolRQuauaCMSHiKoegGNUEwIarwbIY7FFD3ENRfCfI76k8n3+3P+JLYDSYxeZv3hDDlYvkXt7EJwvltTCWEz/72qvd0JKlbjLL4K5vok0tbjviP9zrYgfk+Yh6TnzSM7I92fRHr4RySZz6+vMDJV7n8Pn/DChiSsB4ZYWH0GPyrAF8d/my8F/mOJSZsWicx+v5JOZ9NrxULwjAJYlWqFIbHeVngjM8H1PnY9FuYQgD/utFk+NsbzUIbTMjk2luV+17v3zfXvIIuEBEv7BVYXisZuZyTwwPnYT7/AvjliAZy/U8j+jmTt9/Mv1seavr5fXj7Bw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>WithRightsLockerDataGet and MUC</con:value></con:property><con:property><con:name>sName</con:name><con:value>ISC_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>D8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D8BE7D11CAE49805E0401F0A07992E11/User/urn:dece:userid:org:dece:D8BE7D11CB019805E0401F0A07992E11/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AManageUserConsent</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD8BE7D11CB019805E0401F0A07992E11</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD8BE7D11CAE49805E0401F0A07992E11</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\ISC_Nodes\7600.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2eeb936-13ad-4f02-a213-128d8a600f31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="96fdea5e-3165-42ad-86cd-31f66cb06840">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="89035e54-011b-4e78-8314-3066b20a7451">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d336e59f-097a-4d6b-a0ab-dad12dc87fd3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tC.setPropertyValue("audience",tP.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tC.setPropertyValue("audience",URLEncoder.encode(tP.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="94b59c95-ff72-47e3-9fd0-fd8d7afd897f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="ce52285d-9dc0-4384-aaf1-5960e49fc5b6"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem" id="90e1c658-8c3b-4903-bf33-49042978270f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/SecurityToken/SecurityTokenExchange</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="a978a785-c50d-4c04-8a92-bdc972ecdc01">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true" id="7a36644e-867e-4ef2-bd53-c316b0b0b1f3">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="db516161-86e4-476d-bf56-7f98e27247fe">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="ba4dda14-1235-40f0-b44e-e25b1b8a9ca3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS" id="9af2df1d-af07-4b39-9527-92dcc32d9120"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="" id="2bf93037-20b0-4770-a4d2-0d900e7201ad"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:originalUri>https://qa1.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_e04be8e4-1bf5-4711-9bf8-099c67523e9c</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="41aec0e4-8f1c-46d0-af53-1a19c010eab9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="2040850c-ee49-4935-86e9-5f2505a43f76">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());

			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
		     
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="61cabfc0-62e4-4f84-9578-d6b1043bb8f5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="3e70141a-7836-4057-9fa3-549155a21767">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="e74a6738-775c-40c0-afb6-0b3f1707439b">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>assertId</con:name><con:value>_43a95d3c-4bfb-48d4-a25b-0261ad00fad4</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2015-06-10T04:02:52.570Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2015-06-10T04:02:52.570Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2015-06-10T10:03:02.570Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_43a95d3c-4bfb-48d4-a25b-0261ad00fad4</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZbU+o6FP4rTH10StILAh1hBhGUrShyceN+ORPSANE2xSSF4q/fSYFKUTyc89TJ6sq3vnXJl1wKFAa21xCCcEkjVkjCgAkvtdaMmDMvQoIKj6GQCE9ib9Do3nt2EXpot8UodK5rxj+ug6ol38GmO5lOTLfiuyaySxMT2hcW8iGcIt9VrkLEpMOEREzWDBtaJRNemBYcQteDjgftYqkM/xiFZ8KFwlYuRWhsSSWiZsylXHgArFar4sopRnwGbAgtMO7eD/CchMioX24ySgPx+tYfF32CSRDgIo5CcAlyPpe+8AZ0xpCMOdnG8o/FggBWgfLxBZ2dGdle4nfYNEqXTcQiRjEK6AfS9ekSOY/8QiOYRZzKeXg0CQtqYJMk2MSWy84MkKd2IlCOIRfIFHNkbbH6ZEo4YZgURv1OzTg7rWvp1iFHTEwjHor88r/xIWxJgmhBfFPs0tpSOx3wm0rVLwn2OgwHsaBL8qCHdYEwEdtuEnw6VKHHyZQm91SoAU2EZgf26R0sN9W4pjMi5P9p0F5zNiDPKIhJfUBE+elldPP+++bmtTW0Wta4/9rtucmqW0sJ7Dunhqy1m+XBUGZDtNnxFE6T0eipXSqNuhCBILGuxtQBM9r4NUaw1S4n4zs2v6fxr/Pmbflj+NScocHbiNB557advFFyG67dxbPTgBXRehpbd3fv56TZWsMXOS8N7Mn0ZnxXsez+qP/7/Hn+uFzL8dPNM3rpYYdX7pwKFvGfIfbPHZgsJg9xy6I9cMXp1bm7btwun18YBD36CN5u/VktS2ePf962O/ODePJKsNwt9Rh0rgtt1SUkfxYzbaG+OU1dvYUWHyEJk0Zd79La4cVK7qjvqR5u1lbFttuOVWmXrqoX5XK7BUuO06pWrTZsOJXm1U5kNiwOKDYjNqU6lpbczdj8TBCHniDMJ9xcRrFSOmH8gHiNJCp0WF8dgogJMoyUPPNXp4rXH2GFu9Qqy4uqsK01X/lKXR8i+cgeeWMqCc9rcjmnyX2C6YISLdx6roUabCFVLd7RMpaBVVyiIiOxknauVdaz3UoJCBouAqKZgjDy44AUF/NFWhkgNl/bRFik1n5rmJ62o3kd/tuVQPn4VDsIncsVUW0kXy4X2yvtEjmasAX3E97BN2Kf6oOl6ik5xRsm+V+fY6LnI5sRldGOcuZ5aMihgsOEskD+kuJs0LPrWqm4Ovf1XTvekVV8L8bLZZx2wHUdwBU80CkCaIMBwbFSpvUweiMMZCjgpGsgI34QPLPnKcZyzgYSSRKqiSmkyxPufaV7+t7vqFFPTn1U5EKq0kmSyO9szUC9WTTjH5812MPaT5l76rOKuP/ZsW+w9uKoPNW1Lymb6ZW+AtZH5gJHCpYq8Yr4Pvh3AN8FzxuzImdcpBqoSSzJ8T8FrUo1A2EcxUx2ro3UsK+UKU+5XhDv0+kLTCrG2euM/vvzzKTpCGCi3nSCpvj6kvX0EWCzPbXdBj0iuJWfBDfPrv7F/NWyV6fDGa//BQ==</con:value></con:property><con:property><con:name>sName</con:name><con:value>First_User_Create</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_43a95d3c-4bfb-48d4-a25b-0261ad00fad4" IssueInstant="2015-06-10T04:03:02.570Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_43a95d3c-4bfb-48d4-a25b-0261ad00fad4"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>Ses7QYUGqWGGjET1E1XRjMP4xwM=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>QmfxUUQF55UM0a/lx1BXi3/giAJXa0EF7xXKnhLiuJ+CH7zTQCgaSkUeihIHFxkieHmy4pV3A08sEQX1KKq+eCEy0Yth5S2bfGXK812RURW+VhOvytXQGVaYPc3r8K38csuZTcd+30xpbNuE1iP/BriB+4yAHvVYn0/PiO/kHdg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_rj39cyzm8r4i17t69s21yrwd0" NotOnOrAfter="2015-06-10T07:03:02.570Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-06-10T04:02:52.570Z" NotOnOrAfter="2015-06-10T10:03:02.570Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_43a95d3c-4bfb-48d4-a25b-0261ad00fad4</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-06-10T04:03:02.570Z" SessionIndex="_43a95d3c-4bfb-48d4-a25b-0261ad00fad4"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Notification DB Validation" searchProperties="true" id="e6d93400-ec29-487d-845d-0269783271b0"><con:settings/><con:testStep type="groovy" name="User_Notification DB Validation" id="36a03322-c94f-4c44-9b0d-8ed3193a4a59"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

int cnt = 0;

	String emailAddress = tP.getPropertyValue("PrimaryEmailAddress").toString();
	String username = callTC.getPropertyValue("UserName").toString();
	String emailEvent = callTC.getPropertyValue("emailEvent").toString();
	
	String sql = """Select * FROM EMAIL_NOTIFICATION WHERE EMAIL_ADDRESS='$emailAddress' and EMAIL_DISPATCH_STATUS = 'Y' and EMAIL_NOTIFICATION_EVENT='$emailEvent' and USER_OID=(SELECT USER_OID FROM ACCOUNT_USER WHERE USERNAME='$username')""";

	log.info sql;

	try {
		a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());
		
	}
	catch(Throwable e) {
		log.info "ERROR - dbUtils.dbUtils - $e"; 
		assert 1 == 2;

		}
	finally {
		def results   = a.SelectFromDB(sql,tP.getPropertyValue("targetSystem"));
		log.info results;
	
		try {
			def myXML = new XmlSlurper().parseText(results);
			assert myXML.ResultSet.Row.size() == 1;
			
		}
		catch (Throwable e) {
			log.info "ERROR - XmlSlurper - $e";
			assert 1 == 2;
		} 
		
		}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>1.2. Account Create: Email Address Confirmed [Your UltraViolet account has been created]</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Notifications_Test Cases</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserGet_API" searchProperties="true" id="a9371951-a0d7-4374-b477-39820ba727c5"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="34eab9ef-094b-4ea5-b816-16bad8f3019a"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem" id="ab184205-d3f8-4833-a390-e2590f4dff15"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("User_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body" id="3475aa35-aee4-44f3-bc56-b7358d0abca8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Get');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);

//tC.setPropertyValue("ETagPrior",tC.getPropertyValue("ETag"));
tC.setPropertyValue("ETag", ETag);

//log.info "ETagPrior: " + tC.getPropertyValue("ETagPrior")+", ETag: "+ tC.getPropertyValue("ETag");
//assert tC.getPropertyValue("ETagPrior")!= tC.getPropertyValue("ETag");
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body" id="621e6c79-25ba-4fc8-86b5-0fa7a2e3401f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeUserGet}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

def RequestorType = "";
def RequestorClass = "";
def Requestee = "";

def usernamestring = "";
def givennamestring = "";
def surnamestring = "";

int firstmask = 0;
int lastmask = 0;

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		//errorReason = "The identified account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

    case "REQUESTEE_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The member has been removed.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserStatusDeleted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserStatusDeleted";
	break;
      
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
      	{                                
			assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
			
			int lastColon = urlStr.lastIndexOf(':');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 1);
			def node_User = urlStr.substring(lastSlash + 1);
			                                 
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	} 
      else 
      	{
			assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
			int lastColon = urlStr.lastIndexOf('%3A');
			int lastSlash = urlStr.lastIndexOf('/');
			userid     = urlStr.substring(lastColon + 3);
			def node_User = urlStr.substring(lastSlash + 1);
			                      
			tC.setPropertyValue("NODE_USER_ID",userid);			
			tC.setPropertyValue("NODE_USER_ID_FULL",node_User);
      	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}


if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

	} 
  else
  {
   //Data Types
   // RequestorType: Self, CLG, CS, Other
   // RequestorClass: BAU,SAU,FAU
   //Requestee: CHILD, YOUTH, ADULT

   RequestorType = context.expand( '${#TestCase#RequestorType}');
   RequestorClass = context.expand( '${#TestCase#RequestorClass}');
   Requestee = context.expand( '${#TestCase#Requestee}');

    // Following Fields returned for Everyone
    // Contact Info shwon only for CLG or Self or Portal:CS or DECE:CS or COORD:CS - kalyan 05092013
    if ( (RequestorType == "Other")  || (RequestorType == "CS") )
    {
         assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
            
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
    else
    {
    	    assert myXML.@UserClass.size() == 1;
         assert myXML.@UserClass.toString().matches("urn:dece:role:user:class:[a-z]*");
         
         assert myXML.Credentials.size() == 1;
         assert myXML.Credentials.Username.size() == 1;
         assert myXML.Credentials.Password.size() == 0;

         assert myXML.Name.size() == 1;
         assert myXML.Name.GivenName.size() == 1;
         assert myXML.Name.SurName.size() == 1;
  /*      
         def a = myXML.DisplayImage.DisplayImageURL;
         log.info a ;
		//def b = a.toURL();
		//log.info b;
		 log.info "Response_DisplayImageURL: "+a.getPath();
         assert  a.matches("https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=[0-9,A-F]*");
        log.info "here";
*/
        
         assert myXML.ContactInfo.size() == 1;
         assert myXML.ContactInfo.Address.size() == 1;
         assert myXML.ContactInfo.Address.PostalAddress.size() == 1;
         assert myXML.ContactInfo.Address.PostalCode.size() == 1;
         assert myXML.ContactInfo.Address.Locality.size() == 1;
         assert myXML.ContactInfo.Address.StateOrProvince.size() == 1;
         assert myXML.ContactInfo.Address.Country.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.size() == 1;
         assert myXML.ContactInfo.TelephoneNumber.Value.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.size() == 1;
         assert myXML.ContactInfo.MobileTelephoneNumber.Value.size() == 1;
     
         assert myXML.Languages.size() == 1;
         assert myXML.Languages.Language.size() > 0;
     
         assert myXML.ResourceStatus.size() == 1;
         assert myXML.ResourceStatus.Current.size() == 1;
    }
         if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
         {
           assert myXML.ResourceStatus.History.size() > 0; 	
         } 
         else
         {
           assert myXML.ResourceStatus.History.size() == 0; 	
         }

   /******************************************************************************************************************/
           
   //Filtering fields based on PI and Access levels

   if(Requestee == "CHILD")
    {

    	  this.log.info "Getting CHILD details";
    	  
  	 if((RequestorType == "CLG") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
  	 {
  	   /****************DOB, Security Token and Email Shown only to Self,CLG and CS**********/
         assert myXML.DateOfBirth.size() == 1;     
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0;
        
         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;     
  	 }
  	 else
  	  {
         /****************DOB, Security Token and Email not shown to CS and others**********/
         assert myXML.DateOfBirth.size() == 0;     
       //  assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0;
         //assert myXML.LegalGuardian.size() == 1; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 0;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.size() == 0;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 0;
  	   

         /**************Verifying Masking of CHILD PI details *******************/
          
         usernamestring = myXML.Credentials.Username.toString();
         givennamestring = myXML.Name.GivenName.toString();
         surnamestring = myXML.Name.SurName.toString();
                
         //*************Verifying Masking of CHILD UserName details ******************

         //firstmask = usernamestring.indexOf('u');
        lastmask = usernamestring.length();
        
     log.info firstmask;
 		 log.info  lastmask;
        usernamestring = usernamestring.substring(1,lastmask-1);
        //usernamestring = "••••••";
   log.info usernamestring;
//        assert usernamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
         assert usernamestring == "••••••";

       //*************Verifying Masking of CHILD GivenName details ******************
          
        //firstmask = givennamestring.indexOf('â');
        lastmask = givennamestring.length();

         givennamestring = givennamestring.substring(1,lastmask-1);

       // assert givennamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";
        assert givennamestring == "••••••";

         //*************Verifying Masking of CHILD SurName details ******************
          
       // firstmask = surnamestring.indexOf('â');
        lastmask = surnamestring.length();

         surnamestring = surnamestring.substring(1,lastmask-1);

       //assert surnamestring == "â€¢â€¢â€¢â€¢â€¢â€¢";     
      assert surnamestring == "••••••";        
    }
  	 if ((RequestorType == "CS") || (RequestorType == "SPLCS"))
          {
             this.log.info "Getting CHILD CLG details for CS";
             
             assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else
             if(myXML.LegalGuardian.size() == 2)     	
             {
                if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else
               if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }         
          else if(myXML.LegalGuardian.size() != 0)     	
                {
            	   this.log.info "Getting CHILD Active CLG details for NonCS";
            	 
           	   assert myXML.LegalGuardian.size() == 1;   
           	   assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
               }
           else
               {
            	 this.log.info "Getting CHILD Pending CLG details for NonCS";
           	 assert myXML.LegalGuardian.size() == 0;  
              }
          }
    }  
   else if((RequestorClass == "FAU") || (RequestorClass == "SAU") || (RequestorType == "Self") || (RequestorType == "SPLCS"))
    {
    	       	  
    	    assert myXML.DateOfBirth.size() == 1; 
         assert myXML.UserRecoveryTokens.size() == 1;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() > 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1;
         
          if(Requestee == "YOUTH")	
          {
            this.log.info "Getting YOUTH details";
            assert myXML.LegalGuardian.size() == 0; 
/*
             if(RequestorType == "CS")
            {
              assert myXML.LegalGuardian.size() > 0; 

              if(myXML.LegalGuardian.size() == 1)     	
             {
           	 assert (myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active" || myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:pending");	
             }
             else if(myXML.LegalGuardian.size() == 2)     	
             {
           	 if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:active")
                {
                	assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:pending";
                }
                else if(myXML.LegalGuardian[0].@Status.toString()=="urn:dece:type:status:pending")
             	{
           	  assert myXML.LegalGuardian[1].@Status.toString()=="urn:dece:type:status:active";	
               } 
            }
            else if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
           else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }      	
          }
*/          
       }  
     else
        {
           this.log.info "Getting ADULT details";	
           //assert myxml.LegalGuardian.size() == 0; 	
		assert myXML.LegalGuardian.size() == 0; 	
        }
    }  
     else 
    {   
    	    this.log.info "BAU geting other's details";
    	    
    	    assert myXML.DateOfBirth.size() == 1; 
        // assert myXML.UserRecoveryTokens.size() == 0;
         assert myXML.UserRecoveryTokens.RecoveryItem.size() == 0; 

         assert myXML.ContactInfo.PrimaryEmail.size() == 1;
         assert myXML.ContactInfo.PrimaryEmail.Value.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.size() == 1;
         assert myXML.ContactInfo.AlternateEmail.Value.size() == 1; 
         
         if(Requestee == "YOUTH")	
          {
            if(myXML.LegalGuardian.size() != 0)     	
            {
           	 assert myXML.LegalGuardian.size() == 1;   
           	 assert myXML.LegalGuardian.@Status.toString()=="urn:dece:type:status:active";	
            }
          else
            {
           	 assert myXML.LegalGuardian.size() == 0;  
            }	
          }
          else
          {
            assert myXML.LegalGuardian.size() == 0; 	
          }      	
    }       
    
  }	// end if for SUCCESS response
} // end if for XML Body Validations
</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="948ce4c9-000a-48f8-8ed9-6e9a5983276c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E641652A31FC5318E0401F0A05993F57:F41796B9"</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>3531</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/dececs_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E6193ACEE6A11BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F850C559F9CD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>RequestorClass</con:name><con:value>FAU</con:value></con:property><con:property><con:name>RequestorType</con:name><con:value>SPLCS</con:value></con:property><con:property><con:name>ResponseTypeUserGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1iuR8sAiihWkqrhpqioCF5fTuEwIMpNBgT99Wcw0ZVkJ+usfV7EaXq6v77Q880ztgK/2QMYoyT1orCqSi+1/zCcw+7Y3a7R7u7YBgvbdoOnObZhc1aXacEWZzc7taqKcYbUEKdWmL7UmjTTatB8g2mZTKvXpHtN5olrtba16hIlmJgmKk90rVoEfoh7N7cvtSwJe5GFPdwLrQDhXgp7BtDGPaLZs+6Yaq/PbyhvDpPXfZrGPYqCTzaCyPfhE4wC6pn6pPNs457huaGVZgl692njl9r73jzPn/LWU5S4VJOmaYrmKaJjY8/9VXut3DcjWw2d6G0tWmEUetDyvatVgtJQuo/sKvDdKPHSffCDaYZi6NJ0AxWwARk2/FWjfju4oftLS59AJthq4L3F3I3NkYMSFEJUXczVl9qvv6vg214zsULsREmAv6z/HSQUnpEfxchu4Htkd3R/b/GbdL0+I9hTQ+hn2DujSdkmsQURrs4S5HjF2MOk+WxcvZW/WuB7hyH4b0ryTH3ESWBT32RG8lyE0/+nXh9r9WZlafkZep0B+jJOdht+4SH5MnLsYO0HyJxMFuDlBuGj8huoR6nf118b9dFX75vcUbA9LWTYZ45qMlgp4jpUwLlIxjTvMKfuwdscgbETLgNE24lNAd2Yh7tgvlke2MPE95G58x196CyVyDAq6y531cdxn2um8mTNLBwU2dciUXPfti4zdtnczPojzCyLy/BCqcNVx2Q7aTiRj9LZ0tlgPVCvwGEO/XBwOldEXnFzWVX2o1N7M7BMuMhffsf0MYYyrhG63IIs/6/bNC9ZqfVYiOWkcMjnmaJXTVXFuiSKAIkuyFUBuKowvoKJ4B5P+6PX53NaAPpCARK4aHOQS+5GWur6SM7t5dLfLlVFEbQ5mw/ARqqQF5JcLKXtekhbq228aSr01hAEez2Pdq1hbA+O+WAPJ5qp5RNTvWgHuZiYMr26ydyCrK/aQWOm5qJVWR0EXpvLuZTfPEpyvp9sV/N4s+BzeJV1DbB9wCxkca8NzGDJwNZ8Dw/yWAPHm1zYa+JyqRWyCWYVwZ0sSWymqGxjGNjxLvD3H4wPiHHT7i8vu76fba/yQRPlvmic+oa6a0m6PATzzWK3Wh6tlXKuwMEE7O4evbZnraPc3XZzSd8MR9FW3Z/hBOiyIOiApIsGmtofgqgvAI0FXnEVDwIXibaSU8MmrtR5v8+tL95pja0+7VtMt8tsxituduIkOaxvR9nusNf2a2VaHxn2ecGn/HWDz/UzZ3kMLGJHX8uDdFQ4A92o7GZSsYaDuu0OKf/KK4nWGYLketn7mjtPV9wUX3ae46yE9ZT1O46vteax4zvxBdfNSD8mNCegVpPaXM6jtAJcTQCgf1gcBF0TumVSbTXXN5pgAUVOM3A9NNNRc3kaDs4+3LRAVIxW08PxvTC2lMsClesyaSu50pWAXRZhYCxk5QAWgusmgisrgg4loG/UUb4h+VoMiPLXPCq3PLqyAOTWFnD8oNJa0Hw6TQ2WBZdQWIQKv9dOxcrmArpzQvLYmMRsruGJE25X0VELvGSRZMZiNJqMi52Z9Y8HMqsc2hidW9uKfD7GwJuMzP1RiiRrFm82aVwPYQJTNQ40tbhOt/jQ9XYBPay3GWFGS7DTXAS7fNG35O0ocQ1mNJiHs1aHr+DMuQyC+qGbr+qmwcUdWwwd6XKhtsmSjkCk8PP2yS6azeN+kY+53BmC485qTgqfFy68PNqaMJ/ro5UR1NuV9nk8DuirSbGTeJob/ZyVdb3esgVzYOI48TZZ1y2SaWg3N1bKnbf0kvNi/8g3s6PJxq2lG5Bizc523NFmFZ1dw23gdmI4pObUGcgdZ6z2L7urdY2DKXwboF+nw0P4Nj+oj5Pl0+i5kw6DdCuC6X1ZHkCqVFXIqWClfyYwpcSzG85NtReXLAinKExrr+Wukrz0MkJxPLtHjoy3tcwxfAuIstyRuoygKDLN0oxCA7rN822hI95ZzhuKLxDFKHS80lfJ495OqT8DhEEPo9BGSeMcZXCPcO0PFst8VdVwTo7fKMTIjAhP5Lu82FVoUQAixzIiUJqs0AFtsUO4YLfJgFp1EqXTcJoAJ0XJZ47IfeKIcwS92EMlkSxPU0yOU5ySlJysc5b6zNPZegpRRqhmUrK9XpPttinsBbGPSsBUENmZj57ifXxLEIXfns2GBfFNWmYX4ttB/2OEX9/dk0F0bK9UwGU4AiIFRd/wXeYeyw8xs1948d08yGyvPM9JZtPEg29IPr/63TBlpzy65fYD8R32Q/ur4JNl6mtQD2f22YOPtn/cCAihJJTj9V6Vk/V0esrO5+xWh05JpxJinmIoukMZCGaEE13M6IhC6mGC+is6+kD9xfND/hlflu5DIyWfdEC6pnpb/sVdxEC4vIuopOuLv73ofHJJ8paiIv1OJvrkylIi/uOtBvZgqUfEM/LIo8T+Xa5vbH3wQ+IsZ5gXuuWqJJ+XHxoDRsSsR+ZYlHw0/p2B75x/Fj6S/MCSkm7aZSn6+U21HFAvNQvCKAtTVardBB+H5g1neolR77fSP8zc6N87ny/wj3x+rY0NMr4Cq/bQ9f63csO7tQtEZBf2blheagW5mhLnofthSL8D/HZOc4D505z+HMnrP8T/lHzI6dfv4fW/</con:value></con:property><con:property><con:name>sName</con:name><con:value>04.Functional_UserGet_SPLCS_P2</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_40040_UserGet_FUNC_SPLCS_Get_AccStatus_Mergedeleted_SPLCS_P2</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E603BD56DDEEF0CEE0401F0A07990E43</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F850C559FACD04E0401F0A05993FCD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:basic" UserID="urn:dece:userid:org:dece:E6193ACEE7D81BFFE0401F0A05995B7C" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Name>
      <GivenName>usercreate20130911_030350</GivenName>
      <SurName>usercreate20130911_030350</SurName>
   </Name>
   <DisplayImage>
      <DisplayImageURL>https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=E6193ACEE7DC1BFFE0401F0A05995B7C</DisplayImageURL>
   </DisplayImage>
   <ContactInfo>
      <PrimaryEmail verificationEntity="urn:dece:org:org:dece:RET" verificationDateTime="2013-09-11T09:31:03.103Z" VerificationStatus="urn:dece:type:status:success" verified="true" ID="Coordinator">
         <Value>raju.alluri@compugain.com</Value>
         <ConfirmationEndpoint>Coordinator</ConfirmationEndpoint>
      </PrimaryEmail>
      <AlternateEmail Notify="false" VerificationStatus="urn:dece:type:status:pending">
         <Value>raju.ganji@compugain.com</Value>
      </AlternateEmail>
      <Address>
         <PostalAddress>46000 Center Oak Plaza</PostalAddress>
         <PostalCode>20166</PostalCode>
         <Locality>Sterling</Locality>
         <StateOrProvince>VA</StateOrProvince>
         <Country>US</Country>
      </Address>
      <TelephoneNumber>
         <Value>+1.703598741</Value>
      </TelephoneNumber>
      <MobileTelephoneNumber>
         <Value>+1.703598742</Value>
      </MobileTelephoneNumber>
   </ContactInfo>
   <Languages>
      <Language primary="true">en-us</Language>
      <Language primary="false">en</Language>
   </Languages>
   <!-- <DateOfBirth> depricated </DateOfBirth> -->
   <LegalGuardian Status="urn:dece:type:status:active">urn:dece:userid:org:dece:E6193ACEE6FF1BFFE0401F0A05995B7C</LegalGuardian>
   <Credentials>
      <Username>usercreate20130911_030350</Username>
   </Credentials>
   <UserRecoveryTokens>
      <RecoveryItem>
         <QuestionID>1200</QuestionID>
         <Question>What is the name of your favorite movie?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
      <RecoveryItem>
         <QuestionID>1650</QuestionID>
         <Question>What is the name of your favorite song?</Question>
         <QuestionResponse>myname</QuestionResponse>
      </RecoveryItem>
   </UserRecoveryTokens>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-09-11T09:30:53.000Z" ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:03.108Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping User Status to active</Description>
      </Current>
      <History>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:31:00.871Z">
            <Value>urn:dece:type:status:pending</Value>
            <Description>Flipping User Status to pending</Description>
         </Prior>
         <Prior ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-09-11T09:30:53.011Z">
            <Value>urn:dece:type:status:blocked:tou</Value>
            <Description>User Created</Description>
         </Prior>
      </History>
   </ResourceStatus>
</User>]]></con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>cc891f73-44b8-47ce-9d08-8d9a2f63ef82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c72b5513-a556-4ec7-9925-002c39bb23ff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9c734ae7-5af5-42b8-9df0-6dd308e44f7c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" id="b842e70d-a8b1-44af-91c2-44516599f032"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="215d4672-2e57-480a-a80e-d258d7b50dad"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="7b7db62c-25c3-45a6-a22a-220baead7507"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC" id="6e6a3bde-d58f-4514-a0db-b9f3983a4e4a"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:16ACF97A740E18ACE05305991F0A9199/User/urn:dece:userid:org:dece:16AD160FD79413DBE05307991F0A0996/Policy/urn:dece:type:policy:ManageUserConsent</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="1581bd9a-2a13-43f9-abd7-d15ee95c3374">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="58771ea9-69a8-4296-aa24-2a8104397ca9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZtU/I6EP0rTP3olL7y1hFmEPCKgm+g4+OXOyHdlmibYJMW9NffpECliF7u/dTJdrN7dvfkJGccxZHtdTmHRBBGK6s4otzLrW0tTajHECfcoygG7gnsTbrjkWdXTQ9tt2iVYb+t/Y1dp9FstAK9NfNbuts0sd6qz2y9hnDQCGa1houb0pXzFIaUC0RFW7NNq6abdd0yp6bjuXXPsasN23nRKk+QcBlbulRNbQNqxdvaXIiFZxjL5bK6dKosCQ3bNC3jeTya4DnESOucrSvKEyWdjT+u+oAhinAVs9g4M0o+Zz73JiSkSKQJbHL5P+UyDbNlSB+fk/BEK/aCP6QBy5c9RBklGEXkE6n+jEHMmV/pRiFLiJjHPxZhmSqwDiusY8ulJ5pRhnZkoBLChCOdz5G1ifUAASRAMVQeH4Zt7eS4qeVbpwmiPGBJzMvL/4YHaAYRW4Cv821ZG2jHBzzQqc4ZYG9IcZRyksGNIusCYeCbaQI+PlTlLoGArEaES4KuuEJn7MLbW6670SchcPF/BrQznHWQJxSl0PkY9Japm00XcXZaO7/ujW+7uGatYNIat3MAu865oRjterlHyoJE6x3h6NU2JoP7xqh/MRIvszvLvn1BDg0vhufInLpRWks/WPzJGl0JILqonya9K7Me/gn5RIxE8HR/OZlFY7f/suzOwtfeAAWr2pXJLXfU9e+d5m3r+hJDPzUR7X6e+sZQXP81HV8/x5ibnwOY4/v34OrWJtlr5D6unh5TFBvGM1u+JJd88Ac9NHpv80YvuIluNuXu4S/btmd+ks5eAYvtUtFg2K9cyCkh8buYKQvx9SB39RZKfLgAKrSO2qW0w0ul3BHfkzNcr62mbTeb53Wz4dSc86Y9MGuOM2i1rAuz26i7zlZk1ij2IPYYDYjKpSR3TZvfAeLY40B9SPSMpVLpuPZLxD4SqDKkD/IQMMphyqQ8W8vwlbAls96XJFnO4izK3j649RprlRsmbult0g0EJGVNrpc0+QEwWRBQwq14zSWxuZC9eEdZKiKrmqEqhVRKe6JU1rPdZs3gJF5EoJAaMfPTCKqL+SLvjMHXX1tHmOfWh8E0P20/1rX/b9sC6eMT5cBVLecgxwgHLhd7W8jPBbd2C96G76Y+UQdL9lMkBK+RlH990UTxo+CIrGgLufDcN5SiGvsFFYn8jOCC6MV1LVVcnvvOdhzvyKq+V9MsS/MJuK5jJDK8oUo0THniAadSmT6m7A2oUUQxjroGCuB7yQt7GWIq5nQikIBYMqaSL4+49yfA1b0/lFRfHfuoKKWUrROwEodsvUi+WRTiX5812MPKT5rv5GfJEv9rYgdi7eSRdcprXxAaqpW6Aj5+4AVmMiyR4sWS3eCHAhxKXjYWTS6wCEmoWSrg5z8VpUptDWHMUiqGfS037CpljlN8LMD7cvoWJhfj4nVG/v15ppOcAhjkm46TPL66ZD11BGi4o7abpAcFtz7o/ya4ZXSdb+bvlp0+7XO88w8=</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/URN:DECE:ACCOUNTID:ORG:DECE:182288B606ED3B82E0533E991F0A7643/User/URN:DECE:USERID:ORG:DECE:182288B607353B82E0533E991F0A7643/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B607353B82E0533E991F0A7643</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true" id="700e149b-ee46-4a91-8f84-916ec3bfa37e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="78845ba2-8601-4f71-87d9-d285f6650912"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="ceac24ad-0e3f-4bd8-af8d-5c003d89a19c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC" id="d5c2eb02-3b4f-4a08-9f5d-ce1a78c4dba0"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="0426fe4f-882b-4ea7-bfbd-4124b6413d7e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateSinglePolicyPost_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="7b8c1483-c541-4f08-aab9-041228f45d0f">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZkqrKEn33Kwz3o2EzOmB0d0QhoKioDI4vJxBKRJmkQNCvP4W2bu3dvW+f+6SVlZW5ciBr1SsyfY9uA4RgnLhhUJaFt8o/LRquOabeqrVY2KyxNM3VOBtaNYtpbWjKXrNNq1kpywilUA5QYgbJW4UmKaZGNmt0w6DoNs21SfqFbFCrSnkGY4RNY5UXslLOfS9A7Yvbt0oaB+3QRC5qB6YPUTux2jpQhm2s2TZvmCrvr1eUF4fx+zZJojZBWC8YEvQ868UKfeKVeNJ5tVFbd53ATNIYfvi00Vvl42yWZS8Z8xLGDkGTJEmQHIF1bOQ6vyrvpdthaMvBJryuO2YQBq5leu7ZLEApMNmGdhl4Thi7ydb/xjRFUGRhugZznD6KDX5ViN8OLuh+aOkJZIzMGtqa1M2YBjcwhoEFy1NNfqv8+lkFr2eN2AzQJox99Gn93yDB4Ai9MIJ2Dd0iu6H7ucUv0vX+Cq22HFheitwjHBVtEpkWROVJDDduPnQRbj4blS/lL+fo1mHQ+i8leSUecWLYxBeZEVwHouT/qddjra5WZqaXwnc1FrhcZSxU1xxDyHtLoaUp41jP5su3C4RH5Suoe6k/1p8b9d5XH4e6LqsPIzmlFcI5S1yLGXDOStq3Zrpf7fEJT/fH+czprrSlRpGMv/Z6+aRbDXV90pUMjVn1grlsJvN0vHazUpOOBYXhlRgIBn0YZEgd+QfeHs+0eViNXGU8t4j0vDn3TXkYLB0tCNXG2WT0+mgvOZOtK9H9wzRTpozUlUotKdO0/ihr5Q3KhJE485Zvv2N6jKGIawBPlyCL/4s6yQlmYt4XnWJSbPDnmcB3RZY7VaHTAbDjgEzmgSPzwzMY8c7+sN27XS4jeaBOJSCAk6KBTHCWwkxVB2Jmz2beaiZLEq9obNYDS6GENwQxnwmrRZ8056toSUvkSud5e6GFa6Yf2b191ttaI8VQspEhn5SdmI8MkZxfZE6O12dlp1BjY8qU5jueUzQxE7KLR0HMtqPVXIuWUy6zzqKqALYLqKnY2So9w59RFqNtrZ04VMD+Iue3Smc2U3LRAJMS74xmODajI60iy7ejte9tH4z3sHHD7s5O666Xrs7iTumI3Y5+6OrymhFUsQ+05XQ9n+3NuXQsWb0RWN88unXXXISZs2plgrrsD8KVvD1aI6CKPK8CnC4SKHK3D8IuDxQWuPm5s+MbYceWMqJPo1KV87qNxck9LJDZJT2TarWo5XDemBwaghhUV4N0vdsq24U0rg50+zjlEu68RMfqsWG6lJVHG3Uh9pJBvumpemk9EfKF1avaTp/wzpwUK80+iM+nrac4WjJvjNFp7W42c34xZr3mxlMYLdp4m+iEqkao7mOywUOGJpan4yApAUfhAejupjteVfhWkVRbztSlwptAEpMUnHd0MqBnh37v6FlLBoT5YD7e7T8KYwuZyBOZKuK2EkstAdhFEXr6VJR2YMo7Tsw7osSrlgDUpTzIljhf0x5W/pxH6ZJHR+SByKxAg+uVmCnJJeNEZ1lwCvhpIHFb5ZDP7YZPNg9QHOqjiM0UNNoEq3m4V3w3nsapPh0MRsN8baTd/Q7Pqg2pD47MqiQe9xFwRwNjuxdCwZxEy2USVQMrthI58hU5P49XaNdy1z7Zr9YpfkIKVpOe+uts2jXF1SB2dGrQ04IJ0+RKKN2cen5118rmVUNvRE27E2yE04lYxTMyBKHEafWDndP0fjvNho1s0wf7tUmPco/jT5w4WBlWpqmDOR439VL9OBz65Nkg2FE0zvRuxoqqWmVs3ugZKIrdZdpy8ngc2PTSTBrHFTlruJG35+h0b7ARM3N8XKzJ0Y6ayqSksgtr5TvNyOoTGnEEYnMzlLun9dk8R/7Yug7Qz9PhLrzOD+JxsjyNnhvp0HG3Qiu5LYsLSBbKEr4VzOTvBKaQuHZtc1FtRwULQgkMksp7caogL+0UUxzXbuMr47oW6QZgGyQrUvWCT3EiyZKURAKyznEkz/M3lnNF8QliJww2buGr4HHXW+rvAC2/jWBgw7h2DFNrC1HlLxaLfJXlQMPXbxggaISYJ1IdUaBovikAukmzAiuyDUkkKYHnmgILBLpSHoXJOBjHYJPA+Jkj1p84ogYtN3JhQSSL2xTh6xQlOCUH85gmHvVyNF8CmGKqGRdsr02zrTqBXD/yYAGY8EM79eBLtI0uCSLQ9ZeumRa6SDXR+EfWO5eb/tsQP+/dsoF1bLdQQEU8PMQVhX8Q3la7fgvm+6Bbj0HfzIPUdosLHac2iV3riuR563fHFK1ybxcc1Q3yXfOz4Mkq8TmguyP76Fr3nr8/BzCbxHzj/VaSg/lyeEmPx/RShGbBpWJsnqAIskno0EoxIToZ4R4GxN0E8SMuekf9yfNd/owvTbaBnuDv2cctU74sf/AQ0SEqHiIybvn8p6+cJ5c4bwnMk69kHQ+/VwrEf33SWG2r0MPiCf7Jwtj+Xa4vbD34wXEWA8wNnGJVMM/TN01hhdisi4dYGD8a/8rAV86fhfck37EkuJvWaQK/3ykX0+mtYlpWmAaJLFQugseJecGZnCLY/q30h5kL9/sg8zn6lswvlKGOZ5dvVu667v9WrrmXdrEgPoXcC5a3So7fpdh54DxM6A+AXw5pUuz8bUg/R/L+h/hPyUNOP38P7/8C</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateGeoPrivacyAssent" searchProperties="true" id="1a42b403-fac9-4e9b-beba-08428b612d51"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="584480d5-e621-4b91-826d-e5a22d8a067f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:GeoPrivacyAssent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:GeoPrivacyAssent", "UTF-8"));
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="b362db47-5a20-4722-a929-195f2edc4c9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_CLGAttestation");
def keyStorePath = tC.getPropertyValue("keyStorePath");

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateGeoPrivacyAssent" id="bf3cd8d9-3dda-4fe1-923c-6bcb85102ee9"><con:settings/><con:config service="PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateGeoPrivacyAssent" mediaType="application/xml" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:GeoPrivacyAssent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="a6e60891-93be-4a57-891b-4d0e499de53a">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreateGeoPrivacyAssent');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="fe2c0a6c-2712-49f0-9c07-b0bafe8efedf">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdZc7LMEr73V1h+l5YBBFGsJFWsrrgBbjencBgQZZNh019/BhONyZu8J9+psgqn6el+eqHnmWdk+l6zyyME48QNg+pAeqn9p0XZnRbkOo0dDZkG06HbDdNu2g2aBiRtUZ2WbcJadYBQCgcBSswgeak1SYpukFyDonWK6tL413liSXZbqy5hjLBprPJE1qqF7wWoe3X7UkvjoBuayEXdwPQh6iagq/HquIs1u+YNU+31+Q3l1WH8uk+SqEsQ4MmCAHoeeAKhTzwTn3SeLdTVXCcwkzSG7z4t9FJ735vn+VNOP4WxQzRJkiRIjsA6FnKdf2qvldtmaA0CO3xbi2YQBi4wPfdilqBUmOxDq8p7Thi7yd7/wTRFUGRpugEL0AAUE/xTIz4cXNH90tInkDEyG2hvUjdjC2jDGAYAVo3F4KX2z+8q+LZXj80A2WHsoy/rfwcJBhn0wghaDXSL7Ibu9xa/SdfrMwTdQQC8FLkZnJRtEpkAouoshrZbjF2Em89C1Wv5qwW6dRgE/6Ykz8QjTgyb+CYzkutAlPw/9Xqs1ZuVpeml8DWGgkcvx0fOPIadwDr0nTYrM+11vWe8XCE8Kr+Bupf6ff21Ue999b4pkzmZB5p4KGZLCNvcWOdc0W/FhX9smgddssYm59bjE8f2xpFNOFPTzF2xfdHksZHl24O7dE+GN9oudVKpGJa/zE0YNElxbgejdmIriQfBsi4QGUdq65XuNS8xSXeOljijVN3KzojQDLZoZZp3tlMxT2bjcaC0hSSqqEdmMSv8szUT16uJsfLjzstHTI8xlHGN4PkaZPl/3SI5yUzM+0IsJ4WNP88EvqqDgViXRJGHosPnA4F3BsL4wk8E53jaH90el5MCPzcUXuLP6oLPJWcjLefzkZxby6W3XQ4URVAXTN7nN1IFv5DkYilt10PSXG2jTVMht5ogWOtFuKOHkdU/5v09mKi6mk/0wVk9yMVEl8nVVeYUeH1RDyo11Q26sjoInLqQcym/epTkfD/ZrhbRxuBycJHnKs/0eMqQxb3a1/0lBejFHhzkscofr3Jhr4rLpVrIOj+rCM5kiWPTRWUbAd+Kdr63fzDex8Z1q7c873peur3IB1WUe6J26mmDHS3N5SG/2Bi71fJorpSsAvoTfnfz6LZccx3mzraTS/PNcBRuB/sMTPi5LAhzHqeL5NVBb8iHPYFXGd4tLuJBYEPRUnJi2ESVOuf12PXZPa2R2SM9k+p0qM14xc5OrCQH9e0o3R326n6tTOsjzcoMLuEuG5TVM9Z0KVBE9nwt95NRYffnWmU3k4o16NctZ0h4F06J1faQjy/nvac6i2TFTtF559r2SlhPGa9teyq9iGzPjs6orofzY0yyAqSbxOacjZIK76gCz/cOxkGYq0KnTKo1yOcbVTB5RU5S/nJoJqPm8jTsZx7Y0HxYjFbTw/G9MJaUywKRz2XcVnKlI/FWWYS+ZsjKgTcEx4kFR1aEOZD4+WYwyjc4X0YfK3/No3LNoyMLvExveZbrV2iD5JJpojEMfw4EI1C4vXoqVhbrk+0TlMfaJGJyFU3sYLsKj6rvxkacasZoNBkXOz3tHQ94VtmkNsrobUXOjhHvTkb6/iiFkjmLNpskqgcgBskg8tVBcZlu0aHj7nxyWG9RwoyUQLtp+Lvc6JnydhQ7GjXqL4IZ3eYqKLXPfb9+6OSruq6xUdsSA1s6n4ltvCRDPlS4RetkFc3mcW/kYza3h/xxZzYnhccJZ04ebXWQL+ajlebXW5VWNh775EUnmEk0zbVezsjzeZ22BL2voyh2N2nHKeJpYDU3ZsJmW3LJupF35JrpUWcieun4uFizzIra6qwyZ9Zg6zvtCAyJBZHxctseD3rn3cW8RP4UvA3Qr9PhLnybH8TjZPk0em6kQ8PdCkFyW5YH0ECqKvhUMJO/E5hS4loN+6rajUoWhBIYJLXXcldJXroppjiu1cVHxttaZhm6KVG0KFEcJzZZmWRISiF5ss1xLNlWbiznDcUXiGIY2G7pq+Rxb6fU3wECv4tgYMG4kYUp2ENU+4vFMl/VQbDAx28YIKiHmCfKtEQxrESSvNJqSzSvKBwtCgzNtHmyo7TYWnUSJtNgGvN2AuPPHJH5xBEXELiRC0siWZ6mCB+nKMEpOZlZmnjUU2Y+BTDFVDMu2V63yXRaBHL9yIMlYMIPrdSDT9E+uiaIQG/PZsME6Cp1EYjCODE96nrY/xjl13e3hGAdyy0VUBmSAHFR4Tect3mL5+e4249x38zzqeWWZzrObhK74A3J51cfTVN2y71jPgK7Ib9v+Cr4ZJz4Gtfdn5W54N7994sB5pWYebzeinMyn05PaZal13K0S1YVY/MERZBtQoMgxdTorIdHGBB3E8SvWOkd9RfPd/lnfGmyD7QEf9k+bp7qdfmLK4kGUXklGeDmL3573/nkEuctgUXynUz08M2lRPzXyw3oglIPi2f4kYex9VGub2w9+MFxlqPMDZxyVXLQ8w+9AUJs1sXjLIwfjX9n4Dvnn4X3JN+xJLibdmkCf35TLefUS80EIEyDZCDVroLH2XnFmZwj2P1Q+sPMlQW+0/oC/Ujr1+pYw1PMN2t3Xfd/Kzfca7sAfKHF+lcsL7UC31Cx88B5mNXvAP8Y1wwlsyRDCYzEPI5rhpM+PslPkbz+If5T8pDTr9/D638B</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4DAFF5120AEA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1/User/urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA/Policy/urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:GeoPrivacyAssent</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:/certs/iscportal1_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4DAFF51203BA1B8E0401F0A079957C6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6f62f720-8990-433e-b87f-e5bfb4b7fa27</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_UserStatus" searchProperties="true" id="8b84599f-9011-4a1a-a266-93bd146fbbc4"><con:settings/><con:testStep type="groovy" name="Update_User_Status" id="89ea8073-43b0-413c-be9e-23e7e1586b7f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )


def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);

String sql = """update ACCOUNT_USER set STATUS = '$status' where USER_OID = hextoraw('$userID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>mergedeleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B607363B82E0533E991F0A7643</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00141_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_mergedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_AccStatus" searchProperties="true" id="80487ede-aacb-4a03-9614-e48d276255d6"><con:settings/><con:testStep type="groovy" name="Update_AccStatus" id="8fa8c609-1d19-4270-8788-687034e7a859"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def status = context.expand( '${#TestCase#Status}' )
def accountID = context.expand( '${#TestCase#account_oid}' )

log.info "account Oid :  " + accountID;

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


String sql = """update ACCOUNT set STATUS = '$status' where ACCOUNT_OID = hextoraw('$accountID')""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);
</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>pending</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>account_oid</con:name><con:value>ED65AF1668735614E0401F0A07997557</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02001_AccountDelete_FUNC_NonCS_Deleting_an_account_which_is_pending_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_NonCS_P1</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_Policy_Status" searchProperties="true" id="0fe6ceb2-bf24-4dc3-a614-abc94dd19143"><con:settings/><con:testStep type="groovy" name="Update_Policy_Status" id="f0e80ecd-5515-441d-b52f-589542815928"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def status = context.expand( '${#TestCase#Status}' )
def userID = context.expand( '${#TestCase#User_OID}' )
def Policy = context.expand( '${#TestCase#Policy}' )
def userName = context.expand( '${#TestCase#UserName}' )

def dbHost = context.expand( '${#Project#targetsystem}' );

a = new dbUtils.dbUtils(log,dbHost);


//String sql = """update POLICY set STATUS = '$status' where CREATED_BY = hextoraw('$userID') and POLICY_CLASS = '$Policy'""";

//String sql = """update policy set status = '$status' where policy_oid in (select prel.policy_oid from policy p, policy_relationship prel where p.policy_oid = prel.policy_oid(+) and policy_actor = hextoraw('$userID')) and policy_class = '$Policy'""";



String sql = """update policy set status = '$status' 
		where policy_oid in 
		(select policy_oid from policy_relationship where policy_actor 
				in ((select user_oid from account_user where lower(username) = lower('$userName')), 
				(select account_oid from account_user where lower(username) = lower('$userName')))) 
		and policy_class = '$Policy'""";

log.info "SQL : " + sql;

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>UserID</con:name><con:value>${#TestCase#UserID}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE357C457986AEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>user_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ECB18696FD4BF6FCE0401F0A07993072</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E357C457986BEE09E0401F0A059917C9</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_02014_AccountDelete_FUNC_CS_Deleting_an_account_No_ManageAccountConsent_Policy_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_FUNC_SPLCS_P2</con:value></con:property><con:property><con:name>Policy</con:name><con:value>105</con:value></con:property><con:property><con:name>UserName</con:name><con:value>AcountDelete_firstuser20131204_1386142934430</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5fdeaf38-c814-4c84-a148-2fc4448e3d23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7ebe7972-d488-48c3-9a7f-c13ef2cdf20d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RenameTCs" searchProperties="true" id="9dedc8c4-1bc7-4f3d-90f8-76fc1c3bb757"><con:settings/><con:testStep type="groovy" name="Rename" id="d3663aca-7eb8-443b-a986-2d81307d5a76"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "07.User_Get_GeoProfile_Portal";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\rshrivastava\\Desktop\\TCs.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Get_Responses" id="e2ef2188-45e8-4193-86c8-78d3a2732120"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
      {
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
				{                                                                                         
                  	try {
                        		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
						def targetStep = targetTestCase.getTestStepByName(commonTestStep);
						log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                  		}
                  	catch(Throwable e) {
                        log.info "Exception : " + e;
                        }                                                                              
                   }                              
            }
      }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserDelete_DB_Validation" searchProperties="true" id="04c62a5f-b87c-4edf-81e6-67cf45583012"><con:settings/><con:testStep type="groovy" name="SAML_HISTORY_STATUS_Validate" id="a0620ce5-5336-43ee-aa9d-a49fbb701e62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' )
def status = context.expand( '${#TestCase#Status}' )

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseTypeUserDelete",callTC.getPropertyValue("ResponseTypeUserDelete"));

def responseType = tC.getPropertyValue("ResponseTypeUserDelete");

log.info "Response Type is:  ----> "+ responseType;


if (responseType == "SUCCESS")
	{              
		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);

			String sql = """select accUsr.status USER_STATUS, usrHstry.status USER_HISTORY_STATUS, 
			usrSAMLAssrt.status USER_SAML_STATUS, usrHstry.DESCRIPTION 
			FROM ACCOUNT_USER accUsr INNER JOIN USER_STATUS_HISTORY usrHstry
			ON accUsr.user_oid = '$userID' and usrHstry.status='deleted'
			and accUsr.user_oid = usrHstry.user_oid INNER JOIN NODE_USER ndUsr
			ON accUsr.user_oid=ndUsr.user_oid INNER JOIN node_user_saml_assertion usrSAMLAssrt
			ON ndUsr.row_oid = usrSAMLAssrt.node_user_id""";
			
			log.info sql;
			
			results = a.SelectFromDB(sql,dbHost);

		//b.dbConnClose();
		assert results.length() > 0;
		log.info "results" + results;
		
		def myXML = new XmlSlurper().parseText(results);   
		def i = 0;

		for (i;i&lt;=myXML.ResultSet.Row.size()-1;i++)
			{  
				if (myXML != null) 
				{
					log.info "User Status from ACCOUNT_USER table is -----      " + myXML.ResultSet.Row.USER_STATUS[0].text();
					assert myXML.ResultSet.Row.USER_STATUS[0].text() == context.expand( '${#TestCase#Status}' );

					if(context.expand( '${#TestCase#Status}')=='deleted')
						{
							assert myXML.ResultSet.Row.DESCRIPTION[0].text() == "User Deleted" ;
							assert myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == context.expand( '${#TestCase#Status}') ;
							log.info "Description from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.DESCRIPTION[0].text();
							log.info "User status from USER_STATUS_HISTORY is -----     " + myXML.ResultSet.Row.USER_HISTORY_STATUS[0].text();
							log.info "SAML status from NODE_USER_SAML_ASSERTION is -----" + myXML.ResultSet.Row.USER_SAML_STATUS[0].text();                                                   
						}
					else
					{
						assert myXML.ResultSet.Row.USER_SAML_STATUS[0].text() == "active" ;
					}
					log.info "User DB Validations Passed"; 
				}
				
				else 
				{
					assert XMLbody == "";
				}          
			}
	}
else
	{
		log.info "DB Validations skipped due to non SUCCESS scenario";
	}

</script></con:config></con:testStep><con:properties><con:property><con:name>dbxmlresponse</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Status</con:name><con:value>deleted</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91160</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E52C7ACD89FD834FE0401F0A07991922</con:value></con:property><con:property><con:name>dbxmlresponse_rowOID</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
    <Row rowNumber='2'>
      <NODE_USER_SAML_UUID>_77a2a0ff-dba8-4c48-bd90-b725d6ece88e</NODE_USER_SAML_UUID>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00038_UserDelete_FUNC_CS_Basic_Delete_Full_200_OK_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_Access_Portal_CS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update_User_CLG_Details" searchProperties="true" id="d2b2d499-5c24-479e-9969-404560acf0db"><con:settings/><con:testStep type="groovy" name="Update_User_CLG_Details" id="092d897d-5a1b-434e-b3d0-90fdb21bd08c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );

def nodeuserID = context.expand('${#TestCase#UserID}' );
def clguserID = context.expand('${#TestCase#CLGUserID}' );


a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

//log.info b.userGetfromNodeUserId(nodeuserID);

if(context.expand( '${#TestCase#Action}' ) == "addclg")
{
sql = """DECLARE
BEGIN
insert into USER_LEGAL_GUARDIAN values(sys_guid(),
'$nodeuserID',
'$clguserID',
'"""+context.expand('${#TestCase#CLGAttestationStatus}' )+"""',
sysdate,
null,
null);
commit;
END;""";
}
else
if(context.expand( '${#TestCase#Action}' ) == "removeclg")
{
sql = """delete from USER_LEGAL_GUARDIAN where USER_OID = '$nodeuserID'""";
}

a.dbConnExecuteUpdate(sql,dbHost);

</script></con:config></con:testStep><con:properties><con:property><con:name>Action</con:name><con:value>addclg</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>UserID</con:name><con:value>E4890111840E60DCE0401F0A05993DE1</con:value></con:property><con:property><con:name>CLGAttestationStatus</con:name><con:value>pending</con:value></con:property><con:property><con:name>CLGUserID</con:name><con:value>E488FA3B9A214958E0401F0A05993DE5</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>91162</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_US_UserDelete_FUNC_Pending_CLG_Delete_Self_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Delete_GeoProfile</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_DB_Validation" searchProperties="true" id="c4b23f47-43c5-4476-ac81-eaa1b66c5619"><con:settings/><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="d7765da1-c221-46a8-b0ee-4ada2ad4098a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("ADULT_DOB_XML",callTC.getPropertyValue("ADULT_DOB_XML"));
tC.setPropertyValue("YOUTH_DOB_XML",callTC.getPropertyValue("YOUTH_DOB_XML"));
tC.setPropertyValue("CHILD_DOB_XML",callTC.getPropertyValue("CHILD_DOB_XML"));
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("DateOfBirth",callTC.getPropertyValue("DateOfBirth"));
tC.setPropertyValue("ResponseTypeUserCreate",callTC.getPropertyValue("ResponseTypeUserCreate"));
tC.setPropertyValue("GeoProfile",callTC.getPropertyValue("GeoProfile"));
tC.setPropertyValue("role",callTS.getPropertyValue("role"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_ACCOUNT_USER_Table" id="88f3d83f-4381-4a06-958f-b95673d0a3fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

tC.setPropertyValue("IsMinor","");
tC.setPropertyValue("Requestee","");

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");

def BirthDate = context.expand( '${#TestCase#DateOfBirth}' );
def myXML1 = null;
def finalbday = null;

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

			
log.info "Response Type is:  ----> "+ responseType;

def cHILD_DOB_XML = context.expand( '${#TestCase#CHILD_DOB_XML}' )
def aDULT_DOB_XML = context.expand( '${#TestCase#ADULT_DOB_XML}' )
def yOUTH_DOB_XML = context.expand( '${#TestCase#YOUTH_DOB_XML}' )

def dateOfBirth = context.expand( '${#TestCase#DateOfBirth}' )
def privilege = context.expand( '${#TestCase#Privilege}' )


if (responseType == "SUCCESS")
     {
		Result = b.userGetRow(userID);
	
		log.info "Result Set:   " + Result		
		myXML1 = new XmlSlurper().parseText(Result);		
		log.info "Actual Rows ==  " + myXML1.ResultSet.Row.size();
		
		assert myXML1.ResultSet.Row.size() == 1;       	
		assert myXML1.ResultSet.Row.STATUS == 'blocked:tou';
		log.info "privelege ;; " + myXML1.ResultSet.Row.PRIVILEGE;
		assert myXML1.ResultSet.Row.PRIVILEGE == tC.getPropertyValue("Privilege");
		assert myXML1.ResultSet.Row.USERNAME == tC.getPropertyValue("UserName");
		assert myXML1.ResultSet.Row.GIVEN_NAME == tC.getPropertyValue("GivenName");
		assert myXML1.ResultSet.Row.SURNAME == tC.getPropertyValue("SurName") ;
		assert myXML1.ResultSet.Row.PRIMARY_EMAIL == tC.getPropertyValue("PrimaryEmail") ;
		assert myXML1.ResultSet.Row.TELEPHONE == tC.getPropertyValue("TelephoneNumber") ;
		assert myXML1.ResultSet.Row.MOBILE_TELEPHONE == tC.getPropertyValue("MobileTelephoneNumber") ;

        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#CHILD_DOB_XML}' ))
        { 
			log.info "I am CHILD";
			tC.setPropertyValue("Requestee","CHILD");
			
			BirthDate = tC.getPropertyValue("CHILD_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'CHILD';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;        
        } 
		else 
		if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#YOUTH_DOB_XML}' ))
        {
			log.info "I am YOUTH";
			tC.setPropertyValue("Requestee","YOUTH");
			
			BirthDate = tC.getPropertyValue("YOUTH_DOB_XML");
			assert myXML1.ResultSet.Row.AGE_CLASS == 'YOUTH';
			
			tC.setPropertyValue("IsMinor","true");
			
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
			assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
         } 
        else 
        if(context.expand( '${#TestCase#DateOfBirth}' )== context.expand( '${#TestCase#ADULT_DOB_XML}' ))
        {
			log.info "I am ADULT";
			tC.setPropertyValue("Requestee","ADULT");
			
			BirthDate = tC.getPropertyValue("ADULT_DOB_XML");
			
			assert myXML1.ResultSet.Row.AGE_CLASS == 'ADULT';
			
			tC.setPropertyValue("IsMinor","false");
  /*        
         if(context.expand( '${#TestCase#attested}' ) == 'true')
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME == 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME == 'null' ;
          }
          else
          {
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_START_TIME != 'null' ;
            assert myXML1.ResultSet.Row.EMAIL_CLOCK_END_TIME != 'null' ;	
          }
   */        
        } 

          // Retrieving Birth Date in proper format
 /******************************************************************************************************/
          
         bdaystring = myXML1.ResultSet.Row.BIRTH_DATE.toString();

         int lastspace = bdaystring.lastIndexOf(' ');

         finalbday = bdaystring.substring(0,lastspace);
          
         log.info "Birth Day:  " + finalbday;
       
        assert finalbday == BirthDate;

/******************************************************************************************************/

        assert myXML1.ResultSet.Row.COUNTRY == context.expand( '${#Project#GeoProfile}');

        if(context.expand( '${#TestCase#attested}' ) == 'true')
        {
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_DATE != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ENTY != null ;
          assert myXML1.ResultSet.Row.PRIMARYEMAIL_VERIFICATION_ID != null ;
        }  

      log.info "User ACCOUNT_USER table Validations Passed";
               
   }// end if for success response check
  else
  { 
  	assert  myXML1.ResultSet.Row.size() == 0;
  	log.info "No Validation Required";
  	testRunner.gotoStepByName("End_Of_DB_Validations");
  }
  
   
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_NODE_USER_Table" id="49705387-620b-49cb-a9bc-0928f1079024"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

log.info "Role : --- " + role;

//log.info b.accountGetfromNodeAccountId(accID);

String sql = """select to_char(rawtohex(NODE_OID)) NODE_OID from NODE_USER where USER_OID = hextoraw('$userID')""";

log.info sql;

results = a.SelectFromDB(sql,dbHost);

//log.info results;

/*
*  If zero length, no need to continue;
*/
  assert results.length() > 0;

  def myXML = new XmlSlurper().parseText(results);
  
  log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";


if (responseType == "SUCCESS")
{
	assert myXML.ResultSet.Row.size() > 0;

// Modified to comply with Generic Portal
//    if(context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:portal:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:dece:customersupport' || context.expand( '${#TestCase#Role}' ) == 'urn:dece:role:coordinator:customersupport')

	if( role ==  'urn:dece:role:dece:customersupport' || role == 'urn:dece:role:coordinator:customersupport')
     { 	
       assert myXML.ResultSet.Row.size() == 4;	 
       //assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 
       log.info "DECE Node User Validation Passed";	    
     }
     else
     { 
       assert myXML.ResultSet.Row.size() > 4;
      // assert myXML.ResultSet.Row[0].NODE_OID == context.expand( '${#Project#Node_OID}' ); 		 
      // assert myXML.ResultSet.Row[1].NODE_OID == "10"; 
       log.info "3rd Party Node User Validation Passed";    
     }
	
}
else
{
	assert myXML.ResultSet.Row.size() == 0;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_Policies" id="482c9984-194b-4b02-886e-06be0089e7c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' );
def node_User_ID = context.expand( '${#TestCase#Node_User_ID}');
def userID = context.expand( '${#TestCase#User_OID}' );
def node_OID = context.expand( '${#Project#Node_OID}' );
def responseType = tC.getPropertyValue("ResponseTypeUserCreate");
def geoProfile = context.expand( '${#Project#GeoProfile}' )


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbUser(log,dbHost);

def role = tC.getPropertyValue("role");

		String sql = """select POLICY_CLASS,STATUS,RESOURCE_ID from POLICY P,POLICY_RELATIONSHIP PR,POLICY_RESOURCE PRE where PR.POLICY_ACTOR = hextoraw('$userID')
		and P.POLICY_OID = PR.POLICY_OID and PR.POLICY_OID = PRE.POLICY_OID(+) ORDER BY POLICY_CLASS""";


		this.log.info "Query is:  " + sql;
		results = a.SelectFromDB(sql,dbHost);
		
		log.info "Policies Results : " + results;
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;

		//if( (context.expand( '${#TestCase#IsMinor}')=="true") &amp;&amp; (context.expand( '${#Project#AgeClass}')=="YOUTH") ) 

		if (context.expand( '${#TestCase#IsMinor}')=="true") 
			{
				if((geoProfile == "US")|| (geoProfile == "CA"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[0].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[0].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					}
				else if ((geoProfile == "GB") || (geoProfile == "AU") || (geoProfile == "NZ") || (geoProfile == "IE") || (geoProfile == "AT") || (geoProfile == "CH") || (geoProfile == "DE") || (geoProfile == "FR"))
					{
						assert myXML.ResultSet.Row[0].POLICY_CLASS == "300"; 

						assert myXML.ResultSet.Row[1].POLICY_CLASS == "302";  
						//      assert myXML.ResultSet.Row[1].RESOURCE_ID == "us:riaa:prohibitexplicitlyrics";  
						assert myXML.ResultSet.Row[1].RESOURCE_ID == "US:RIAA:PROHIBITEXPLICITLYRICS"; 
					} 
			} 
		else
			{
				assert myXML.ResultSet.Row[0].POLICY_CLASS == "304";
			}


log.info "Policy Validation Passed";	


</script></con:config></con:testStep><con:testStep type="groovy" name="Verify_USER_LEGAL_GUARDIAN_Table" id="69330bd7-d073-40bf-a7af-04bbf8e0e165"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

if ((context.expand( '${#TestCase#IsMinor}' )=="true") &amp;&amp; context.expand( '${#Testcase#Requestee}')=="CHILD")
	{
	  	def dBHost = context.expand( '${#Project#targetSystem}' );
		def userID = context.expand( '${#TestCase#User_OID}' );
	  	def node_OID = context.expand( '${#Project#Node_OID}' );

		a = new dbUtils.dbUtils(log,dbHost);
		b = new dbUtils.dbUser(log,dbHost);
		
		String sql = """select ATTESTATION_STATUS from USER_LEGAL_GUARDIAN where USER_OID = hextoraw('$userID')""";
		
		results = a.SelectFromDB(sql,dbHost);
		
		/*
		*  If zero length, no need to continue;
		*/
		assert results.length() > 0;
		
		def myXML = new XmlSlurper().parseText(results);
		
		log.info "myXML.ResultSet.Row.size() is [" + myXML.ResultSet.Row.size() + "]";
		
		assert myXML.ResultSet.Row.size() > 0;
		
		assert myXML.ResultSet.Row[0].ATTESTATION_STATUS == "pending";  
		
		log.info "Legal Guardian Validation Passed";	
	}
else
	{
		log.info "No Legal Guardian Validation Required";
	}
</script></con:config></con:testStep><con:testStep type="groovy" name="End_Of_DB_Validations" id="418d894c-0d5e-41ce-af71-087c1cf97b82"><con:settings/><con:config><script>

log.info "DB Validations Complete";</script></con:config></con:testStep><con:properties><con:property><con:name>ADULT_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-11</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>attested</con:name><con:value/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-09-08</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1999-09-14</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>IsMinor</con:name><con:value>true</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E60068AEF0205738E0401F0A07990D3F</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>90508</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>Requestee</con:name><con:value>YOUTH</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Role</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Create_GeoProfile</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>Status</con:name><con:value>FAIL</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00021_UserCreate_AUTH_Creator_ADULT_Full_New_YOUTH_Standard_201_CREATED_P1</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>usercreate20130910_092427</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E60068AEF0215738E0401F0A07990D3F</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1999-09-14</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters><con:property><con:name>ACCID</con:name><con:value/></con:property></con:reportParameters><con:breakPoints><con:testStepId>d7765da1-c221-46a8-b0ee-4ada2ad4098a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>418d894c-0d5e-41ce-af71-087c1cf97b82</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_DB_Validation" searchProperties="true" id="48b71661-ccd2-4642-af3b-32fe9e8abc9f"><con:settings/><con:testStep type="groovy" name="Verify_User_DB_Details" id="142255c0-283c-4c33-b8e9-5f6a22d944a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();

def dbHost = context.expand( '${#Project#targetsystem}');
def accID = context.expand( '${#TestCase#ACCOUNT_OID}' )

def aCCOUNT_STATUS = context.expand( '${#TestCase#ACCOUNT_STATUS}' )
def uSER_SAML_STATUS = context.expand( '${#TestCase#USER_SAML_STATUS}' )
def uSER_STATUS = context.expand( '${#TestCase#USER_STATUS}' )

def Result;
def myXML;
a = new dbUtils.dbUtils(log,dbHost);
b = new dbUtils.dbAccount(log,dbHost);
c = new dbUtils.dbUser(log,dbHost);

	 	
	 	String sql = """Select to_char(rawtohex(accusr.user_oid)) user_oid, accusr.status USER_STATUS,acc.status ACCNT_STATUS,
	 					to_char(rawtohex(ndusr.node_user_id)) node_user_id, to_char(rawtohex(ndusr.node_oid)) node_oid,nusa.status NUSA_STATUS 
	 					from account acc INNER JOIN account_user accusr 
	 					ON 
	 					acc.account_oid=hextoraw('$accID') 
	 					and accusr.status&lt;>'deleted' 
	 					and acc.account_oid=accusr.account_oid  
	 					INNER JOIN node_user ndusr 
	 					ON 
	 					ndusr.node_user_saml_uuid is not null 
	 					and accusr.user_oid=ndusr.user_oid  
	 					LEFT OUTER JOIN  node_user_saml_assertion nusa 
	 					ON  
	 					ndusr.node_user_saml_uuid=nusa.node_user_saml_uuid""";

	log.info "SQL Query : " + sql;
		Result = a.SelectFromDB(sql,dbHost);
		log.info "Result  : " + Result
	 	myXML = new XmlSlurper().parseText(Result);
	
	 	log.info "Results  "+  myXML;
	 	def count = myXML.ResultSet.Row.size();
	 	def i = 0;
	 	for (i; i&lt;=count-1;i++)
	 	{ 
	 		log.info "loop " + i
	 		assert myXML.ResultSet.Row[i].USER_STATUS.toString() == context.expand('${#TestCase#USER_STATUS}');
	 		assert myXML.ResultSet.Row[i].ACCNT_STATUS.toString() == context.expand('${#TestCase#ACCOUNT_STATUS}');
	 		assert myXML.ResultSet.Row[i].NUSA_STATUS.toString() == context.expand('${#TestCase#USER_SAML_STATUS}');		 		
	 	}

  log.info "User Validations Passed";


</script></con:config></con:testStep><con:properties><con:property><con:name>ACCOUNT_OID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ECB162CFF657798BE0401F0A05997A9D</con:value></con:property><con:property><con:name>ACCOUNT_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00002_UserGet_PERM_API_Invocation_from_Retailer_customersupport_200_OK_P1</con:value></con:property><con:property><con:name>USER_SAML_STATUS</con:name><con:value>deleted</con:value></con:property><con:property><con:name>USER_STATUS</con:name><con:value>active</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>142255c0-283c-4c33-b8e9-5f6a22d944a1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API_Device" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d3c8e548-121e-485c-a2d6-01c3d99b6e9a">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties" id="202d55ce-3f68-44d5-a416-cdfb21ca967c">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="2e9a8877-ebc0-4a4e-924a-9a982cf156cd">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("audience",callTS.getPropertyValue("audience"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName1"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tC.setPropertyValue("audience",tP.getPropertyValue("audience"));
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tC.setPropertyValue("audience",URLEncoder.encode(tP.getPropertyValue("audience"), "UTF-8"));
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem" id="43411945-2a7d-4bc1-ae49-487b80539b5e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = tC.getTestStepByName("GET - STS");

def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS" id="e5f89cda-b9fe-4e87-915f-c8315089ff28"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="DEV_concat.pem" id="62b42aef-a487-4295-93f5-29bb489f7886"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#TestCase#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers" id="d6a537da-64cf-4867-95d6-5eec2fab52c3">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true" id="8820d9be-247d-4986-8536-73c06127a842">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="cfb0d10f-fade-45f9-b6c4-d518768df859">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case" id="3852d3e9-71f4-4e31-ab15-fb2e5979e6d9">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Base64EncodeUsernamePassword" id="e791e034-6fca-4bc8-a4d6-425dcc72cfa7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();


String combo = tC.getPropertyValue("username").toString().toLowerCase() + ":" + tC.getPropertyValue("password").toString();
String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

tC.setPropertyValue("authHeaderValue",authHeaderValue);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STS" id="80d36f3e-7def-4ac8-ad46-466eed7fdfc9"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="DEV_concat.pem" accept="" id="dfab38ff-94eb-40cf-b752-e999a5334858"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#authHeaderValue}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1" id="0d95831a-f54a-465f-8b4b-f34c9a888414">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body" id="904b7061-9402-4254-9306-dca7c649763d">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());

			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
		     
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers" id="589cf504-8d31-45eb-a6bd-2a58feb2a9e5">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";


if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	//assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	//assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	

if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="352a92c3-da92-4c00-b83b-7604bd5e5fa0">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case" id="508e9f9b-11d3-433c-af61-db28e78b30ab">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
//callTC.setPropertyValue("SAML_USER1",tC.getPropertyValue("SAML"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>assertId</con:name><con:value>_bfae506f-c4ad-48d7-bf36-197b6590ad55</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2013-12-04T07:32:51.501Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2013-12-04T07:32:51.501Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2023-12-04T07:33:01.501Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_bfae506f-c4ad-48d7-bf36-197b6590ad55</con:value></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>audience</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:DSP_CS_1</con:value></con:property><con:property><con:name>connection</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2634</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>ECB16BD6EF348ACAE0401F0A07996303</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>AcountDelete_firstuser20131204_1386142377169</con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_bfae506f-c4ad-48d7-bf36-197b6590ad55" IssueInstant="2013-12-04T07:33:01.501Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_bfae506f-c4ad-48d7-bf36-197b6590ad55">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>VylTRH3mr2GRhKSPIyy3ugBEg6I=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
iZ/SzRCHFczTxxgIItg69HSfztguYcjrEEFQydylEdd9zScRjaikTq9l0WD7VpSnANvq7Vc5x+06
SZbh7v4OeOZsathzRMwzFQZsFQnQC8OU4YwTDgoWKihTXB79OuRY08LeOmNH7MvdglZfSlniZZgO
36c9y/zkmysfd2i6XKI=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2013-12-04T10:33:01.501Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-12-04T07:32:51.501Z" NotOnOrAfter="2023-12-04T07:33:01.501Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_bfae506f-c4ad-48d7-bf36-197b6590ad55</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-12-04T07:33:01.501Z" SessionIndex="_bfae506f-c4ad-48d7-bf36-197b6590ad55"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>authHeaderValue</con:name><con:value>Basic YWNvdW50ZGVsZXRlX2ZpcnN0dXNlcjIwMTMxMjA0XzEzODYxNDIzNzcxNjk6dGVzdGluZw==</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Get_API_Device" searchProperties="true" id="9b5955fa-2320-4d68-8c21-524f9f94eaea"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6ac8820f-5ced-4bd1-aa77-33fa66594e6c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="8286f708-9652-46b1-aac5-03009cea3c61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountGet" id="bdc79d6b-36b4-4d93-82c4-54944137dd0f"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountGet" mediaType="application/xml" sslKeystore="DEV_concat.pem" id="e1b8ad00-9ed3-4f09-980e-f2f86bdf18ca" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="58e496c4-2a07-4d80-80e8-a8197c15e5e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "ETag": 
			ETag = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);

tC.setPropertyValue("ETag", ETag);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9ebfabe5-c81c-48af-90c3-a68a847ff3d5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url       = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountGet}' );
def usercount = context.expand( '${#TestCase#UserCount}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#Project#Node_Account}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		assert context.expand( '${#TestCase#httpCacheControl}') != null;
		assert context.expand( '${#TestCase#httpEtag}') != null;
		assert context.expand( '${#TestCase#httpExpires}') != null;
		assert context.expand( '${#TestCase#httpLastModified}') != null;
		//XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The country code is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
		errorReason = "The requestor is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "The user does not have permission to perform the requested action.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
          assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
		 int lastColon = urlStr.lastIndexOf(':');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 1);
			                                
		tC.setPropertyValue("ACCID",accountid);
		
		
	} else {
		 assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		 int lastColon = urlStr.lastIndexOf('%3A');
		 int lastSlash = urlStr.lastIndexOf('/');
		 accountid     = urlStr.substring(lastColon + 3);
		 	                                
		tC.setPropertyValue("ACCID",accountid);
				
	}
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


  -- Comment for cache issue


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
	log.info "myXML  "+ myXML;
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	else {
		//assert myXML.Account.size() == 1;
		assert myXML.DisplayName.size() == 1;
		assert myXML.Country.size() == 1;
		assert myXML.RightsLockerID.size() == 1;
		assert myXML.ActiveStreamCount == 0;
		assert myXML.AvailableStreams == 12;
		assert myXML.UserList.size() == 1;
		assert myXML.UserList.UserReference.size().toString() > 0;
		assert myXML.ResourceStatus.size() == 1;
		assert myXML.ResourceStatus.Current.size() == 1;
		assert myXML.ResourceStatus.Current.@CreatedBy.size() == 1;
		assert myXML.ResourceStatus.Current.@CreationDate.size() == 1;
		assert myXML.ResourceStatus.Current.Value.size() == 1;
		assert myXML.ResourceStatus.Current.Description.size() == 1;

	     if(context.expand( '${#TestCase#CS}') == 'Y')
	     {
	       assert myXML.ResourceStatus.History.size() == 1;
	     }
	}
} 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return_ETag_to_Calling_TestCase" id="7f13ebda-5618-41de-a9aa-6563b246dff8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("ETag",tC.getPropertyValue("ETag"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Account AccountID="urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303" xmlns="http://www.decellc.org/schema/2013/10/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>accname_20131204_023256</DisplayName>
   <Country>US</Country>
   <RightsLockerID>urn:dece:rightslockerid:org:dece:ECB16BD6EEDB8ACAE0401F0A07996303</RightsLockerID>
   <ActiveStreamCount>0</ActiveStreamCount>
   <AvailableStreams>12</AvailableStreams>
   <UserList>
      <UserReference>urn:dece:userid:org:dece:ECB16BD6EF348ACAE0401F0A07996303</UserReference>
   </UserList>
   <ResourceStatus>
      <Current ModifiedBy="urn:dece:org:org:dece:RET" ModificationDate="2013-12-04T07:33:00.366Z" CreatedBy="urn:dece:org:org:dece:RET" CreationDate="2013-12-04T07:32:56.993Z">
         <Value>urn:dece:type:status:active</Value>
         <Description>Flipping Account Status to active</Description>
      </Current>
   </ResourceStatus>
</Account>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1126</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>DF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>SecondUserName</con:name><con:value>username_20130618_082841</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>D3DF7BAE6D161DAEE0401F0A05993EE0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF6FE78EF7554B5BE0401F0A05994050</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>ResponseTypeAccountGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ECB16BD034824CEBE0401F0A079962F7:CA56D918"</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E763CEDB3CA1FFCEE0401F0A07991BDA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Delete_API_Device" searchProperties="true" id="5f0bbe7a-5937-4eac-b54e-e79d00d8349d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="9751348d-e193-4bca-98b8-c85e02aa0fe3"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="476f7c74-ca6e-4a84-aa5b-c7492b4ad652"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("AccountDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep.name]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="AccountDelete" id="19a1a894-70a0-4403-8a49-0edcd3fb1e03"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" methodName="AccountDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AccountDelete" mediaType="application/xml" sslKeystore="DEV_concat.pem" id="7e19750b-606f-4d7d-bda7-cfa0c9074a64" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
  &lt;con:entry key="If-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="f340397c-333e-4e2d-81b6-1de3663bbde6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('AccountDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="5b333ca4-11fd-47fb-8ffe-b86a3f833532"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseTypeAccountDelete}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) 
{
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "The API call is not authorized.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
	break;
	
	case "USER_INACTIVE":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";
	errorReason = "The requesting member is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;
	
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;

	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;	

     case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "ACCT_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:AccountDeleted";
		errorReason = "The account has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDeleted";
     break;
 	case "MTHD_NOT_ALLWD":
	expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
	expectHTTPcontenttype = "text/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
     

     
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="c52c1e2b-2e3c-4725-9eb7-c86b3ed30c61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def responseTypeAccountDelete = context.expand( '${#TestCase#ResponseTypeAccountDelete}' )
</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece">
   <Error ErrorID="urn:dece:error:MalformedRequest">
      <Reason Language="en-us">405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.</Reason>
      <OriginalRequest>urn:dece:type:null</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">356</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=nVZdb+o4EH3vr4jSx1VIQiCUCJAoH9uoH7SE29vysjK2E9wmDo0dCPz6tQNJgdIudyUk5GF85oxn5gwtBqKw6nQZwwknMVXcflv9Z+YDXDdsX4M1gLTaFWpoM9+yNbPZmNn1pgFQva4qLmMpdinjgPK2WjVMSzOrmlGbGA3HshzDrNQNc6oqzzhhAlq4VAxVyaKQMicP21bThDoxYIQ5FESYORw6Xvf+zhGeDig4qZ3WlmUeMOnMOV84ug4rCEMchrAC40hv6Qc+LcQcjwQU8DTBu5iItdXd3dVqVVlZlTgJ9KphGLrR1IUPYiS4VDsXxWWMXOrH23MP0JgSCEKyAZLUPebzGCndMIgTwufRN9CmbhoSWsMZ1KBZo5eq/hkgZ3cm0gHJhAGNzYFZgI2xjxNMIVZ+jd22enleBbd3JwmgzI+TiB2d/4wSpkscxguMNFZkVrA7H/HEc3VaGDouhWHKyBI/yDZZAIiZ8phgn2R3hInmQ0zJy69kTHxI0WUY/klZWvo+V0FdP/E6fRJgxv9PzfbrtUV5BmGKO8/rcDK+saKk+vd4fus9uuu1lQbXg8B22zmFfectqbLcu/Nxs5a9tbtEprq3GfduhnAzybLAdXlgN288f8OD9BW+JYPB8GmN1uEAoebGg+M3QN4nH83Q+N1vPC882n1YfjSeYT37y7AvvOls3ljWRng0ZYDPN+P71Wb4NGXDJ/rUuxr9qr2uJv0g/n1L5pOX60ZzlI5fjas7PIoebhr3SxSEU98LKZlOg9GFZcPmWt+8R2vmoyqxX27d9mdO+zkcGgtJ8NLZG4a8OMr2cPvKUNQL8J/lRVoI0vzc1VlIjWIcU6525C0pLU4qBIggRxRzex70rk37um8PhlbtqtvrDoyaYQ6NrtFoNm3LsAoN2rI4otiLqU9kLKmy2/75mSCMnBkGCU7UH5D6gAPlIeYjOkq6PsfJgRCbxr4Qyw7/Fuj4tyKm8EFEOjAZ5hqL98JfxL7q1AuxP+ZSPb0U9AK/i5YEluUs95CQMdHkudQzMVYfoIIq6XKZSq13GnKAEzETuphjU/cwTMUUrifxO6Z6CaGfJYJF2seRS/shv5TPqccBx5FoFSU/nrEBPczkBnQpwtm56/UgpKgCxxk/ZeuFYlFKxj/uUuhA6SfMj+JrFSeoTPAU1l4ckadYe5zQQJ6k3K0/J0SORjkeMBawRMxnnOyDnwI4FfzQWD5yyYXzhMxSjr//RZGD11YBhHFKudtXc8O+GOQ8+XqBnU+nLzC54Ow2SMa+3SAv93cenOMIqKUv+W9njeTtArEqF1XOpa1m4g+RCE6DPfHZEfxGf6o/6c9hJp0v5q+WvTc9nofOvw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs//DEV_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_AccountDelete_PERM_API_Invocation_from_a_Device_P0</con:value></con:property><con:property><con:name>sName</con:name><con:value>AccountDelete_PERM</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:ECB16BD6EF328ACAE0401F0A07996303</con:value></con:property><con:property><con:name>ResponseTypeAccountDelete</con:name><con:value>MTHD_NOT_ALLWD</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"ECB16BD034824CEBE0401F0A079962F7:CA56D918"</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PrimaryEmailGeneration" searchProperties="true" id="f9b29056-b1e7-4bbe-b689-58763a3ed769"><con:settings/><con:testStep type="groovy" name="DynamicPrimaryEmailGen" id="fb9316d4-a11e-416e-bb0b-fe410ca48502"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc for PrimaryEmail Generation
def email = tP.getPropertyValue("PrimaryEmail_Prefix")+ new Date().format( 'yyyyMMdd_hhmms' ) +"@uvvutesting.biz";

log.info "generated emailId: "+email;
tP.setPropertyValue("PrimaryEmail",email);</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AlternateEmailGeneration" searchProperties="true" id="6f6d34ab-2c84-49dd-82b2-55269fe5e8d3"><con:settings/><con:testStep type="groovy" name="DynamicAlternateEmailGen" id="69f333e0-db42-4493-8e74-ca62c71785a1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc_ae for AlternateEmail Generation
def email = tP.getPropertyValue("AlternateEmail_Prefix")+ new Date().format( 'yyyyMMdd_hhmms' ) +"@uvvutesting.biz";

log.info "generated emailId: "+email;
tP.setPropertyValue("AlternateEmail",email);</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_PostRequest" searchProperties="true" id="a072081f-5ef1-4e79-8670-ae30d5ac9e1b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="54e6be6e-a0d6-40c0-a727-32e3ac18df40"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="a8fe8e89-6313-4b5f-8b67-dfc5457d663a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="3e225133-d0ec-4b99-a2b6-443f47b7b8fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation" id="5ce83be0-09e0-4158-9dd2-960f98a6121a"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="" id="311c1940-852c-4528-a85e-0f2905db6089"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/VerificationToken/urn:dece:type:token:UnlockMe</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="646e7034-ff33-40cd-87b6-e1173be53f54"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="26d6598c-8a1e-4073-a528-6353f1df7684"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		//assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00141_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_mergedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_PostRequest_Without_SetPem" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8cde1062-2b08-4af2-9655-8937ef542259"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="ef90c2e5-1f65-4e78-b3fa-05136fccd704"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="5e7d7239-fd1e-4aca-b8be-92558933c69f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" disabled="true" id="3f59a61e-7b01-41ea-8479-fa1023b77db5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation" id="1bfe4dcd-ed63-4fb1-8816-ba23c8857bfb"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="" accept="" id="75825ba1-d3ac-481b-acce-e10e5f79d2ca"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#SAML}"/>
  &lt;con:entry key="Accept" value="application/xml"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="65e1a213-1efb-4d0f-9217-27ccb1dac075"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="27ae5fe2-ffdc-49a4-b6eb-cfdd76d75e3c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}*/

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00001_UVTC_PrimaryEmail_SSLKeystore_Null_200_OK_P1</con:value></con:property><con:property><con:name>TokenType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_HeadRequest" searchProperties="true" id="747578d0-928d-4c4c-ac56-fd459dada055"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="81fc59fc-2de8-42f1-848f-5bbfebe0ff4d"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="e4ed6dde-262b-46c8-8290-6eddce76e424"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="98ac3808-aeea-45c8-bba6-a729a78ee23e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HeadRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="HeadRequest" id="46e7839a-45ec-4a7a-b7e9-bcb8a8df7e20"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="HeadRequest" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e96b8d65-3c1f-4393-a7fb-93f51165f3c0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('HeadRequest');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="b8bbe244-6447-4814-88bb-8d0062550313"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";*/
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00012_UVTC_PrimaryEmail_with_Method_HEAD_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>46e7839a-45ec-4a7a-b7e9-bcb8a8df7e20</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_GetRequest" searchProperties="true" id="bc5a9b50-3ea2-4c09-8145-4ef7ff431865"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="20e7296c-6b4c-4917-b4af-58aca35be516"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="eafca3a5-2175-4901-9682-a77ac13c7082"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="d07e918b-22b0-4eab-a190-a9489b141e10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("HeadRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="GetRequest" id="35124fd0-e4c4-4838-97aa-76583e32f43a"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetRequest" mediaType="application/xml" id="5ce92023-4294-4f05-ad8e-e3605986c9b2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="01b868f7-338c-4a5e-acdb-a15ae6ff8a28"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GetRequest');
log.info "3#########" + tStep.getName()
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
     	log.info 'setting status = ' + status;
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="9b2312f2-91e6-4179-8d51-8afab174d0a0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;
	
     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case Setting EXP";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	processXMLFlag  = false;
		
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;
/*	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;*/
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");


log.info context.expand( '${#TestCase#httpStatus}' );
log.info expectHTTPstatus;
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;
// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	//assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00013_UVTC_PrimaryEmail_with_Method_GET_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">GET method is not allowed for API call: http://stdecqavap9.va.neustar.com:8009/rest/2015/02/VerificationToken/urn:dece:type:token:ValidateEmail
</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Gits\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>20e7296c-6b4c-4917-b4af-58aca35be516</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eafca3a5-2175-4901-9682-a77ac13c7082</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d07e918b-22b0-4eab-a190-a9489b141e10</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>35124fd0-e4c4-4838-97aa-76583e32f43a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCPrimaryEmail_DelRequest" searchProperties="true" id="e92fcd69-055a-4047-8daa-d775a11493cb"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="0c694b97-8649-423f-9c31-d961ebafd12c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="2f93d66a-5f98-403d-9d17-c19d27817b8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

//tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="5a3ad560-02d6-46ca-99a3-4a9c3cb9e982"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeleteRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="DeleteRequest" id="92b298c2-ba45-4a92-97b9-0cb5fc5a0a05"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-Del" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeleteRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" id="c468d5b3-d7de-48f7-a60e-8b729ea30b26"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="If-Match" value="*" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/VerificationToken/urn:dece:type:token:ValidateEmail</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#PrimaryEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="2702e2e9-bbb1-4edc-b88a-160429706498"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DeleteRequest');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a12ec02c-c080-42a9-8e57-8e881c7dc7f1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

expectHTTPcontenttype = "text/plain;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
	log.info "##########################";
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain;charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;

     case "METHOD_NOT_ALLOWED":
	log.info "Method Not Allowed Case";
	expectHTTPstatus   = "HTTP/1.1 405 Method Not Allowed";
	XMLbodynull        = true;
	/*errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";*/
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
log.info("Assert on Http Status");
log.info("Expected: '" +  expectHTTPstatus + "'");
log.info("Actual: '" + context.expand( '${#TestCase#httpStatus}' ) + "'");
assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
if (XMLbodynull) {
		log.info("Assert on Content Length");
		log.info("Expected: '==0");
		//log.info("Actual: '" + context.expand( '${#TestCase#httpContentLength}').toInteger() + "'");
		//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//log.info("Assert on Content Length");
		log.info("Expected: '> 0");
	//	log.info("Actual: '" + context.expand( '${#TestCase#httpContentLength}').toInteger() + "'");
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	log.info("Assert on Content Location");
		log.info("Expected: 'null'");
		log.info("Actual: '" + context.expand( '${#TestCase#httpLocation}') + "'");
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}


	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

 
log.info "Content Type       actual : " + context.expand( '${#TestCase#httpContentType}');
log.info "Content Type  expected : " + expectHTTPcontenttype;


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00014_UVTC_PrimaryEmail_with_Method_DELETE_405_METHOD_NOT_ALLOWED_P2</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_PYLD</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DELETE method is not allowed for API call: http://qa1.p.uvvu.com/rest/2015/02/VerificationToken/urn:dece:type:token:ValidateEmail
</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>MTHD_NOT_ALLWD</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0c694b97-8649-423f-9c31-d961ebafd12c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2f93d66a-5f98-403d-9d17-c19d27817b8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5a3ad560-02d6-46ca-99a3-4a9c3cb9e982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92b298c2-ba45-4a92-97b9-0cb5fc5a0a05</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UVTCAlternateEmail_PostRequest" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="951868b5-a08e-44b1-a3cf-cbb9d3848779"><con:settings/><con:testStep type="groovy" name="Establish_Test_Case_Properties" id="1c8b23d4-78d3-45f4-9a85-35e030cb69fa"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="8ac25e2a-cc97-48fb-983b-88a56923581d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseType"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));


			</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Pem" id="d406221f-92e7-4c6a-8977-2a1328bc9969"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("SetPem")
myTC.setPropertyValue("nodeId",tC.getPropertyValue("nodeId"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("UserValidation");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="UserValidation" id="ee13e34e-496f-43f9-b1bc-ec889a3fe1ec"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UserValidation" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept="" id="e9d8abb5-0419-4639-bca8-d9fb2eaae9f4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/xml" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Mandatory and Data</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:originalUri>https://qa1.p.uvvu.com/rest/2015/02/VerificationToken/urn:dece:type:token:ResetPassword</con:originalUri><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="TokenType" value="${#Project#TokenType}"/>
  <con:entry key="UserIdentifier" value="${#Project#AlternateEmail}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="e42d6b73-1229-44f1-88f1-726188d2122f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('UserValidation');
def expXML = tStep.httpRequest.response.getResponseContent();
 
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
 
 
tStep.httpRequest.response.responseHeaders.each() { header, value ->
switch (header) {
     case "Location": 
		contentLocation = value[0];
          break;
     case "#status#": 
		status = value[0]; 
          break;
	case "Connection": 
		connection = value[0]; 
	     break;
	case "Content-Type": 
	     contentType = value[0]; 
	     break;
	case "Content-Length": 
	     contentLength = value[0]; 
	     break;
	case "Transfer-Encoding": 
	     httpContentEncoding = value[0]; 
	     break;
      }
}
 
tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);



tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="52350bf8-7677-42c5-a2c3-2edd5c15f344"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def url = context.expand( '${#Project#Provision_HostName}' );

def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/" + context.expand('${#TestCase#AccountID}')+ "/User/" + context.expand('${#TestCase#UserID}');
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";

String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 200 OK";
		XMLbodynull        = true;
		//httpLocationHeader = true;
	break;

	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";	
		errorReason = "The API call is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_VALID":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdInvalid";
		errorReason = "The user ID is not valid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
	break;

	case "USER_INACTIVE":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotActive";	
		errorReason = "The requesting member is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotActive";
	break;

     case "URL_NOT_FOUND":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		expectHTTPcontenttype = "text/xml"
		XMLbodynull     = true;
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "MTHD_NOT_ALLWD":
		expectHTTPstatus = "HTTP/1.1 405 Method Not Allowed";
		expectHTTPcontenttype = "text/plain; charset=UTF-8"
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;

	case "USER_NOT_IN_ACC":
		expectHTTPstatus = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
	break;

     case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficient";
		errorReason = "You do not have permission to perform this action. Ask a full access member of your account for help.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficient";
	break;	

	case "ACC_NOT_MATCH_TOKEN":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
		errorReason = "The account ID does not match.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "NO_ENABLE_MNG_USR_CNST":	
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Policy:EnableManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:EnableManageUserConsentRequired";
		errorReason = "The setting of the EnableManageUserConsent policy prevents the requested action from being completed.";

	break;

	case "NO_MNG_USR_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the ManageUserConsent policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageUserConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageUserConsentRequired";
	break;

	case "ACCT_INACTIVE":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:AccountNotActive";
		errorReason = "The account is not active.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
     break;

     case "SPL_CS_ALLOWED_ACCT":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
     break;

     case "USER_ALREADY_DELETED":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserAlreadyDeleted";
		errorReason = "The member has already been removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserAlreadyDeleted";
     break;

     case "LAST_FULL_USER":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:LastFullAccessUserofAccountCannotBeDeleted";
		errorReason = "The last remaining full-access member in an account cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LastFullAccessUserofAccountCannotBeDeleted";
     break;

     case "FULL_USER_DELETE_NOT_ALLWD":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToDeleteFullAccessUser";
		errorReason = "The requesting member does not have permission to delete a full-access member.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToDeleteFullAccessUser";
     break;

     case "SPL_CS_ALLOWED_USER":
	     expectHTTPstatus = "HTTP/1.1 401 Unauthorized";
		errorID     = "urn:dece:errorid:org:dece:NodeUnauthorizedToDeleteSuspendedUsers";
		errorReason = "The request is not authorized.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#NodeUnauthorizedToDeleteSuspendedUsers";
     break;

     case "USER_ACTIVE_CLG":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:LegalGuardianUserCannotBeDeleted";
		errorReason = "The connected legal guardian (CLG) cannot be removed.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#LegalGuardianUserCannotBeDeleted";
	break;

	case "USER_PRIVILEGE_INSUFFICIENT":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:RequestorPermissionInsufficientToDeleteUser";
		errorReason = "The requesting member cannot delete the member.";		
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPermissionInsufficientToDeleteUser";
	break;

	case "INVALID_STATUS":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserStatusNotValid";
	errorReason = "The member's status is not valid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserStatusNotValid";
	break;

	case "NOT_FOUND":
		log.info "We are in NOT_FOUND Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 404 Not Found";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierNotFound";
		errorReason = "The user ID was not found.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierNotFound";
	break;

	case "FORBIDDEN_COORD":
          expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:RequestCannotBeServiced";
		errorReason = "The request cannot be serviced.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestCannotBeServiced";
	break;

     case "BAD_REQUEST":
		log.info "We are in BAD_REQUEST Switch-Case";
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:TokenTypeNotValid";
		errorReason = "The token type is not valid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#TokenTypeNotValid";
	break;

	case "FORBIDDEN_LIMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID = "urn:dece:errorid:org:dece:ValidationTokenRetryLimitReached";
		errorReason = "The maximum number of validation token requests allowed for the member has been reached.";
		errorLink = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#ValidationTokenRetryLimitReached";
	break;

	case "INVALID_REQUEST":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserIdentifierRequired";
		errorReason = "A user ID is required.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdentifierRequired";
	break;
     
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
log.info XMLbodynull
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	//def a = context.expand( '${#TestCase#httpLocation}');
	def a = URLDecoder.decode(context.expand( '${#TestCase#httpLocation}'), "UTF-8");
	def b = a.toURL();
	def urlStr = b.getPath();

def hostAddress = b.getHost();
 log.info " hostAddress....     " + hostAddress;
 		if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3ST");
			}
			else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
			{
				tP.setPropertyValue("targetSystem","LP3CH");
			}

	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
	
	int lastColon = urlStr.lastIndexOf(':');
	int lastSlash = urlStr.lastIndexOf('/');
	accountid     = urlStr.substring(lastColon + 1);
	
	tC.setPropertyValue("ACCID",accountid);

} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}




//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorLink Received [" + myXML.Error.ErrorLink.toString() + "] Exp[$errorLink]";
//		assert myXML.Error.ErrorLink.toString() == errorLink;

		// code added to get the expected and actual responses
		def fileName = tS.project.name + new Date().format( 'yyyyMMdd_hhmms' );

//		tP.setPropertyValue("fileName",fileName);
//		def testCaseName = testRunner.testCase.name;
//
//		def logFile = new File(projectPath +"\\" +context.expand( '${#Project#fileName}' )+".xls")
//		logFile.append(testCaseName.toString()+"\t"+context.expand( '${#TestCase#httpStatus}').toString()+"\t"+expectHTTPstatus.toString()+"\t"+"Exp[$errorID]"+"\t"+"ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "]"+"\t"+"\n")

	} 
	
 } 


</script></con:config></con:testStep><con:properties><con:property><con:name>Email</con:name><con:value>test_uvtc20131213_025047@uvvutesting.biz</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADF802691433EE445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3ADF8026914382E445E0401F0A05996AFB</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E52C7B2598AE766FE0401F0A079940DB:4917B200"</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E52C7B258058766FE0401F0A079940DB</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E52C7ACD89FC834FE0401F0A07991922</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVfZcuKwEn3nKyjmkSJeWE0lqZKxAQNmNWZ5uWXL8gLesLzB11+ZBIZkktyZ+wRqtbpPL24dPWPNc9kuwBhFsRP4ZUl4qfxHayAGma12zaxzrVpDb8OaxtB0jWUbjQ5rNHUacZWyhHGCJB/Hmh+/VFiaqdfoTq1OK0yzSze6jfZTk6nvK2UVRZiYJipPdKWce66Pu1e3L5Uk8ruBhh3c9TUP4W4MuysgT7pEs6vdMFVen99QXh1Gr3Ych12Kgk8Ggsh14RMMPOqZ+qDzbODuyrF8LU4i9O7TwC+V97NZlj1l9acgsiiWpmmK5iiiY2DH+lV5Ld0OI0PyzeBt3dP8wHeg5joXrQAlo9gOjDJwrSByYtv7xjRDMXRhuoZyWINMw/9VoX47uKL7S0sfQEZYq2FbY27GlshEEfIhKq+X0kvl199V8O2sEmk+NoPIw5/W/wYJ+SlygxAZNXyL7Ibu7y1+ka7XZwS7kg/dBDspmhZtEmoQ4fI8QqaTTxxMms/A5Wv5yzm+dRiC/1KSZ+oRJ4FNfZEZwbEQjv+fej3W6s2KqrkJepWEBoh30Shbrl3BZXvBJXHtbYszUvHlCuFR+Q3UvdTv68+Neu+r90OeNpqxh0Yk0+vTBaRC3qZb4vYy7Z3jppUtzXSnDC9KNKRp4DGx2dJ4H4NeXtUddY7tZbOz1GldZGbROgtKftuFVLJi1J3hd7KlFftULGJlLmRjdeSlcypdu6YOdFk94tPcdFuD0QE01aFqr0cLQ+3wlDHZSKLevjBa6aLXtzMPDcLzfLCo273+QX75HdNjDEVcY3S+Bln83zZpTtBi7b7oFZPCJJ9njF5lSepVhV4PoJ4FMokHlsRPLmDKW8eTfXQGXEbzYLHuAwGc5SXIBGsnqIvFWMwMVXX3qtTv8/KykQ3BTiiRDUHMVWG/HdHaZh/u2D69X/G8sV0Gen0UGsNjNrThVFbkbKpIZ/kg5lNFpDdXmZWT9UU+yMxMWddLmwPPyUsxE7KrR0HM7Ol+swx3ay6DF3Ehg8YAMGuxZ8tDxVMZWF/a8CBOZHC8ynlb7qmqnIsKmJd4a6qS2JRefx9Czwh1z7UfjA+JccUYqGd94Cb7i3iQe+KgtzoNVpJeFxbiCCx3a32jHrVNPy3B4RToN49O09G2QWbtO5mw2I3GwV6yUzgFC5HnF4CkiwayNBiBYMADuQGc/NI78K2gZ/QzasTiUpVzB63t2TltsTagXY3pdJjdZNOan1qC6Ff340Q/2LK97c+q45WRrrmYu+xwWk1bmsPAPDQXW3EYj3NzuFiV9LmQb+Gwalgjyr1w/Uhuj0B0OduubC3jTWuGz7pjmht+O2u4bdOV68vQdM3wjKtKsDhGdItHdZbandNxXAKWzAMwOKwP/ELmO0VSDSlb7GReA30xTsDlwMZjVj2NhqkLd3UQ5OPN7HB8L4whZCJPZQuRtJVY6gjAKIowXK3F/gGsecuKeEvs8wsogMVOGmc7kq/1kCh/zmP/mkdL5IFY34MWNyzV1zQXz+JVowHOPr/2+5wtn/KN0fLo9gmJk9U0bGQynpr+fhMcZc+J1lGyWo/H00muK8ngeCCzyqRX47S+L4npMQTOdKzYRyEQtHm428Vh1YcRjKXQk6X8MtvjQ8fRPXpUbTL8nBZgm117erYeaOJ+HFkrZjxc+vN6myvhxDwPveqhk22qyqoVto2ebwrnM7WPVDoAQZ9bNk9GzrJHe51NWpk5AkddY6e5y/FnThzvFZgtF+PNyqs2S810MvHoi0I1puEsWw2yhrhYVOsGrwwVHEbOLulYeTTzDXanxa10T6stJ3SPHJsclUZYVy2PFGueGmFbnpcWjS3ce1Y7hCNqSaVAbJsTaXDWL9ol9GbwbYB+ng534dv8oB4ny4fRcyMdK9KtCMa3ZXEBSUK5T24FLf6ZwBQSx6iZV9VuWLAgHCM/rrwWpwry0k0IxXGMLrky3tZik+21ebbZEZheu9Xqi3SDZvo0oNsc16AF/sZy3lB8gtgLfNMpfBU87u2W+hkg9LoY+QaKammQQBvhyg8Wi3yVJX9Jrt/Ax0gJCE9s8y2mL/ZpWmgQzPUOx3Edsd/ptwWmwzc7oFKeBvHMn0XAjFH0kSN2PnDEJYJO6KCCSBa3KSbXKY5JSk5amsQu85RqTz5KCNWMCrbXZRudJoUdL3RRAZjyAiNx0VNoh9cEUfjtl61pEF+lDoZhEMWay1wv+2+j/Lx3SwjRMZxCARch8YgUFX3Beeu3eL6Nm2Ue476ZB4nhFHc6yW4cOfANycet301TdMu9Y+6BQczcsN+P/KOJLwxQP+CjPqfm7s9InQfvNx5PqCkhL6+3+p60p9NTkqbJtaLtgphFxDzFUHSbWiGYEHZ1VoIj8qm7CeqviO0d9SfPd/lHfEls+6uYDAeP9F/5uvyLV80K4eJVI5HvJ//bJ9MHlyRvMcrjr2Q9lzx+CsQ/vo9gFxZ6RDwnP1kQGb/L9YWtBz8kzmIaOr5VrAoae/6mN2BAzDpkIgbRo/GvDHzl/KPwnuQ7lph0k57E6PudcjHqXioahEHix5JQuQoex+8VZ3wOUfe30h9mrkTy/WWQ429fBlt5siKD0NMqd13nfyvXnGu7QEROYeeK5aWSk0cuce5bD+P+HeCXE59udn6a+B8jef1D/KfkIaefv4fX/wI=</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8dac2685-8684-45a7-9383-18906924bc23</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>40b51506-e7ed-484f-9cef-144c355c10b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0e921030-fc0e-4088-8519-d2ea05acede9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" id="29e8cdd4-b32f-4148-ae3a-ef0e02b4df6a" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    
    
    
    
    
    
    
    
    
    
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true" id="3e631592-a3e8-42be-94c5-e4f208a401a8">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases" id="c49f417a-5c75-482d-99fc-deabcf5c4952">
        <con:settings/>
        <con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "RETRY_ATTEMPT_LIMIT";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\ksaxena\\Desktop\\TestCaseNames.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
}
</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true" id="63df2d8e-8a58-4955-be8e-c4eccb9b3ba4">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6d43ab82-0256-41cb-944c-980322b1d977">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:saml2 Test Cases"; 

def oldString = """STS API - SecurityTokenExchange Invoked to Coordinator URL""";
def newString = """STS API - Invoked to Coordinator URL""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;
				
				if (testStepName == "-- Call STS SAML Token Exchange") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					stepScript = testStepList[j].getScript();
					stepScript = stepScript.replace(oldString, newString);

					/*
					*  Delete a step
					*/
					//targetTestStep.delete();

					/*
					*  Replaces step's script completely
					*/
					//stepScript = """""";
					targetTestStep.setScript(stepScript);		
				}
				
				//targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true" id="88abec67-0cfd-4158-ab1e-3dcbf6d69df0">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property" id="4aae0d70-4938-4154-a8b0-c9815b6cbb6e">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Holder for new sts";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true" id="99c778cf-bd1a-4293-b34d-53339dcae326">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="6fa579e3-343b-4c71-a90d-3e3530823dbd">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS Tokentype urn:dece:type:tokentype:DeviceAuthToken"; 
def stepName  = "Establish Stage for STS invocation as a Device";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true" id="0e62a367-0dda-4249-af02-f64c612938a3">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite" id="fad1a6f8-dba2-4686-8508-367c21c245f7">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "STS GET Node Role Type Test Cases"; 
def stepName  = "Call STS";
def stepNewName  = "Call STS GET - DeviceAuthToken";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTestCase_Titles" searchProperties="true" id="331566b6-50a8-4d4a-9fca-b5e9f81ff3ee"><con:settings/><con:testStep type="groovy" name="Get_TestCase_Titles" id="e082ce37-8959-49ce-a478-49d56b92308b"><con:settings/><con:config><script>
import java.io.*;

def commonTestStep = "AccountDelete_API_R4";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();


log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
                {
                                def testSuite = TSList[k].name;
                                def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
                                def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
                                log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
                                log.info "TSList[k].disabled " + TSList[k].disabled 
                                
                                if ((TSList[k].disabled).toString() != "true")
                                {                              
                                                for(i in (0..TCCount-1))                                                                  
                                                                {                                                                                         
                                                          try {
                                                                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                                                                                                def targetStep = targetTestCase.getTestStepByName(commonTestStep);
                                                                                                log.info  testSuite + " " + targetTestCase.name+" "+targetStep.getPropertyValue("ResponseType");         
                                                          }
                                                          catch(Throwable e) {
                                                                log.info "Exception : " + e;
                                                                }                                                                              
                                                                }                              
                                }
                }

</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="First_User_Create" disabled="true" id="1f6319fc-0958-44bc-a18f-e63653a0e8af"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_First_User_Create_STS_Policies" searchProperties="true" id="bf6be7d4-9561-4c60-9314-ec69bcea736d"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="f05e0c99-e0d5-45df-a3a3-69bdd405b626"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tS.getPropertyValue("nodeid"));




</script></con:config></con:testStep><con:testStep type="groovy" name="Call_AccountCreate" id="16607a01-08f1-45c1-8587-cd696ca23e57" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AccountCreate_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Feed_data_for_First_UserCreate" id="c45904a4-762a-4f06-974b-cc91555d52f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "UVTCPrimaryEmail_firstuser"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_First_UserCreate" id="823f71e5-447b-47c2-93ce-59ce6e6e5939"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("FirstUserCreate_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API_for_First_User" id="e295461c-81ad-43d9-8829-d547e6a8d66b">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tC.setPropertyValue("SAML_USER1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("NODE_ACCOUNT_ID",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-TOU" id="19645da3-f439-428e-b225-bd218007a1b9" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC" id="919b68d1-fc2e-485e-8681-3867fe9cb1f2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20150522_073433</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>1822F318F5BA677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20150610_09364@uvvutesting.biz</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_43a95d3c-4bfb-48d4-a25b-0261ad00fad4</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_43a95d3c-4bfb-48d4-a25b-0261ad00fad4</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>EDA803661762BCADE0401F0A0599202A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:EDA803661762BCADE0401F0A0599202A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20150610_09364@uvvutesting.biz</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH10StILAh1hBhGUrShyceN+ORPSANE2xSSF4q/fSYFKUTyc89TJ6sq3vnXJl1wKFAa21xCCcEkjVkjCgAkvtdaMmDMvQoIKj6GQCE9ib9Do3nt2EXpot8UodK5rxj+ug6ol38GmO5lOTLfiuyaySxMT2hcW8iGcIt9VrkLEpMOEREzWDBtaJRNemBYcQteDjgftYqkM/xiFZ8KFwlYuRWhsSSWiZsylXHgArFar4sopRnwGbAgtMO7eD/CchMioX24ySgPx+tYfF32CSRDgIo5CcAlyPpe+8AZ0xpCMOdnG8o/FggBWgfLxBZ2dGdle4nfYNEqXTcQiRjEK6AfS9ekSOY/8QiOYRZzKeXg0CQtqYJMk2MSWy84MkKd2IlCOIRfIFHNkbbH6ZEo4YZgURv1OzTg7rWvp1iFHTEwjHor88r/xIWxJgmhBfFPs0tpSOx3wm0rVLwn2OgwHsaBL8qCHdYEwEdtuEnw6VKHHyZQm91SoAU2EZgf26R0sN9W4pjMi5P9p0F5zNiDPKIhJfUBE+elldPP+++bmtTW0Wta4/9rtucmqW0sJ7Dunhqy1m+XBUGZDtNnxFE6T0eipXSqNuhCBILGuxtQBM9r4NUaw1S4n4zs2v6fxr/Pmbflj+NScocHbiNB557advFFyG67dxbPTgBXRehpbd3fv56TZWsMXOS8N7Mn0ZnxXsez+qP/7/Hn+uFzL8dPNM3rpYYdX7pwKFvGfIfbPHZgsJg9xy6I9cMXp1bm7btwun18YBD36CN5u/VktS2ePf962O/ODePJKsNwt9Rh0rgtt1SUkfxYzbaG+OU1dvYUWHyEJk0Zd79La4cVK7qjvqR5u1lbFttuOVWmXrqoX5XK7BUuO06pWrTZsOJXm1U5kNiwOKDYjNqU6lpbczdj8TBCHniDMJ9xcRrFSOmH8gHiNJCp0WF8dgogJMoyUPPNXp4rXH2GFu9Qqy4uqsK01X/lKXR8i+cgeeWMqCc9rcjmnyX2C6YISLdx6roUabCFVLd7RMpaBVVyiIiOxknauVdaz3UoJCBouAqKZgjDy44AUF/NFWhkgNl/bRFik1n5rmJ62o3kd/tuVQPn4VDsIncsVUW0kXy4X2yvtEjmasAX3E97BN2Kf6oOl6ik5xRsm+V+fY6LnI5sRldGOcuZ5aMihgsOEskD+kuJs0LPrWqm4Ovf1XTvekVV8L8bLZZx2wHUdwBU80CkCaIMBwbFSpvUweiMMZCjgpGsgI34QPLPnKcZyzgYSSRKqiSmkyxPufaV7+t7vqFFPTn1U5EKq0kmSyO9szUC9WTTjH5812MPaT5l76rOKuP/ZsW+w9uKoPNW1Lymb6ZW+AtZH5gJHCpYq8Yr4Pvh3AN8FzxuzImdcpBqoSSzJ8T8FrUo1A2EcxUx2ro3UsK+UKU+5XhDv0+kLTCrG2euM/vvzzKTpCGCi3nSCpvj6kvX0EWCzPbXdBj0iuJWfBDfPrv7F/NWyV6fDGa//BQ==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH10StILAh1hBhGUrShyceN+ORPSANE2xSSF4q/fSYFKUTyc89TJ6sq3vnXJl1wKFAa21xCCcEkjVkjCgAkvtdaMmDMvQoIKj6GQCE9ib9Do3nt2EXpot8UodK5rxj+ug6ol38GmO5lOTLfiuyaySxMT2hcW8iGcIt9VrkLEpMOEREzWDBtaJRNemBYcQteDjgftYqkM/xiFZ8KFwlYuRWhsSSWiZsylXHgArFar4sopRnwGbAgtMO7eD/CchMioX24ySgPx+tYfF32CSRDgIo5CcAlyPpe+8AZ0xpCMOdnG8o/FggBWgfLxBZ2dGdle4nfYNEqXTcQiRjEK6AfS9ekSOY/8QiOYRZzKeXg0CQtqYJMk2MSWy84MkKd2IlCOIRfIFHNkbbH6ZEo4YZgURv1OzTg7rWvp1iFHTEwjHor88r/xIWxJgmhBfFPs0tpSOx3wm0rVLwn2OgwHsaBL8qCHdYEwEdtuEnw6VKHHyZQm91SoAU2EZgf26R0sN9W4pjMi5P9p0F5zNiDPKIhJfUBE+elldPP+++bmtTW0Wta4/9rtucmqW0sJ7Dunhqy1m+XBUGZDtNnxFE6T0eipXSqNuhCBILGuxtQBM9r4NUaw1S4n4zs2v6fxr/Pmbflj+NScocHbiNB557advFFyG67dxbPTgBXRehpbd3fv56TZWsMXOS8N7Mn0ZnxXsez+qP/7/Hn+uFzL8dPNM3rpYYdX7pwKFvGfIfbPHZgsJg9xy6I9cMXp1bm7btwun18YBD36CN5u/VktS2ePf962O/ODePJKsNwt9Rh0rgtt1SUkfxYzbaG+OU1dvYUWHyEJk0Zd79La4cVK7qjvqR5u1lbFttuOVWmXrqoX5XK7BUuO06pWrTZsOJXm1U5kNiwOKDYjNqU6lpbczdj8TBCHniDMJ9xcRrFSOmH8gHiNJCp0WF8dgogJMoyUPPNXp4rXH2GFu9Qqy4uqsK01X/lKXR8i+cgeeWMqCc9rcjmnyX2C6YISLdx6roUabCFVLd7RMpaBVVyiIiOxknauVdaz3UoJCBouAqKZgjDy44AUF/NFWhkgNl/bRFik1n5rmJ62o3kd/tuVQPn4VDsIncsVUW0kXy4X2yvtEjmasAX3E97BN2Kf6oOl6ik5xRsm+V+fY6LnI5sRldGOcuZ5aMihgsOEskD+kuJs0LPrWqm4Ovf1XTvekVV8L8bLZZx2wHUdwBU80CkCaIMBwbFSpvUweiMMZCjgpGsgI34QPLPnKcZyzgYSSRKqiSmkyxPufaV7+t7vqFFPTn1U5EKq0kmSyO9szUC9WTTjH5812MPaT5l76rOKuP/ZsW+w9uKoPNW1Lymb6ZW+AtZH5gJHCpYq8Yr4Pvh3AN8FzxuzImdcpBqoSSzJ8T8FrUo1A2EcxUx2ro3UsK+UKU+5XhDv0+kLTCrG2euM/vvzzKTpCGCi3nSCpvj6kvX0EWCzPbXdBj0iuJWfBDfPrv7F/NWyV6fDGa//BQ==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1822F318F5C2677FE0533E991F0A38CB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_AlternateEmail_FUNC</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVfZcuq6En3nKyj2I0U8AAZTSapkbMCAATPDyykjywN4wvIEX39kCGzITvbNuU+gVqt79eDW0ivWXIdtAYxRGNm+V5TFt9I/1Z2x46pNpsLp9XqlVq3ylV2TNyqI5njIQq5hQK1UlDGOkezhSPOitxJLM9UKzVcYek5zrTrfqjEvPMdsS8UlCjExTVRe6FIxcx0Pty5u30px6LV8Ddu45Wkuwq0ItmZAGbaIZku7YSq9v15RXhyG71YUBS2Kgi86gshx4Av0XeqVetJ51XFrZpueFsUh+vCp47fSx9k0TV/S6osfmhRL0zRF8xTR0bFt/iq9F26HkS57hn9dtzXP92yoOfZZy0EpKLJ8vQgc0w/tyHK/Mc1QDJ2brqAMViBT836VqN8OLuh+aOkJZIi1CrY05mZsigwUIg+i4mIqv5V+/ayC17PzUPOw4Ycu/rT+b5CQlyDHD5BewbfIbuh+bvGLdL2/ItiSPejE2E7QKG+TQIMIFychMuxsaGPSfDouXspfzPCtwxD8LyV5pR5xEtjUF5kRbRPh6P+p12OtrlaWmhOjd04ZCAfbU/dh2jcbYwuKZnBuyo1OffF2gfCofAV1L/XH+nOj3vvq49A4MHWLbaJqd7VXzzjuiSnf1J14aXnU6dDGXWFprSbChufpbS+pdSh7HVOy16e5pl12OxPT3525xEwGCFAFah/1FlEj2gLUHu/OCVOfHqaTU+fsZv6i6+9Mvxw2Tg05LCfUcLG0rIYv+gdmPDpQS7WmT1ZZfcodzLOaWnphMpa9zbgmzI7hyVdN97jevP2O6TGGPK4BOl2CzP+v6zQvapF2X7TzSWGQzzNC74ost8tiu00gmiCVBWDKwvAMRoJ5OFoHu8untADURQeI4KRMQSqaG3GpqgMp1ZdLZ7uUOx1BmdbSHtiIBbIhStlS3K77tLbaBhu2Q29ngqCvp/6u2g/03iHtWXCkzJV0NJdPyl7KRnOJXl1kZkbWZ2WvMOP5olpY7QVemUqpmF48ilJqjbarabBZ8Ck8S6oCal3ALKS2pfTm7pKB1akF99JQAYeLXLCU9nKpZNIcTAqCOVqS2ObtzjaArh7sXMd6MN4jxud6d3nadZ14e5b2SlvqtmfH7kzeVUVV6oPpZrFbLQ/aqpMUYG8EdjePdt3W1n5qbpupqG76A38rWwkcAVUSBBWQdNFAkbt94HcFoNSAnZ3be4Hz23onpfosLpR5p8utT/ZxjbUu7WhMs8lshitucuREyStvB/FubynWujMuD2Z6suAj/rzBSTnhNJuBWWCoa6kXDTKjp84Ku4mYrWGvrJt9yjnznVBp9EF4PlmOYk6jFTfGp51tGCthPa45DcNRqtPAcIzghMtzXz2ENCegKkttTskgKgBTEQDo7hd7QVWEZp5UXU7VjSJooCNFMTjv2WjALo/9XuLATRX42WA13h8+CqOLqSRQqSqRtpIKTRHoeRF6s4XU2YOFYJqhYEodQYUiUDfyIN2QfC16RPlzHjuXPJqSAKTqFnB8r1Bd0Hw0jma1Gjh5wsLr8JZyzFY659KNI5KGs1FQSxU8Mrztyj8orh0uwni2GAxGw2w3j7uHPZlVBj0bJNVtQUoOAbBHg7l1EH1RmwSbTRSUPRjCSA5cRc7O4y3eN+2dS/fLdUaY0CJssAt3ly66mrQdhOaMGfSm3qTa4As4Nk49t7xvpqvyfMYFDb3tGeLpRG3DJe0Dv8NP60c9Y9mDtUiHXGr0wWGnsaPM4YUTLw22c5hO1cFq5pbrhXoyHLr0eU7VRsE4nXXTmqSq5aouzHtzHIT2Jm6aWTj2dHajRVyypZecHTgHno0P81pQXZouKdYk0YOGMimotTXcumYjgH1qSiVAahhDuXvanbVz4I7hdYB+ng534XV+UI+T5Wn03EjHjHQrgtFtmV9AsljskFtBi/5OYHKJrVeMi2oryFkQjpAXld7zUzl5acWE4th6i1wZ17XE0VVaaHIMXRdolpEkukYzHRrQDZ5nJV66sZwrik8Q275n2LmvnMddb6m/A4RuCyNPR2El8WNoIVz6i8U8X0XZm5Lr1/cwmvuEJ9brosSwHAeabUB3hIbQZGjQEQRQFSW6Dtql4siPxt44BEaEwmeOyD9xxCmCdmCjnEjmtykm1ymOSEqOWhJHDvOSaC8eignVDHO212JrzTqFbTdwUA6Ycn09dtBLYAWXBFH4+stWNIgv0qk0/0eetS83/bchft67ZYPo6HaugPN4BEQqir4gvNVbMN8GzbCPQd/Mg1i38wudpDYKbXhF8rz1u2PyVrm3C4nqBvmu+VnwZJX6HNDdkZ7Y8N7z9+cAYZOEb7zfSnLUXo4vcZLElyI0ci4VEvMUQ9ENaoZgTAjRae4fkEfdTVA/4qJ31J883+XP+OLI8mYR+Z5d0jLFy/IHD5EZwvlDRCYtn/30lfPkkuQtQln0laztkPdKjvivTxrYgrkeEU/IT+qH+u9yfWHrwQ+JMx9gtmfmq5x5nr5pCugTszYZYn74aPwrA185fxbek3zHEpFu2sUR+n6nmE+nt5IGoR97kSyWLoLHiXnBGZ0C1Pqt9IeZC/f7IPMZ/pbMr5XhjMwuVyvdde3/rVyxL+0CETmF7QuWt1JG3qXEuWc+TOgPgH8MaZ4RaIETJEaq3Yd0nefrHMveE/gUyfsf4j8lDzn9/D28/ws=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E603091B0B6BE1E4E0401F0A05995622</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E6030B86105B021EE0401F0A07992E9E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="User_Create_API" disabled="true" id="af2da472-8a82-46f5-b112-a2e5a332757e"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="User_Create_STS_Policies" searchProperties="true" id="d4a22e7e-29ae-4d26-b76c-def0e45086de"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="27d7ed5d-3471-474a-90b0-bd0d0ce61dc1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="e4457366-ffe3-4c20-9707-5fb5d033e5ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

def uname= "UVTC_PrimaryEmail_User"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");

tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));

tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="ea48f77a-a776-4eae-99c2-cf9a7f69137a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API" id="f51ca961-b6c3-4f21-b308-7facc85fc443">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("audience",tS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("audience",tS.getPropertyValue("audience"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-TOU" id="0cc3e8e9-082c-4485-bb24-4458d1821ca9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC" id="ab10bd11-03da-4e8c-8786-c9b290cc4dde"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>UserName</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B606EE3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU/I6EP0rTP3olL7y1hFmEPCKgm+g4+OXOyHdlmibYJMW9NffpECliF7u/dTJdrN7dvfkJGccxZHtdTmHRBBGK6s4otzLrW0tTajHECfcoygG7gnsTbrjkWdXTQ9tt2iVYb+t/Y1dp9FstAK9NfNbuts0sd6qz2y9hnDQCGa1houb0pXzFIaUC0RFW7NNq6abdd0yp6bjuXXPsasN23nRKk+QcBlbulRNbQNqxdvaXIiFZxjL5bK6dKosCQ3bNC3jeTya4DnESOucrSvKEyWdjT+u+oAhinAVs9g4M0o+Zz73JiSkSKQJbHL5P+UyDbNlSB+fk/BEK/aCP6QBy5c9RBklGEXkE6n+jEHMmV/pRiFLiJjHPxZhmSqwDiusY8ulJ5pRhnZkoBLChCOdz5G1ifUAASRAMVQeH4Zt7eS4qeVbpwmiPGBJzMvL/4YHaAYRW4Cv821ZG2jHBzzQqc4ZYG9IcZRyksGNIusCYeCbaQI+PlTlLoGArEaES4KuuEJn7MLbW6670SchcPF/BrQznHWQJxSl0PkY9Japm00XcXZaO7/ujW+7uGatYNIat3MAu865oRjterlHyoJE6x3h6NU2JoP7xqh/MRIvszvLvn1BDg0vhufInLpRWks/WPzJGl0JILqonya9K7Me/gn5RIxE8HR/OZlFY7f/suzOwtfeAAWr2pXJLXfU9e+d5m3r+hJDPzUR7X6e+sZQXP81HV8/x5ibnwOY4/v34OrWJtlr5D6unh5TFBvGM1u+JJd88Ac9NHpv80YvuIluNuXu4S/btmd+ks5eAYvtUtFg2K9cyCkh8buYKQvx9SB39RZKfLgAKrSO2qW0w0ul3BHfkzNcr62mbTeb53Wz4dSc86Y9MGuOM2i1rAuz26i7zlZk1ij2IPYYDYjKpSR3TZvfAeLY40B9SPSMpVLpuPZLxD4SqDKkD/IQMMphyqQ8W8vwlbAls96XJFnO4izK3j649RprlRsmbult0g0EJGVNrpc0+QEwWRBQwq14zSWxuZC9eEdZKiKrmqEqhVRKe6JU1rPdZs3gJF5EoJAaMfPTCKqL+SLvjMHXX1tHmOfWh8E0P20/1rX/b9sC6eMT5cBVLecgxwgHLhd7W8jPBbd2C96G76Y+UQdL9lMkBK+RlH990UTxo+CIrGgLufDcN5SiGvsFFYn8jOCC6MV1LVVcnvvOdhzvyKq+V9MsS/MJuK5jJDK8oUo0THniAadSmT6m7A2oUUQxjroGCuB7yQt7GWIq5nQikIBYMqaSL4+49yfA1b0/lFRfHfuoKKWUrROwEodsvUi+WRTiX5812MPKT5rv5GfJEv9rYgdi7eSRdcprXxAaqpW6Aj5+4AVmMiyR4sWS3eCHAhxKXjYWTS6wCEmoWSrg5z8VpUptDWHMUiqGfS037CpljlN8LMD7cvoWJhfj4nVG/v15ppOcAhjkm46TPL66ZD11BGi4o7abpAcFtz7o/ya4ZXSdb+bvlp0+7XO88w8=</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1996-05-26</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>182288B607363B82E0533E991F0A7643</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-05-26</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">2002-12-20</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_c437879f-9bd9-480c-96b2-5acf7fb574c8</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_c437879f-9bd9-480c-96b2-5acf7fb574c8</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EDB89BD04A8FB12AE0401F0A05996DC0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00141_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_mergedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Child_User_Create_API" disabled="true" id="3c0991d8-9a12-4ff0-a651-d57f3651d5bd"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Child_User_Create_STS_Policies" searchProperties="true" id="ab59816e-1e97-4d09-9ab6-bf8ca728612a"><con:settings/><con:testStep type="groovy" name="Establish_TestCase_Properties" id="254ecb6a-1f45-4ddd-be8e-8b6234b15f24"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);


tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("CLG_NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("ResponseType",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Required_Properties_from_Calling_TestCase" id="84c5ff50-07ed-4d74-842d-71ef0bbea104"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tS.getPropertyValue("sName");
def callTCname = tS.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));
tC.setPropertyValue("LegalGuardian",callTC.getPropertyValue("LegalGuardian"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_USER_ID1", callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL", callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("CLG_NODE_USER_ID",callTC.getPropertyValue("CLG_NODE_USER_ID"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserCreate" id="979a0ac2-3fc4-427d-b31a-9e91d79fb274"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
//
//tC.setPropertyValue("user_oid2",tC.getPropertyValue("user_oid"));
//tC.setPropertyValue("NODE_USER_ID2",tC.getPropertyValue("NODE_USER_ID"));
//tC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-CLGAttestation_for_ChildUser" id="b179420e-5b3b-4ee7-828c-6f80e3516c04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateCLGAttestation")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("NODE_ACCOUNT_ID", tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("CLG_NODE_USER_ID", tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CHILD", tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL", tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("NODE_USER_ID_FULL", tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Call_Policy Create-TOU_for_ChildUser" id="ca6877f5-4b2a-4d82-8b71-5640ae1e7d09"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-GeoPrivacyAssent_for_ChildUser" id="d2dc01d8-1c58-48c5-9226-8da6da8c367d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateGeoPrivacyAssent")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));



//myTC.setPropertyValue("tName",tC.getName());
//myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_PolicyCreate-MUC_for_ChildUser" id="a76e1751-83f7-43fc-847d-bc5119476b08"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("CLG_NODE_USER_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_STS_API" id="dc6d8f70-1ff6-4b78-add5-e433a4b435d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

//tC.setPropertyValue("SAML_USER2",context.expand( '${#TestCase#SAML}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tC.setPropertyValue("NODE_USER_ID2",context.expand( '${#TestCase#NODE_USER_ID}'));
//tC.setPropertyValue("NODE_USER_ID_FULL2",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:properties><con:property><con:name>accountname</con:name><con:value>accname_20130910_120827</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>E514D97E20BCB55CE0401F0A05991265</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-18</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>raju.ganji@compugain.com</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>ERROR</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_9070c791-13ba-4b2d-8113-8b66698dcc9c</con:value></con:property><con:property><con:name>assertionUUID2</con:name><con:value>_ccd8a52c-110d-4d18-ad98-45a1a1dba01c</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value>E6432D13CD199C26E0401F0A0799607F</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>2002-09-16</con:value></con:property><con:property><con:name>DateOfBirthFirstUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthSecondUser</con:name><con:value>1994-08-06</con:value></con:property><con:property><con:name>DateOfBirthThirdUser</con:name><con:value>2002-08-04</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E5F8A903DB8B8399E0401F0A07992F13:DC7DFFA6"</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>false</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E643241E6041B4D4E0401F0A079949D1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E5F89A132C5325E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID3</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E6432442DEB9EDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:E5F89A132C6625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:E5F89A132CF625E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL3</con:name><con:value>urn:dece:userid:org:dece:E56B6CBBFC218D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>raju.alluri@compugain.com</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>standard</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserDelete</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>ResponseTypeUserUpdate</con:name><con:value>CANT_CHANGE_PRIVILEGE</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVdbc6rKEn73V1juRyvhIqJYSaoGQUVFo+D15RQMI6DcZLjprz+DRhOzstZZ+zzp9PR0f32h55sXbPge2wEYozhxw6CqSK+1/wh0i4YtgXliGqbxxJms9dRmmMZT2+R5XmhbEAqwVlUwTpES4MQIktcaSxMFWiBHdIbpNNgO23jmmuy2Vl2iGBPTROWZrlUL3wtw5+L2tZbGQSc0sIs7geEj3ElgRwPquEM0O8YNU+3t5Yry4jB+c5Ik6lAUfLYQRJ4Hn2HoUy/Ug86LhTuaawdGksbow6eFX2sfZ/M8f84bz2FsUyxN0xQtUETHwq79T+2tcjuMLCXYhdd11wjCwIWG556NEpSKEie0qsCzw9hNHP83phmKoUvTT6iAT5Dhgn9q1KeDC7q/tPQAMsbGE3YM5mZsjnYoRgFE1cVcea3983cVvJ7VYyPAuzD28bf1v4OEggx5YYSsJ3yL7Ibu7y3+kK63FwQ7SgC9FLsZmpRtEhkQ4ep7jHZuMXYxaT4LVy/lrxb41mEI/puSvFBfcRLY1A+ZkVwb4eT/qdfXWl2tLA0vRW/KIvZD7DRBW1q0uaA+VBzN5pk+MMPXC4SvyldQ91J/rL836r2vPg6p7spZezbDHXAwHDPyTHc3573CTJpn2PeHJuOI74G50ZLlkEPTrsJlPmpz+2lqsVFXj3h7exDM5FDPYlaquNnORK41xL22e4xYNaAGOG0dIn2wPIloFGg5fZIPOGWP3WWjUe+yC7mYsL2jwCdd3GSjgok3UT7eDrHZrGwzBybhTOque/0ok4ujsnn9jOlrDGVcI3S6BFn+XzdpQTIS477olpNiRz7PBL2pitKtS90uQF0b5IoIbEUcn8FEtA9H5+D2hZwWwWzRAxI4qXOQS/ZGWs5mIzm3lktvu1R6PVGdc/kAbKQK2ZDkYilt10PaWG2jDdujt5ooWut5aDaGkTU45AMHTlRdzSe6clL3JGBdplcXmV2Q9Vndq8xUXzQqq70oqHM5l/KLR0nOncl2NY82CyGHZ3mmAq4PmIXcddSB7i8Z2Jg7cC+PVXC4yEVH7S6XaiHr4L0i2pMliU3v9rYR9K3I9D3ni/EBMa5b/eXJ7Hvp9izv1a7c72rHvqaYDWkmD8F8szBXy4Ox6mUVOJgA8+bRbbrGOsztbTuXZpvhKNwqTgYnYCaL4gyQdNFAVfpDEPZFoHLALc7dvciHXauXU0MWV+qC1+fXJ/e4xkaf9gym3WY24xX/fuQlOahvR6m5d1Rn3ZvWR5qVLYREOG9wVs94w2VgEe1ma3mQjIrdYKZVzHepWMNB3bKHlHcWerHaGoL4fHI81Z4nK36KT6a7263E9ZTzWjtPbcyjnbeLTriuh7NDTPMiarDU5pSNkgqwVRGA/n6xF2eq2C6Tain5bKOKBujJSQrOezYZscvjcJB5cNMAYTFaTfeHj8JYUi6LVD6TSVvJlbYErLIIA20h9/ZgIdp2LNpyT5xBCcw2yijfkHwtBkT5ex57lzzasgjkxhbwwqDSWNBCMk00jgOnQFwEPcFRj8XK4n26dUTyWJtEXK7iyS7YrsKD6rvxIk61xWg0GRemnvYPezKrdrQ2yhrbipwdIuBORrpzkELJeI82mySqBzCGiRL5qlKcp1u8b7umTw/rTUZ8pyXYYhe+mS/6hrwdxbbGjAbz4L3REio43Z0Gfn3fzld1XeOjltUNdtLpRG3jJR2CsCfMm0erYNmDs8jHfL4bgoNpsJPCE8STII+2Oszns9FK8+vNSjMbj336rFPcJJrmWj/n5Nms3rBEfaDjKHY3adsu4mlgsRsj4bMtveTdyDsIbHrQuaixtH1SrPfMilrqe2XGreHWt1sRHFJzKgNyazdW+ifzbJwjfwqvA/T7dLgLr/OD+jpZHkbPjXRopFsRTG7L8gJSpGqP3ApG8mcCU0pc62l3Ue1EJQvCCQqS2lt5qiQvnZRQHNfqkCvjupZ5rsFyHCvJoiBLPV6mOZrp0YBuCQInAHBjOVcU3yB2w2Dnlr5KHne9pf4MEPodjAILxU9ZmEIH4dofLJb5qirBnFy/YYCRHhKeyIMm02NlgQZ8u8k3WmyzydIthmWFHt0QulytOgmTaTCNwS5B8SNH5B444hxBN3JRSSTL2xST6xQnJCVHI0sTj3nOjOcApYRqxiXb67Bcu0lh1488VAKm/NBKPfQcOdElQRS+/rJPBsQXqYthFMaJ4TGXy/63UX7fuyWE6FhuqYDLkEREiop+4LzMLZ5f4uZ+5MY38yC13PJOJ9lNYhdekTxufTZN2S33jvkM7Ib8fuC74ME49T2uuz8rc+G9++8PA8IrCfN4uxXnaDwfn9MsSy/laJWsKibmKYaiW5SGYEqo0UkPDyig7iaov2Kld9TfPN/lj/jSxAm0hHzZPmme6mX5F08SDeHySaKQ5i/+9r3z4JLkLUFF8pOs65GXS4n4j48b2IGlHhG/k588jK3Pcv1g64sfEmc5ytzALlclBz39pjdgSMy6ZJyF8VfjPxn4yfmj8J7kO5aEdJOZJuj3O9VyTr3WDAjDNEgUqXYRfJ2dF5zJKUKdT6VfzFxY4AetL/Bvaf1aHWtkivlG7a7r/m/lJ/fSLhCRU9i9YHmtFeSFSpwH9pdZ/QHw13HNyDzNMSIncY/jWvr8JB8ieftF/KvkS06/fw9v/wU=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFQ0Ci745RYOA6JsMiDor7+DRo/Jycmb+1ZZhdP0dD+90PPMMzZ9j+0AjFGcuGFQVqSXyj8tdrOxbLZZa9Zpq1aHdb624Sy21m7V603YsK2N3a6UFYxTpAQ4MYPkpcLSDFejefLTmXaHa3Q4/olrsOtKeYFiTEwTlSe6Us59L8Cdi9uXShoHndDELu4Epo9wJ4EdDaijDtHsmDdMldfnK8qLw/h1myRRh6Lgk4Ug8jz4BEOfeqY+6DxbuKO5TmAmaYzefVr4pfK+N8uyp4x7CmOHYmmapmieIjoWdp1fldfSbTOylMAOr2vRDMLAhabnns0ClIqSbWiVgeeEsZts/b+YZiiGLkzXUA5rkKkHvyrUbwcXdD+09AFkjM0a3prMzdgM2ShGAUTl+Ux5qfz6WQWve/XYDLAdxj7+tP5vkFBwRF4YIauGb5Hd0P3c4hfpen1GsKME0Euxe0Tjok0iEyJcfouR7eYjF5Pms3D5Uv5yjm8dhuB/Kckz9YiTwKa+yIzkOggn/0+9Hmt1tbIwvRS9Ag6ON+ugTi9EhTmwSzzp9bZNenYUlZcLhEflK6h7qd/Xnxv13lfvm475xKCrvcHZaPQn8kCLm/1NbsSLbR+FAr1nTBnncQrF+WmS0nCUAGdXHXR7DS2o7jN7xfFyuNH93Kp6G780tTx+bMgwyVqWLslmMGxTjD8MrPF63RdpJs4X/nnmn2Z0Szb6PZTVR4YwXPSXs4bY0AR5vhrlGUttp0MMSv29L7BzBfYNyw0OLX/e3b/8jukxhiKuITpdgiz+rxo0L5mJeV+IxaSwyeeZoFdVUcSqJIoAiQ7IFAE4ijA6g7Hg7A/bvdvjM1oA03kXSOCkzkAmOYa0mE6HcmYtFt56oXS7gjqrZ31gSCXyQpLzhbReDWhzuY4MtkuvNUGwVrNwww0iq7/P+ls4VnU1G+vKSd3J+ViX6eVF5uRkfVZ3KjPR51xpuRN4dSZnUnbxKMnZdrxeziJjzmfwLE9VUO8BZi6LW7Wv+wsGcrMt3MkjFewvcmGriouFmss6eCsJznhBYtPF7jqCvhVtfG/7YLxPjOtWb3Ha9Lx0fZZ3qij3RO3Q05QNJ03lAZgZ881ysTeX3WMJ9sdgc/PoNlxzFWbOup1JU2MwDNfK9gjHYCoLwhSQdNFAVXoDEPYEoNaBm5/FndAMRaubUQMWl6q812uuTu5hhc0e7ZlMu80Yo2Xz7dCU5KC6Hqab3VbdrrqT6lCzjnM+4c8GPlaPTdNlYB7Z05XcT4a53Z9qpc2blK9gv2o5A8o7891YbQ1AfD5tPdWZJcvmBJ82rm0vhdWk7rVsT+Vmke3Z0QlX9XC6j+mmgDiWMk7HYVICjioA0NvNd8JUFdpFUi0lmxqqYIKunKTgvGOTIbs4DPpHDxocCPPhcrLbvxfGkjJZoLKpTNpKLrUlYBVF6GtzubsDc8FxYsGRu8IUSmBqKMPMIPma94ny5zx2L3l0ZAHI3Bo0+X6Jm9N8Mkm0eh2cAmEedPmtesiXVtOnWwckj7RxVM9UPLaD9TLcq74bz+NUmw+H41G+0dPefkdmlU1rwyO3LsnHfQTc8VDf7qVQMt8iw0iiagBjmCiRryr5ebLGu7a78elBtcEIb7QEW+zc32Tznimvh7GjMcP+LHjjWnwJp/ap71d37WxZ1bVm1LLEwJZOJ2odL+gQhF1+1jhYOcvut/Ns1MzsAdhvTHace7xw4uXhWofZbDpcan61UWocRyOfPutUfRxNMq2X1eXptMpZgt7XcRS7Rtp28ngSWKxhJs3jml403cjb82y61+sRt3B8Uqy3oxW11LfStL6Ca99pRXBAzagjkFv2SOmdNmfzHPkTeB2gn6fDXXidH9TjZPkwem6kQyPdimByWxYHkCKVu+RUMJPvCUwhca2afVHtRAULwgkKksprsasgL52UUBzX6pAj47qWG902DxiOFZtNtiG3ZLpOM10a0A2er8tC+8Zyrig+QRTDwHYLXwWPu55S3wOEfgejwEJx7RimcItw5RuLRb7KSjAjx28YYKSHhCdKPC1KDQDqtMixLE8DuS11G3W+LYBWl2aYSnkcJpNgEgM7QfEHjsgyHzjiDEE3clFBJIvTFJPjFCckJQfzmCYe83Q0nwKUEqoZF2yvw9bbDQq7fuShAjDlh1bqoadoG10SROHrk62ZEF+kM1n/R9HEy0n/1xA/v7tlg+hYbqGAi3gERCqKviC87C2Yr4NmaJ2mH4O+mQep5RYHOkltErvwiuTjq98dU7TKvV2KqETtH+aG+67+4+1/7qS+AUV9zsfdkXV0H9zemDsho4SuvN4qejCfDk/p8ZheatgqqFhMzFMMRbcoDcGU8KmTHu5RQN1NUD+isnfUnzzf5R/xpck20BIyDnzSceXL8gf3GA3h4h6jkC8m/+kl6YNLkrcE5clXMtEj150C8bc3ItiBhR4Rv5FHFsbW73J9YevBD4mzmH9u4BSrgrie/tIUMCRmXTIDw/jR+FcGvnL+UXhP8h1LQrppkybo72/KxXB7qZgQhmmQKFLlIngcuBecySlCnd9Kf5i5UMf3u0CO/3oXWKkjjYw+36zcdd3/rVxzL+0CEdmF3QuWl0pOrrXEeeA8DPh3gF/P+Ab33Yz/GMnrH+I/JQ85/fw9vP4L</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVdpc6pKE/7ur7A8H62EzQ0rSdWwqKioCK5fbuEwIMomA4L++jto9JicnLy5b5WlTtPT/fRCzzMv2PQ9tg0wRnHihkFZkV4r/9A1zuabDeup2WjRT7VWvf5k0nSLfDUgzdW4eq1hVsoKxilSApyYQfJaYWmGe6J58jGYVptrtGn2mWly60p5jmJMTBOVZ7pSzn0vwO2L29dKGgft0MQubgemj3A7gW0dqMM20WybN0yVt5cryovD+G2bJFGbouCzhSDyPPgMQ596oT7ovFi4rbtOYCZpjN59Wvi18r43y7LnjHsOY4diaZqmaJ4iOhZ2nV+Vt9JtM7KUwA6va9EMwsCFpueezQKUipJtaJWB54Sxm2z9v5hmKIYuTD+hHD5Bphb8qlC/HVzQ/dDSB5AxNp/w1mRuxqbIRjEKICrPpspr5dfPKnjda8RmgO0w9vGn9X+DhIIj8sIIWU/4FtkN3c8tfpGutxcE20oAvRS7RzQq2iQyIcLlSYxsNx+6mDSfhcuX8pdzfOswBP9LSV6oR5wENvVFZiTXQTj5f+r1WKurlbnppegtlu3tYn+YwAFl9H0jm6pNrAf1rlRrvV4gPCpfQd1L/b7+3Kj3vnrfND2sxWpnwG3S6BCmtjSdg5zrn8edsScljDbyEteaBP0hO9w3++xczE6isbT2kY66rCeHrj4ODkk8GGK/hku1tCmy9r67OPXAqW/ySjo/UItw00tD+tyrG6ZMNTVPCxaTY+CtWSdcm07I9YfKZgyl8VzbBxbjNC3R902xFO4oYSaMFmig1aVdqs849fV3TI8xFHEN0OkSZPF/Wad5yUzM+0IsJoVNXs8EvamKIlYlUQRIdECmCMBRhOEZjARnf9ju3S6f0QLQZh0ggZM6BZnkrKS5pg3kzJrPvfVc6XQEdVrLemAllcgDSc7n0nrZp83FOlqxHXqtC4K1nIYbrh9ZvX3W28KRaqjZyFBO6k7OR4ZMLy4yJyfrs7pTmbEx40qLncCrUzmTsotHSc62o/ViGq1mfAbPsqaCWhcwM1ncqj3DnzOQm27hTh6qYH+RC1tVnM/VXDbApCQ4ozmJzRA76wj6VrTxve2D8R4xbljd+WnT9dL1Wd6potwV9UNXVzacpMl9MF3NNov53lx0jiXYG4HNzaNbd81lmDnrViZpq/4gXCvbIxwBTRYEDZB00UBVun0QdgWg1oCbn8Wd0AhFq5NRfRaXqrzXbSxP7mGJzS7tmUyrxayGi8bk0JDkoLoepJvdVt0uO+PqQLeOMz7hzyt8rB4bpsvAPLK1pdxLBrnd0/TSZiLlS9irWk6f8s58J1abfRCfT1tPdabJojHGp41r2wthOa55TdtTuWlke3Z0wlUj1PYx3RAQx1Kr03GQlICjCgB0d7OdoKlCq0iqpWTaShVM0JGTFJx3bDJg54d+7+jBFQfCfLAY7/bvhbGkTBaoTJNJW8mllgSsogg9fSZ3dmAmOE4sOHJH0KAEtJUyyFYkX7MeUf6cx84lj44sAJlbgwbfK3Ezmk/GiV6rgVMgzIIOv1UP+cJq+HTzgOShPopqmYpHdrBehHvVd+NZTN6YwWA0zDdG2t3vyKyyaX1w5NYl+biPgDsaGNu9FErmJFqtkqgawBgmSuSrSn4er/Gu5W58ul+tM8KElmCTnfmbbNY15fUgdnRm0JsGE67Jl3Bqn3p+ddfKFlVDb0Tk7Q1s6XSi1vGcDkHY4af1g5Wz7H47y4aNzO6D/cZkR7nHCydeHqwNmE21wUL3q/VS/Tgc+vTZoGqjaJzp3awma1qVswSjZ+Aodldpy8njcWCxKzNpHNf0vOFG3p5n071Ri7i545NiTY5W1FQnJa22hGvfaUawT02pI5Cb9lDpnjZn8xz5Y3gdoJ+nw114nR/U42T5MHpupEMn3YpgclsWB5AilTvkVDCT7wlMIXGtJ/ui2o4KFoQTFCSVt2JXQV7aKaE4rtUmR8Z1Ldc7LR4wHCt2Gmxdbsp0jWY6NKDrPF+ThdaN5VxRfIIohoHtFr4KHnc9pb4HCP02RoGF4qdjmMItwpVvLBb5KivBlBy/YYCRERKeKDZaHMM1mkILENQduiXKLC9KbIvmG3QDCJXyKEzGwTgGdoLiDxyRZT5wxCmCbuSigkgWpykmxylOSEoO5jFNPOb5aD4HKCVUMy7YXpsljIbCrh95qABM+aGVeug52kaXBFH4+ss+mRBfpFPZ+EfRxctJ/9cQPz+7ZYPoWG6hgIt4BEQqiv4gvPV2/RbM10EztEHTj0HfzIPUcosDnaQ2iV14RfLx0e+OKVrl3i5FVKL+D3PDfVf/8fY/d1LfgKI+5+PuyDq6D25vzJ2QUUJX3m4VPZjPh+f0eEwvNWwWVCwm5imGopuUjmBK+NTJCPcooO4mqB9R2TvqT57v8o/40mQb6AkZBz7puPJl+YN7jI5wcY9RyBuT//SS9MElyVuC8uQrmeiR606B+NsbEWzDQo+IJ+QnC2Prd7m+sPXgh8RZzD83cIpVQVxPf2kKGBKzLpmBYfxo/CsDXzn/KLwn+Y4lId20SRP09yflYri9VkwIwzRIFKlyETwO3AvO5BSh9m+lP8xcqOP7XSDHf70LLNWhTkafb1buuu7/Vn5yL+0CEdmF3QuW10pOrrXEeeA8DPh3gF/P+Dr33Yz/GMnbH+I/JQ85/fw+vP0L</con:value></con:property><con:property><con:name>SAML_USER3</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieSythdcFKUjUsKioqiuvNWzgMi7LJgKi//h00ekxOcr683xVM09P99ELPMy/YDHy2BTBGSepFYVmVXyv/NGwa1liTfeKEJnziLfJm2gJ8YmybQxyyGa7OVcoqxhlSQ5yaYfpaYWmGe6KbT2zNYBotnm3x/HOz0VxXynOUYGKaqDzTlfIx8EPcurh9rWRJ2IpM7OFWaAYIt1LYmgJt0CKaLfOGqfL2ckV5cZi8uWkatygKPlsIIt+HzzAKqBfqg86LhVtTzwnNNEvQu08Lv1be9+Z5/pxzz1HiUCxN0xQtUETHwp7zq/JWum1Glhra0XUtmWEUetD0vbNZgNJQ6kZWGfhOlHipG3xjmqEYujD9hI7wCTJ8+KtC/XZwQfdDSx9AJth8wq7J3IxNkI0SFEJUnk3U18qvn1XwutdIzBDbURLgT+v/BgmFB+RHMbKe8C2yG7qfW/wiXW8vCLbUEPoZ9g5oWLRJbEKEy+ME2d5x4GHSfBYuX8pfPuJbhyH4X0ryQj3iJLCpLzIjew7C6f9Tr8daXa3MTT9Db3zeW4Ea3wSNfJFAu8+wjD/s84veUHm9QHhUvoK6l/p9/blR7331vulA2VLXGIxnQ2NWX43p1PW5Wb/aDV0RJwfYZIWaZpi7RBlhz1d2Sb4dro6GMQvHlmnwvdFwPmMlEwvd2XheigRKmDrV3paq6zG720oM3XQa48amx279hdDr6ubcDbqLZD5ZLLkTPxnm5mrXHujjtYqYLDS3frJVg2ENjbhSsPf7rKfj3anRtc+0sZ6sXn/H9BhDEVcfnS5BFu/LGi3IZmreF1IxKWzye6boTVNVqSpLEkCSA3JVBI4qDs5gKDq7vbvzOkJOi0CftYEMTtoE5LKzkue63ldyaz7313O13Ra1CZ93wUoukQ+ycpzL62WPNhfreMW26fVUFK3lJNpwvdjq7vKuC4eaoeVDQz1pW+U4NBR6cZE5R7I+a1uNGRkzrrTYioI2UXI5v3iUldwdrheTeDUTcnhWdA3wHcDMFMnVukYwZyA3ceFWGWhgd5GLribN59pRMcC4JDrDOYnNkNrrGAZWvAl898F4lxg3rM78tOn42fqsbDVJ6UjTfWeqbjhZV3pgspptFvOduWgfSrA7BJubR6/mmcsod9bNXNZXvX60Vt0DHAJdEUUdkHTRQFM7PRB1RKDxwDuepa1YjySrnVM9Fpeqgt+pL0/efonNDu2bTLPJrAaL+nhfl5Wwuu5nm62rucv2qNqfWoeZkArnFT5UD3XTY+AxtvWl0k37R7urT0ubsXxcwm7VcnqUfxbaidbogeR8cn3NmaSL+gifNp5tL8TliPcbtq9xk9j27fiEq0ak7xK6LiKOpVanQz8tAUcTAehsZ1tR18RmkVRLzfWVJpqgraQZOG/ZtM/O973uwYcrDkTH/mK03b0XxpJzRaRyXSFtpZSaMrCKInSnM6W9BTPRcRLRUdqiDmWgr9R+viL5mnWJ8uc8ti95dBQRKNwa1IVuiZvRQjpKpzwPTqE4C9uCq+2PC6se0I09UgbTYcznGh7a4XoR7bTAS2ZJNp31+8PBcWNknd2WzCqbnvYP3LqkHHYx8IZ9w93JkWyO49UqjashTGCqxoGmHs+jNd42vU1A96o1RhzTMmyws2CTzzqmsu4nzpTpdyfhmGsIJZzZp25Q3TbzRdWY1uOGJYW2fDpR62RORyBqC5Pa3jqy7M6d5YN6bvfAbmOyw6MviCdB6a8NmE/0/mIaVGul2mEwCOizQfHDeJRPOzmv6HqVs0Sja+A48VZZ0zkmo9BiV2ZaP6zped2L/Z3AZjuDj7m5E5BijQ9W3NDGJZ1fwnXgNGLYoybUASgNe6B2TpuzeY6DEbwO0M/T4S68zg/qcbJ8GD030jEl3YpgelsWB5Aql9vkVDDTvxOYQuJZT/ZFtRUXLAinKEwrb8Wugry0MkJxPKtFjozrWuElwLKgxgCuLXCSqNA8zbRpQDcEgW9wtRvLuaL4BFGKQtsrfBU87npK/R0gDFoYhRZKng5RBl2EK3+xWOSrrIYTcvxGIUZGRHgiD9rtGlcDktJmGwLDcEBmG01JatZrQGnKYqU8jNJROEqAnaLkA0dk6Q8ccYKgF3uoIJLFaYrJcYpTkpK9echSn3k+mM8hygjVTAq212L5Zo3CXhD7qABMBZGV+eg5duNLgih8fRLSA/FFOlGMf9SpdDnpvw3x87dbNoiO5RUKuIhHRKSi6AvCy92C+T5o7jHom3mQWV5xoJPUpokHr0g+fvrdMUWr3NuFRHWDfNf8LPhglfoc0N2RdfDgvefv1wHCJgnfeLuVZG8+75+zwyG7FKFRcKmEmKcYim5QUwQzQohORrRDIXU3Qf2Ii95Rf/J8l3/El6VuOE3J/xyQlilflj+4iEwRLi4iKmn5409vOR9ckryl6Jh+JZN8cl8pEP/1SgNbsNAj4jF55FFi/S7XF7Ye/JA4iwHmhU6xKpjn6ZumgBEx65EhFiWPxr8y8JXzj8J7ku9YUtJNmyxF338pF9PptWJCGGVhqsqVi+BxYl5wpqcYtX4r/WHmwv3eyfwRf0vml9pgSmZXYFbuut7/Vn7yLu0CEdmFvQuW18qR3EuJ89B5mNDvAL8c0kKz9rch/TGStz/Ef0oecvr5f3j7Fw==</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>SurName</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Username</con:name><con:value>usercreate20130913_05055</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>firstuser20130903_114248</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>usercreate20130903_114310</con:value></con:property><con:property><con:name>UserName3</con:name><con:value>seconduser20130902_104922</con:value></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>user_oid</con:name><con:value>E6432442DEBAEDF6E0401F0A079949AA</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>E5F89A132C6725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>E5F89A132CF725E7E0401F0A05994EB8</con:value></con:property><con:property><con:name>user_oid3</con:name><con:value>E56B6CBBFC228D76E0401F0A07991CCF</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>1999-09-17</con:value></con:property><con:property><con:name>LegalGuardian</con:name><con:value>&lt;LegalGuardian>urn:dece:userid:org:dece:${#TestCase#CLG_NODE_USER_ID}&lt;/LegalGuardian></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>27d7ed5d-3471-474a-90b0-bd0d0ce61dc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4457366-ffe3-4c20-9707-5fb5d033e5ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c5295d99-5448-463a-a7c7-16da5cdfeac0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_70045_UserGet_Portal_FUNC_CHILD_SAU_Get_ADULT_FAU_200_OK_P1</con:value></con:property><con:property><con:name>sName</con:name><con:value>07.User_Get_GeoProfile_Portal</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:iscportalcs1</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts_P0" id="6b2b0923-cf4d-43c3-a853-80abcf04be26"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup_P0" searchProperties="true" id="28545e81-0978-42f5-ad46-d710483f6d65"><con:settings/><con:testStep type="groovy" name="Set ENV Properties" id="1060d70f-daf3-4176-b47d-f42c815521fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set SoapUI Global Preferences" id="391a677a-5132-4be4-b8d7-ae759c85a03a"><con:settings/><con:config><script>/*
 * @Sanjeet
 * This script will set below global soap UI Preferences
 * 
 * Setting Name										Value Set
 * --------------------------------------------------------------------------
 * Http Settings > Response Compression  		 			False
 * Http Settings > Close connection after request 			TRUE
 * Http Settings > Do not URL-escape service endpoints           TRUE
 */

log.info("Setting SoapUI Global Preferences!!!!");
import com.eviware.soapui.SoapUI;
import com.eviware.soapui.settings.HttpSettings;

com.eviware.soapui.SoapUI.settings.setString(HttpSettings.RESPONSE_COMPRESSION , "FALSE");
com.eviware.soapui.SoapUI.settings.setString(HttpSettings.CLOSE_CONNECTIONS, "TRUE");
com.eviware.soapui.SoapUI.settings.setString(HttpSettings.ENCODED_URLS , "TRUE");
com.eviware.soapui.SoapUI.settings.setString(HttpSettings.CHUNKING_THRESHOLD , "");</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema" id="74347441-8b3a-49d7-8c19-71054b9d4826"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("V2");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country" id="b080c514-809c-44bc-bae5-772b89595094"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup" id="586b429e-ccb4-4a20-8002-b36d2792e440"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

String dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" id="c7f2cb62-ab6e-4529-9ab5-c95e34b9188c"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Prioritize" id="0273d3fe-35f0-4a79-bb19-a941aba46ed1"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.*;
import com.eviware.soapui.impl.wsdl.teststeps.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def enablePriorityScript = context.expand( '${#Project#enablePriorityScript}' )
tC.getTestStepByName("DataSource Loop").setDisabled(false);
def executionPriority = context.expand('${#Project#disablePriority}');
def priority = context.expand('${#Project#disablePriority}').split(",");
def coords = context.expand('${#Project#coords}').split(",");//COORD-1000,COORD-2010
//log.info("Inside setUp for project '" + tP.getName() + "'");
def suiteList = tP.getTestSuiteList();
if(enablePriorityScript=='true')
{
log.info '----------------------------------------';

	tP.getTestSuiteList().each
		{	thisSuite->
				if( !thisSuite.isDisabled())
				{
					thisSuite.getTestCaseList().each
					{tCase->
						tCase.setDisabled(false); 		//Enabled everything
						//log.info '@@@@ ENABLING '+ thisSuite.getName() +' :: ' + tCase.getName();
						
							for (def prior : priority)
							{
								if (prior!='' &amp;&amp; tCase.getName().toUpperCase().contains(prior))
								{
									tCase.setDisabled(true); 	//Enable needed Priority
									log.info '!!!! Disabling'+ thisSuite.getName() +' :: ' + tCase.getName();
									break;
								}
							}
							coords.each //coord
							{ 
								if (tCase.getName().toUpperCase().contains(it))
								{
									tCase.setDisabled(true);		//Disable COORD issues
									log.info it+'#### Disabling COORD'+ thisSuite.getName() +' :: ' + tCase.getName();
									return true;
								}
							}
						
					}
				}
		}
	
	log.info "Disabled TCs with below Priorities : " ;
	priority.each{log.info it;}
	log.info "Disabled TCs with below COORDs: " ;
	coords.each{log.info it;}
	log.info '----------------------------------------';
}</script></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>391a677a-5132-4be4-b8d7-ae759c85a03a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_PYLD" id="83dc01d1-84bf-42e5-98ef-4f1b4ff04c79"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UVTC_PrimaryEmail_SSLKeystore_Null_200_OK_P1" searchProperties="true" id="56bae1f9-79a0-4879-97d8-60b57b4e9b67"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="4f38be21-a8a1-45ae-9bd5-0ca270325294"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="5634cb7d-be7c-4f55-a661-3f34aa55ba2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="2a3711fe-90bf-42d5-bb97-cf0547446437"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_null" id="166334bd-1609-472d-997b-c8d628c88acf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","");
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="84c3c93d-ddb1-45ec-9c05-798e99c359b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest_Without_SetPem");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value/></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvcxZbyBAVegikASqAtZMFlmXqaE3AYRWwJLZsnXX8mAg8kyzDy51G51n+4+OtIlR3Fke23OIRGE0dImjij3MmtTSxPqMcQJ9yiKgXsCe357OPDssumhwxat1O82tX9sXHVM13X1+qTu6JXACfVJ0HB1s16pOBUEQQO50pXzFPqUC0RFU7NNq6Jbpm5Vx1bFc1zPapTr9crfWukZEi5jS5eyqe1BbXhTmwmx8AxjvV6X106ZJVPDNk3LeB0OfDyDGGmty11FWaKktffH5QAwRBEuYxYbl0bB5zLgnk+mFIk0gX2u4LtcpmE2DOkTcDL9peV7IejTkGXLDqKMEowi8o5Uf4YgZiwotaMpS4iYxd8WYZkqsA4brGOrQn9pRhHamYEKCBOOdD5D1j7WCEJIgGIoPY36Te3XeVPLto4TRHnIkpgXl/8ND9AVRGwBgc4PZe2hnR/wi061LgF7fYqjlJMV3CmyLhAGvp8m4PNDlR4SCMlmQLgk6IYrdMYxvJPlrhtdMgUu/s+AjoazC/KMohRatDerB4xjuH+rWMtwMOKT68f0dmCN/mpmAI6dM0M+2t3yhJQ5iXY7SDSvvrdXwcPoZr2+RalxdRcse/376npV3f7eLByUvpt4JDa1uzmaj2rvfuTzYWPsvz7A9KnWu7Uu6ubbNVk+vs7n/rQzfMHXAQ6fehWnHdq2Gdz20gfr4uWxctEeVJ8sP2YRq+IBgu3UjLaLxyHUXPrUe3Ge3YZr3KHH62FtNPn98iZm3KWDEWp06vC0tXC7mZdzhL9oO5x5P53MAYvDUtGg3y3dyCkh8bOYKQsJ9DBz9RZKfLgAKrSW2qW0w0ul3JHAkzPcrc1qrW52Gx2z67Tdzo11bVYdp9toWDdmu3Fz1TmIzA7FCcQOoyFRuZTk7mjzM0AcexxoAIm+YqlUOq79ELGLBCr16UgeAkY5jJmUZytc2ngaMxATWG25u43DyCYWbLTSHRP39D5phwKSoibXCpo8AkwWBJRwK15zSWwuZC+WaJWKyCqvUJlCKqU9USrr2ZV61eAkXkSgkBoxC9IIyovZIuuMwXdfW0eYZ9bR9Tg7bd/Wdfrv0ALpExDlwFUtVyDHCF9cLuahkG8Lts3jgg/h22lA1MGS/RQJwTskxV8fNFH8yDkiKzpAzj1PDYWoxmlBeaJgRXBO9Py6liouz33rMI4lKi/L6WqVZgOomaZjJDK8IWXOMnzAqZSl7Zi9ATXyEMZZd0CO+iRzbi/iS8WM+gIJiCVdStnyjEvfB64u/b7k+ebcF0UhpeybgI34ytaJ5INFIf7xTYM9rPyk+UF+1iwJPsb1RayjPLJOeecLQqdqpfR/+w0pMJNhiVQulhwH/yrAV8mLxrzJORYh2TRJBXz/p6QkqakhjFlKRb+rZYZjmcxwiu0CvA+nT2EyJc6fZuTf32Y6ySiAQT7oOMniqxvWU/yn0yOp3Sf9rLZVt92wu27H6hyrbc2163lTCuhan8yfLUd9OuV46w8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>05780D56A92E6C1CE0533D991F0A7628</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>05780D56A92D6C1CE0533D991F0A7628</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:05780D56A92D6C1CE0533D991F0A7628</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>05780D9C0D3A6CF1E0533D991F0A9FBC</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:05780D9C0D3A6CF1E0533D991F0A9FBC</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20141015_1413383782948</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>05780D9C0D3B6CF1E0533D991F0A9FBC</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2a3711fe-90bf-42d5-bb97-cf0547446437</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>166334bd-1609-472d-997b-c8d628c88acf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_UVTC_PrimaryEmail_with_Valid_SAML_200_OK_P1" searchProperties="true" id="c2b92153-2851-4347-abab-9876fb05a38f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="a1ef3e03-0f25-4e00-a842-c141ec213a76"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="d56ac490-001f-46bd-9ed0-2e60ba1e35da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="8329f9c7-6754-4e53-8cd0-4626faaaddf4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_SAML_ProjectLevel_for_Authentication" id="fea1b7a7-0cd9-44d9-bdd5-608178adc863"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML",tC.getPropertyValue("SAML_USER1"));
log.info tP.getPropertyValue("SAML")
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4f488c10-ba14-4b68-bf28-03556eb598bb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTPfjntIr0naEGRQvHFEU1KO+nAnpAqJtWpKU26/fSYFKUTyc89TJ6sq3vnXJl5xyFEd20OIcmCAJrSziiPIgtza0jNEgQZzwgKIYeCBwMGjddgO7agZou0WrdNoN7R8ENb+Ow5GOTOzpbt21dG/k+TryLd93Tpwa9i3pynkGHcoFoqKh2aZV080T3TIfTSew64FVq3p1/02rPAPjElu6VE1tQ2rBG9pEiDQwjPl8Xp071YSNDds0LePltjvAE4iR1jxdZ5QHYs2NP66GgCGKcBUnsXFqlHxOQx4MyJgikTHYxAoPxTIN0zekT8jJ+JdW7IWwQ0dJvjxHNKEEo4iskKrPLYhJElZa0ThhREzig0lYpgLWYYF1bLn0l2aUqR0JVGLIONL5BFkbrD6MgAHFUHnqdxrar+O6lm99ZIjyUcJiXl7+Nz5AZxAlKYQ636a1oXY84DeVap4CDjoURxknM7hTw5oiDHzTTcDHQ1XuGYzIoku4HNAFV+yMXXp7y3U12mQMXPyfBu00Zw3yjKIMmm20JL2T+8UD8rFjTER38TS8vn7i495tIyew65wbitaul3tDWQzRekd2Vvt9O+ktfvuobk2d1dP0biAEXQ7QqzN9ueqgh+tp/f7e7vQ898nOjNa5NaftMUt7D6zeHzvvF/2bC+f9Kv176D2+TG+c6+uLJZvbz29wY+A3l6Q3q8xNQqP15t2Qrus5Z97HXY069dez4SV4o+Ftj7LeFX2N4Wq0quNB7bn+LlAnWlpXJ5G48nuLYffy+q+a2SjS2eFftm3P/CAbvgMW26Uag067cim7hMTPYqYsJNRHuWuQKvHhAqjQmmqX0o4gk3JHwkD2cL22PNt2ztz6ueOet33bvTBrjtP2fevSbHn1S28rMmsWexTPEzoiKpaS3PXY/EwQxwEHGgLTZ0kmlY5rPyC2kUCVDu3LQ5BQDo+JlGcrW7Low/G5l6xcK40n9oqMsA3uSqvcJaJHe6w1EsDKonxSEuU+YJISUMqtBpvLyeZCFmOKZpmIrOoMVSlkUtuZktnAdr2awUmcRqCoGnESZhFU00mal8bg66+tI8xza//iMT9uBxPb/7etgfQJiXLgKpczkH2Eb24Xc5vI4YT93YS38K0sJOpkyYIKRvCaSfnX55yoASmGRGa0pVx47htKqMZ+QkWgcEZwMenFfS1lXB785rYdU2RVp9VsNsvyDriuYzAJb6gUDdM2BoAzKU3Lx+QDqFGgGEfdAwXxveCFvUwxExM6EEhALCemki+PuPgHwNXF35Gzvjj2VVEKKUsnYCG+s51H8tGiGP/4rsEBVn7SfC8/84SFnx37BmsnjsxT3vuC0LFaqTtgeWAucCJhiVSvhO2CfwfwXfCysShywUXIgRpmAg7/qShZamgI4ySjotPWcsOuVOY8xTKF4NPpC0yuxsXzjPz7+0wn+QhgkI86TnJ8dcsG6gjQ8Y7cboIeUNyznxS3zK75xfzVslOn/Rlv/gE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>18223B47C34DD924E0533D991F0A87F8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>18223B47C34BD924E0533D991F0A87F8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:18223B47C34BD924E0533D991F0A87F8</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>18223B47C34CD924E0533D991F0A87F8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:18223B47C34CD924E0533D991F0A87F8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907016648</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>18223B47C355D924E0533D991F0A87F8</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_UVTC_PrimaryEmail_TokenType_Null_404_NOT_FOUND_P1" searchProperties="true" id="73ec4f45-080c-400a-8953-d4f615728c5f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d81a4695-e6f4-4cf3-afb7-82d0eb9707ff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="f875def7-a444-407f-9300-1c41521cd928"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="cd174e62-e31e-4885-964b-f400aed395cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_UVTC_PrimaryEmail_TokenType_Invalid_400_BADREQUEST_P2" searchProperties="true" id="538923ed-c636-4ae4-bca5-3cfdb3566e71"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="645dc344-0029-4cc9-8c05-2df52a43fea7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="658250fa-3bfa-4bbd-b469-a10d93d00a49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="48e91973-8396-4ada-bc82-d3f711f4795e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","BAD_REQUEST");
tP.setPropertyValue("TokenType","TokenType_ValidateEmail");

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>BAD_REQUEST</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_UVTC_PrimaryEmail_TokenType_CaseChange_for_UnlockMe_200_OK_P2_RE-RUN" searchProperties="true" id="b91e551c-bcf8-4c4a-a2d7-53394c60b370"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b6d5b08a-4539-40bf-b1a1-a0f4162bcf9d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="eba6d3d3-c582-4d99-ba27-28d209106e98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="UnlockMe_various_cases" id="e3b28e30-4cfa-4b90-8a5b-f9eba8fc013c"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UNLOCKME&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:unlockme&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnLoCkMe&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="88998e3c-e977-47e3-a497-d6e21b0adcea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${UnlockMe_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop" id="1cb663ea-40f5-4bb9-bd1e-729be4fc80b1"><con:settings/><con:config><dataSourceStep>UnlockMe_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_UVTC_PrimaryEmail_TokenType_CaseChange_for_ResetPassword_200_OK_P2" searchProperties="true" id="354b800b-b65f-423b-9b4d-b7aeed2e37ce"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="0fe716ab-232b-43d5-b124-f3db6fbccace"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e6e05b36-006b-4951-8b84-df9bfd8ff9a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="ResetPassword_various_cases" id="24e55ca5-bf46-474c-bf31-ce8120575185"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:RESETPASSWORD&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:resetpassword&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ReSeTpAsSwOrD&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="c6244038-f462-4f22-9d7b-747e7d5c7471"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${ResetPassword_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop" id="d685ada4-4b3c-4d21-a3dd-1c1c519cc3ab"><con:settings/><con:config><dataSourceStep>ResetPassword_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_UVTC_PrimaryEmail_Valid_200_OK_P2" searchProperties="true" id="5e9b36d2-48e7-4aa9-86ce-9790a8c1ec9d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="34c570bd-f375-4928-b9d0-37fdc946cc72"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="254440a2-fed4-44fc-a00b-76537aca985b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="de8f9423-2e15-4a7a-882a-79fa05c96469"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="bae2ee7e-7067-4357-a17a-45eec8379a14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb/I4EP0rKH1EIU6AAlFB4rqlhZYCbb/ysjLOBAzBobHDpb9+7QApodBl9ynyZHzmzMXHvuN44Vl2lXMIBPVZarPwGLcja1kLA2b7mFNuM7wAbgtiD6rdjm1lkI0PW7RUu1HW/i5B0Spk85aezd3m9JzjYH1cGGd1C6NcFpBlloglXTkPoc24wEyUNQuZeR2ZulkamqaNkJ23MiZCIy31BgGX2NIlg7Q9qQ0va1MhlrZhrNfrzDqb8YOJYSFkGn+6nQGZwgJrlbtdRlGgoLL3JxkHCHgeyRB/YdwZCZ87h9sDOmFYhAHsYzmXYiEDlQzp43A6udHiveC0metHyzpmPqMEe/QLq/p0QUx9J1X1Jn5AxXRxMQkTKWAdNkQnZo7daEaS2pVACYYBxzqfYnOP1QcXAmAEUq/9dlm7ua5r0dZhgBl3/WDBk8v/xgfYCjx/CY7OD2ntqV0PeKZSlTsgdpsRL+R0BU9qWJeYAN93E8j1UKleAC7ddCiXA7rhip1xTO9kuatGg06Ai//ToKPm7EDesBdCJdt5s/yeO8l/rWE7Xi0eXtPv9w+vZJaelyMCx86RIW7tbnkylPEQ7XbMercTz32FYDry4X2zfgm2t7X01nqi7yiH+8YoPR9/dEPPmRgPjfvJwwcaND/48t7r1p8HFn/u4HzeaLPNY5h2P7qzr9nmpW321+OpcJ8ci01vh7TJH+sPo95TGv2ZVl+WzXl2mHaI93j7UHpJN0pTq/+XMaoteS9fcN7JwM0VaQfVvwr9F9p+Ts8bK2teHPUb3XKczhH/pO1w5gfheAZEHJZqDNqNVEt2CYvfxUxZqKO7kau9VOLDBTChVdQupR12KOWOOrbs4W6N6q1W06wVa40aQs2c2UT5LMqXSmYLVREqZQ8is2NxQrHuM5eqWEpyd2PzO0GysDkwBwJ95YdS6bj2C2IDC5xqs748BD7jMPSlPJuzrZMtlKCUc2e+WbACusl/UbymUpSffPHMnoOqKyBIinIuIcp9IHRJQSm3GmwuJ5sLWYxPvAqFZ2ZWOMMglNoeKJm1rVwxb3C6WHqgqBoL3wk9yCyny6g0Bt99LR0THln7zWF03C4mdvrvUAPp41DlwFUuNZB9hDO3S+6QyOWEC8cJH+CroUPVyZIFFQElOybJX99zogYkHhKZ0YFy7HlqSKAapwnFgZwVJfGkx/e1lHF58CuHdnzizGcmXK3CqAEFJXCBhDdUigayjAGQUErTdujPgRkxinHVPRATPwke25MUQzFlA4EFLOTEpKLlFRf/ALi6+Nty1jfXvioSIWXpBGzEOVvdk48WxfjXdw2xifKT5p78rP3A+e7YGayjODJPee8LyiZqpe6A7YW5IL6EpVK9/OAY/BzAueBJY1zkmIuQAzUOBVz+k1KyVNYwIX7IRLuhRYZjqYx4iu0S7G+nHzCRGsfPM/rv7zOdRiNAQD7qOI3w1S1rqyPAJkdyuw/6U3GLpVYj30LNbO1YcbP1RiEuSoJd5Yf5p+WoTqczXvkH</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0CFFE189FD600E3BE05305991F0A3CD7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0CFFE189FD5F0E3BE05305991F0A3CD7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0CFFE189FD5F0E3BE05305991F0A3CD7</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0CFFE1B8BDB00E41E05305991F0A0093</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0CFFE1B8BDB00E41E05305991F0A0093</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150119_1421665318258</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0CFFE1B8BDB10E41E05305991F0A0093</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>de8f9423-2e15-4a7a-882a-79fa05c96469</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_UVTC_PrimaryEmail_TokenType_CaseChange_for_ValidateEmail_200_OK_P2" searchProperties="true" id="e3e4ed9c-3e39-41fc-aa43-788058a0c0d9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="e912955f-7fba-4eb0-b7d1-0c37c6a72a82"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="3b67371c-4c36-4f3f-8c5e-ce985b6e35a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasource" name="ValidateEmail_various_cases" id="25a5ce8e-8dbd-4f20-920f-28712f02c498"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:VALIDATEEMAIL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:validateemail&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:VaLiDaTeEmAiL&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Case</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="1be759e3-72b0-47cb-bf5b-300c8a0b2670"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",context.expand( '${ValidateEmail_various_cases#Case}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Case_loop" id="7a1d2910-b91e-454a-8fff-7b853e1ae34c"><con:settings/><con:config><dataSourceStep>ValidateEmail_various_cases</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_UVTC_PrimaryEmail_Null_403_FORBIDDEN_P2" searchProperties="true" id="30ebc1b4-8e10-4fb4-a245-a1aaf5be7634"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="2d0fad94-cfab-42c2-bfc8-afc22f0b8e61"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail_null" id="bf26f964-c9ef-496b-98f4-606ef01d5edd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="16953e57-608b-4669-87af-2eea4cfe2043"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","INVALID_REQUEST");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>INVALID_REQUEST</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jxnjTxLwBGaMgcRtAhTStMnLHUVeg1JbBksG019/JRM7QEluemeYMVqvds/uHh/pkqEktlyPMcg4SakS9DvqPy3LxCYyzjUHG03NaYdN7emijbXIjlrGhWM0Q9NUlYCxHALKOKK8o1qGaWumpZntO9N2Ddu1241Wu/2oKveQMRFauDQMVSmSmDK3TNtR84y6KWKEuRQlwFyO3Zl3e+MKTxdVmNTu5Q5lmTDrLjhfurqOGyFgiGPcwGmiX+oHPpchc2dkThHPM3jJGbKO+rJ3s9k0NnYjzea6ZRiGbrR14RMyMv+sdj9VmyEMaJTu1j6iKSUYxeQ3kqBugS/SUPHieZoRvkjeCG3qpiFDa1BgDZsO/azqrwlKdB+MdAAyY0hjC2RWwaYQQQYUg/J9GnTUzx+b4G7vXYYoi9IsYUfrv4MEdA1xuoRQY1VlFbqPRzzRru4lYDegOM4ZWcNI0mSJMDBlkkFEihvCBPlCppTjVwomfqRiGeC/Gculvo9VQNdPdKdP5sD4/5nZ/rx2Ue5RnEP38ZFPhr8e8iff59v543bMp1fsLIIxYp0Swr7zDlQ97pf1MVlrbr1sigP7PnicP8TnrL/x0mbfTKKxdZUsp1OLLvBq++3RHK22KXYm9s/hbys9I4W3Ai/Z3n4dJFfwnPz0JvZ33R/T/qfr5tlzZJ9lxfh6Pttui/D6OsJN/aYFX7z+Vfi0WX4NrtoP/W0W/uo5U390Y7SK3qq4N75/HX3zvqDJw7MT0ZyOJg+ffmc/4ubo2w+HXUR6b26GrdvOa037NRwaK0mY5U/PgHm1lPQI+spQzAvx9+VFWkioRaWru5QaxThQrnblLiktbi4EiISuGOZuPegPbN/xeubA9C56TnNgOIY5NDyj2W5bQ/u80qAdiiOIfkojInNJld3x532AOHEZ0BAybZ3meAFMfSdiH3GkBHQqPo6UMrhLhYoPLd8eNP2hI8B659Zw4PV6Tds/7w/EP9/3VWWU8jEdZ17EITtU8PMDBZ8CJksCUuYlz5kgOuOiJSu0znlsNtaoQSEXB0Emtdi1nFZTZyRZxiAB60ka5jE0lotl2SCd7Z6WhjArrdPBXfn9vVne8buqE8InJNKByVp6IKYJJ44iqyrk7YLb+wVX4b08JPIzE23lGcE7JIevXtkiaVJTRVRUQa49jw0HUfXjgupE4Zrgmu/1QS10XqhAtxrHCjVWjXy9zssBXEiFy0R4XQidqc8A50KmtnfpL6B6HUL/0ClRoz7KXNsP8eV8QWcccUgEXZRy+YErwgyYvCIEgu7FR+8fBylF3zgU/JTNj8VNQiJ+97KBXSz9hHkiHps0C1/HdSLWXh5Rp7gXcELnciXPg+0bpMCpCEuEgKXZfvBTAU4lPzTWTa6xcMGmp5zD228UqUwdFWGc5pQHfbU07KtliZNvl+C+Ov0RplTklyO2YG8esT9vb2ZCtxKk1r7kv501UtIFgypP8hJLRy3EjVEkp/M9dX4BeFqgjcF7An1YSfcP85+WvZ4efw/dfwE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>EDE3C4AB1E0F7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>EDE3C4AB1E0E7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:EDE3C4AB1E0E7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>EDE3C4AB1E1A7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:EDE3C4AB1E1A7B45E0401F0A05992F36</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20131219_1387458274800</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>EDE3C4AB1E1B7B45E0401F0A05992F36</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_UVTC_PrimaryEmail_not_exists_404_NOT_FOUND_P2" searchProperties="true" id="99c88fe2-f08c-476d-b040-fd47f6c262c8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3f360a46-e3ec-4a07-9f16-979698ae45a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ac881422-5553-484e-8cdd-85c754c83a44"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="99517849-1a15-4404-8fd6-b273bdc21f04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_UVTC_PrimaryEmail_an_invalid_format_404_NOT_FOUND_P2" searchProperties="true" id="d888dad6-76bd-4cf1-b3f3-f185782f3f97"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="afde671a-cd60-47da-ae48-483a96db177c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail_Invalid" id="cd3481d9-c0e0-4090-89ff-85fa994ac901"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","abcgefh()@123");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="cdd2a220-12ff-4533-9d2b-b0b961078136"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_UVTC_PrimaryEmail_with_Method_HEAD_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="45d1ad7b-cba7-4d90-856e-dac408f6204e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b0f5986c-799e-4ae0-bd13-58f59561f99d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="776b46e7-f120-4ef3-8af2-5d57dbb44661"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_HeadRequest" id="aaed6c42-a7b7-4d03-94cc-cbff7485e4d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","METHOD_NOT_ALLOWED");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_HeadRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_UVTC_PrimaryEmail_with_Method_GET_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="4113cf71-75c8-4574-aeb3-e1a7e89a0489"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="390951ca-4c63-40df-b5db-9b28ca589fa7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="85b43fac-4f65-4d8a-9ee3-3fbd40670801"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_GetRequest" id="3d06afb0-aaa7-473e-9954-727f0d75c4b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","METHOD_NOT_ALLOWED");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_GetRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>METHOD_NOT_ALLOWED</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_UVTC_PrimaryEmail_with_Method_DELETE_405_METHOD_NOT_ALLOWED_P2" searchProperties="true" id="94abf6c7-b853-4297-8602-33aeca6182ef"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="af185388-82dd-4ffc-84c8-d8464b766fc6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="9d567ca4-8002-4618-8398-76047c9bd846"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_DelRequest" id="74e29651-122f-403d-b9c5-35e7ba7b224c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","MTHD_NOT_ALLWD");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_DelRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>MTHD_NOT_ALLWD</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>776b46e7-f120-4ef3-8af2-5d57dbb44661</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_FUNC" id="98944185-5d6d-44d8-b2c4-2f0c49682abd"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="9034ae8f-47cd-428f-ae3d-e59b402755aa"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1c6a5c62-b1be-432a-a1b8-3e633ac21465"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="63b11e86-7c7d-4612-bcd3-c93a10983d6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="5bcb1c9a-2a1d-4934-838e-4093d4056f76"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="56640510-8d4d-4f60-a527-3fc13e459b99"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr4Rj3EFqki4hAQCAwmT5GVLyG3QrC0RSwYnX7+SAQ9mSJbdJ5fardOnLzrSFUdxZPstziERhNFKFkeU+7m1oaUJ9RnihPsUxcB9gf1pazjw7arpo/0WrdJvN7S/HC8Ez3VD3UTzQK9dmqHu1c26DlaAIAjr4IErXTlPoU+5QFQ0NNu0LnXT1S3z0XR857tvW1XH8l61ygwSLrGlS9XUdqQy3tCWQqx8w9hsNtWNU2XJwrBN0zKeh4MpXkKMtObVNqM8UNLc+eNqABiiCFcxi40ro+RzFXB/ShYUiTSBXazgs1imYdYN6RNwsvimFXsh6NOQ5csbRBklGEXkA6n6DEEsWVBpRQuWELGMP03CMhWwDhnWsVWj3zSjTO1MoBLDhCOdL5G1w5pACAlQDJWnSb+hfTuva/nWxwRRHrIk5uXlf+MDdA0RW0Gg831aO2rnA56oVPMKsN+nOEo5WcODGtYVwsB33QR8PlRlnEBIsgHhckAzrtgZh/SOlttqtMkCuPg/DTpozhZkhqIUmq73g45fb8cfD3T5/sZ+rHvDZRahidX2GjmBQ+fcULR2uzwaymKItju6/Z+tCYyeB52xY7fd602NzJ9mozji9lMvun93HniIxtfD+7fE6dymd7Fz5724gem5L/N6j1xEzzN8052MCImN9ZPdw5v7a9drp/WL/rPTeR6Rn0+8F2bMfnXu3i9YNnh5/ciGs8fZR2/SQhmf3OKoPnNhvumNBjDurTtTaHMHP+DhYPIwrInR4t65eF3Npi+NIp0D/mXb/sxP0/kvwGK/VGPQb1e6sktIfC1mykICPcxd/ZUSHy6ACq2pdint8FMpdyTwZQ+3a8uzbc+7vux2TNO59uyOeek4nXrd6pqt727N2YvMlsURxRtGQ6JiKcndjs3XBHHsc6ABJPqapVLpuPYFYhsJVOnTiTwEjHJ4ZFKe+dIlHH4J6i2IVc+ckJrUYelcyvcDEyM6SlqhgKSsyW5JkyeAyYqAEm4111wONheyFm9onYrIqq5RlUIqpT1RKuvbNe/S4CReRaCYGjEL0giqq+Uqr4zBt19bR5jn1knnMT9tn+Z1/G9fAukTEOXAVS7XINsIJy4Xa5/I5wnXDxPew7fSgKiDJespEoK3TMq/fo+Jmo9iRmRGe8qF57GhhGocJ1QECtYEF4NeXNdSxeW5b+7b8Yas6ls1Xa/TvAO1mmMkEt5QKRqmbUwBp1KZ3h/Z30CNAsU46xooiB8FL+xliqlY0qlAAmI5MZV8eca9PwWu7v2+HPXs3EdFKaQsnYBMnLLdRPLNohh/+azBPlZ+0jyWnw1Lgt8dO4F1EEfmKa99QehCrdQV8P7JXGAmYYkUL5Ycgp8COBW8bCyKXHARcqDmqYDP/1SUKjU0hDFLqei3tdxwqJQ5T/G+Av+30x8wuRgXrzPy788zneQjgEG+6TjJ8dUl66sjQBcHarsLelJw293uV4JbZtf8w/yn5aBOxzPe/Ac=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FE013B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FDFF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FDFF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FE003B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FE003B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907623366</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FE093B82E0533E991F0A7643</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ef970a71-ac89-4de5-b3ac-d452951d4ae0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f564e1c4-a882-43f4-a950-b4d495099626</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c6a5c62-b1be-432a-a1b8-3e633ac21465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5bcb1c9a-2a1d-4934-838e-4093d4056f76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63b11e86-7c7d-4612-bcd3-c93a10983d6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_200_OK_P1" searchProperties="true" id="3ebeb9c1-b794-48e4-90c0-ad20c1a777c3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="2a6af9be-e938-4fc7-a3e2-dea968a8e999"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="714b3160-d5fb-4c27-9441-6df9db65351f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="808e1573-3dd1-4463-96eb-e21e3d644ad1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="e945343c-a840-4585-aa9e-d90769b532bb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="79d14eb0-f0a2-4c68-b05f-308e0b06f847"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8c5343b0-741c-449a-8b47-a23e9d8355b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU/I6FP0rTH10Sq8gdIQZlPpJBUUujvJyJqYbiLZpaVJAf/2XFKgUxcM5T53s7qy99iUruWQoDEynxRgknES0tA4DypzM2lDShDoRYoQ5FIXAHI6dYavXdcyy7qDdFqXUaTeUf8AA3TSwrxqvxoVq49eqWjdRTUU2QpXqK9TMekW4MpZChzKOKG8opm5UVL2qGvpItxzrwrGssqGbE6X0BAkT2MKlrCtbUmvWUOacx46mrVar8soqR8lMM3Xd0J573SGeQ4iU5uUmoyxQ0tz647IPGIIAl3EUapdawefSZ86QzCjiaQLbWP6xWLqm1zXh4zMyO1PyveB36DTKlteIRpRgFJBPJOvTAz6P/FIrmEUJ4fPwaBKGLoFVWGMVGzY9U7QitROBCgwThlQ2R8YWawBTSIBiKI0HnYZydlrXsq2jBFE2jZKQFZf/jQ/QJQRRDL7KdmltqZ0O+EOlmpeAnQ7FQcrIEu7lsMYIA9t2E/DpUKV+AlOy7hImBnTNJDttn97BclONNpkB4/+nQXvN2YA8oSCFprcyz6u9lWetWthfvj2n2p/Efey8p++skRHYd84MeWs3y4OhzIdos2N8Pg3xw6AzrdwvB+PHO68CN+6kao/HkUseJmHfW417ljc1W5G3uJ1M793qn4sX+rSsuHZ7eXtrJOTl0wzidMRir/XqgefeWn3dfrm6eJsMXfw8O7/rfnbJ7WqSer36IgT/XZvduH2/jfo15FlpcDcY33lXHjMn7nliJL15GIE3tu3uiLqP/Svj07wdvV/Xa408nT3+RdvuzA/T1zfAfLeUY9Bpl25ElxD/XcykhfjqNHN1Yik+jAPlSlPuktrhpELuiO+IHm7WRs00a7Wryo2oiHVVM129YlluvW7c6K2Lqm3tRGbD4oDidUSnRMaSkrsZm98J4tBhQH1I1GWUCqVjyi+IbcRRqUMH4hBElMEoEvJcrxG/9lmb2ZU331gt6qsPaxEHYYyV0n3EH+hD0ppySIqaXC1o8gAwiQlI4ZZzzcRgMy5qsUDLlAdGeYnKFFIh7YlUWce0axWNkTAOQDLVwshPAyjH8zirjMY2X1NFmGXWgTvKTtvRvA7/7UogfHwiHZjM5QpEG+GHy8XcJXI84fp+wjv4VuoTebBEPXlC8IZJ8dfXmMj5yGdEZLSjnHseGgqo2mFCeSB/SXA+6Pl1LVRcnPvmrh0LZJQX5XS5TLMO2LalJQJekylquqkNAadCmT5G0TtQLUfRTroGcuIHwXN7kWLK53TIEYdQTEwpW55w7w+ByXu/I0Z9feqjohBSlI7Dmv9kuw7Em0Uy/vVZgx0s/YS5Lz6rKPG/OvYD1l4ckae49jmhM7mSV8DHkbnAkYAlQryiZB/8J4CfgheNeZFzLlwM1GvK4fifklSlhoIwjlLKO20lM+wrZcaTf8TgfDl9g8nEOH+dkX9/nqkkGwEM4k3HSIYvL1lHHgE621PbbdAjgnv9m+AW2TW/mb9b9up0OOPNvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FE4E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FE4C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FE4C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FE4D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FE4D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907635393</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FE563B82E0533E991F0A7643</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD2w+PIEZYkNKEhIChOT2paPIa1Bqy9SSgPTXX8nEBAjJpXcmE0br1e7Z3aMjnTGUJo7fYQxyTjKq9cOW/hNHNRSjWsNoNuKG4dYtz2g0wTVqgLworiHs2Q1d6zMmoE8ZR5S3dMeyq4btGHZtYjX9quNbXsWpez90bQo5k6GlS8XStXWaUOYXaVu6yKmfIUaYT1EKzOfYH3cG17709FGJSW+fbVAWCfP2nPOFb5q4EgGGJMEVnKXmmbnncxYxf0xmFHGRw2vOiLX0172r1aqyqlayfGY6lmWZVtOUPhEjs696+0u5GaI+jbPNOkA0owSjhPxBCtQA+DyLtE4yy3LC5+kHoW3TtlRoA9bYwLZLv+rmW4IC3YmR9kDmDBlsjuwy2AhiyIFi0O5H/Zb+9bQJbvZOckRZnOUpO1j/HSSgS0iyBUQGKysr0Z0e8Ui72meA/T7FiWBkCTeKJguEgWnDHGKyviZMki9iWjF+bc3kHylZBvhvxnJm7mKV0M0j3QnJDBj/PzPbndcmyhQlAtoPAX4WLFzW/hHx9bObfPPIuHfhkMtBp1VA2HXegNqO+3V9SNYtt143Peb55PuyO+1Hw8Xlw9PK7C6uAsZneWfYGJpdfFMdk/WfG3s9ehxWzykMhJvZ39aC3QeDGxZdUnTbeb6w7ngEyZeVF1088Hgau1NkPz944urWXS088b0+/RFc924nVxNSnUTfHXb/MkkxFWbduXu65154Mbztnz9l8fiuN30eRbMB++L86DUno8x7IPPllffyK33qtt5q2q1h31hKwlg8PQPm5VLRox9qPTkvxD+XF2UhkREXrv5CaRTjQLneVruUtPhCChCJfDnMzbobdty6E4Rew7Hkv3rXci27Z3Usr9msVptuqUEbFAcQg4zGROVSKrvhz+cAceozoBHkxjITeA5M/yRiiDjS+nQkD0dGGUwyqeLndhCElud4tuM0gp5TC62w7gbn50HVCeudmq7dZPyW3uadmEO+p+C2s6fgI8BkQUDJvOI5k0Rnkgv4N1oKntiVJapQEPIiyJUW+47b8ExG0kUCCrCZZpFIoLKYL4oGmWzz6xgIs8I66k6K8/dheYffyk5In4goB6ZqOQc5TXh3Fdm+VxbyccHebsFl+I6IiDpmsq08J3iDZP/TG1sUTbZUkRX9DMY/7RL31v3k7e93mp+AMg/7sU0ULclO2vJOldeEFJF2Oc3fqPK7IpZLUcyvrgQyl+FNqZO2OQYspMq9TLJfQM1tCPOkS2aL+iDz1r6PT/A5HXPEIZVs04rlCS+MMTD1wujL07I+9fmyl1L2jcOaH7MFiXyIKMSfvlWwj5WfNA/lzyrLo7dxHYm1k0fWKZ8VnNCZWqnr5OUDUuBMhiVS/7J8N/ixAMeS7xu3Td5i4ZJNT4LDx180JWwtHWGcCcr7oV4YdsW2wMlfFuC/Ob0LUwj66w29Zh/e0I+D67GUvRTpW1/y384GKeiCQVcPgQJLS1/LB6dMTmc74v4K8Ki+17vuZ/q+X0n7nfm9Zaenh+eh/S8=</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B5FE943B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B5FE943B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907645764</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B5FE953B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e945343c-a840-4585-aa9e-d90769b532bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00080_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="85ef62bb-46de-4fd4-8875-687a90e1adc7"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3f6db038-5adf-426f-a8ad-cbbc8ac501fc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c078fd77-3aa9-4e16-80f6-db05d7ae7615"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0ba94d7c-cea3-4d17-a0b3-faf4f65c0cf9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="424f5de8-c121-4d2f-b20c-9828324bd5b3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o6FP0rTH10Sj9oETrCDAh68Ah6ARF5uRPTXcihTaBJAf31NylQKYqXe5862d1Ze+2PrOSaoyi0vQbnEAvCaGEThZR7qbWmJTH1GOKEexRFwD2BvUGj++DZRdND+y1aodOqaX+/uU7gWP6bbl+VKrrjBIH+VrYs3a4i/woHbtm1fOnKeQIdygWioqbZpuXqZlm3zKFZ8kpXnlsplkvViVYYQcwltnQpmtqO1IbXtJkQC88w1ut1cV0qsnhq2KZpGePuwwDPIEJa/XqbURooru/8cdEHDGGIi5hFxrWR87n2uTcgU4pEEsMuln8qlmmYVUP6+JxML7RsL/gdGrB0eYMoowSjkHwgVZ8uiBnzC41wymIiZtHJJCxTAeuwwTq2HHqhGXlqZwLlGMYc6XyGrB1WHwKIgWIoPPc7Ne3ivK6lW4cxojxgccTzy//GB+gKQrYAX+f7tHbUzgf8plL1a8Beh+Iw4WQFPTWsC4SB77oJ+HyowlMMAdk8EC4HdMMVO+OQ3tFyW40WmQIX/6dBB83ZgoxQmED9djLssw02Rmi84e7rZe9uxJbcajyH7VpK4NA5NWSt3S6PhjIbou0OCC5fB7+mk6j6xzd6FF8l1QZ7nT0n9+9x9DDFm2lUiuyw2e81m+IDWu8vL+s5uB83N693Tv+++/jysplP1o3lUzhaR2Rc/v1i361H972P6aPTtObt+/FTd3nXDeLqw4x3zAi1wjfn93i2sdwn07XWk7b7vIRG1Ouux8k9a+O/AmKPg9EksYc9/56gy+rDy6/Jr8VzLUvngH/etj/zg+TtD2CxX6ox6LQKt7JLSPwsZspCfD1IXb2FEh8ugAqtrnYp7fASKXfE92QPt2urYtuVStO9bTevSs2K3TbdUqldrVq3ZuOq7JT2IrNlcUTxhtGAqFhKcrdj8zNBHHkcqA+xvmKJVDqu/YDYQgIVOrQvDwGjHIZMynMi/qwtYZdJOQkte+GEZT+ulufzuVboMfFIH+NGICDOa3I5p8l9wGRBQAm3mmsuB5sLWYslWiUitIorVKSQSGmPlcp6tlNxDU6iRQiKqRExPwmhuJgt0soYfPu1dYR5au23h+lpO5nX8b99CaSPT5QDV7k0QbYRvrlcnH0ipxOuHia8h28kPlEHS9ZTxARvmeR/fY6Jmo9sRmRGe8qZ57Ehh2ocJ5QF8lcEZ4OeXddSxeW5r+/bsURWcVlMVqsk7YDjlIxYwhsqRcO0jQHgRCrT+5DNgRoZinHWNZARPwqe2fMUEzGjA4EERHJiCunyjHt/AFzd+x056ptzHxW5kLJ0AjbiO9tNKN8sivGPzxrsYeUnzU/ys2bxZ+LfYR3EkXnKa18QOlUrdQW8n5gLzCQskeLF4kPw7wC+C543ZkXOuAg5UG+JgNN/CkqVahrCmCVUdFpaajhUypSneF+A9+n0BSYV4+x1Rv79eaaTdAQwyDcdJym+umQ9dQTo9EBtd0FPCG75J8HNs6t/MX+1HNTpeMbr/wA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FEB83B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FEB63B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FEB63B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FEB73B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FEB73B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907660976</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FEC03B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00081_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="28c5758e-ce78-440c-95b8-896a2508e87d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="4972c57c-5bf3-47df-9200-3eeb51eaff2c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="3aa33d8e-29ef-4934-b74b-b048a1698880"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="46923e3b-3af0-405d-9e8d-6a1d653cc82e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="1a3e5f6e-077b-4792-8d13-a77e20e2dbee"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7c62be28-db21-41d2-9e31-077ba250d219"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV+52BWockIgzuQ2QJJJXraE3DbK2DJYMpf5+pEMeDATsuw+udRudZ/uPjrSBUNJbLoeY5BxktLaKokpcwtrR8kz6qaIEeZSlABzOXZH3v2da9Z1F+22KDW/11H+adtGexJgWwXTaKk2NBzVaYWm2mxOWmYwcdowaQpXxnLwKeOI8o5i6kZD1ZuqoY91y7XarmHUdav1rtReIGMitnCp68oW1Ip1lCnnM1fTlstlfWnV0yzSTF03tB/3dyM8hQQp3YtNRUWirLv1x/UAMMQxruM00S60is9FwNwRiSjieQbbXMGxXLqmO5rwCRiJzpRyLwQ+DdNieYVoSglGMfmFZH/ugU/ToObFUZoRPk2OFmHoMrAKK6xiw6ZnilaFdmKgCsKMIZVNkbGNNYQQMqAYas9Dv6OcnTa1Yus4Q5SFaZaw6vK/4QG6gDidQaCyXVlbaKcH/KRT3QvArk9xnDOygAdJ1hnCwLbTBHx6qNpTBiFZ3REmCLpiEp22D+9guelGj0TA+P8Z0N5wNkFeUJxD1zdWdpCsOblpPN5HaNR7yoZPzx+L/g+vUwDYdy4M5Wg3ywNSliTa7Pg+muaksX7va9o3w5l/m1rRGvu6h14+/NuXQdLMV3fBW39gL2+sX6PHq/GNEwwe4357HWq9n950OB2xpTdY0Wz6Gj4+vD4t0/Pvb8Z1+D7IlvfrWz3oNd/05wi/c8Gg5zy6HF5pzz3ffkGzW/N88nA+uWn/GN/OkR17M72lDy6v6Z338fByNfffaexNGuT1YcBf0++dspw9/FXb7syP8skHYL5bShr4vVpfTAnxr8VMWkighoWrO5PiwzhQrnTlLqkdbi7kjgSumOFmbbRNs92+bPT7um1dts1rvWFZ145j9HWv1bStnchsUBxAvEppSGQuKbkb2nwNECcuAxpApi7SXCgdU76I2EMc1Xw6FIcgpQzGqZBn5ODQScOIWMvcaU3WNg2ipvMxU2oPKX+kj5kXcsiqktysSPIQMJkRkLotac0ErxkXrZijRc5jo75AdQq5UPZMiqxr2u2Gxkgyi0EC1ZI0yGOoz6azojEa23xNFWFWWIfX4+KwHS3r8N+uA8InINKByVouQUwRPrlb9F0hxwt29gvehffygMhzJdrJM4I3SKq//rBE0qOkiKhoB7n0PDRUomqHBZWJggXBJc/L21qIuDj23d045sioz+v5YpEXE7BtS8tEeE2WqOmmNgKcC2Faj9OfQLUyinbSLVACP0he2qsQcz6lI444JIIxtWJ5wrU/AiavfV8wfXXqm6KSUrSOw4p/ZruKxZNFIv7yVYNdLP2E+Ul8lmkW/JnYJ7H28og6xa3PCY3kSt4A6yO8wKkIS4R2pdl+8M8CfJa8aiybXGLhglCTnMPxPzUpSh0FYZzmlPs9pTDsC2WBk69n4P5x+itMocXl44z8++tMJQUFMIgnHSNFfHnHuvII0GhPbLdJj+it9ZXeVtF1/zL/bdnr0yHHu78B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FF053B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FF033B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FF033B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FF043B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FF043B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907672586</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FF0D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00084_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="40eaf3f7-16c6-4b32-aa1a-0ef8e3e173da"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1dce8545-7b57-4b9f-828e-64c627ab354a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="86c2b0f0-fe1a-4146-af74-17889cab6327"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="9a491d16-2749-4c26-8f7f-204839f91d87"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="47b69360-17c8-4720-bc9f-d104fa3687ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="65c05e78-470f-4abb-a277-5b896607c86e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0Vynm8BV7ZXIEqEqBCTQIJ29zkZUrIbaxgS44lE5Kvv5IBBxPIMPMEardOn150pGuOotByO5xDIgijpU0UUu5m1paWJtRliBPuUhQBdwV2J52He9eqGC7ab9FKg25L+6dugW81LVzGpt0oOwaulxcg/y0WNjKbCNlNy5eunKcwoFwgKlqaZZjVslErm8bUsF274VqNijS9aKU5JFxiS5eKoe1IbXhLC4SIXV1/f3+vvNsVlix1yzBM/ffD/QQHECGtfb3NKAuUtHf+uOIBhjDEFcwi/Vov+Fx73J2QJUUiTWAXyzsXy9CNpi59PE6WV1q+F7wB9Vm2vEWUUYJRSD6Rqs8DiIB5pU64ZAkRQXQ2CdNQwGXYqBo69ErTi9QuBCowTDgq8wCZO6wx+JAAxVCajQct7eqyrmVbpwmi3GdJxIvL/8YH6BpCFoNX5vu0dtQuBzxRqfY1YHdAcZhysoahGtYYYeC7bgK+HKr0mIBPNveEywHdcMVOP6R3tNxWo0uWwMX/adBBc7YgcxSm0B6hYNx5fr1rrr0YRrw7e2pGln839j8fWhmBQ+fMkLd2uzwaynyItjug/2Y8PT0G9dGGv/bBGNvpHXkasufe7Jbb85HD687qZTUeia59P5uFw1+9l/mwPhmu+r0Pk80an7+S8fPS+bvWCabxvMZWK+ct+Jwwn8xEfR05m+R+GtXiu6Y+HM7MXu1Gp6mdzh3Ehk8f4jcRjfdx83F6h6ov478enibr6Xz2iOYDa93oRnc3zgNy+OLZHz3yVp7OAf+ibX/mJ+niFbDYL9UYDLqlvuwSEj+LmbIQr+xnrm6sxIcLoEJrq11KO9xUyh3xXNnD7dpsWFajcVPt96umfdOwekbVtnvNptk3OvWaY+9FZsviiOItoz5RsZTkbsfmZ4I4cjlQD5LymqVS6bj2A2IXCVQa0LE8BIxymDIpzwK8ZfwJFiELbK5eAzsNll7MAksrDZkY0VHS8QUkRU2uFTR5DJjEBJRwq7nmcrC5kLV4Q+tUhGZljSoUUintiVJZ13IaVZ2TKA5BMdUj5qUhVOIgziqj8+2vVUaYZ9Zxb5qdtrN5HX/bl0D6eEQ5cJXLDcg2wonLxdwncj7h5mHCe/hO6hF1sGQ9RULwlknx09eYqPnIZ0RmtKecex4bCqj6cUJ5IG9NcD7o+XUtVVye+/a+HW/IrLxV0vU6zTrgOLaeSHhdpagblj4BnEpl+piyFVA9R9EvugZy4kfBc3uRYioCOhFIQCQnppQtL7j3J8DVvT+Qo7659FFRCClLJ2AjTtluQ/lmUYx/fNZgFys/aX6UP+8s8b46dgLrII7MU177gtClWqkr4OPMXGAmYYkUL5Ycgp8COBW8aMyLnHMRcqAWqYDzX0pKlVoawpilVAy6WmY4VMqMp/iIwf1y+gaTiXH+OiP//jwrk2wEMMg3HScZvrpkXXUE6PJAbXdBzwiu8ZPgFtm1v5m/Ww7qdDzj7T8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FF523B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FF503B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FF503B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FF513B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FF513B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907690309</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FF5A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00093_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ResetPassword_node_role_Retailer_200_OK_P1" searchProperties="true" id="f0f6e7ee-6126-4161-8db3-e4c38cec5365"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="969c0478-358f-401f-aa2c-85090f2493fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e294a2a6-2d6c-497d-a809-d0fd85fe97e3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="00552d6c-b215-4d54-88ba-f15d0f089ce6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="9425ae03-8035-4947-b44e-91d751ae3e41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="6bb2b8d7-15bf-4067-a9b8-9304e0f489d8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8501bf4f-325e-47d1-931e-7dacf4e842ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMr7hYFyBKgIh482NAMNm8rKlyG2jjC2DJAPJ169kwMEkZNl9cqnd6j7dfXSkC47SxPa7nAMTJKO1dZpQ7hfWtpYz6meIE+5TlAL3BfbH3btb366bPtpt0WpBv6393Wo6yDWbLd10PUtvnDccHdkvjt58QZbrAHhRZElXznMIKBeIirZmm5arm+e6ZU5Mx3c8v+HWnUbzWatNgXEZW7rUTW0Las3b2kyIuW8Yq9WqvnLqGYsN2zQt4+nudoxnkCKtc7GpqEjEOlt/XA8BQ5LgOs5S48Ko+FyE3B+TmCKRM9jmCo/lMg2zZUifkJP4TCv3QhjQKCuWPUQzSjBKyDtS/bkDMcvCWjeJM0bELD1ahGWqwDqssY6tBj3TjCq0EwNVEDKOdD5D1jbWCCJgQDHUfo6CtnZ22tSKrROGKI8ylvLq8r/hAbqEJJtDqPNdWVtopwf8olOdC8B+QHGSc7KEe0XWOcLAt9MEfHqo2pBBRNa3hEuCrrlCZ+zDO1huutEnMXDxfwa0N5xNkClKcujcvL4P+bVBhzdvT2xpvS6SeHofTxsNq9EuAOw7F4ZytJvlASlLEm12pLz7MBu48Txg9u/VcP0IJBxYz/SPXnjj4Qk1ERtOjeVICPeu+fyr15vD42sfcTuJrLB7Ne1NLPLneIxeH92HKx48GLPzKMDIRjHqLYJr7+ekK3D+ZK9cjzfjl+Vi8MJo2psEsWlcOl43yX9k0/ltNn73xlZ/NYLp9Ndfk9V4eD3s3olp3+n/uOqhrt3KvXZZzh7+qm135sf5yytgsVsqGgT92kBOCYnvxUxZSKhHhas/V+LDBVChddQupR1+LuWOhL6c4WZtebbteZfuYNDqOZeefWW6jnPValkDs9uU52gnMhsUBxB7GY2IyqUkd0Ob7wHi1OdAQ2D6Msul0nHtm4h9JFAtoCN5CDLKYZJJeY6YScKIRtR0FxbMiIMjOEeLnGu1+0w80AfWjQSwqiafVzR5BJjMCSjhVrzmkthcyF4s0DIXiVVfojqFXEo7Uyrr2w3PNThJ5wkopEaahXkC9flsXnTG4JuvrSPMC+voalKctqN1Hf7btUD6hEQ5cFXLJcgxwheXi7Mr5HjBrf2Cd+G7eUjUwZL9FIzgDZLqrw+aKH6UHJEV7SCXnoeGSlTjsKAyUbgkuCR6eV1LFZfnvrMbxwJZ9UU9Xy7zYgKNhmMwGd5QJRqmbYwB51KZ3ibZb6BGGcU46RoogR8kL+1ViLmY0bFAAlLJmFqxPOHeHwNX934gqb4+9VFRSSlbJ2AtvrL1EvlmUYi/fdZgHys/aR7Kzypj4cfEvoi1l0fWKa99QWisVuoKeDvCC5zJsESKV8b2g38V4KvkVWPZ5BKLkIR6yQUc/1NTqtTWEMZZTkXQ1wrDvlIWOMXbHPwPp09hCjEuX2fk359nOikogEG+6Tgp4qtL1ldHgMZ7artNekRwL78T3Cq6zifzZ8tenw453vkH</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B5FF9D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B5FF9B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B5FF9B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B5FF9C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B5FF9C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907707636</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B5FFA53B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B5FFE33B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B5FFE33B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B5FFE43B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907718067</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00097_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ResetPassword_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="427e6d4a-9abd-4a29-835f-61a692700e70"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="61e769d5-69f6-4bdb-b82a-dd5c7932721c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="bd3aa776-296e-495b-9fc0-94dcb2f65196"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1fb9c4ba-f128-47dc-a77d-89989125dcbe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="d2ce8bd3-ee1e-4de1-8bb1-ad5484f9e466"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="01d22424-110c-4061-a7c7-0a98f0fab4a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="3d95e953-398d-482f-9ae2-8c4e0e8fd76f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="cbeee7e6-d05f-4e69-8c6a-0ac07c107ad0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="bd8e68e1-6622-4850-995b-2a628731f960"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMr6BA65AlRPIjHNPYBKSly0ht0EztkQsGQNfv5IBB5OQZffJpXar+3T30ZHOOEpi2/M5h1QQRmuLJKbcK6wdLUupxxAn3KMoAe4J7A382xvPrpse2m7RakGvo/3tINs1W06omy5u6g173NDHTTfSnXYIJoZwbLYb0pXzDALKBaKio9mm1ZT+umUOTcdz2p7ZqtvW6ZtWe4aUy9jSpW5qG1AL3tGmQsw8w8jzvJ47dZZODNs0LWN0ezPAU0iQ1j1bV1QkSrsbf1wPAUMc4zpmiXFmVHzOQu4NyIQikaWwyRUeymUaZtuQPiEnkxOt3AthQCNWLC8QZZRgFJMVUv25BTFlYc2PJywlYpocLMIyVWAdFljHVoOeaEYV2pGBKghTjnQ+RdYm1hNEkALFUPv1FHS0k+OmVmwdpojyiKUJry7/Gx6gc4jZDEKdb8vaQDs+4Bed6p4B9gKK44yTOdwpss4QBr6ZJuDjQ9UeUojI4oZwSdAFV+iMXXh7y3U3emQCXPyfAe0MZx3kGcUZdLNxv3d6H4zFMh/13OurO8M551dPftKcdAoAu86FoRzterlHypJE6x0RtxY+iFf2euvM+8HPh2vmvpCruN9cssZp+pzM3hE85sFqMWovrxZ3t0be8ifPwr+GkT9eDv9cUfZ4/zwYXT/24heeu3xi3wWj/C1v5qevSRS+zTJrYjghXfWv3fbLj6GfR/Nf6fsyXOUPLTv6OTDm7fxiFbt/PfeuFq8jJPCPy+BxaC9ajdA9XwV2lI5vk77fKcvZwV+1bc/8IBv/Biy2S0WDoFe7lFNC4nsxUxYS6lHh6s2U+HABVGhdtUtph5dJuSOhJ2e4Xlst2261zl05T9c5b9l9s+k4/XbbujT9U7fhbEVmjWIP4gWjEVG5lOSuafM9QJx4HGgIqT5nmVQ6rn0TsYcEqgX0SR4CRjkMmZTnxu80jbJ4JSZxywqZnSwbzT+hnRGtdsfEPb1P/UhAWtVkt6LJT4DJjIASbsVrLonNhezFO5pnIrbqc1SnkElpT5XKenaj1TQ4SWYxKKRGwsIshvpsOis6Y/D119YR5oX1qT8sTtvBuvb/bVsgfUKiHLiq5RzkGOHT5dLymttCDhfc3i14G97PQqIOluynSAleI6n++qCJ4kfJEVnRFnLpuW+oRDX2CyoThXOCS6KX17VUcXnuu9txvCOr/l7P5vOsmECj4RipDG+oEg3TNgaAM6lMyyH7A9QooxhHXQMl8L3kpb0KMRNTOhBIQCIZUyuWR9z7A+Dq3g8k1RfHPioqKWXrBCzEV7aLWL5ZFOJvnzXYw8pPmh/kJ2dp+DGxL2Lt5JF1ymtfEDpRK3UFLA/wAjMZlkjxYulu8K8CfJW8aiybXGIRklDjTMDhPzWlSh0NYcwyKoKeVhh2lbLAKZYz8D6cPoUpxLh8nZF/f57ppKAABvmm46SIry5ZTx0BOtlR203SA4Lb/E5wq+i6n8yfLTt92ud49x8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B600073B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B600053B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B600053B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B600063B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B600063B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907729776</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6000F3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B6004D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B6004D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B6004E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907740900</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00101_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="7e8530be-766d-4ba7-a57b-1039fe677021"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="8c1b5bd8-6909-40e3-a2c8-262f3ae9764a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ee368caa-6361-43b6-b22f-f97158c02c35"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0ac39e22-e0b7-4636-ba45-c7ef51e80327"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="3c1ab80d-dfc1-422b-975c-7e677a96bc02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV8x4ApUEciFmTBJMElm87Il5AY0sSWwZDD5+pUMOJiELLtPLrVbp09fdKQLjuLI9jucQyIIo5Usjij3c2tLSxPqM8QJ9ymKgfsC+0FncOfbVdNHuy1apd9raX9jx7Pr7tjUPdes6a5jYh3Vxw19Mp7YIQLkhRaSrpyn0KdcICpamm1aNd30dMscmY7vNH3XrNYd+1WrPEPCJbZ0qZrallTGW9pMiLlvGKvVqrpyqiyZGrZpWsbvwV2AZxAjrX2xySgPlLS3/rgaAoYowlXMYuPCKPlchNwPyJQikSawjRUei2UaZtOQPiEn0zOt2Athn05YvuwiyijBKCLvSNVnAGLGwkonmrKEiFl8NAnLVMA6ZFjHlkvPNKNM7USgEsOEI53PkLXFGsIEEqAYKk/Dfks7O61r+dZRgiifsCTm5eV/4wN0CRGbQ6jzXVpbaqcDflGp9gVgv09xlHKyhF9qWOcIA992E/DpUJWHBCYkuyNcDmjGFTtjn97BclONHpkCF/+nQXvN2YA8oyiF9pola693c5nQdPXyy3ECpy6Sbm9tGYNWTmDfOTcUrd0sD4ayGKLNjunDkEeXb4tp57HZZaPRC72+fbm6yaI58h6ucDzo0VcveJ4FaYbef972mT2o45vRD+KOs4jUZkFv8OR2nfPHhQ3ng6fn/tDNHtng9fWls6wt50tKxCr78YZHtlcXgz5bkx6am04XgzMMZ7OX9PcdronO+/Jn3a4F96Pg+SG8DLyfln19yx9r3eaf99f1dHEujL9aRTp7/Mu23ZkP0vEfwGK3VGPQ71WuZZeQ+F7MlIWE+iR39edKfLgAKrS22qW0w0+l3JHQlz3crK2GbTcal55pelfOZcO+MmuOc9VsWtdmp+65zk5kNiwOKHYZnRAVS0nuZmy+J4hjnwMNIdGXLJVKx7VvEHtIoEqfDuUhYJTDiEl5tsbjN9fm71lI7EbTXcXijcWLxnqlVX4xcU/vk85EQFLWZK+kyUPAZE5ACbeaay4HmwtZiwVapiKyqktUpZBKaU+Uyvq226gZnMTzCBRTI2ZhGkF1PpvnlTH45mvrCPPcOrwa5aftaF6H/3YlkD4hUQ5c5XIJso3wxeXi7BI5nnBzP+EdfCcNiTpYsp4iIXjDpPzrY0zUfBQzIjPaUS48Dw0lVOMwoSJQuCS4GPTiupYqLs99e9eOBbKqi2q6XKZ5B1zXMRIJb6gUDdM2AsCpVKb1iL0BNQoU46RroCB+ELywlymmYkYDgQTEcmIq+fKEez8Aru79vhz17NRHRSmkLJ2ATHxl60byzaIYf/uswT5WftL8ID8rloQfHfsCay+OzFNe+4LQqVqpK2B9ZC4wk7BEihdL9sG/AvgqeNlYFLngIuRAjVMBx/9UlCq1NIQxS6no97TcsK+UOU+xnoP/4fQJJhfj4nVG/v15ppN8BDDINx0nOb66ZH11BOh0T223QY8Ibu87wS2za38yf7bs1elwxtv/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B6006F3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B6006D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B6006D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B6006E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B6006E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907762974</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B600773B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00102_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="5cf707ee-c1d4-4722-a1db-475fe5bfae39"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="021dd533-1b3f-4f9a-bcd9-287821923f4f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="0861da66-aad0-4896-a25b-4b05c7ed54be"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="b6bf840a-5e82-4c34-a773-9779ec317884"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="7e0e58d2-b432-49ca-9910-cc5a6e8e285f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="cb11bbb0-3a30-4dc3-8f18-3a181c305392"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="c8dfd7c6-9912-4b71-91a9-7e6ef644748b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0Vyvcx5d0G4wpUAVkuExISIMvkZUrIjVFiy2DJLPn6KxlwMAkZZp5cardOn150pHOG4sjyW4xByklCK6s4oszPrQ0lS6mfIEaYT1EMzOfYH7Zue76lGT7abVEq3YuG8g+qBc4Y1WuqgTxHdVwnUMeWCaqLoF6zjXrVHGPhylgGXco4oryhWIbpqkZVNY2RYft23XctrVozX5XKE6RMYAsXzVC2pFasoUw5n/m6vlwutaWtJWmoW4Zh6i+3vSGeQoyU5vkmozxQ2tz6Yy0ADFGENZzE+rle8jkPmD8kIUU8S2EbKzgWy9CNui58AkbCX0qxF4IunST5soNoQglGEflAsj63wKdJUGlFYZISPo2PJmEaEliFFVax6dBfil6mdiJQiWHKkMqmyNxiDWACKVAMlcdBt6H8Oq1r+dZRiiibJGnMysv/xgfoAqJkBoHKdmltqZ0O+E2lmueA/S7FUcbIAu7ksM4QBrbtJuDToSr3KUzIqkeYGNAVk+z0fXoHy001LkgIjP+fBu01ZwPyhKIMmuPXzo096d24Weu6FjtnD94TXnizbid8b+QE9p1zQ9HazfJgKIsh2uy4u59/DKfu01X1offei9HvK++pdffizsee8fCGV9B/pp1bm/aNfrvDUfe+R9Kb+dQ0zx45C+jAG5NV+yEZ2GF7feY89x2++Hi8uQTrum5Eb7evb9b8OnaN5/dXu3PV7730V7X1zbCNa8+GNVr2Lq1HVs2yv5nX5o/Wb+Ov4Yc70a2q+YEAQtce8zvUwsFo7b6GjSKdPf5l2+7MD7PxG2C+W8ox6F5UrkSXEP9ZzKSFBOokd/VnUnwYB8qVptwltcPPhNyRwBc93KxNz7I8r101jHbbbnvWpeHa9mW9bl4ZrVrVsXcis2FxQLGT0AmRsaTkbsbmZ4I49hnQAFJ1kWRC6ZjyA+IF4qjSpQNxCBLKYJQIeTZTmNrBZLkIpuuVuXpfknRsojA2F0rlLuF92k9bEw5pWZSrJVEeACYzAlK55WAzMdmMi2LM0SLjkaktkEYhE9qeSpn1LcdzdUbiWQSSqh4nQRaBNpvO8tLobPO1VIRZbh1cjvLjdjSxw3+7GgifgEgHJnNpg+gjfHO7OLtEjidc3094B9/KAiJPligoTwneMCn/+pwTOSDFkIiMdpQLz0NDCVU/TKgIFCwILia9uK+FjIuD39y1Y45Mba5li0WWd8BxbD0V8LpMUTcsfQg4E9K0HiXvQPUCRT/pHiiIHwQv7GWKGZ/SIUccYjExlXx5wsU/BCYv/q6Y9dWpr4pSSFE6Div+na0TiUeLZPzjuwb7WPoJ8734LJM0+OzYN1h7cUSe4t7nhIZyJe+A9ZG5wImAJUK9knQf/DuA74KXjUWRCy5cDNQ443D8T0XKUkNBGCcZ5d0LJTfsS2XOk69n4H86fYHJ1bh4npF/f5+pJB8BDOJRx0iOL29ZXx4BGu7J7TboEcVt/aS4ZXbNL+avlr06Hc548w8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B600BC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B600BA3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B600BA3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B600BB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B600BB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907774899</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B600C43B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B601023B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B601023B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B601033B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907785424</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00104_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="e983d46a-a240-4866-9f4c-d05fcf4fe530"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="345dc487-2838-4431-bb97-c0e88ada512c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b101ef48-57eb-4146-841e-e02c455551bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c45251f7-5e79-4205-9b4c-4b681c7f29cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="0d79b45f-5b31-4db7-8df2-a8eab4380d88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o4FP0rjPu4Yyzb4IAnMMNH0rJLEgokbfqyI+RrUGpLxpLBya9fyYCLaciy++TR9dW5537oSNcCx5Hj94SAVFLOankcMeEX1o6RpcznWFDhMxyD8CXxZ727se/UkY8PW4zaaNgx/l5cNRxYhMR0bM8xGwg1zQVuEbPtoIXjEi8MW23lKkQGIyYkZrJjOMhumsgzbTRHrt9Avu3V3ab7w6g9QSoUtnKpI2NPKhcdYyVl4lvWdrutb906T5eWg5Btfb8bz8gKYmx0r3cZFYHS7t6f1AMgEEWkTnhsXVsVn+tA+DO6ZFhmKexjBediIQu1LeUTCLr8ZJR7IRixkBfLAWacUYIj+oZ1fe5ArnhQ60VLnlK5is8mYSMNbEJOTGI32CfDqlK7EKjCMBXYFCts77GmEEIKjEDtcTrqGJ8u61qxdZ5iJkKexqK6/G98gG0g4gkEpjiktad2OeA7lepeA/FHjESZoBu418OaYAJi300gl0PVJimENB9ToQY0F5qddUzvZLmrxpAuQcj/06Cj5uxAnnCUQfepP5y+WgO2+O5mVy6Lm6nVh9z+Yj0/dgoCx86FoWztbnkylOUQ7XbI5dfP8dMLH4Rf4/todscXc+IuN2/BxHX/TLYNHubJYNIKvCsaPX8Lpv2H53V/HT4tV95g+VcuP0/o43g2Xky2yY17++xuxbcUPaLolj/Mf/zYXk1bFjx+f3AyeTvqvd3cT0e9tJG/RK92uE434/4oeEHo88uXeTuZ/AzWzviq5SHvz6/5cPL0x/zNe2jMh1vmrts26pTpHPGv2g5nfpYtXoDIw1KPwWhYu1VdwvJjMdMWGphh4eonWnyEBCaNrt6ltcPPlNzRwFc93K3tluO0Wn0P2U7T7becG9R03Zt2275FvSuv4R5EZsfihOKAs5DqWFpyd2PzMUES+wJYAKm54ZlSOmF8gDjEEtdGbKoOAWcC5lzJs009nuQseGvmjvf2M4lfw3XgIu/FqN1z+cAe0l4oIa1qslfR5CkQmlDQwq3nWqjBFlLVYo03mYzs+gbXGWRK2lOtsr7TaDUtQeMkAs3UinmQRVBPVklRGUvsvo6JiSis05t5cdrO5nX671AC5RNQ7SB0Ln1QbYR3Lhd0SOR8wu3jhA/wvSyg+mCpesqUkh2T6q9fY6Lno5wRldGBcul5aqigWqcJlYGCDSXloJfXtVJxde67h3assV1f17PNJis60Gi4VqrgLZ2ihRxrBiRTyvQ65z+BWSWKddE1UBI/CV7aqxQzuWIziSXEamJqxfKCe38GQt/7IzXq+aWPikpIVToJuXzPNojUm0Uz/vBZQ3yi/ZR5oj5bnga/OvYO1lEclae69iVlS73SV8DrmbkgXMFSJV48PQZ/D+C94FVjWeSSi1QDtcgknP9T06rUMTAhPGNyNDQKw7FSFjzlawL+L6ffYAoxLl9n9N+fZyYtRoCAetMJWuDrS9bXR4Atj9R2H/SM4DY+Etwqu+5v5t8tR3U6nfHuPw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B601263B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B601243B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B601243B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B601253B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B601253B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907797709</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6012E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00105_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="c7e4a104-a478-4da0-bb57-f04b824ac6a9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c3ad3a8f-32e3-4f3d-adec-5df34cb87279"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="5061ff59-10fb-4a4f-aac1-43008ae65bfc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="01896c44-fe8a-4526-bbbf-5b593cbbd8c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="c303b447-db83-4039-a1ee-8a533ee442a6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="26dd2181-035a-4a5c-9b24-93ef838f8b07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH08U5pehNIRZgroERXdW/ACL2dimkKwTTEXBH/9TopUiuDhnKdOVle+9a1LvuSMwzRxgpBzzATJaGWZJpQHubVpSEaDDHLCAwpTzAOBgkHYvwmcKgjgZotR6XWbxj+4EaOXWs02fR8C04ugZ/rQ9kwQgRg0gO8BDJQr5xL3KBeQiqbhAPvUBDXTBkPgBh4IHL/q1N2xUXnEjCts5VJVu9aklrxpTIWYB5b1/v5efXerGZtYDgC29dy/GaApTqHROltnlAdirU9/VI0wwkmCqihLrTOr5HMW8WBAJhQKyfBnrOhQLGCBhqV8Ik4mJ0axF0c9Gmf5sgNpRgmCCfmAuj59LKZZVAmTScaImKYHk7CBBjbxEpnI9uiJYZWpHQlUYsg4NPkU2p9Y9zjGDFOEKw/3vaZxclzX8q1DBimPM5by8vK/8cF0gZNsjiOTb9L6pHY84J5Ktc4wCnoUJZKTBb7VwzqHCPPPbmJ0PFTlF8MxWd4QrgZ0yTU7a5veznJdjS6ZYC7+T4O2mrMGeYSJxK2uC8TL5cvFTXjzmolG2JDW26XrLBj1mzmBbefcULR2vdwZymKI1jsEGnyMe52VT/mIs/soZJfyqT1L+M0kafvt38niwRtfP9aGYOmMni6fWfx6Fz40+n8/zVMUjSEcu3Ev7tYb72mtW0ej9q3oRf1GeDsDj8u/ri/oLWkvXNhu+525+B12p1M8G9f79Q9v+iKT8erZl1fcEWwKl12GrkajoZyMaleTVT+8vER3/RkZXc/c4azDs2aRzhb/sm1z5gfyZYaR2Cz1GPS6lQvVJSh+FjNtIZEZ567BXIsPF5gKo6V3ae0IpJI7EgWqh+u17TuO77drwK47btt3zsGp6543GvYFCOs1z92IzJrFDsVORmOiY2nJXY/NzwRRGnBMI8zMRSaV0nHjB8QuFLDSo/fqEGSU42Gm5DmNgfTn9kqmU2Cj5Yfnr2bJkp6ujMptJu7oHQtjgVlZk2slTb7HiMwJ1sKt55qrweZC1eINLqRI7OoCVimWStqZVtnA8fxTi5N0nmDN1EqzSCa4Op/O88pYfP11TIh4br0/H+an7WBeu/82JVA+EdEOXOfSxqqNeM/lYm8SOZxwYzvhDXwoI6IPlqqnYAStmZR/fY2Jno9iRlRGG8qF566hhGrtJlQEihYEFYNeXNdKxdW5b23a8Qbt6ltVLhYy74DnuRZT8JZO0QKONcBIKmVaDbNXTK0CxTrqGiiI7wQv7GWKUkzpQECBUzUxlXx5xL0/wFzf+z016stjHxWlkKp0Ai/FPlsnUW8WzfjHZw0KkPZT5l/q856x6Ktje7C24qg81bUvCJ3olb4CVgfmAmUKlijxytg2+D6AfcHLxqLIBRehBupFCnz4T0WrUtOACGWSil7XyA3bSpnzFKs5Dr6cvsHkYly8zsi/P89Mko8AwupNx0mOry/ZQB8BOtlS28+gBwTX/klwy+xa38zfLVt12p3x1h8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B601733B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B601713B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B601713B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B601723B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B601723B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907810607</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6017B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00108_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ValidateEmail_node_role_Retailer(Negative)_404_NOT_FOUND_P1" searchProperties="true" id="c64239f3-8b5f-44e2-827d-708e64703fc0"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1864eb35-fa5c-4e12-ad47-a899c8ff71a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="588b7cbc-dd6a-4dad-bf62-3a7317b2dcd6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="d7adc626-a8ef-4dd9-83a5-42f67dd9d635"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="093c062a-00f4-47d5-9c58-5488430d1acc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="433d907d-69e3-4107-8926-c4890cdc86fd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0Vyv2YMvIGGFegCshSJkunIeme8DKlyNdGiS07lsySrx/JgBvTIcPMk0vXV+eeu+hI5xwnseUNOIdc0JQ1VknMuFdae1qRMy/FnHKP4QS4J4g3HdzdelbT8PBui9bwL3ra38ZL2OqG2NDBtbDuhE6ou22rqwdgdi3LbgcmONKV8wJ8xgVmoqdZhtnSjbZuGo+G7TmG57Sabqc10xo/IecSW7o0DW1LasV72lyIzENouVw2l3YzzSNkGYaJ/rq7nZI5JFjrn28yKgPl/a0/aQZAII5Jk6QJOkc1n/OAe1MaMSyKHLaxgmOxDGR0kfQJOI2+adVeCHwWpuVyhFnKKMEx/cCqPncg5mnQGMRRmlMxT44mYRoKWIcV0YnpsG8aqlM7EajGMOdY53NsbrEmEEIOjEDjaeL3tG+nda3c+phjxsM0T3h9+d/4AFtAnGYQ6HyX1pba6YCfVKp/DsTzGYkLThdwr4Y1wwT4tptATodqPOQQ0tUt5XJAV1yxQ/v0DpabalzQCLj4Pw3aa84G5CeOC+hft3M0nS06z445/olGD6MOdUfF1W0SOb2SwL5zaahau1keDGU1RJsdIlq9v8272TV6WRu3RiejoW+3H8bm+NdzEI+CoRj6mMF4SIk1ufu1yFHSQaNB9MP9QQdP7PbsbNle5otn9Nzx+fNsFZqUjt7Hl/h12pr5r7M0/Iijm/vxzctZatoPb7/y9XX7qX2ZXXc6b6K1FiM6gw65GYfGMMjOuvHEiZ4+Zp3JosVfsuhjDddzTi8Kc+D2qnT2+NdtuzM/LV5egYjdUo2Bf9G4kl3C4msxUxYa6GHp6mVKfLgAJrS+2qW0wyuk3NHAkz3crE3Xslx32DbM4ZU9dK1Lo2Xbl92ueWUMOm3H3onMhsUBxVHKQqpiKcndjM3XBEnicWAB5PoiLaTSce0LxAsscMNnE3kIUsbhMZXyXMxDN3sPWHu9ss154ArT/chCwy60xn0qvrPv+SAUkNc1uV3T5AkQmlFQwq3mmsvB5kLW4h0vChGbzQVuMiiktOdKZT3LcVuI0ySLQTFFSRoUMTSzeVZWBvHN19Ix4aV1cvlYnrajeR3+25VA+gRUOXCVyxBkG+GTy8XeJXI84e5+wjv4QRFQdbBkPUVOyYZJ/dfvMVHzUc2IzGhHufI8NNRQ0WFCVaBgQUk16NV1LVVcnvv+rh3v2Gy+N4vFoig74Dg2yiU8Uikiw0JTIIVUpvVj+gYMVSjopGugIn4QvLLXKRZizqYCC0jkxDTK5Qn3/hS4uvd9OeqrUx8VtZCydAJW4jPbKJZvFsX4y2cN8Yjyk+YH+VmmefC7Y59g7cWRecprX1AWqZW6AtZH5oKkEpZK8UrzffDPAD4LXjdWRa64CDlQL4WA438aSpV6GiYkLZjwL7TSsK+UJU+xzsD77fQHTCnG1euM/vvzTKflCBCQbzpOS3x1yXrqCLBoT223QY8I7uVXgltn1//D/Kdlr06HM97/Bw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B601C03B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B601BE3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B601BE3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B601BF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B601BF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907827672</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B601C83B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00111_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="b0c038d2-5414-4a8f-b044-c7e099bf0b95"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c759350a-130c-42be-94ca-c4034ef7ebb8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="1fd977e8-3f11-4fe6-95ee-d10a0e854c57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="4d16e1bc-7502-4a4d-b60b-753cb9944f0e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="3deaa97e-4f6d-4832-99c7-5602aa99baa3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="a27f6940-9d09-43f1-8ecc-6cefacfe2c23"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="41054c7c-96f2-42ed-871e-1362aa956e34"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwDB1yBKkjCxJncNibk8rKlyG1QYstGkg3J169kwINJyLL75FK7dfr0RUc65iiJbW/AOTBBUtpYJjHlXmntaTmjXoo44R5FCXBPYC8YXF16dtP00GaL1vBPe9rfqNsJX8DFeruD23rLtlo6ci1TfzmKoq7jdCLHOZKunOfgUy4QFT3NNq22brq6ZY5Nx2tZnmk3O27nWWtMgHGJLV2aprYmteQ9bSZE5hnGYrFoLpxmyqaGbZqW8Xh1GeAZJEjrH68yKgOx/tofN0PAEMe4idPEODZqPsch9wIypUjkDNaxwn2xTMPsGtIn5GT6Q6v2QujTKC2XJ4imlGAUkw+k6nMFYpaGjUE8TRkRs2RvEpapgHVYYh1bLfpDM+rUDgSqMWQc6XyGrDXWHUTAgGJo3N/5Pe3HYV0rt44ZojxKWcLry//GB2gBcZpBqPNNWmtqhwN+Uan+MWDPpzjOOSngWg1rhjDwdTcBHw7VuGUQkeUl4XJAl1yxM7bp7SxX1TglU+Di/zRoqzkrkAmKc+gnQxKfBIPH8zm/HzJ/Pp2zcwT3vOXf90oC286loWrtarkzlNUQrXb4Zwsc/HqfY+sqDTJz9Do4da2/8Mx9KS5hjJPw4sNPZrOL5QNzj/hD+NuaTsTzkiESkPOj93DIRmH7dea74BTXZ+Pn6OaX81xEzslr9IgfHvy38EkmOTmauh1+dru4NObB5OZp1P45epyPf6b0pxVZF8tfVsZuM/TsTG7RxJxR/rQY3cMbfIzweTDMlh3+dPHWq9LZ4l+3bc58kL+8AhabpRoD/7Qxkl1C4nsxUxYS6lHp6mVKfLgAKrS+2qW0w8ul3JHQkz1cra2ObXc6Q9e0zYEz7NhnZttxzrpda2QOjtyWsxGZFYsdiicpjYiKpSR3NTbfE8SJx4GGwPQizaXSce0bxFMkUMOnd/IQpJTDOJXybLnULQr6jgF9JODMQ7v9lifTaa41rlNxQ2/YIBLA6prs1jT5DjDJCCjhVnPN5WBzIWsxR0UuYqtZoCaFXEo7Uyrr2a1O2+AkyWJQTI0kDfMYmtksKytj8NXX1hHmpfXubFyetr157f7blED6hEQ5cJXLEGQb4dPlYnrtTSL7E+5uJ7yBH+QhUQdL1lMwgldM6r/+jImaj2pGZEYbypXnrqGGauwmVAUKC4KrQa+ua6ni8tz3N+2YI6s5b+ZFkZcdaLUcg0l4Q6VomLYRAM6lMr2P0zegRoViHHQNVMR3glf2OsVczGggkIBETkyjXB5w7wfA1b3vy1FfHvqoqIWUpROwFF/ZTmL5ZlGMv33WYA8rP2m+lZ9FysI/HfsCayuOzFNe+4LQqVqpK+B9z1zgVMISKV4p2wb/CuCr4HVjVeSKi5AD9ZIL2P+noVSppyGM05wK/1QrDdtKWfIU7xl4f5w+wZRiXL3OyL8/z3RSjgAG+abjpMRXl6ynjgCdbqntOugewe1+J7h1dv1P5s+WrTrtznj/Hw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B6020B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B602093B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B602093B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B6020A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B6020A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907845202</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B602133B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B602513B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B602513B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B602523B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907855531</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00115_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ValidateEmail_node_role_Retailer_404_NOT_FOUND_P1" searchProperties="true" id="fcb34e31-9f46-4158-8d10-a96156687e1f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="89333880-d345-4489-8265-ca0ccb2d4459"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="f0ba5b1f-4122-4322-ba87-ba7fa18bdba9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="a44338e0-d8bc-4957-ba66-483db2ce3b11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="31e7b4e5-595b-47f1-bccb-49376af1effa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="6160ab19-33c9-49cb-9b94-58f1c3bdd627"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="8a890a5d-bfff-4c50-bbdd-446719ac4986"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="02dd57df-f7ec-4004-ae30-27f0e58365c0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="99b5c36a-8982-4e37-bdba-6cf4a8fc210c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZWQbc3MFqgiXirO5DTBJJi9bQm5AwZaMJRNnvn4lAw5mQpbdJ5fardOnLzrShcBR6Hg9ISCRlLNKFoVMeLm1Y6QJ8zgWVHgMRyA8SbxJ7/bGc6qWh/dbjIo/6Bh/Y2JDy3Idk7RagenOSdtsO1bLtJttp9me1evgNJWrECn4TEjMZMdwLLtuWg3TtqZWzXNtz6lXW5bzYlQeIREKW7lULWNHKhMdYyll7CH09vZWfatVebJAjmXZ6Pn2ZkKWEGGje7HNKA+UdHf+pBoAgTAkVcIjdIFKPheB8CZ0wbBME9jFCk7FspDVRsonEHTxzSj2QuCzOc+Xfcw4owSH9DfW9bkFueRBpRcueELlMjqZhG1pYBMyYhLbZd8MVKZ2JlCJYSKwKZbY3mGNYQ4JMAKVn2O/Y3w7r2v51mmCmZjzJBLl5X/jA2wDIY8hMMU+rR218wE/qVT3AojnMxKmgm7gTg9rjAmIXTeBnA9VeUhgTrMbKtSAZkKzQ4f0jpbbagzoAoT8Pw06aM4W5BGHKXSvGqL918O7X3/BQ2fkWnZv/WscTJ4ze9jJCRw654aitdvl0VAWQ7TdkYXpr3jNxvY1vpGrp2kji64nyU3PnU9Wg6tNJgZN+Twbip7PH/vXw/bq6vql78dRDeHr/uvIgrQ2eWr06v15D7dGaGA9bV6fg3Uf4R93V6+z1buiPaCZ1Xtorkd+a/q7/zgf/GygLHaT+s87XuPp5G58dfsd1afr1c3Vc4SeRo37pxFd16wHx0+T2Q9aX38P7hedIp0D/mXb/sxP0tkrELlf6jHwB5WR6hKWX4uZttDAnOeuXqzFR0hg0ujqXVo7vFTJHQ081cPt2m45Tqt12bCcplu7bDlDq16rDdtte2T1mg23theZLYsjin3O5lTH0pK7HZuvCZLIE8ACSMwNT5XSCeMLxAGWuOKzsToEnAmYciXP8bLxnq0XfBU7sb1ps1ljxRpzx50ZlTsu79l90ptLSMqa3Chp8hgIjSlo4dZzLdRgC6lqscabVIZ2dYOrDFIl7YlWWc9xW3UkaBSHoJmiiAdpCNV4GeeVQWL7dUxMRG4dD6f5aTuZ1/G/fQmUT0C1g9C5XIJqI3xyudj7RE4n3D5MeA/fSwOqD5aqp0wo2TIp//oYEz0fxYyojPaUC89jQwkVHSdUBAo2lBSDXlzXSsXVue/u27HGdnVdTTebNO+A69ZQouCRThFZDpoASZUyvU/5ChgqUNBZ10BB/Ch4YS9TTOWSTSSWEKmJqeTLM+79CQh97/tq1LNzHxWlkKp0EjL5ma0fqjeLZvzls4Z4RPsp84P6vPEk+OjYJ1gHcVSe6tqXlC30Sl8B7yfmgnAFS5V48eQQ/DOAz4KXjUWRCy5SDdQslXD6T0WrUsfAhPCUSX9g5IZDpcx5yvcYvA+nP2ByMS5eZ/Tfn2cmzUeAgHrTCZrj60vW00eALQ7Udhf0hODWvhLcMrvuH+Y/LQd1Op7x7j8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B602753B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B602733B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B602733B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B602743B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B602743B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907868007</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6027D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B602BB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B602BB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B602BC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907878498</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00119_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_ValidateEmail_node_role_Retailer_200_OK_P1" searchProperties="true" id="3e352abc-c425-4dc6-88e0-502564192ab8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="8ffd19b6-d83b-46f3-bc2d-3ece15679990"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="f92e0e23-6076-4e83-adde-981adaa95ab5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="75ad3429-edf9-4476-9e03-431da393683e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="78aad3d5-25e1-4ab6-b38a-e4df91e18428"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="ca933d46-1210-43c4-87b1-8157a889d76f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="dde43566-f66f-470d-9383-a49b170086f6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="e4fec139-07cc-4556-a25e-eb0fe5f99b2a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
//myTC.setPropertyValue("Status","forcedeleted");
myTC.setPropertyValue("Status","deleted");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="331448b5-727a-4ff2-8ceb-a08194c8ee19"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzBEOMKVEEICSkuGSCZSV62hNQYTWzZWDIQvn4lAw4mIcvuk0vt1unTFx3pmqMwsL0W55AIGrHSJgwY9zJrQ0sT5kWIU+4xFAL3BPYmrUHfs8umhw5btFKv09D+JjOCrpzaTMezGtGdOprr9TlCOrHcqmXaULsyK9KV8xR6jAvEREOzTauqmzXdMqdmxXMsr+qWr8z6q1Z6hoRLbOlSNrU9qQ1vaAshYs8w1ut1eV0pR4lv2KZpGb8H/QleQIi05vUuoyxQ0tz74zIBDEGAyzgKjWuj4HNNuDehPkMiTWAfi5yLZRpm3ZA+hFP/h5bvBdJj8yhb3iAWMYpRQLdI1WcAYhGRUivwo4SKRXg2CctUwDpssI4th/3QjCK1C4EKDBOOdL5A1h5rDHNIgGEoPY17De3HZV3Ltk4TxPg8SkJeXP43PsBWEEQxEJ0f0tpTuxzwi0o1rwF7PYaDlNMVDNWwxggD33cT8OVQpccE5nTTp1wO6IYrdsYxvZPlrhod6gMX/6dBR83ZgTyjIIUmqc/s7ujWCmejx/Z03HlhU8N9JP74LmpkBI6dM0Pe2t3yZCjzIdrt8MPpYjHtulu7XyEsfECvA3yPXuJ4uE3xqGavWmLbuXM6viCjO/4sjIdf3YFz9RhCvBi3xr/u/zLTzlPYCfrDNr69HyRw/zpwln94dWVuVoBd/3ftJu4v47Q6qqVuz2jd3d7Ntm/R4J607PbTuG6+zexkMmyPHfzU7v+M3haV4GFm1ivDcO50nXnXbd0ZP1+Q28jTOeJftB3O/CSd/QEsDks1Br1OqSu7hMT3YqYslOjzzNWLlfhwAUxoTbVLaYeXSrmjxJM93K0t17Zdt10z7c5Npe3at2a1Urmt162u2bqqOZWDyOxYnFC8idicqlhKcndj8z1BHHocGIFEX0WpVDqufYPYQQKVemwsD0HEOEwjKc8WWUANtv6ap0thMdNJRHVbX9p+qpWGkRixUdKaC0iKolwriPIYMI0pKOVWg83lZHMhi7FEq1QEVnmFygxSqe2JklnPdtyqwWkYB6CoGmFE0gDK8SLOSmPw3dfWEeaZdXw7zY7b2cRO/x1qIH0IVQ5c5dIG2Uf44nZxDomcT7h+nPABvpUSqk6WLKhIKN4xKf76mBM1IPmQyIwOlHPPU0MB1ThNKA9EVhTnk57f11LG5cFvHtqxRFZ5WU5XqzTrgONUjETCGypFw7SNCeBUStP7NHoDZuQoxkX3QE78JHhuL1JMxYJNBBIQyokpZcsLLv4JcHXx9+Ssby59VRRCytIJ2IivbDeBfLQoxt++a7CHlZ80P8rPOkrIR8e+wDqKI/OU976gzFcrdQe8n5kLHElYKtUrSo7BvwL4KnjRmBc55yLkQM1SAef/lJQsNTSEcZQy0etomeFYKjOe4j0G78PpE0ymxvnzjP77+0yn2QhgkI86TjN8dct66ggw/0hu90HPKG77O8Utsmt+Mn+2HNXpdMab/wA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B602DD3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B602DB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B602DB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B602DC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B602DC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907901001</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B602E53B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B603233B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B603233B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B603243B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907911427</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00121_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_UnlockMe_node_role_Retailer_null_P2" searchProperties="true" id="c6bc6872-dbb9-4da2-8e6b-cba1ad23c395"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="9564c91f-2bc3-4342-8356-a0681153e42d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="79bdde66-1fe4-4542-949d-445c2eff7ec7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="752beada-241a-405f-b1c4-75567b8a5a17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8c63c198-c715-4047-9138-d8e1d7c1bf81"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV+52BWoIpPLEJJJAoSZzMuWkNsgYstGkoHw9SMZcDATsuw+udRunT590ZEuOIoj2+9wDkyQhFZWcUS5n1tbWsaonyBOuE9RDNwX2B90Hu59u2r6aLdFq3SvWto/KECNsOlhPbQtT3dtqOne2HH0hh1aQViDcTAOpCvnGXQpF4iKlmabVk0367plDk3Hd23fsau25/zWKiNgXGJLl6qpbUmteEubCpH6hrFcLqtLp5qwiWGbpmX8ergf4CnESGtfbDLKA7H21h9XA8AQRbiKk9i4MEo+FwH3B2RCkcgYbGMFx2KZhukZ0ifgZHKmFXsh6NIwyZffEE0owSgia6Tq8wBimgSVTjRJGBHT+GgSlqmAdVhhHVsuPdOMMrUTgUoMGUc6nyJri9WHEBhQDJWXfrelnZ3WtXzrkCHKw4TFvLz8b3yALiBKUgh0vktrS+10wE8q1b4A7HcpjjJOFvBDDWuKMPBtNwGfDlV5YhCS1T3hckBXXLEz9ukdLDfVuCIT4OL/NGivORuQEYoyaHf6d4+9369Lj3VHAXEHD7239cs56oXQaeUE9p1zQ9HazfJgKIsh2uxI4/htdnl+7nAmE0mfwxTcGr3s1K4pvDTHYt3Lft41sruwF/VvJRx7XQaNB+F6o9sR+/nkLV6TiF49Y0Ksu5f4ccWXNzS+eXG/g2vyutVLxvdBdHPufR+/26PZTSP0zrH9PGXp2/X5r+78+/Rt5PLFa8dZx83svjebLYbR7dN8HaEJv4fh2P756xmvo3V/3GwV6ezxL9t2Z36QjWeAxW6pxqB7VbmRXULiazFTFhLoYe7qp0p8uAAqtLbapbTDz6TckcCXPdysraZtN5uXddNxXeeyaV+bNce59jzrxuw06q6zE5kNiwOK3xIaEhVLSe5mbL4miGOfAw2A6Yskk0rHtS8Qr5BAlS7ty0OQUA7DRMqzNfeWMy9L47c4eLfiutug02xWX/BQq/xIxCN9ZJ1QACuLcr0kyn3AJCWglFsNNpeTzYUsxhwtMhFZ1QWqUsiktjMls77tNmsGJ3EagaJqxEmQRVBNp2leGoNvvraOMM+t/ethftyOJnb4b1cD6RMQ5cBVLpcg+wif3C72LpHjCXv7Ce/gO1lA1MmSBRWM4A2T8q+POVEDUgyJzGhHufA8NJRQjcOEikDBguBi0ov7Wsq4PPjtXTvmyKrOq9likeUdkJNpMAlvqBQN0zYGgDMpTe/D5A2oUaAYJ90DBfGD4IW9TDETUzoQSEAsJ6aSL0+4+AfA1cXflbO+OvVVUQopSydgJT6zfYvko0Ux/vJdg32s/KT5SX6WCftI/DOsvTgyT3nvC0InaqXugPcjc4ETCUukeiVsH/wzgM+Cl41FkQsuQg7UOBNw/E9FyVJLQxgnGRXdKy037EtlzlO8p+B/OP0Fk6tx8Twj//4+00k+Ahjko46THF/dsr46AnSyJ7fboEcU1/lKccvs2n+Z/7bs1elwxtt/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B603453B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B603433B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B603433B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B603443B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B603443B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907934516</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6034D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00122_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="89b57c26-23a1-4d0a-8561-092a8cf48f2f"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="a54abef5-5d1d-4a63-97e7-4ca8d6403511"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="216ce0c9-2755-47c3-9155-de21c33b32ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="2a243ff2-c5a1-4ca0-8c05-cb594500b554"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="816d8bb8-3485-497c-bf08-4dc57a66f31d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="1a6669bc-b9aa-43d4-beec-2180772bf404"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="e897a9c3-f595-4167-ace4-47f2ce1917c5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV9hsCtQRSDJMIEky60yedkSchuU2LJjycbM169kwMEkZNl9cqndOn36oiNdMRQGpttlDBJOIlrLw4Ayt7C2lTShboQYYS5FITCXY3fSHQ1ds667aL9FqQ36beVvQ7d1+wfYKjSalmp7vqWihY/VBsJo0Wz4VstpClfGUhhQxhHlbcXUjYaqN1VDn+qWa5uubddN23pRanNImMAWLnVd2ZHKWVtZcR67mrZer+trqx4lS83UdUN7Hg0neAUhUjpX24yKQEln54/rHmAIAlzHUahdaRWfK4+5E7KkiKcJ7GJ5p2Lpmu5owsdjZHmhlHvBG1A/KpY9RCNKMArIHyTrMwK+irxaN1hGCeGr8GQShi6BVcixig2bXihaldqZQBWGCUMqWyFjhzUGHxKgGGqz8aCtXJzXtWLrNEGU+VESsuryv/EBmkEQxeCpbJ/Wjtr5gF9UqnMF2B1QHKSMZPAghzVGGNium4DPh6o9JeCTfEiYGNCcSXbaIb2j5bYafbIExv9Pgw6aswWZoyCFTtTqjXsv0zt+6ZirnjFaZfNp9pC/PxrddkHg0LkwlK3dLo+Gshyi7Y47lg8TfTF9fp4mztvYYmn/Z4v9flrEzp88/T1MHicxbMy7O7B8k/5c37+ScdzI89kidwb+83yurftOd+SH17Pnl1DPUXKTvUzG67VnTjaeSV5Hi9Zoo9+/vr/8el7/NWjEI3+JUKDxe+MyvbVaXaLFXq85N8yAv80e4Hb4OnudhWQ0jJ0+f/vVuieX+sxCaNku0zngX7Xtz/wkXbwC5vulHINBv3YruoT492ImLcRT/cLVjaX4MA6UKx25S2qHmwq5I54rerhdGy3TbLWum7rlGNZ1y7zRG5Z14zjGrd790bStvchsWRxR7EXUJzKWlNzt2HxPEIcuA+pBomZRKpSOKd8g9hFHtQEdi0MQUQbTSMizH+aZt6QroJAFjdTZ0MRfZ9RRag8Rf6SPSdfnkFQluVmR5DFgEhOQui3Hmom5ZlyU4h1lKQ+MeobqFFKh7IkUWde0Ww2NkTAOQBLVwshLA6jHq7gojMa2X1NFmBXW8c20OGwn0zr+t6+A8PGIdGAyl2sQXYQv7hZrn8jphJ3DhPfw3dQj8lyJcvKE4C2T6q+PKZHjUY6IyGhPufQ8NlRQteOEykBeRnA55+VtLURcHPvOvh3vyKi/19MsS4sO2LalJQJekylquqlNAKdCmDbT6A2oVqJoZ90CJfGj4KW9SjHlKzrhiEMoJqZWLM+49ifA5LU/EJOen/umqIQUpeOQ869svUA8WSTjb1812MXST5ifxGcdJd5Hx77AOogj8hS3Pid0KVfyBticmAscCVgitCtKDsG/AvgqeNVYFrnkwsVALVIOp//UpCi1FYRxlFI+6CuF4VAoC558E4P74fQJptDi8nFG/v11ppJiBDCIJx0jBb68Y115BOjyQGx3QU/orf6d3lbZdT6ZP1sO6nQ8451/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B603923B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B603903B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B603903B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B603913B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B603913B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907946477</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6039A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B603D83B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B603D83B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B603D93B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433907956962</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00124_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_UnlockMe_node_role_Retailer_null_P2" searchProperties="true" id="7b9f978a-e7ba-4fbe-bc30-c92ac5420319"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="bbf396a9-7073-43b5-9108-6c73596debe4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="2d14f328-9c6b-469c-9907-80d5865247a0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c0f2a0f8-c80a-4316-96bd-e95c78eeedb4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="a1b3936e-b79b-4832-a09c-b7324b518420"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc6o6FP4rDn08gwRQFKY646XttrU3te7dvpyJIUoqJpQEvPz6k6BSsbXHc56YLFa+9a1LvuSSw0VoeS3OcSwIo6XVIqTcy6wNLYmpxyAn3KNwgbknkDds3fc9qww8uN+ilXrdhva3NTVrFgQ1vY6ndb1iuRPdNaeWXptUp05t4gDgI+nKeYJ7lAtIRUOzgFnVgaObYARsr2J7wClXa+BNK41xzCW2dCkDbUdqxRtaIETkGcZyuSwv7TKLZ4YFgGn8ue8PUYAXUGtebjPKAsXNnT8q+xjhMERlxBbGpVHwufS5NyQzCkUS410s/1QsYADXkD4+J7MLLd+L/R6dsmzZgZRRgmBINlDV5x6LgPmlVjhjMRHB4mQSJlDAOl4hHZkVeqEZRWpnAhUYxhzqPIDmDmuApzjGFOHSy6DX0C7O61q2dRRDyqcsXvDi8r/xwTTFIYuwr/N9Wjtq5wN+U6nmJUZej6Iw4STFD2pYI4gw33UTo/OhSk8xnpJVn3A5oCuu2BmH9I6W22p0yQxz8X8adNCcLcgYhgluVtfV3/MXWnWTuyANQSBq43A96Wzs13kjI3DonBny1m6XR0OZD9F2xy3YjNpW/7WyGjvkqTcPnn/NPt4mS1swi9d48HEbITycOjfj0YN5OzDh5Mqp9PGb2xoK8Tzc3K/mMLrpruhVhz/DXy9jsNlEretZvxM8THz/T0DuooDG0Fy8rEXn9b1N/QA9/l7e2tRvuavXh06c3vVrY9S+sVzridw514/rGbsmbqt/k964yxYP7yrir+X7fSNP54B/0bY/88Nk8o6R2C/VGPS6pWvZJSh+FjNlIb4+zVy9SIkPF5gKral2Ke3wEil3xPdkD7drs25Z9XrbAfZ1227XrStQte0r1zWvQavmVOy9yGxZHFHsMDolKpaS3O3Y/EwQLTyOqY9jPWWJVDqu/YDYhQKWenQgDwGjHI+YlGfT5AykCZrU0vncTKqOHTksIsB910oPTDzSx7g1FTguirJTEOUBRiQiWCm3GmwuJ5sLWYwPmCYiNMspLFOcSG2Plcx6VqVeNThZRCFWVI0F85MQl6Mgykpj8O3X0iHimXVwNcqO28nEjv/tayB9fKIcuMqljWUf8ZfbxfKq+0ROJ+weJryHbyU+USdLFlTEBG2ZFH99zokakHxIZEZ7yrnnsaGAahwnlAfyU4LySc/vaynj8uA39+34gGb5o5ykaZJ1oFKxjVjCGypFA1jGEKNEStN6xOaYGjmKcdY9kBM/Cp7bixQTEdChgAIv5MSUsuUZF/8Qc3Xx9+Ssr859VRRCytIJvBLf2TqhfLQoxj++a5CHlJ80P8nPksX+Z8e+wTqII/OU974gdKZW6g5Yn5gLxCQskerF4kPw7wC+C1405kXOuQg5UJNE4NN/SkqWGhpEiCVU9LpaZjiUyoynWEfY+3T6ApOpcf48I//+PtNJNgIIy0cdJxm+umU9dQTo7EBud0FPKG7rJ8Utsmt+MX+1HNTpeMab/wA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B603FC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B603FA3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B603FA3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B603FB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B603FB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907968847</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B604043B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00125_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="0e62dbd8-91c6-444c-9caa-9aae7d26334e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="bdf739ab-45d8-4015-ba6e-387ed715a7db"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="597b8c63-229a-4fa7-98b3-c026457d28f5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="cd3879a1-3579-42ec-b5fa-ab01de1358c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="29e60911-a28b-4c44-9c7d-801776fb906b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="afbb6064-053f-4c9f-8a08-77d88123cef0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb/I4EP0rKH2sQq7QJCpIlEuLFmg/6P1lZZwBXBIHYidAf/3aAVJCS5fdp8iT8cyZmeNjXzMUBqbXYAxiTiJaWocBZV5mrSlJTL0IMcI8ikJgHsfeqNHveWZZ99B+i1LqtmrK366j+07FNNQrZFRUGxtV1fENQ9V903HBcirjMQhXxhLoUsYR5TXF1IWrXlUN/VG3PNvyDLdctd13pfQMMROxhUtZV3ag1qymzDhfeJq2Wq3KK6scxVPN1HVDe+33RngGIVLq19uKskRxfeePyz5gCAJcxlGoXWsFn2ufeSMypYgnMexy+ady6ZruasLHZ2R6oeR7we/SSZQtm4hGlGAUkE8k+9MHPov8UiOYRjHhs/BkEYYuA6uwxio2bHqhaEVoZwYqIIwZUtkMGbtYQ5hADBRD6WnYrSkX500t2/oYI8omURyy4vK/4QGaQhAtwFfZvqwdtPMD/tCp+jVgr0txkDCSwkCSdYEwsN00AZ8fqvQQw4Sse4QJgq6ZRKcdwjtabrvRIlNg/P8M6GA42yDPKEigfjvoDTuQNofsZvrnCt/1LqfTxKETfbqqZQAOnTNDPtrt8oiUOYm2O95QcDVethq0k6D5eN7crIOu+/l0S+7tt07PNp/jeQu3rHD+oK1nmwq0En22mVuvo9t0+HLfWFU/K8RdrntJ+/LpqR0O5u8OW3WjgVVFg9UMBlgbu434bfyMXtHkrzCqtknwNn7vNDv+y/Nd3w6XzWd213q5rLy6/R5rGKs/5K4xunW77O2uPxun/XByy+8/3Ua7lpdzgL9o25/5UTL+AMz3S0mDbqvUEVNC/Hcxkxbiq5PM1VtI8WEcKFfqcpfUDi8Rckd8T8xwuzYc03Scm6pu245145htvWJZbdc1Onrjqmpbe5HZojiC2IzohMhcUnK3tPkdIA49BtSHWE2jRCgdU36J2EIclbp0KA5BRBk8RkKejY+rdLNmhuXobBmy6sKPUmLi4EMpDSJ+T+/jxoRDXNTkakGTh4DJgoAUbslrJojNuOjFEqUJD4xyisoUEiHtsVRZz7SdisZIuAhAItXCyE8CKC9mi6wzGtt+TRVhllmH7cfstJ2s6/jfvgXCxyfSgclabkCMEX64XPR9IacLdg8L3odvJD6RB0v0k8cEb5EUf33RRPIj54ioaA859zw2FKJqxwXlifyU4Jzo+XUtVFyc+/p+HEtklJflJE2TbAK2bWmxCK/JEjXd1EaAE6FMm8doDlTLo2hnXQM58KPkub0IMeEzOuKIQygYU8qWZ9z7I2Dy3u8Kqq/PfVQUUorWcVjzn2zNQLxZJOJfnzXYw9JPmB/EZxXF/tfEfoh1kEfUKa59TuhUruQVsDnBCxyJsESIVxQfBv8pwE/Ji8a8yTkWLgg1Tjic/lOSqlRTEMZRQnm3pWSGQ6XMcPLNArwvp29hMjHOX2fk359nKskogMVLUPhn8eUl68kjQKcHartLekJwr34T3CK6+jfzd8tBn445Xv8H</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B604493B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B604473B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B604473B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B604483B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B604483B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907981510</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B604513B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00128_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_UnlockMe_node_role_Retailer(Negative)_404_NOT_FOUND_P2" searchProperties="true" id="44f12fac-dfd0-41b0-a195-594240d8965e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="60175b00-dd4a-4ba0-bf7c-296b11afe06f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="12ebd3c2-66e3-44b9-b693-03eda0dd0787"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c5adf7bb-89f4-4f80-8fdb-f6b40e238b3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="975620a7-4a4d-4870-8cc0-0fcc2b6dc89b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f4702478-9e4e-485d-851c-772c5234f021"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV+5uQJVBJKMcyWBJDN52VLkNmjGlh1JBsPXj2TAg5mQZffJpXar+3T30ZHOOIoj2+tzDkyQhNbyOKLcK6xdLWPUSxAn3KMoBu4J7I37d7eeXTc9tN2i1fxhV/vHbDfCTtgx9WbDcnXXabd0FEBLD6FhhRC2ArPhSFfOM/ApF4iKrmabVkM3m7plTkzHcx3Padbbpv2m1V6AcRlbutRNbQMq511tJkTqGcZisagvnHrCpoZtmpbx/e52jGcQI613tq6oSMR6G39cDwBDFOE6TmLjzKj4nAXcG5MpRSJjsMkVHMplGmbHkD4BJ9MTrdwLgU/DpFgOEE0owSgiK6T6cwdilgS1fjRNGBGz+GARlqkC65BjHVsuPdGMKrQjA1UQMo50PkPWJtYThMCAYqg9P/ld7eS4qRVbJwxRHiYs5tXlf8MDdA5RkkKg821ZG2jHB/ykU70zwJ5PcZRxMod7RdYUYeCbaQI+PlRtxCAk+S3hkqA5V+iMXXh7y3U3hmQKXPyfAe0MZx3kBUUZ9AL7YvCDPt/dfLtmkeX+uO0vTpNn8/2D+N0CwK5zYShHu17ukbIk0XrHtRGl9uP38fL+7d1Jp4vBNHjI8+Vo5r+cojh4hIc723+4CldL/zGdvjE+/BWlox/R9fVl0+hfvTm5NZwQIl4H7Dlm367g4+bNj19zkuet19vT8HkxeiQvnfyGnL5erPrvA+P65u0qvXk9nze+3900722jGb4+2sNGI7Em0xYzJ88jv7XoGxcuHX38ehjD7WrlWFenbrcsZwd/1bY98+Ps/SdgsV0qGvjD2qWcEhJfi5mykEAPC1cvVeLDBVCh9dQupR1eJuWOBJ6c4XpttW273T5vmm6n4Zy37Qt5UpyLTse6NPutputsRWaNYg/iIKEhUbmU5K5p8zVAHHscaABMnyeZVDqufRFxiASq+fRJHoKEcpgkUp4tmE+dIF6yjojerXYrtwL4uXJXhGi1+0Q80AfWDwWwqig3K6L8BJikBJRyK2JzyWwuZDM+0DwTkVWfozqFTGo7UzLr2W67YXASpxEoqEacBFkE9XSWFq0x+Ppr6wjzwvp0MSmO28HC9v9teyB9AqIcuKrlHOQc4ZPbxd4Wcrjgzm7B2/D9LCDqZMmGCkbwGkn11x+eKIKUJJEVbSGXnvuGSlRjv6AyUTAnuGR6eV9LGZcHv7cdxwey6h/1bD7Pigm4rmMwGd5QJRqmbYwBZ1KalpPkF1CjjGIcdQ+UwPeSl/YqxEzM6FggAbFkTK1YHnHxj4Gri9+XXM+PfVVUUsrWCcjFZ7ZBJB8tCvGX7xrsYeUnzSP5WSQs+DOxT2Lt5JF1yntfEDpVK3UHLA/wAicyLJHqlbDd4J8F+Cx51Vg2ucQiJKHeMwGH/9SULHU1hHGSUeEPtcKwK5UFTrFMwfvj9FeYQo3L5xn59/eZTgoKYJCPOk6K+OqW9dQRoNMdud0kPaC47leKW0XX+8v8t2WnT/sc7/0G</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B604963B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B604943B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B604943B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B604953B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B604953B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433907999049</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6049E3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00131_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="e4263527-cad5-4308-9802-70cbdcfd5e6a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3407744f-52ba-4c6e-a461-b65093f5fe02"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="882b065a-d498-4076-bbb6-d82b57c043dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="a5ad224f-7ced-429a-aea8-7ce72f008c52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="50ba4cb2-c223-4066-9e40-95e4cc069864"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="87ee6d80-7a24-4c07-a048-b9099a7afebf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7e23ba53-cf3b-42ee-98fc-069e1a2ae17b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr5ycwWqCJCMZ5PABoaZzcuWkBtQYktEksHh61cy4MEMybL75FK71X26++hI1wIlsRt0hQAuCaOVLImpCHJr20g5DRgSRAQUJSACiYNx9+E+cKt2gA5bjErYbxt/A2469VmrYTbnM2z6ju+aM2Qjcx55jTrMnJY3Q8pViBRCKiSism24tlMz7brp2BPbC3wvqHnVZsN7NipT4ELFVi5V29iDykTbWEq5Cixrs9lUN16V8YXl2rZj/Xy4H+MlJMjoXO8qyhPxzt4fVyPAEMe4illiXVsln+tIBGOyoEimHPa5oo9y2ZbdspRPJMjii1HshSikc5Yve4gySjCKyRbp/jyAXLKo0o0XjBO5TD4swrF1YBMybGLHp18MqwztwkAlhFwgUyyRs4/1BHPgQDFUvj+FbePLZVPLt044omLOeCLKy/+GB+gaYraCyBSHsvbQLg94plOda8BBSHGcCrKGR03WFcIg9tMEfHmoyojDnGT3RCiCZkKjs47hnSx33eiTBQj5fwZ0NJxdkCmKU+hE3xb9F/buvw17Dxkaedtnf0rdCdrKbjsHcOycG4rR7pYnpCxItNsxD3vo69XsOZ6wUc+7m46tmX/zkrmN+5v1wMMwvfrLuVp/6/ccO60tX1A4ZElP8OFdlmWin7bqdj+6nb9Pl2FmUc6l8wP1v/+EoZMkljUh42yKHu5eiK3OwtCfvX1NFz9unFfSuPuOWy+LBroaeD+mg6+j2ZXE7/Rx09h2n53XkN8+bgcjf8ay2uuo28R/dP9ctItyjvCXbYczP05nL4DlYalpEPYrt2pKSH4uZtpCInOeuwYrLT5CApVGR+/S2hGkSu5IFKgZ7tZO03WbzZu67Q9s76bpDuya5w1aLefW7jbqvncQmR2KE4g9RudE59KSu6PN5wBxEgigEXBzzVKldML4JGIfSVQJ6ZM6BIwKmDAlz04KtMEhFs7bK3Gb22Uty/xNbbk1Ko9MDumQd+cSeFmT6yVNfgJMVgS0cGteC0VsIVUv3tA6lbFTXaMqhVRJO9cqG7h+s2YJkqxi0EithEVpDNXVcpV3xhK7r2siLHLr02CSn7YP6zr9d2iB8omIdhC6lhtQY4Qzl4t/KOTjglvHBR/Cd9OI6IOl+ik5wTsk5V+/aKL5UXBEVXSAXHieGkpRrdOCikTRmuCC6MV1rVRcnfvOYRxvyKm+VdP1Os0n4PuexVV4S5do2a41BpwqZXqfsFegVhHFuugaKICfJC/sZYipXNKxRBISxZhKvrzg3h+D0Pd+qKieXfqoKKVUrZOQyXO2XqzeLBrxp88aHGDtp8wj9dkwHv2a2JlYR3lUneral4Qu9EpfAe8f8AIzFZYo8WL8OPi5AOeSl41FkwssUhFqlkr4+E9Fq1LbQBizlMqwb+SGY6XMccr3FQS/nH4Lk4tx8Toj//48M0lOAQzqTSdIHl9fsoE+AnRxpLb7pOcFt3/7meCW0XV+M/9uOerTKcc7/wA=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B604E13B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B604DF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B604DF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B604E03B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B604E03B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908016158</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B604E93B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B605273B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B605273B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B605283B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908026603</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00132_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_UnlockMe_node_role_Retailer_200_OK_P2" searchProperties="true" id="60b40459-8ab2-4a02-b022-4fcca3a4004d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="679e5c11-06fb-4867-b499-fee984a2d836"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="f5c31755-2b3e-49c9-b60d-fe611b0edc70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0705e16d-b562-4a40-8e39-0391fa805623"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="ad4a1168-979b-4580-9ef2-bf4a9ef8695d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="0998519b-b5f8-4fb4-9e41-94f84f5f00cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="8338cca3-619b-494d-9629-7c17874507d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="40f6fab7-e43d-4288-9f80-66c141f6cfc2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4f8e7440-6fdf-4638-b46a-0667a96d0dba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0VynlMGa8sdgWqDGShs9CNSU8mL1NCvoBoWzaWzNJf35IBBxPIMPPk0vXVuecuOtINQ1Fouh5jkHIS08o6Cilzc2tLyVLqxogR5lIUAXM5dn3v+ck1q7qL9luUSr/XUv7Bpo7AAKTaTXus2tiyVccZg2pDw7Qsa2w7gIUrYxn0KeOI8pZi6kZN1euqoY90y7Vt16hX60bzXan8hJQJbOFS1ZUdqTVrKTPOE1fTVqtVdWVV43SqmbpuaG/PTz6eQYSU9s02ozxQ2t7542oAGMIQV3EcaTdayecmYK5PphTxLIVdrOBcLF3THU34BIxMr5RiLwR9OonzZRfRmBKMQvIbyfo8A5/FQcULp3FK+Cw6m4ShS2AV1ljFhk2vFK1M7UKgEsOUIZXNkLHDGsIEUqAYKq/Dfku5uqxr+dZRiiibxGnEysv/xgfoEsI4gUBl+7R21C4HPFGp9g1gt09xmDGyhBc5rAnCwHbdBHw5VOV7ChOyfiJMDOiaSXbaIb2j5bYaPTIFxv9Pgw6aswX5icIM2rj+V8d72dzO39+e70eWt/q1Wa4m+hQncSsncOicG4rWbpdHQ1kM0XbHPXFetbT/LV0vcAM8z6BvT4PwIbt+4N5iNGNhT3/0JwnS6qO423z4QTpvg0jfGN+Cla99e8HpoNZJ8P38bvGa8cfUhJl9/8S7vWlUG/rjh8wZD+e1BXE86/p6EnYe38lvfWQOXh820NDp3zg0apuuX19dz0hivhi3bLyY2hg297POfL3ycRhvfoQ0aYzxtFWkc8C/bNufeT8bzwHz/VKOQb9XuRNdQvxrMZMWEqiT3NVNpPgwDpQrbblLaoebCbkjgSt6uF0bTdNsNjt1vWZ7Vqdp3uo1y7p1HONO9xp129qLzJbFEcVuTCdExpKSux2brwniyGVAA0jVZZwJpWPKF4g9xFGlT4fiEMSUwSgW8mzwzXiGIVg4CaEGXRhOA01WjTmtKZWXmA/oIPUmHNKyKNdLojwETBICUrnlYDMx2YyLYizQMuOhUV2iKoVMaHsqZdY17WZNYyRKQpBUtSgOshCqySzJS6Ox7ddUEWa5dXg7yo/b2cSO/+1rIHwCIh2YzKUDoo9w4nbR94mcT9g5THgP72UBkSdLFJSnBG+ZlH99zIkckGJIREZ7yoXnsaGEqh0nVAQKlgQXk17c10LGxcFv79uxQEZ1Uc2WyyzvgG1bWirgNZmippuaDzgT0rQZxb+AagWKdtE9UBA/Cl7YyxQzPqM+RxwiMTGVfHnBxe8Dkxd/X8z6+tJXRSmkKB2HNT9l64bi0SIZf/muwS6WfsL8XXxWcRp8dOwE1kEckae49zmhU7mSd8DmzFzgWMASoV5xegh+CuBU8LKxKHLBhYuBGmcczv+pSFlqKQjjOKO831Nyw6FU5jz5JgH3w+kTTK7GxfOM/Pv7TCX5CGAQjzpGcnx5y7ryCNDpgdzugp5RXOcrxS2za38yf7Yc1Ol4xtt/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B6054B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B605493B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B605493B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B6054A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B6054A3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908038935</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B605533B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B605913B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B605913B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B605923B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908049291</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00135_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_UnlockMe_node_role_Retailer_404_NOT_FOUND_P2" searchProperties="true" id="ffe5c633-7c92-4a09-b30b-9db3d4d2fd17"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="ac8dcf0a-1d94-4382-9479-ea4c4ac6c9ca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="12f9c203-a9b5-4d55-bae8-3f3a03ca7111"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="6bb72634-a87f-42dd-bb76-b7e17ea93fcb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="32e9620a-0e4a-41a6-9736-dd29b86f2aae"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="2c99f1cf-27ea-4bc7-bbab-2788c8188125"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="15228274-38b7-456d-b5c8-127f9f6fd602"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="f8a47739-ca76-4838-9a1f-e74eee14a67a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="fcdcd979-862f-4cf4-9521-af93eb562c1f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMr6CsStQxSWTkEnIDCaZZF62hNwGZY1MJBnMfP1KBjyYhCy7Ty61W6dPX3SkS44WiR10OQcmSEpr+SKhPCisbS1jNEgRJzygaAE8EDgIu/d3gV03A7TfotWGg7b2l+15tmdPsY6x5euu0zJ1f+qbemR6yLN9zzPxVLpynsGQcoGoaGu2aTV0s6lb5sR0AtcNXL/e8lq/tNoTMC6xpUvd1Hakct7W5kIsA8NYr9f1tVNP2cywTdMynu/vQjyHBdI6l9uMikCss/PH9QgwJAmu43RhXBoVn8uIByGZUSQyBrtY0alYpmH6hvSJOJl90cq9EA1pnBbLPqIpJRgl5DdS9bkHMU+jWjeZpYyI+eJkEpapgHXIZQ0tl37RjCq1M4EqDBlHOp8ja4c1hhgYUAy1x/GwrX05r2vF1glDlMcpW/Dq8r/xAbqCJF1CpPN9Wjtq5wN+UKnOJeBgSHGScbKCkRrWJcLAd90EfD5U7TuDmOR3hMsBzbliZxzSO1puqzEgM+Di/zTooDlbkCeUZNC5W03Xo/vfD29vhsP6Tz/y0fDmV5PnNxdX7YLAoXNhKFu7XR4NZTlE2x395irp+hPHSe3cHOdGK/89GjR/PYtwEN5eWMt4dPV83fQ9eLtvxOyGbLzQmOKsN358zkK7P2716M/x9ejRvL59HfQuIKZX9mD6cr15je2fOL3phb4zWI9ekhRWLIwbyfgldrKJG7OM52PEuNW7dUPxuHr65o3XFw/e5kc4u10md5t0FHkTafLc15sh9BvddpnOAf+qbX/mw2z6Cljsl2oMhoPaV9klJD4XM2UhkR4XrsFSiQ8XQIXWUbuUdgSZlDsSBbKH27XVsu1Wq9c0Gz3X6bXsK7PhOFe+b301u17TdfYis2VxRLGf0pioWEpyt2PzOUG8CDjQCJi+SjOpdFz7BHGABKoN6VgegpRymKRSni1EaT7lfnPe2vBXiFw3cX0X+VyrjVLxQB9YNxbAqprcrGjyGDBZElDCreaay8HmQtbiDa0ykVj1FapTyKS0M6Wyge22GgYni2UCiqmxSKMsgfpyviwqY/Dt19YR5oV1fDUpTtvJvI7/7UsgfSKiHLjKpQeyjfDB5eLsEzmdsH+Y8B6+m0VEHSxZT8EI3jKp/vozJmo+yhmRGe0pl57HhgqqcZxQGShaEVwOenldSxWX576zb8cbsupv9Wy1yooOuK5jMAlvqBQN0zZCwJlUps0k/RuoUaIYZ10DJfGj4KW9SjETcxoKJGAhJ6ZWLM+490Pg6t4fylHPz31UVELK0gnIxUe2fiLfLIrxp88aHGDlJ83f5WedsuhPxz7AOogj85TXviB0plbqCticmAucSlgixStlh+AfAXwUvGosi1xyEXKgppmA039qSpXaGsI4zagYDrTCcKiUBU+xWULwx+kdTCHG5euM/PvzTCfFCGCQbzpOCnx1yQbqCNDZgdrugp4QXOczwa2y67wzv7cc1Ol4xjv/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B605B53B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B605B33B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B605B33B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B605B43B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B605B43B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908071592</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B605BD3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B605FB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B605FB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B605FC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908082597</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00136_UVTC_PrimaryEmail_maps_to_multiple_users_status_forcedeleted_Token_Type_UnlockMe_node_role_Retailer_404_NOT_FOUND_P2" searchProperties="true" id="e23d8121-ccb3-493c-b477-49038d4f348b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="52e77e26-4243-41fa-bff1-9576489bb46b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="205f854c-2b12-4ef9-a172-40af7e6bf307"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="f593e69b-907d-47c3-97ff-1bc8277feab9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="829431b8-ff30-4d6e-b73a-72c9301662df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="0461c787-d34d-4419-a0e0-50fff52a92a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="8e3fde15-582f-4dc5-b801-062657130db8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="81a3cad1-b25b-478b-838c-4d36fd98964d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","forcedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="2b285b2e-54b4-4a91-aae3-a796e8ba9ca8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZrU/I4FP4rTP2403vB0hFmuKlVQAXWffXLTpqmEN+SlCbl4q/fpEClCC67nzo5PXnOcy55khsG5rHltRhDKceUVNbzmDAvtzaULCUeBQwzj4A5Yh6H3rg16HuWZnhgv0Wp+N2G8jewwsgEgaNGxjVUnVrdUQPXgGotiNwwqFqwbgXClbEM+YRxQHhDsQyzqho11TQmhu05Vc+yNatee1cqryhlAlu4aIayI7VmDWXGeeLp+mq10la2RtOpbhmGqf8a9MdwhuZAad5sM8oDpc2dP9RCBFEcQw3SuX6jl3xuQuaN8ZQAnqVoFys8F8vQjboufEKGp1dKsReFPolovuwAQgmGIMafQNZngPiMhpVWPKUp5rP52SRMQwKraA1VaDrkStHL1C4EKjFMGVDZDJg7rBGKUIoIRJU/R35Dubqsa/nWSQoIi2g6Z+Xlf+ODyBLFNEGhyvZp7ahdDniiUs0bBD2fwDhjeImGclgTABHbdRPBy6EqzymK8LqPmRjQNZPs9EN6R8ttNbp4ihj/Pw06aM4W5BXEGWp+4rs/njP4O3l8eau3OvEzTfsvi27Np7SREzh0zg1Fa7fLo6Eshmi74zXovd3fv878u3V/AU1rNrn7nNERGNqZS8Kk0w/c6H7412pobfyn4ch23O5TjVSzgX3bCTbXiyk2e65pD43HmPmO++tlfusMBm+bNlk+MGq+3/brddT7PWq9r56DtPcKepMHYr5NTdKrJndj4vT17GVTNSk03PiDJjYzHx7abf7okrtJu+9/Qv/j/t2Og6HbKNI54F+27c/8OAs+EOT7pRwDv1u5FV0C/GcxkxYcqlHu6iVSfBhHhCtNuUtqh5cJucOhJ3q4XZuuZbluu2bUzI7ddq2eUbXtXr1u3hqt65pj70Vmy+KIYoeSCMtYUnK3Y/MzQTj3GCIhStUlzYTSMeUHxC7goOKTkTgElDA0oUKeTYdBMwh4ffqJXELDWjK1l9E1ZkplSPkTeUpbEUdpWZNrJU0eIYgTjKRwy7lmYrAZF7VYgGXGY1NbAo2gTEh7KlXWsxy3qjM8T2IkmepzGmYx0pJZkldGZ9uvpQLIcuuoN8lP29m8jv/tSyB8QiwdmMyljUQb0YnLxdwncj7h+mHCe/hWFmJ5sEQ9eYrhlkn519eYyPkoZkRktKdceB4bSqj6cUJFoHCJYTHoxXUtVFyc++a+HQtgagstWy6zvAOOY+upgNdlirph6WMEM6FMmwn9jYheoOgXXQMF8aPghb1MMeMzMuaAo7mYmEq+vODeHyMm731fjPr60kdFKaQoHUdrfsrWicWbRTL+8VkDPSj9hPlZfFY0Db86dgLrII7IU1z7HJOpXMkrYHNmLiAVsFiIF00PwU8BnApeNhZFLrhwMVBBxtH5PxWpSg0FQEgzwv2ukhsOlTLnyTcJ8r6cvsHkYly8zvC/P89UnI8AROJNx3COLy9ZTx4BMj1Q213QM4Lb/klwy+ya38zfLQd1Op7x5j8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B6061D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B6061B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B6061B3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B6061C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B6061C3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908105615</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B606253B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B606633B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B606633B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B606643B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908115960</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00139_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1" searchProperties="true" id="a6c68bfc-4877-4131-94d2-3d909a201201"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1b33e6db-1fb1-4d40-8add-c9fad7c13bd3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c1e3e103-931d-4dc6-9085-c48788611292"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="725a6429-572b-41f0-8f3e-0d1bdc80473a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="8bfa21b9-43ca-4098-847d-8c0a9f59aeac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="9e0ba304-a715-4060-b419-a28f627e7d39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="fea53242-545f-47b4-8087-7ecc9684ad6b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="074b8dfc-bc37-45f4-ad49-5f3b9a552139"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXyFgCtQRUKy45kw4ZaEycuWkNugYMvGksHk61cy4GACWXafXGq3uk93Hx3pmqEwMJ0OY5BwEtFKFgaUObm1paQJdSLECHMoCoE5HDujTu/BMau6g/ZblIrbbSl/N2zsYbBtFTeaSLWnBlKblm+pDb0Glmfpfq05Fa6MpeBSxhHlLcXUjZqq11VDH+uWY9ecWq16dWW/KpVnSJiILVyqurIDlbGWMuc8djRtvV5X11Y1SmaaqeuGNuk9jPAcQqS0r7cV5YmS9s4fVz3AEAS4iqNQu9ZKPtcec0ZkRhFPE9jl8s7l0jW9qQkfj5HZN6XYC55L/Shf3iIaUYJRQN6R7E8P+DzyKp1gFiWEz8OzRRi6DKxChlVs2PSbopWhXRiohDBhSGVzZOxiDcGHBCiGytPQbSnfLptavnWcIMr8KAlZefnf8ABdQRDF4KlsX9YO2uUBT3SqfQ3YcSkOUkZW8FuSNUYY2G6agC8PVekn4JPsgTBB0IxJdNohvKPlthtdMgPG/8+ADoazDfKMghTamzq1r9hgjseUdpPJyhTH8NEa/KFxp5UDOHTODcVot8sjUhYk2u54cdNFN9DGLmrWep3ocakN8A9tNG/OdTDWyJrowzdisB73u8H3jf8wwI0ge924dug9hIv5c2jO1n8ar11Djyd274myJyNe/PXe707d7NdmsA6erf40u/IsmDz5M/7T+rHhoyev8fj2s77Um6FdX9/R2/s0bNrD+35Q6/hs/evFvm9OXpBPn1F/QLqEj75P3HWrKOcAf9m2P/OjdPoGmO+XkgZut3IvpoT412ImLcRT/dzViaX4MA6UK225S2qHkwq5I54jZrhdGw3TbDRu6nq9YVs3DfNOr1nWXbNp3Oudq7pt7UVmi+II4m1EfSJzScnd0uZrgDh0GFAPEnUVpULpmPJFxC7iqOLSoTgEEWUwjoQ8p/VF9p4tkikEC5PPMuItlt66vlQqvyP+SB+Tjs8hKUtyvSTJQ8AkJiB1W9KaCV4zLlqxRKuUB0Z1haoUUqHsiRRZx7QbNY2RMA5AAtXCyEsDqMbzOG+MxrZfU0WY5dbh3Tg/bGfLOv6374Dw8Yh0YLKWGxBThBN3i70v5HzBzcOC9+E7qUfkuRLt5AnBWyTlXx8skfQoKCIq2kMuPI8NpajacUFFIm9FcMHz4rYWIi6OfXs/jiUyqstqulql+QRs29ISEV6TJWq6qY0Ap0KYNuNoAVQromgX3QIF8KPkhb0MMeVzOuKIQygYU8mXF1z7I2Dy2ncF07NL3xSllKJ1HDJ+ynYbiCeLRPzlqwY7WPoJc1981lHifUzsRKyDPKJOcetzQmdyJW+AzRle4EiEJUK7ouQw+KkAp5KXjUWTCyxcEGqacjj/pyJFqaUgjKOUcrer5IZDocxx8k0MzofTpzC5FhePM/LvrzOV5BTAIJ50jOTx5R3ryCNAZwdiu0t6Rm+tr/S2jK79yfzZctCnY463/wE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B606853B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B606833B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B606833B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B606843B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B606843B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908138081</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B6068D3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B606CB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B606CB3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B606CC3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908148419</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00141_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_mergedeleted_Token_Type_UnlockMe_node_role_Retailer_200_OK_P1" searchProperties="true" id="94aa6cfb-f8b1-40b4-9e6a-9010fc482892"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="f9524b49-97f5-455c-94e8-0e5709d6ca5c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="243db7dc-e509-451d-8edf-1ff0ddc549f9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c1ec62d6-abe0-41bd-ac52-1ac8b563b819"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="fe7b14f3-4607-4ee6-b785-f79b64528449"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="008382f7-ab52-4e76-9505-7ac01d683c68"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="733f3985-7c15-42d0-88ca-c7739b747780"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","mergedeleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="e9ca1267-0bc2-49c7-bf0b-b1af03011e04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH3cU3qh3DrCDDfdqMgWUNGXMyFdQLRNSpNy8dfvpEClKB7OeepkdeVb37rkSy45CnzbbXAOkSCM5taBT7mbWGtaHFGXIU64S1EA3BXYHTZ6d66dN12036Lluu2a9o/lVHC5XKnoVtks6o5XRHrFQY5eqVq4VChiQMiTrpzH0KVcICpqmm1aRd0s6ZY5MguuU3LtYt4qV1+13BNEXGJLl7yp7UiteU2bCxG6hrFarfKrQp5FM8M2TcsY9+6GeA4B0uqX24ySQFF954/zHmDwfZzHLDAujYzPpcfdIZlRJOIIdrG8U7FMw6wa0sfjZHahpXvB69IpS5YtRBklGPnkA6n69EDMmZdr+DMWETEPTiZhmQpYhzXWseXQC83IUjsTKMMw4kjnc2TtsAYwhQgohtzjoFvTLs7rWrJ1FCHKpywKeHb53/gAXYLPQvB0vk9rR+18wG8qVb8E7HYp9mNOlnCvhjVEGPium4DPh8r9iWBK1neEywFdc8XOOKR3tNxWo01mwMX/adBBc7YgT8iPoR693/xezvq/rGa7M37Eg1/vbxX07kz65KGWEDh0Tgxpa7fLo6FMh2i7ww+uF4t++NhZexN4+T0cvt0Xnpqlm/H0+vbjY7C+Lr+OB1ds+jiuNift2HgmL8TuDILJTb/MR8/VoGP03jtee3ldHj2I0XvntdUV7NFpNVDDpnb/EcL71tpuLl6Ht8Ug6r1cf3w4/YeK0Xm5vQ9n4+e3xtvm9el67HhWPIxbjQ3GXvlFNutuE4r2FVpuyjcfTdbrs1qazgH/rG1/5ofx5A2w2C/VGHTbuSvZJSR+FjNlIZ4+TVzdUIkPF0CFVle7lHa4sZQ74rmyh9u1VbHtSqVZMkudTqFZsTtmsVDoVKvWldkol5zCXmS2LI4othidEhVLSe52bH4miAOXA/Ug0pcslkrHtR8Q20igXJcO5CFglMOIKXk2p29ltohWi+nGmqyxaXuFeGXygpa7Z6JP+1FjKiDKanIpo8kDwCQkoIRbzTWXg82FrMUCLWPhW/klylOIpbRHSmVd26kUDU6C0AfF1AiYF/uQD+dhUhmDb7+2jjBPrIPOKDltJ/M6/rcvgfTxiHLgKpcmyDbCN5eLtU/kdMLVw4T38I3YI+pgyXqKiOAtk+yvzzFR85HOiMxoTzn1PDZkUI3jhNJA3pLgdNDT61qquDz39X07FsjKL/LxchknHXCcghFJeEOlaJi2MQQcS2XajNg7UCNFMc66BlLiR8FTe5ZiLOZ0KJCAQE5MLlmece8Pgat7vytHfX3uoyITUpZOwFp8Z2v58s2iGP/4rMEuVn7S/Ed+Viz6TPw7rIM4Mk957QtCZ2qlroDNibnATMISKV4sOgT/DuC74FljWuSUi5ADNYkFnP6TU6pU0xDGLKai29YSw6FSJjzFJgT30+kLTCLG6euM/PvzTCfJCGCQbzpOEnx1ybrqCNDZgdrugp4Q3PZPgptlV/9i/mo5qNPxjNf/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>182288B606EF3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:182288B606ED3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>182288B606EE3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:182288B606EE3B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433908166340</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>182288B606F73B82E0533E991F0A7643</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:182288B607353B82E0533E991F0A7643</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>182288B607363B82E0533E991F0A7643</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433908177906</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00150_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="76176df1-3b59-487e-a69e-ceb848f34e41" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="466508e2-a461-4caf-8c7f-3f52230cca2f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="18a6013e-a96c-48aa-a1d8-76d8e00bfc60"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="816450e6-72e8-4fa6-a937-22fad0e1fbc3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00151_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="7f62a433-a991-4b1d-b58d-00b7b50385ab" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="4d79b8fe-15e1-403c-8b16-1e9ea4188e2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="db043a1c-f50a-4fbc-adc7-9c0b4990b82c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="dc936c1a-e829-406d-9122-d910157e8a6e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00152_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true" id="39e1e8e0-e785-456d-8890-9d5330c615ff" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="a36b1789-9ec9-4eb7-8039-508eb903bb95"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="d842ffe5-89aa-4f17-a4e3-173240577129"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="479a0f37-cc9a-417d-b341-d7f2dc885278"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00153_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="2813aa99-6f84-42c9-9b19-37a15d11c1b7" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d1a87c92-9dd2-4bbd-921a-3dc684d1bbdd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="19706a09-98c3-411a-bf6a-f53ea213fbca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="610a9fc3-aa71-4cd5-b3b9-eef20eebef14"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00154_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="58535ebf-850f-4692-a0c1-9235d77cb6d6" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b2c2e534-91da-4b31-b5e4-36e12929671a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="24f15bc3-5f4a-423c-b76c-8dbb57e0f2d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="330d1631-9f45-483c-93dc-6050ae721885"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00155_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="63149261-9113-4362-ad7d-568b58a6b3fc" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="21c698be-7e00-4f2f-8003-e27ca4cc4365"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="e33850f3-277d-40a7-87d6-57154100ebbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="61537acf-aa2b-4ef8-baff-47abb2a62eed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00156_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="19a40ab8-835f-4dcc-94db-625a9d16344a" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="0f4bdf34-6fa4-4a0d-994a-7c2f9c9254e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="9c088ff4-d445-4ee6-aebf-e420db177c4e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f09de097-66fa-418e-853d-f90ddf9ed0dd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00157_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="4efbb5af-f704-4b97-b191-fb0efcef020e" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="237d14cd-36fb-4dd4-b0cc-095bb72316d8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="d1f7a659-6fe4-4ac5-8610-3571f57c8046"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="84fe181a-dae1-469e-8b75-ee873c48c9bc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00158_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="9e971fc3-345a-4d91-b048-240062856c51" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3134943e-d2ca-4c63-80da-0bc2ca0e7645"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="735d4e6c-da42-40b0-ae8e-025ac9ff94db"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="2bf55847-7269-4fdb-8bba-ddf8b3af7fa1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00159_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true" id="59114bb0-3012-4787-a90a-e12052f12955" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="0821d057-1b35-44c4-8f56-131a26631dcf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="ac247db0-6738-4eef-a2cd-2ecb090b072d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6163581e-a7e9-47cb-9985-edab9332f515"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00160_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="d6317b60-c64f-4e46-a079-c43ae5d16a24" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="2d67b0e7-3b01-464d-9bb0-f23f7e180ae9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="660d2cd3-b201-4e4d-a069-625deeff344a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="be690e31-71fb-4731-8cce-fb971f50854a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00161_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="9b380650-1973-42fb-ae3b-0c36478c1c6a" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="097773b6-0481-4cff-a138-00360d03c7ec"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="be12002a-4715-429a-82df-18c36ea95d3a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="49fa0bb3-d9de-44fb-b335-bf85a35f83fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00162_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="eb1deb5b-bf22-4141-82bf-a96907ce19b1" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b7340eb6-9591-4be5-882b-cc65c342669c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="ed5d3846-0993-4afc-92da-3cd5c63b6cb9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="fd6b025d-cd00-40f8-b2b6-9bd49ca53ffa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00163_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_ValidateEmail_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="a7acf3ce-5cd0-4c65-8308-dbcab5c2bd23" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="e42a7443-0a66-4291-bca9-1ba09153f4b1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="a8fb39ba-b125-4f44-86b2-bde66289d18f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="85fe66aa-d7b3-401d-826c-795c2031955a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00164_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_1000_and_2000" searchProperties="true" id="33d29bc8-834b-45d9-8526-d3961623a3e7" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="ff78b703-5f91-448f-9cc1-a7a4560e5510"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="c2ae0d76-7d4d-4e4c-b532-3d87136b0987"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","suma.nadimpally@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6ba2e379-a3ac-4fd3-bfd5-e05a4cbe2277"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00165_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_5000_and_6000" searchProperties="true" id="9e348a85-42dc-4a17-880b-ec96c8cc5fcd" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="2b8d9c6f-75bf-401f-a06f-53218c51191b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="d3164095-a0ef-449c-a6b5-1c48431db61a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","srikanth.paridala@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="bece90d0-7546-449b-90b9-767c5ded2bc6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00166_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_6000_and_10000" searchProperties="true" id="393629c8-c731-487d-bc92-474c96f9497f" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d00932c9-17d2-48ff-9c91-571d337955c1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="bc011480-06c2-4d70-80e5-0ac92f9db2ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","ankit.nidhi@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="e7c03130-71e1-46c5-8feb-a209ea4c8d33"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00167_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_20000_and_25000" searchProperties="true" id="1f3012b4-3c0a-40d1-b73e-4a85f907be35" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="5cc703dd-3bd1-46d1-9247-07fc23f7259d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="10a26944-7fcb-4412-a48c-a1f230498525"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","07112013email@email.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="5d6797b9-ae3f-4915-aa46-3f1b684fa282"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00168_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_50000_and_55000" searchProperties="true" id="d44945a4-5df3-481e-b8d9-5a448f973660" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="80ca07da-aab8-4804-b5a6-26d0497b6eca"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="24509823-7bf3-4e73-bea4-331ea570230b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","compugain.com@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="b3e07679-0d52-49e0-ad17-507fc174e4fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00169_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_60000_and_65000" searchProperties="true" id="f59323eb-483f-4fc5-b67f-3eaec97caefe" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b35cf5ac-dd52-48ad-9192-c325936a3e82"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="ae23a654-cc0c-46ea-84a8-601f80c5f156"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","aravind.racharla@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="fa7a430d-c20c-4f78-9f52-9e23eb9d18e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00170_UVTC_PrimaryEmail_maps_to_single_user_Token_Type_UnlockMe_node_role_Retailer_Users_between_100000_and_120000" searchProperties="true" id="2d620992-c10f-44fc-8b8c-1c4cdfe4d470" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="5d9dddf4-36b1-4f9e-9447-d13a53db50e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_PrimaryEmail" id="4dce9961-be23-4735-82ba-0a7041fb762c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("PrimaryEmail","kalyan.ineni@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7bcb730e-3b84-4bb9-99c9-44db4c463995"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00171_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_1000_and_2000_AlternateEmail-raviteja.pathivada0445@gmail.com" searchProperties="true" id="e51bfd51-6ec5-47e2-b4de-77987960eaff" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="721c588d-b86c-418b-8ee9-d49fc7fef75f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="43789069-212c-4518-9468-a802a9f1d3f0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","raviteja.pathivada0445@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="1cb7c5c0-9b70-425c-a988-41ff00cdf5e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00172_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_5000_and_10000_AlternateEmail-srikanth@compugain.com" searchProperties="true" id="948ec696-d5dd-42d1-b83c-43bd2e7dbfdf" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1580c427-ae81-4e04-a558-775fddd9d05e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="ebd6e31a-3feb-4d7d-9d70-617b313ba424"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","srikanth@compugain.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="b96d48e3-dbe0-4509-8d13-e4e75d83fba4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00173_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_20000_and_25000_AlternateEmail-albertmza@neustar.biz" searchProperties="true" id="faecf59d-733a-4bc3-9a95-4daf1fb1f5ba" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="77092e19-a9d3-4584-a2cd-5abc7e15483b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="746af6e5-135b-4903-9e52-98837f4304b9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","albertmza@neustar.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f4ad96f6-8379-485a-ae07-51d38a6a9869"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00174_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_50000_and_55000_AlternateEmail-kalyan@gmail.com" searchProperties="true" id="18c2f7a3-ecce-4756-859b-fc178d1833ef" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b7acb054-8a09-46b6-8ea4-403336922f0e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="836d4302-43f4-4f4b-b33b-82b45be9dec9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","kalyan@gmail.com");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="ce7c7bc3-926f-47cf-9c5c-848a5c80258f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00175_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_60000_and_65000_AlternateEmail-test_sts123@uvvutesting.biz" searchProperties="true" id="68539609-8f62-45e8-9e52-c72485dce951" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="a8c33d37-dcb5-42b2-bc57-d4745fc916a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="478a57ac-5852-49ea-ae95-9f5018e1a43e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","test_sts123@uvvutesting.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="12b70be8-3182-4c87-862e-e4e5756f836e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00176_UVTC_AlternateEmail_maps_to_single_user_Token_Type_ResetPassword_node_role_Retailer_Users_between_100000_and_140000_AlternateEmail-testing_428@uvvutesting.biz" searchProperties="true" id="775aa4d7-dc66-448f-8cff-3376213df0d5" disabled="true"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="bf5df17b-a2d4-4f38-902b-9dce93adef08"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Setting_AlternateEmail" id="0ec82aa1-20c9-4536-82de-680147e0a59e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("AlternateEmail","testing_428@uvvutesting.biz");</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8977bd8b-95af-4702-a1d9-30a8f158be07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_AlternateEmail_FUNC" id="1009ca05-d235-4e9a-9931-4e829463d401"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="f3abc956-6039-46c6-9a21-1a4120ba9c3e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="f93babe1-7b31-40c4-83cb-dbe399885962"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e242ef77-ebdb-4367-9e3e-8c2fea9cad56"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="a42ee09a-2237-4744-84fc-b37aeef46714"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="915baf0a-4778-4fb8-9aa9-4ad04d9a5d6d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="5231ebf3-690f-4ef1-b45e-c988f587101e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_00077_UVTC_PrimaryEmail_maps_to_single_User_Token_Type_ResetPassword_P1_SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>UserValidationTokenCreate_FUNC</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTH10StILAh1hBhGUrShyceN+ORPSANE2xSSF4q/fSYFKUTyc89TJ6sq3vnXJl1wKFAa21xCCcEkjVkjCgAkvtdaMmDMvQoIKj6GQCE9ib9Do3nt2EXpot8UodK5rxj+ug6ol38GmO5lOTLfiuyaySxMT2hcW8iGcIt9VrkLEpMOEREzWDBtaJRNemBYcQteDjgftYqkM/xiFZ8KFwlYuRWhsSSWiZsylXHgArFar4sopRnwGbAgtMO7eD/CchMioX24ySgPx+tYfF32CSRDgIo5CcAlyPpe+8AZ0xpCMOdnG8o/FggBWgfLxBZ2dGdle4nfYNEqXTcQiRjEK6AfS9ekSOY/8QiOYRZzKeXg0CQtqYJMk2MSWy84MkKd2IlCOIRfIFHNkbbH6ZEo4YZgURv1OzTg7rWvp1iFHTEwjHor88r/xIWxJgmhBfFPs0tpSOx3wm0rVLwn2OgwHsaBL8qCHdYEwEdtuEnw6VKHHyZQm91SoAU2EZgf26R0sN9W4pjMi5P9p0F5zNiDPKIhJfUBE+elldPP+++bmtTW0Wta4/9rtucmqW0sJ7Dunhqy1m+XBUGZDtNnxFE6T0eipXSqNuhCBILGuxtQBM9r4NUaw1S4n4zs2v6fxr/Pmbflj+NScocHbiNB557advFFyG67dxbPTgBXRehpbd3fv56TZWsMXOS8N7Mn0ZnxXsez+qP/7/Hn+uFzL8dPNM3rpYYdX7pwKFvGfIfbPHZgsJg9xy6I9cMXp1bm7btwun18YBD36CN5u/VktS2ePf962O/ODePJKsNwt9Rh0rgtt1SUkfxYzbaG+OU1dvYUWHyEJk0Zd79La4cVK7qjvqR5u1lbFttuOVWmXrqoX5XK7BUuO06pWrTZsOJXm1U5kNiwOKDYjNqU6lpbczdj8TBCHniDMJ9xcRrFSOmH8gHiNJCp0WF8dgogJMoyUPPNXp4rXH2GFu9Qqy4uqsK01X/lKXR8i+cgeeWMqCc9rcjmnyX2C6YISLdx6roUabCFVLd7RMpaBVVyiIiOxknauVdaz3UoJCBouAqKZgjDy44AUF/NFWhkgNl/bRFik1n5rmJ62o3kd/tuVQPn4VDsIncsVUW0kXy4X2yvtEjmasAX3E97BN2Kf6oOl6ik5xRsm+V+fY6LnI5sRldGOcuZ5aMihgsOEskD+kuJs0LPrWqm4Ovf1XTvekVV8L8bLZZx2wHUdwBU80CkCaIMBwbFSpvUweiMMZCjgpGsgI34QPLPnKcZyzgYSSRKqiSmkyxPufaV7+t7vqFFPTn1U5EKq0kmSyO9szUC9WTTjH5812MPaT5l76rOKuP/ZsW+w9uKoPNW1Lymb6ZW+AtZH5gJHCpYq8Yr4Pvh3AN8FzxuzImdcpBqoSSzJ8T8FrUo1A2EcxUx2ro3UsK+UKU+5XhDv0+kLTCrG2euM/vvzzKTpCGCi3nSCpvj6kvX0EWCzPbXdBj0iuJWfBDfPrv7F/NWyV6fDGa//BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1822F318F5BA677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1822F318F5B8677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1822F318F5B9677FE0533E991F0A38CB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433909164331</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1822F318F5C2677FE0533E991F0A38CB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ef970a71-ac89-4de5-b3ac-d452951d4ae0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f564e1c4-a882-43f4-a950-b4d495099626</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1c6a5c62-b1be-432a-a1b8-3e633ac21465</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5bcb1c9a-2a1d-4934-838e-4093d4056f76</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>63b11e86-7c7d-4612-bcd3-c93a10983d6d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e242ef77-ebdb-4367-9e3e-8c2fea9cad56</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00078_UVTC_PrimaryEmail_maps_to_multiple_Users_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="7cdd1814-65ea-4de5-911e-f48085c1a117"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="6d404001-6447-48ef-9991-3ceae456199d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="24947e7e-f032-4b6d-883a-b4de1b44baa8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="8a34c90b-becb-4c1f-9a5f-e7fe44ce5189"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="002952bf-f73f-4d4f-893f-9d42935ec6a9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="0ea32e31-de9e-4b48-a19e-cce24354eb47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="5dde49ea-e2d8-440a-9243-4804d17d265c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="623e5969-1f67-4408-b2af-4b638c57ac52"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VyvdxyngBB3AFqgiBhEnIYrLdvEwpctuI2DJIMph8/ZUMOJiEDDNPLrVbp08vOtIpR3Fku13OgQmS0EoWR5S7ubWtpYy6CeKEuxTFwF2B3XF3dO3aVdNF2y1aZXje1v6B4A2cBnrTa4Hj6/UGcvQWNi29afl1B9DJW80JpCvnKQwpF4iKtmablqObJ7plPpi2W7Pc2km10aq9apUnYFxiS5eqqW1IZbytTYSYuYaxXC6ry1o1YaFhm6ZlvIyux3gCMdI6p+uM8kCss/HHVR8wRBGu4iQ2To2Sz6nP3TEJKRIpg00s/1As0zBbhvTxOQl/acVe8Ic0SPJlD9GEEowi8oFUfUYgJolf6UZhwoiYxAeTsEwFrEOGdWzV6S/NKFM7EqjEkHGk8wmyNlgeBMCAYqg8esO29uu4ruVbHxiiPEhYzMvL/8YH6AKiZAa+zrdpbagdD/hNpTqngN0hxVHKyQJu1LDOEAa+6Sbg46EqdwwCkl0TLgc044qdsUtvb7muxjkJgYv/06Cd5qxBnlCUQmfw+BKQl+ep91y7dvx52IhhNWoNvNfXYTsnsOucG4rWrpd7Q1kM0XrHndP4jV77M8dHIOb28NKYXjm0l/71Gl3cT3vPTkxfXoxV0KcmMU9Y2L1KAnvQCHvLx+bcTD0yWPaSm/H9qBE+1xPnxvzbCOuN6ZBY0eq++ziakrv7Uep5v/3mI2eX9/XJhbm4YPacXT2xfnbpnd15KY7uTlb15cq6zT4+olY6j1+9k5sPx7udEmwswuw+8B94u0hnh3/Ztj3z4/RtClhsl2oMhueVgewSEj+LmbIQXw9yV3emxIcLoELrqF1KO9xUyh3xXdnD9dpq2lb3rNYaOP1Wd9Bq9E2nVuu3WtbA7NZrlrMVmTWLPYq9hAZExVKSux6bnwni2OVAfWD6Ikml0nHtB8RzJFBlSD15CBLK4SGR8lzP3hdZ442FcePdMv3GdE5Mn37QTKvcJOKW3rJuIICVNdkpabIHmMwIKOFWc83lYHMhazFHi1REVnWBqhRSKe1Mqaxr15uOwUk8i0AxNeLETyOoziazvDIGX39tHWGeW73+Q37aDua1/29bAunjE+XAVS5nINsI31wu9jaRwwk3dxPewndTn6iDJespGMFrJuVfn2Oi5qOYEZnRlnLhuW8ooRr7CRWB/AXBxaAX17VUcXnuO9t2zJFVnVfTxSLNO1Cv1wwm4Q2VomHaxhhwKpVp9ZC8AzUKFOOoa6Agvhe8sJcppmJCxwIJiOXEVPLlEff+GLi694dy1LNjHxWlkLJ0AjLxna0XyTeLYvzjswa7WPlJ8538LBPmf3bsG6ydODJPee0LQkO1UlfA6sBc4ETCEileCdsF/w7gu+BlY1HkgouQA/WWCjj8p6JUqa0hjJOUiuG5lht2lTLnKVYzcD+dvsDkYly8zsi/P890ko8ABvmm4yTHV5esq44ADXfUdhP0gOA2fxLcMrvOF/NXy06d9me88wc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F5EAAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F5E8AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F5E8AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F5E9AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F5E9AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903679520</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F5F2AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>SAML_USER2</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx3jD2w+PIEZYkNKEhIChOT2paPIa1Bqy9SSgPTXX8nEBAjJpXcmE0br1e7Z3aMjnTGUJo7fYQxyTjKq9cOW/hNHNRSjWsNoNuKG4dYtz2g0wTVqgLworiHs2Q1d6zMmoE8ZR5S3dMeyq4btGHZtYjX9quNbXsWpez90bQo5k6GlS8XStXWaUOYXaVu6yKmfIUaYT1EKzOfYH3cG17709FGJSW+fbVAWCfP2nPOFb5q4EgGGJMEVnKXmmbnncxYxf0xmFHGRw2vOiLX0172r1aqyqlayfGY6lmWZVtOUPhEjs696+0u5GaI+jbPNOkA0owSjhPxBCtQA+DyLtE4yy3LC5+kHoW3TtlRoA9bYwLZLv+rmW4IC3YmR9kDmDBlsjuwy2AhiyIFi0O5H/Zb+9bQJbvZOckRZnOUpO1j/HSSgS0iyBUQGKysr0Z0e8Ui72meA/T7FiWBkCTeKJguEgWnDHGKyviZMki9iWjF+bc3kHylZBvhvxnJm7mKV0M0j3QnJDBj/PzPbndcmyhQlAtoPAX4WLFzW/hHx9bObfPPIuHfhkMtBp1VA2HXegNqO+3V9SNYtt143Peb55PuyO+1Hw8Xlw9PK7C6uAsZneWfYGJpdfFMdk/WfG3s9ehxWzykMhJvZ39aC3QeDGxZdUnTbeb6w7ngEyZeVF1088Hgau1NkPz944urWXS088b0+/RFc924nVxNSnUTfHXb/MkkxFWbduXu65154Mbztnz9l8fiuN30eRbMB++L86DUno8x7IPPllffyK33qtt5q2q1h31hKwlg8PQPm5VLRox9qPTkvxD+XF2UhkREXrv5CaRTjQLneVruUtPhCChCJfDnMzbobdty6E4Rew7Hkv3rXci27Z3Usr9msVptuqUEbFAcQg4zGROVSKrvhz+cAceozoBHkxjITeA5M/yRiiDjS+nQkD0dGGUwyqeLndhCElud4tuM0gp5TC62w7gbn50HVCeudmq7dZPyW3uadmEO+p+C2s6fgI8BkQUDJvOI5k0Rnkgv4N1oKntiVJapQEPIiyJUW+47b8ExG0kUCCrCZZpFIoLKYL4oGmWzz6xgIs8I66k6K8/dheYffyk5In4goB6ZqOQc5TXh3Fdm+VxbyccHebsFl+I6IiDpmsq08J3iDZP/TG1sUTbZUkRX9DMY/7RL31v3k7e93mp+AMg/7sU0ULclO2vJOldeEFJF2Oc3fqPK7IpZLUcyvrgQyl+FNqZO2OQYspMq9TLJfQM1tCPOkS2aL+iDz1r6PT/A5HXPEIZVs04rlCS+MMTD1wujL07I+9fmyl1L2jcOaH7MFiXyIKMSfvlWwj5WfNA/lzyrLo7dxHYm1k0fWKZ8VnNCZWqnr5OUDUuBMhiVS/7J8N/ixAMeS7xu3Td5i4ZJNT4LDx180JWwtHWGcCcr7oV4YdsW2wMlfFuC/Ob0LUwj66w29Zh/e0I+D67GUvRTpW1/y384GKeiCQVcPgQJLS1/LB6dMTmc74v4K8Ki+17vuZ/q+X0n7nfm9Zaenh+eh/S8=</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1821AB39F62CAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1821AB39F62CAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433903692103</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1821AB39F62DAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e945343c-a840-4585-aa9e-d90769b532bb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8a34c90b-becb-4c1f-9a5f-e7fe44ce5189</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>24947e7e-f032-4b6d-883a-b4de1b44baa8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00080_UVTC_PrimaryEmail_maps_to_single_user_status_active_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="976c83cc-532e-4ea1-b9c1-465e4f01938a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b056ef3e-f119-4f1a-ae56-3c7ecc05b0f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c092546c-07bd-4780-b9cd-7f9ecdc4d0c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="74ec924e-7a35-4902-ae49-d7d17e53f2b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="7f8dd185-6ea9-4434-9423-855ba669359c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="e6381328-c8a8-4ef1-b443-6bc638da3c69"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0Vynk2vhNwBaoIlwmzJGQgsJm8bAm5wQq2TCSZS75+JAMOJiHL7pNL7dbp0xcd6YajOLL9JufABEloaRNHlPuZta6ljPoJ4oT7FMXAfYH9UfO+79tl00eHLVqp165r/1TswDaDWk3HU3uquzW7qtfcSkWfOlMLrOl0hr2KdOU8hR7lAlFR12zT8nSzolvmk2n7ju2bZvna81600gQYl9jSpWxqe1IbXtdCIZa+YazX6/LaKSdsbtimaRnP9/0RDiFGWuNml1EWiDX2/rgcAIYowmWcxMaNUfC5Cbg/InOKRMpgHys4F8s0zJohfQJO5ldavheCHp0l2bKFaEIJRhF5R6o+9yDCJCg1o3nCiAjjs0lYpgLWYYN1bLn0SjOK1C4EKjBkHOk8RNYeawgzYEAxlMbDXl27uqxr2dYnhiifJSzmxeV/4wN0BVGyhEDnh7T21C4H/KJSjRvAfo/iKOVkBQ9qWJcIA993E/DlUKVHBjOy6RMuB3TDFTvjmN7JcleNNpkDF/+nQUfN2YFMUJRCI/yRRi06e+8/d+JhOrFvU+OFjwe/kju3nhE4ds4MeWt3y5OhzIdot2Pshi+Vzru5daq3vWu4+/mDu5bzd/sXX9Pn5iAc4O48fAmNxWK83T6A8bjtuJ0Hftvrd3g48ibReEruXvndZPDwMuTJZtW6jaHbNFthL5r+db/1nhx2Pxk4W3P+vl2I1RAba1p1FsP5/ePdsl15/02HfbZBrfRlYz5XWWsmNu/tOxSN+z+HU2jHw2f+4P4OpC7V83SO+BdthzM/SqevgMVhqcag1y51ZZeQ+F7MlIUE+ixz9ZdKfLgAKrSG2qW0w0+l3JHAlz3cra2qbTVvnVq34nab3dp1x/Qcp1OrWV2z6TqWdxCZHYsTiq2EzoiKpSR3NzbfE8Sxz4EGwPRVkkql49o3iG0kUKlHh/IQJJTDUyLleQ6v0eLaXkSzis3Z3DOZ/epVha2VHhIxoAPWnAlgRUn2CpI8BEyWBJRuq7Hmcq65kKV4Q6tURFZ5hcoUUqnsTImsb7tVz+AkXkagiBpxEqQRlJfhMiuMwXdfW0eYZ9Zh5yk7bGfTOv13qID0CYhy4CqXW5BdhE93i+V7h0TOJ1w9TvgA30wDos6VLKdgBO+YFH99TIkaj3xEZEYHyrnnqaGAapwmlAcKVgTnc57f1lLE5bFvHNrxhqzyWzldrdKsA67rGEzCGypFw7SNEeBUCtP2KVkANXIU46JbICd+Ejy3FymmIqQjgQTEcmJK2fKCa38EXF37PTnpm0vfFIWQsnQCNuIrWyuSTxbF+NtXDfax8pPmR/lZJyz46NgXWEdxZJ7y1heEztVK3QDbM3OBEwlLpHYl7Bj8K4CvgheNeZFzLkIO1DQVcP5PSYlSXUMYJykVvbaWGY6FMuMptkvwP5w+wWRanD/OyL+/znSSjQAG+aTjJMNXd6yvjgCdH4ntPugZve18p7dFdo1P5s+WozqdznjjDw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F650AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F64EAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F64EAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F64FAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F64FAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903703446</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F658AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>74ec924e-7a35-4902-ae49-d7d17e53f2b2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00081_UVTC_PrimaryEmail_maps_to_single_user_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="4900189d-01ec-455c-9d51-7d05dbb8a4ac"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3c1a950c-5fef-48e2-bdf4-f8a58b5214fd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c2862ce5-2dbb-4689-85eb-40a232284fa9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="e262fae6-95e2-4230-9b09-1673463fe1a5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="4445806e-07d7-40c1-b43a-a2c35236b5dc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="cb26f4ea-cb74-4a8d-9d56-86d651c1f9cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="c3e7cd5d-455e-4626-91ff-55b6b0adeeba"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV+52BWoYpIwY0KSWSBMhpctITcg1paNJRvI149kwMEkZNl9cqndOn36oiPdMBQGptthDBJOIlrZhAFlbm5tKWlC3QgxwlyKQmAux+6w89h3zaruosMWpeLdtZS/dcepIcPQVWtmOard8A0VTZu2atZ0MMyabddsJFwZS8GjjCPKW4qpGzVVr6uGPtJN1zJdo1Ztmo2JUhlDwgS2cKnqyp7UhrWUBeexq2nr9bq6tqpRMtdMXTe018f+EC8gREr7ZpdRHihp7/1x1QcMQYCrOAq1G63kc+Mzd0jmFPE0gX0s/1wsXdMdTfj4jMyvlGIv+B6dRfnyFtGIEowC8oZkfR6BLyK/0gnmUUL4IjybhKFLYBU2WMWGTa8UrUztQqASw4QhlS2QsccawAwSoBgqLwOvpVxd1rV86yhBlM2iJGTl5X/jAzSDIIrBV9khrT21ywE/qVT7BrDrURykjGTwJIc1RhjYvpuAL4eq/ExgRjZ9wsSAbphkpx3TO1nuqnFH5sD4/2nQUXN2IGMUpNAeXeO3awRj/3FLBstR9qtrDX5n63rPsVs5gWPn3FC0drc8GcpiiHY7wOf1+PvqYWkv4+8G8qZOf/bQ6MwXXt0crOwxbMfam/UCXmNCcOOBGmPSWw3RtPs66G/fnIeNPXLuV73mnNRJ/xVGzd86pBTVnhuNJrO60Ps1Gfsp6yF72nsIt3G/24vt7Q828V6e7L80QrtZ88fzFIIJ2QTJfLLNklG2DW5D6AaRufab0F9ee6PedolbRTpH/Mu2w5kfptMlYH5YyjHw7ipd0SXEvxYzaSG+Ostd3ViKD+NAudKWu6R2uKmQO+K7ooe7tdE0jc43y+nWnWan6zTu9Zpl3TuO0dU7tmXUDiKzY3FC8TaiMyJjScndjc3XBHHoMqA+JGoWpULpmPIF4h3iqOLRgTgEEWUwioQ8A2nMs/pbbL0tagaf6UasBzA1jKZSeYr4M31OOjMOSVmTayVNHgAmMQEp3HKumRhsxkUtVihLeWBUM1SlkAppT6TKuqbdrGmMhHEAkqkWRn4aQDVexHllNLb7mirCLLcO7kf5aTub1+m/QwmEj0+kA5O5fAPRRvjkctEPiZxPuHmc8AG+k/pEHixRT54QvGNS/vU+JnI+ihkRGR0oF56nhhKqdppQEcjPCC4GvbiuhYqLc98+tGOFjOqqmmZZmnfAti0tEfCaTFHTTW0IOBXKtB1F/wDVChTtomugIH4SvLCXKaZ8QYcccQjFxFTy5QX3/hCYvPc9MeqbSx8VpZCidBw2/DPbbSDeLJLxl88a7GLpJ8w/xWcdJf57xz7BOooj8hTXPid0LlfyCtiemQscCVgixCtKjsE/A/gseNlYFLngwsVATVMO5/9UpCq1FIRxlFLu3Sm54Vgpc558G4P77vQBJhfj4nVG/v15ppJ8BDCINx0jOb68ZF15BOj8SG33Qc8IbuMrwS2za38wf7Qc1el0xtt/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F699AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F697AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F697AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F698AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F698AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903717699</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F6A1AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e262fae6-95e2-4230-9b09-1673463fe1a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00084_UVTC_PrimaryEmail_maps_to_single_user_status_deleted_Token_Type_ResetPassword_node_role_Retailer_(Negative)_P1_NOT_FOUND" searchProperties="true" id="e91c224e-55f9-4b7b-9691-c033f0e2554b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1c70fd75-7de8-4d67-a6cf-22706156cc62"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="6621806f-9de7-4811-955e-5f421d66c11b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="f5aa653a-c844-46cc-b9f1-c3a781f16925"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="f1d8a8d4-02bb-461b-a895-37c780328aa0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Update_User_Status" id="934e87ad-eeed-47ce-88c2-03d8b75fb72d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8c397a3f-6205-48db-a5f5-1874370c4dd9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZpb+o4FP0rKP0csgENUUGibMMTLS1L++iXkXEu4L7ETmOHpb9+7AApodBhRkJCvrk+99zFx77jKAxsr8E5xIIwWtiEAeVeaq1pSUw9hjjhHkUhcE9gb9R46Ht20fTQYYtW6LVq2t9VsJxbx57pyAZHL5V8V59Zflm3SnbVRbdmxcWWdOU8gR7lAlFR02zTKutmRbfMsWl7jvyVi7eW+aYVXiDmElu6FE1tT2rDa9pSiMgzjPV6XVw7RRYvDNs0LeP3Q3+ElxAirX63yygNFNf3/rjoA4YgwEXMQuPOyPnc+dwbkQVFIolhH8u/FMs0zKohfXxOFjdathf8Hp2zdNlElFGCUUA+karPA4gl8wuNYMFiIpbhxSQsUwHrsME6tkr0RjPy1K4EyjGMOdL5Ell7rCHMIQaKoTAZ9mrazXVdS7eOY0T5nMUhzy//Gx+gKwhYBL7OD2ntqV0PeKZS9TvAXo/iIOFkBY9qWCOEge+7Cfh6qMJTDHOy6RMuB3TDFTvjmN7JcleNFlkAF/+nQUfN2YG8oCCBeoxfu2/gbxbG67ZJTdu579DK81+vJfuhlhI4dk4NWWt3y5OhzIZot8Mv43DC250xN2D8HvUt93MebYcvg9YTMz86LmeDSVCC6Nd2QJgpXFadPk638a/qcObT22ql7NLnyZ9x9PgWDMZl8dyNE2is3/rGevHetbq37qLa6SPLZ+/d5tR+qOAxqczMIZu+oVe7+zB6Hk8+p1u3XJ4Ejy+laX81aOOeJcTq98R9eV43k2mn0h7DovQ8rWXpHPHP2w5nfpTM3gGLw1KNQa9V6MguIfGzmCkL8fV56upFSny4ACq0utqltMNLpNwR35M93K0t17Ya905VErUanept2yw7TrtatTpmo+RY5YPI7FicUGwyOicqlpLc3dj8TBCHHgfqQ6yvWCKVjms/ILaQQIUeHcpDwCiHMZPyHNJN4DsVZ+37SWVprW3MrYAlH1rhkYkBHcSNuYA4L8nlnCQPAZOIgNJtNdZczjUXshQfaJWIwCquUJFCIpU9ViLr2SW3bHASRgEookbI/CSAYrSM0sIYfPdv6wjz1Dpsj9PDdjGt02+HCkgfnygHrnK5B9lFOHO32IdELifsHid8gG8kPlHnSpZTxATvmOQ/fU2JGo9sRGRGB8qZ56khh2qcJpQF8lcEZ3Oe3dZSxOWxrx/a8YGs4kcxWa2StAOlkmPEEt5QKRqmbYwAJ1KYtmP2B6iRoRhX3QIZ8ZPgmT1PMRFLOhJIQCgnppAur7j2R8DVtd+Tk7659k2RCylLJ2AjztmagXyyKMY/vmqwh5WfND/JvzWL/a+OncE6iiPzlLe+IHShVuoG2F6YC8wkLJHaxeJj8HMA54LnjVmRMy5CDtQsEXD5S0GJUk1DGLOEil5LSw3HQpnyFNsIvC+nbzCpFmePM/LvrzOdpCOAQT7pOEnx1R3rqSNAF0diuw96QW/Nn/Q2z67+zfzdclSn0xmv/wM=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F6E2AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F6E0AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F6E0AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F6E1AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F6E1AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903738000</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F6EAAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f5aa653a-c844-46cc-b9f1-c3a781f16925</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00093_UVTC_PrimaryEmail_maps_to_multiple_users_status_active_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="81152834-697b-4a98-b651-1c139e0846a4"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="92a47714-0ff3-4978-bef3-64737c5d2e8d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="7768e17b-24a1-45c3-aaac-6be8beff6333"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="132a7479-ce31-45ad-8bd6-6d50523f9c32"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="51f2000f-2b18-4b9a-a4c2-4063fc5d97fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="d30aa2a4-4062-4ef4-9fe2-8babe7a2582a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="e28667cb-bf2e-4d30-bd3e-7793cb4ee16f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8a470e96-d10c-4054-978d-967779ce160f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPt4x/gLCngCM4SPhhbSFAht8nJHSGtQYkuOJYOTX38lAy6mIZd7X2C0Xu2e3T060pVAUej6XSEgkZSzShaFTPi5tW2kCfM5ElT4DEUgfIn9WXcy9t2q7aPDFqMy6reNv+1mfUmCes0E2/PMWoMsTQSfwUQksHGt1VK/rnIVIoURExIx2TZc26mb9mfTsee263uuX69VW1790agsIBEqtnKp2sYeVCbaxlrK2Les7XZb3XpVnqws17Yd69dkPMNriJDRudpVlCdKOnt/XCWAIQxxFfPIurJKPldE+DO6YkimCexzkXO5bMtuWcqHCLr6ZBR7gYxYwPNlDzHOKEYhfUO6PxOQa04q3XDFEyrX0dkiHFsHNiHDJnZq7JNhlaFdGKiEMBHIFGvk7GNNIYAEGIbK/XTUNj5dNrV86zxBTAQ8iUR5+d/wANtAyGMgpjiUtYd2ecB3OtW5AuyPGA5TQTdwq8kaIwxiP03Al4eq3CUQ0GxMhSJoJjQ66xjeyXLXjT5dgZD/Z0BHw9kFWaAwhc5jdAMj+0dzfB8FzpvTTd82iwZ5/NF7HLRzAMfOuaEY7W55QsqCRLsdLwN8H4cPvP81+/Xw9vLlurHKiPW5nq1vPPhr3pq727h3733BY347fVo9O+78djZ5/nW/ubMDG72tJ8+DsXgNbocPm4Unv+He8wMlb+h+5n1Nb8Rg/HM4eGzySUDt62TZI/z77fQhYQ/biTWf/fQmy9Vi8bM+HC/S3vDF86yb2XV/KbItaTy5xI4HEUDWg6e7xeu+3BP8ZdvhzM/S5RNgeVhqGoz6laGaEpIfi5m2UGIGuasfa/EREpg0OnqX1g4/VXJHia9muFs7TdfpXnutYcNtdoetxsCue96g1XKGdrfmOfWDyOxQnEDscRZQnUtL7o42HwPEkS+AEUjMDU+V0gnjg4h9JFFlxKbqEHAmYM6VPK9s7CwxYbWVIpSHZPyKatmTnRCjcsvld/Y96QYSkrIm10uaPAVMYwpauDWvhSK2kKoXL2iTytCpblCVQaqkPdEq67u1Zt0SNIpD0EitiJM0hGq8jvPOWGL375oIi9w6Hczz03a2rtNvhxYoH0K1g9C1XIMaI7xzudQOhZwvuHlc8CF8NyVUHyzVT5lQvENS/vSbJpofBUdURQfIheepoRTVOi2oSEQ2FBdEL65rpeLq3HcO43hBTvWlmm42aT6BWs2zEhXe0iVatmvNAKdKmV7n/BmYVUSxLroGCuAnyQt7GWIq12wmkYRIMaaSLy+492cg9L0/UlTPLn1UlFKq1knI5Hu2XqjeLBrxh88a7GPtp8x36m/LE/J7Yu/EOsqj6lTXvqRspVf6Cng9wwvMVViqxIsnx8HfC/Be8rKxaHKBRSpCLVMJ579UtCq1DYQxT5kc9Y3ccKyUOU75GoP/2+mPMLkYF68z+u/PM5PmFMCg3nSC5vH1JevrI8BWR2q7T3pGcBsfCW4ZXecP85+Woz6dcrzzDw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F729AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F727AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F727AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F728AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F728AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903757654</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F731AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1821AB39F76BAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1821AB39F76BAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1821AB39F76CAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433903770418</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>132a7479-ce31-45ad-8bd6-6d50523f9c32</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00094_UVTC_PrimaryEmail_maps_to_multiple_users_status_blocked_and_revert_to_previous_status_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="c643c18c-bd94-43a7-aa83-437f38451a4a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="95e241e8-92d8-4715-89ee-028e8157e7dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="65e47b5d-3d44-448c-821a-444407c2460a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="a9ad9f85-3c9b-41b6-914d-b2e4a0c299e4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="d0fe19ca-6f64-4fed-9d0f-42aff63afae4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="3d23e2ec-a6e0-4e48-928a-4c3d6810ffcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="c9de4932-167b-42f1-abd5-b4110cca2995"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="6c1548ac-ff38-450c-92ba-9c3f273bf854"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="4ff22019-5eb1-4171-a763-1eaea7cf1366"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","blocked");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="d565c03c-02bc-45ed-abae-001c2d78bd1b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0VynnsMvLC6gpUESDdzrAkQNKdvEwJWYASWwJLApOvH8mAg0nIMPPk0vXVuecuOtI1h1HoeC3OcSwIo4UkCin3UmvDkDH1GOSEexRGmHsCeeNWv+c5RcuDhy1Gwe80jL8rTjBz3ErFRLOSa5YqjmvCCnLNKsJWtT4tlaulmXLlXGKfcgGpaBiOZZdNq2La1sRyPNf17HqxVC69GIUnHHOFrVyKlrEnlfCGsRBi6QGw2WyKG7fI4jlwLMsGf/q9MVrgCBrN611GaaC4ufdHxQAjHIaoiFgErkHO5zrg3pjMKRQyxvtYwblYFrDqQPkEnMyvjGwvDnw6Y+myDSmjBMGQvENdnz4WCxYUWuGcxUQsorNJ2JYGNnGCTGSX6JUB8tQuBMoxjDk0+QLae6wRnuEYU4QLjyO/YVxd1rV06ySGlM9YHPH88r/xwXSNQ7bEgckPae2pXQ74RaWa1xh5PkWh5GSNB3pYlxBhvu8mRpdDFe5jPCNJj3A1oAnX7MAxvZPlrhodMsdc/J8GHTVnB/IEQ4mb7aFT37bL3ZWIXmB5NRi9T2+Hf6Y/XDZvpASOnVND1trd8mQosyHa7Yjubrc0EMAdMLtfHYsKX0G/n/h+Z8WDNbjr3QD88KNtJdGEuUK8+A66mcik9/QsZeVh5jxw2l13Bn6l+jSVvRoYzX/709fp2/1i4RL5V6ddHbXBzXDefYQVZ957DvAbfOj9nsve5M4WyR18XP2q3SxJZbEISPSw6releC732tK9+0nun+Gv4ejncLDoo3e/kaVzxD9vO5z5sZy+YiQOSz0Gfqdwq7oExfdipi0kMGepq7fU4sMFpsJo6l1aOzyp5I4Enurhbm3XHLt149Zvq7Vu67Ze7Vpl1+3W6/at1Sq5dvkgMjsWJxTbjM6IjqUldzc23xNEkccxDXBsrplUSseNbxA7UMCCT0fqEDDK8YQpebaTtYWEXWfkdRXD9xButvXpW7KNjcKAiSEdxq2ZwHFek8s5TR5hRJYEa+HWc83VYHOharGCaylCu7iGRYqlkvZYq6znlGplwEm0DLFmCiIWyBAXl4tlWhnAd1/HhIin1lF3kp62s3md/juUQPkERDtwncsNVm3EX1wu1iGR8wnXjhM+wLdkQPTBUvUUMUE7JvlfH2Oi5yObEZXRgXLmeWrIoYLThLJAwZqgbNCz61qpuDr3zUM7VtAuropyvZZpB0olF8QKHugUgeWAMUZSKdN2wt4wBRkKuOgayIifBM/seYpSLOhYQIEjNTGFdHnBvT/GXN/7vhr15NJHRS6kKp3AifjK1g7Vm0Uz/vZZgzyk/ZT5Xn02LA4+OvYF1lEclae69gWhc73SV8D2zFwgpmCJEi8WH4N/BfBV8LwxK3LGRaiBmkqBz/8paFVqGBAhJqnwO0ZqOFbKlKfYLrH34fQJJhXj7HVG/v15ZpJ0BBBWbzpOUnx9yXr6CND5kdrug54R3M53gptn1/xk/mw5qtPpjDf/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F78FAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F78DAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F78DAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F78EAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F78EAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903782183</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F797AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1821AB39F7D1AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1821AB39F7D1AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1821AB39F7D2AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433903794919</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a9ad9f85-3c9b-41b6-914d-b2e4a0c299e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00097_UVTC_PrimaryEmail_maps_to_multiple_users_status_deleted_Token_Type_ResetPassword_node_role_Retailer_P1_NOT_FOUND" searchProperties="true" id="74b522ab-2ffb-4cd5-9a53-a654f3ff4c94"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="be3335fc-9214-4262-9cf6-3ed551d885f6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="59ae0f6d-c283-4264-82f7-8ab969480b28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="e531362f-fa6a-4ba4-ac4a-c0c0b1d445a8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="63f8a843-b641-43e6-8215-fa384ec9d99f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="9f68b405-d3e6-4f09-a979-d7c891248cba"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="fbb0cbf9-a944-4d47-8859-55cdb8915ba9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_FirstUser_Status" id="23ae1c76-cedd-4f98-bfe8-d47f36aa867e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid1"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="a6fda2bd-99a6-4fc3-9a97-fcea01688be8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6cde5053-971b-4c7b-8d36-188ceff3e359"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","NOT_FOUND");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0VynnsMt4wiytQRVhSdFgSoDMdXqaEfA1KbNlYMkt//UgGHEwgw8yTS9dX55676Ej3DAW+6TQZg5iTkBa2gU+Zk1rrShJTJ0SMMIeiAJjDsTNpDvqOWdQddNyiFHrtuvK355oAluWqlXKtqpbKRllFGHRVt+eGWZ2Xq16tLFwZS6BHGUeU1xVTN2xVL6uGPtVNx7Ic2yralcpMKbxCzAS2cCnqyoHUltWVJeeRo2mbzaa4sYphvNBMXTe034P+BC8hQErjfp9RGihuHPxx0QUMvo+LOAy0ey3nc+8yZ0IWFPEkhkMs91osXdNrmvBxGVncKdlecHvUC9NlC9GQEox88gfJ+gyAL0O30PQXYUz4MriahKFLYBW2WMVGid4pWp7ajUA5hjFDKlsi44A1Bg9ioBgKv8a9unJ3W9fSrdMYUeaFccDyy//GB+ga/DACV2XHtA7Ubge8UKnGPWCnR7GfMLKGoRzWSOTBDt0EfDtU4TkGj2z7hIkB3TLJTjuld7bcV6NNFsD4/2nQSXP2IK/IT6AxWljajm3671FvNN29lEkVVWdvEz9qVespgVPn1JC1dr88G8psiPY7nkottnjw5iTq23YnmnWGHl+B1p/MtpVB7Jf1lT+ct946P388bl5Cu/b8ZHRnQ7rTbfREfw603/3u45+VPdo9+7vyyHYhGHLzx3IWt6z+0GVv3ngwb78OBq05Gn00yRINPvBDa/ekz0pv2xc+WP5lYb3/zgLtYTTrT1uboFpaeb9qcW3cHzy+rujGGOuzN3swadazdE74523HMz9J5u+A+XEpx6DXLnRFlxD/Xsykhbiql7o6kRQfxoFypSF3Se1wEiF3xHVED/dro2oazQer1q10S81urdLRbcvq1GpGV2+WLMM+isyexRnFVkg9ImNJyd2PzfcEceAwoC7E6jpMhNIx5RvENuKo0KNjcQhCymAaCnk2TGvrJvM40WFDjKhUDsl6ZXjr6rtSGIZ8REdx0+MQ50XZzonyGDCJCEjlloPNxGQzLoqxQuuE+0ZxjYoUEqHtsZRZxyxVbY2RIPJBUtWC0E18KEbLKC2NxvZfUygOS63jzjQ9blcTO/93rIHwcYl0YDKXBxB9hAu3S+mYyPWEq6cJH+GbiUvkyRIF5THBeyb5X59zIgckGxKR0ZFy5nluyKFq5wllgdw1wdmkZ/e1kHFx8BvHdqyQUVwVk/U6STtQKllaLOA1maKmm9oEcCKkaTcNP4BqGYp20z2QET8LntnzFBO+pBOOOARiYgrp8oaLfwJMXvw9MevbW18VuZCidBy2/JKt5YtHi2T87bsGO1j6CfOz+GzC2P3s2AWskzgiT3Hvc0IXciXvgN2VucChgCVCvcL4FPwSwKXgeWNW5IwLFwM1Tzhc/1OQslRXEMZhQnmvraSGU6lMefJdBM6n0xeYVI2z5xn59/eZStIRwCAedYyk+PKWdeQRoIsTuT0EvaK41neKm2fX+GL+ajmp0/mMN/4B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F7F5AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F7F3AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F7F3AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F7F4AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F7F4AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903816250</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F7FDAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1821AB39F837AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1821AB39F837AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1821AB39F838AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433903829112</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>NOT_FOUND</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e531362f-fa6a-4ba4-ac4a-c0c0b1d445a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00099_UVTC_PrimaryEmail_maps_to_multiple_users_with_atleast_one_status_deleted_Token_Type_ResetPassword_node_role_Retailer_P1_SUCCESS" searchProperties="true" id="67206761-34f4-4378-89f2-88d4f6d98624"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="7cb1d9d3-5ada-46ff-8927-1f8ca2b43c87"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="f57f1d5d-baf9-4b89-a7de-76532ad10ae4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="0b83b7e5-a456-47b2-a396-fec17be95280"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="3c908871-8258-4ebb-b391-92a56dff9910"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Set_Data_for_SecondUserCreate" id="96cd3899-d6f4-478f-8665-987497f8c0f3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
</script></con:config></con:testStep><con:testStep type="groovy" name="Create_SecondUser" id="53cffa30-b0dc-4dc9-a5b6-5bb69bb3143f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("User_Create_API");

myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("User_Create_API").getTestCaseByName("User_Create_STS_Policies");
tC.setPropertyValue("NODE_USER_ID2",myTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL2",myTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("user_oid2",myTC.getPropertyValue("user_oid"));
tC.setPropertyValue("UserName2",myTC.getPropertyValue("UserName"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Update_SecondUser_Status" id="99fc23bf-e410-4ae1-9880-fa26db705fbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("Update_UserStatus")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("User_OID",tC.getPropertyValue("user_oid2"));
myTC.setPropertyValue("Status","deleted");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="64934820-ce98-4989-80a5-9681ea96fa21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCAlternateEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZXwP4ApUEUgmTG4TYJLJvmzJchsUjORYMjb5+pUMeDATsuw+udRudZ/uPjrSOUfL2Pb7nEMqCKONYhlT7pfWrpal1GeIE+5TtATuC+xP+ne3vt00fbTbojVGw672t4uDKALP0R0zdHTXsSK9cxZ2dGSHOISzwAEXSVfOMxhRLhAVXc02LU83z3TLnJq277i+3W6ajv2X1niClMvY0qVpaltQBe9qcyES3zDyPG/mTpOlM8M2Tcv4dXc7wXNYIq13vqmoTJT2tv64GQKGOMZNzJbGuVHzOQ+5PyEzikSWwjZXeCyXaZgdQ/qEnMy+aNVeCEc0YuVygCijBKOYvCPVnzsQcxY2+vGMpUTMl0eLsEwVWIcC69hy6RfNqEM7MVANYcqRzufI2sYaQwQpUAyNn+NRV/ty2tTKrdMUUR6xdMnry/+GB+gKYpZAqPNdWVtopwf8oFO9c8D+iOI442QF94qsCcLAt9MEfHqoxo8UIlLcEi4JWnCFztiHd7DcdGNIZsDF/xnQ3nA2QZ5QnEEvuSHT58ktvr3L1u1r5gRLfGs8dgZD9rNbAth3Lg3VaDfLA1JWJNrsuOaL19VT/PA4YNn1YMHD+/ZT/lJ87Qxdp3hqP45ei+Ilh5YR5d6FeWM8iFZ8fRF8veifvbR/irPx+vu3/GsYke8t1rmZO/nN8737EBiDb+tgtOZjlAxsZzZ+Hax+PLokWVBSPDqtl2cSL4LV86zVWeReMnTzkecNLs1fhpdNQnFfTC8XD0k0sQIX8eDFSqLOvN2tytnDX7ftzvwkC14Bi91S0WA0bFzJKSHxuZgpCwn1qHT1EyU+XAAVWk/tUtrhZ1LuSOjLGW7WVtu2+hdO56rttftXndal6TnOZadjXZl9eY68nchsUBxAHDAaEZVLSe6GNp8DxEufAw0h1Vcsk0rHtU8iDpFAjREdy0PAKIcpk/JsRUmQBTHNZeMza+a03r3szY5f2+9a456JB/qQ9iMBaV2UvZoojwGThIBSbkVsLpnNhWzGG1plIraaK9SkkEltT5XM+rbb9gxOlkkMCqqxZGEWQzOZJ2VrDL752jrCvLSOL6flcTta2OG/XQ+kT0iUA1e1XICcI3xwu1i7Qo4X3N4veBe+n4VEnSzZUJESvEFS//WbJ4ogFUlkRTvIleehoRbVOCyoShSuCK6YXt3XUsblwe/txvGGrOZbM1utsnICrusYqQxvqBIN0zYmgDMpTespWwA1qijGSfdABfwgeWWvQ8zEnE4EErCUjGmUyxMu/glwdfGPJNeLU18VtZSydQIK8ZFtEMtHi0L86bsG+1j5SfMP+clZGv6e2Aex9vLIOuW9LwidqZW6A9ZHeIGZDEukerF0P/hHAT5KXjdWTa6wCEmoIBNw/E9DyVJXQxizjIrRUCsN+1JZ4hTrBPzfTn+EKdW4ep6Rf3+f6aSkAAb5qOOkjK9uWV8dATrbk9tt0iOK2/pMcevoen+Y/7Ts9emQ471/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>1821AB39F859AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>1821AB39F857AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:1821AB39F857AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>1821AB39F858AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:1821AB39F858AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20150610_1433903850754</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>1821AB39F861AF97E0533E991F0A4315</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>NODE_USER_ID2</con:name><con:value>1821AB39F89BAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL2</con:name><con:value>urn:dece:userid:org:dece:1821AB39F89BAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>user_oid2</con:name><con:value>1821AB39F89CAF97E0533E991F0A4315</con:value></con:property><con:property><con:name>UserName2</con:name><con:value>UVTC_PrimaryEmail_User20150610_1433903863517</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0b83b7e5-a456-47b2-a396-fec17be95280</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property></con:properties><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate_PERM" id="312cae1f-ba26-4be6-aa29-d952b8292fca"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="76abf2d5-b7e1-4cf1-ba3e-72e98ceeb5bb"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="8a29cc81-d1a9-4034-bde8-1598c4639d5a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="10e849d4-77d8-4436-9c50-50b7424e9b43"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="27ff6288-cdab-4dad-98c5-7409bfd13b25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE" id="1289f595-4ab9-4a6f-84b4-dd6b22b6fd9a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="151f591a-e568-4449-b64e-8f4cc4f04b49"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6+Ck0AIRAUpFKqmLW0X2H7clyvjDODdxAmxw0d//bVDkwKlvd0rISFPxjNnZo6PfcZxHNmezzlkgiZMC/od/R/LslrYnRIDO65tNFy3YbScZt2YOtNpw545ruvMdC3gPIeAcYGZ6Oi2aTUMs2VY7YnV9Oy6Z9o11zL/1rUHyLgMLV1qpq5t4ohxr0jb0fOMeQnmlHsMx8A9QbyxP7zxpKeHS0x692yHskiYdRdCpB5CpBYCgSgiNZLE6Awd+JyF3BvTOcMiz+A1Z8g7+uve9XpdW9drSTZHtmmayGwj6RNyOv+ud7+VmyEM2CzZrc8xSxglOKIvWIEaglgkoeZH8ySjYhF/ENpClqlCG7AhBrEa7LuO3hIU6L4Y6QBkxrHBF9gqg41gBhkwAtrPUdDRv39tgru9kwwzPkuymB+t/wwSsBVESQqhwcvKSnRfj3iiXd0zIF7ASJRzuoJbRZMUE+DafQYzurmhXJIv5Foxfm3D5Y+WLAPyJ2M5Q/tYJXR0ojt9Ogcu/s/M9ue1i/KAoxy6Tfb0+yG6/LlkbJXkvR/b4Hl43x+h8SbpFBD2nXegqnG/ro/JWnHrdZMY960oDYbRfCLqL4+s3+pfhrDNnkwrbQ+28+uXFdRz/9l02vmogX6H1sNs+niJwbm64v5q8cO2WmKxXi1uYfnN3QYXi7bbE+HjdXqRZM0es7ak+fzX7bXfHA79MA/4T3v6+Czmtu9f1k3IHvwYIRQ/mdHQv9r6L1ej3nh4ObEH325bsdW7nzL0y3TvlukogOfOW037NRwaS0kY59NfQES5VPQI+ppEFWPxubwoCw2NWeHqpUqjuAAm9K7apaTFy6UA0dCTw9ytTfNi0Pb93sV527daLWdgOnXTbbetC9NvDZqDUoN2KI4gnidsRlUupbI7/nwOkMQeBxZCZkhakAVw/ZOIfSywFrCRPBwJ4zBJpIq/UNeBHE+d3IqstrtcYBqnKxLaunabiDt2l/kzAdmhdLcPpHsEhKYUlL4rgnPJcC5kL5Z4lYvIqq1wjUEub4BMibBnN1oO4jJLBAopipMwj6CWLtKiM4jv/m0DE15YR4NJcfA+rOv4W9kC6RNS5cBVLT2QY4R3d5DtOWUhHxYsnfYKLsP7eUjV+ZL9FBklOySHn95oovhRcURWVEKuPI8NB1HRcUFVonBFSUX06oaWAi+Pf7ccxxLXlrV8tcqLAbhK2jIZHkmFs9AYSC71aTtJfgNDVQj0peuhQn2UubIf4svFgo0FFhBLumjF8gtvgzFw9TYIJM83X314HKSUfROwEads55F8QijEn74yiEeUnzTfy791koVv4zoRay+PrFM+CARlc7VSF8H2A1KQRIalUrmSbD/4qQCnkh8aqyZXWIRk0zQX8PEXTUlSR8eEJDkTQV8vDPsyWeAU2xS8N6d3YQopfr1bN/zDu/VpeDOWghVjvfKl/+1s0IIuBHR1hRdYOvpGPhVlcjbfk+VXgCeU+Xxguv2GOWgUyuzslPmi3vCrBh5U0n1nfm/Z6+nxeej+Cw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AACE07E40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AACE07D40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AACE07D40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AABFC9A1885E05307991F0A8E6E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AABFC9A1885E05307991F0A8E6E</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465381846</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AABFC9B1885E05307991F0A8E6E</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>10e849d4-77d8-4436-9c50-50b7424e9b43</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>151f591a-e568-4449-b64e-8f4cc4f04b49</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="3ce180dd-b3ac-45d4-bdd0-cb3f5d8dd76c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="ebdf3234-3ea5-46a5-875a-11c44d2c9d16"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="67b9b666-5eb2-47e5-ab2e-c08f37c10318"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1bfe6b15-b013-46b3-a908-753f5471b1ce"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="bdff0ebb-bff2-445a-b650-18e1e8b6f8c4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1VIAuEWFaSUi5bd0lLoZfe8HBlnALeJHWwn0P76tUOTAr2c7pGQkCfjmW9mPn/2mUBxVPUDIYBLwqgx6nfMf93Qa2MvbFneHJqWt6hVrXmzhi20WLQa9abjNry2aYyESGFEhURUdsyq43qW07Lc9o3b8Ks136lXalXnH9O4Ay5UaOVScUxjG0dU+Hnajply6jMkiPApikH4EvuzYHzhK08fFZjM7tkOZZ6Qd1dSJr5t40oIGKIIVzCL7TP7wOcsFP6MLCmSKYeXnKHomC97N5tNZVOrML60q47j2E7bVj6hIMsTs/ut2AzhiC7Ybt1DlFGCUUSekQY1BrlioRFES8aJXMUfhHZt19GhLdhiC7sePTHt1wQ5ui9GOgDJBbLECrlFsCksgAPFYNxORx3z5GsT3O294YiKBeOxOFr/HSSgGUQsgdASRWUFuq9HfKdd3TPA/ojiKBUkg0tNkwRhEMaEw4JsL4hQ5AuFkY/f2Ar1IwXLAP/NWM7sfawKuv1Od/pkCUL+n5ntz2sX5Q5FKXRv7jfDMTQnkbe4vred3/Z4MA9+nf7sJbiTQ9h33oEqx/2yPiZrya2XTQ/Ok9O7Sgdcnq7pJpjd35IePr0dNs6brcdL8ty4v23eUvx9/v16Nlk/4FYvbsfirlYbnwpeXTG5WF3MxXnvzrF/fOODy2V2nUaDq+e0aW/7A4ySx1kvY5dRQJu/7543E9QLl7NTL5yPL6+nT8N6/eKnM/8xXdc2jdFERhMk7zYXm6Q+/cb6t9OFez3LqmnmzjGP753Oa037NRwaC0mYpfMHwLJYanqM+sZQzQvJz+VFW0hoLXJXP9EaJSRQaXb1Li0tfqoEiIS+GuZu7TjDQTsYBk0vOPecYX/g1GtOvd12h04QtPqtQoN2KI4g9hhdEJ1Lq+yOP58DxLEvgIbArYyleAXC/CRiH0lkjOhUHQ5GBdwwpeIZiHXYYt5Dq9Vwoy2HTQwr1nhqmMYlk1f0igcLCfxQutsH0j0FTBICWt81wYViuJCqF2uUpTJyKxmqUEjVDcC1CPtVr1W3BYmTCDRSO2ZhGkElWSV5Z2yx+69aCIvcSgROGJcocvPz92F5x9+KTiifkGgHoUs6BzVNeHMVVf16Uc+HdSunvbqL8EEaEn3MVFslJ3iH5PDTK1s0TUqqvBZWIC83HBsOgtvHdZX5wozgkvblfa3kXolBtxjOGlXWlTTL0nwcTS10XIW3ld659gxwqtTq6YY9ArXLEPaXLosS9VHm0n6IL5UrOpNIQqzIY+TLL7wUZiD0S2GkWL/96jPkIKXqm4StfM/Wi9SDQiP+9M2Bfaz9lHmi/jaMh6/jeifWXh5Vp3oeSEKXeqWvhacPuIGZCkuUjjG+H/y9AO8lPzSWTS6xSMWmeSrh4y+GFqiOiTBmKZWjvpkb9kUzxymfEvBfnd6EyYX55abdig9v2l/ji5mSrxiZpS/5b2eL5HTBYOoLPcfSMbfq4aiS0+WeSL8AfKvTQW/gtJROD7x9nR7WvKBs4EEl3Tfmt5a9nh6fh+4f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AACE08C40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AACE08B40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AACE08B40E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFA74AB40FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFA74AB40FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465384668</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFA74AC40FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="26e704e3-7163-43a2-bc58-d522ea7b7d2c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d21c6662-66ed-4f18-baaf-1c63b290305d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="9912a826-bf35-4e6e-aff8-e7aed5f63d88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="426b0322-522b-4178-9231-2582ead1390b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="53ebff17-b40a-437d-aecc-151efa406fdf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx6sQJyR8RICUFrqbbQsUaFX6cuU6DrhNHIidkO6vXzuQFCjt7V4JCXkynjkzc3zsDoNRaDouYzjhJKaK1++q/waNlgUabVt7Nm2gWVbT11oQWVoL2M1ny4Q+sNuq4jGWYo8yDinvqiYwLA20NKM9MxqOWXdAs9Y0zCdVecAJE6GFSw2oSh6FlDlF2q6aJtSJISPMoTDCzOHImbq3N47wdGCJSe11tiiLhElvyfnK0XVU8zHCYYhqKI70jn7g0/GZMyULCnma4F1On3XV3d7NZlPb1GtxstBNAIAO2rrw8RlZnKu9s3Iz9j0axNv1JaQxJQiG5DeUoG4xX8a+4oaLOCF8GX0S2tANIENrOEcaMix6rurvCQp034x0ADJhUGNLaJTBJjjACaYIK/cTr6uef2+C272zBFIWxEnEjtZ/BwnTDIfxCvsaKysr0X0/4ol29ToYOR5FYcpIhoeSJiuIMFPGCQ5IfkOYIJ/PlGL8Ss7Ej5Qsw+hvxtLR97EK6PqJ7vTJAjP+f2a2P69tlAcYprj3AAQAaA4a/0TD9Ut/w3NBstbrOPvtdQsI+85bUNW4d+tjslbc2m0K2nP+dPdj6V2D0eT1afzzYTHYrH/gYVpPrUc3nD/evYa/zGmYP2xC23Ov39rRI5/4prUYPdbHb/3cnNub62sXNy/ODLCYh5jUbxu3MRomug4GYAjsixdzmAU3c3ucDNzxr9HdXf82t2zzbpYF7evW1fJpPrn8yV7cHCz7lwGMV43Z05k3SrKYjNY3E/8eWPPMxPfd95r2azg0lpIwTZ9fMOLlUtLD6ytXYl6Qfy0v0kJ8LShcnZXUKMYx5WpP7pLS4qRCgIjviGFu1wBcDdque3F1eQGMVsseALsOmu22cQXc1qAxKDVoi+II4mVMAyJzSZXd8udrgChyGKY+TrQsTtESM/WLiH3IoeLRiTgcMWV4FgsVf7Hf4DN59e2XILORv1q0eNPiK6oqw5iP6ChxA46TQ+VuHyj3BCOyIljKu+Q3EwRnXLRiDbOUh0YtgzWKU3EBJFKDHdNq2Toj0SrEEqgexX4a4tpquSoao7Ptv6lBxArrZDArzt2nZR1/KzsgfHwiHZis5QKLKeIPV5Dp2GUhnxYsnPYKLsO7qU/k8RLt5AlBWySHn95ZIulRUURUVEKuPI8NB1H144KqRH5GUMXz6oIW+i5Of68cxxrW1rU0y9JiAE2pbIkIrwuBM/QpRqmQp7dZ/IqpXoXQv3U7VKiPMlf2Q3wpX9IphxxHgi5KsfzG02CKmXwaeILm+XffHQcpRd84zvkp22UoXhAS8ZePDOQg6SfMY/G3iRP/fVwnYu3lEXWK9wAndCFX8h54+4QUKBZhiRCuONkPfirAqeSHxqrJFRYu2PSccvz5F0UqUleFCMUp5V5fLQz7Klng5G8r7Lw7fQhTKPHuas3Zp1fr4+3NVOhVBNXKl/y3s0YKuiCsyhu8wNJVc/FSFMnpYk+VdwBPCHPfMusXFhBKLIXZ3gpzu15vVQ08qKT3wfzRstfT4/PQ+wM=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD423C40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD423B40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD423B40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AABFCB01885E05307991F0A8E6E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AABFCB01885E05307991F0A8E6E</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465386928</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AABFCB11885E05307991F0A8E6E</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="e3a3be7a-3423-4c89-b556-bed8349da301"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="899cfb08-a514-4230-a496-12d5ac28ee49"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="49edc228-7989-43a8-96cb-65a7b3dcd00b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1a4e68ae-3548-49bc-85e4-6a6d2b9bbd16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4490f18d-c607-4c8c-b706-7f2dab1ddfa1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF8IlUUFKuZR06TW9bPtyZBwD3iY22A6E/fXHDk0KlPZ0j4SEPBnPfDPz+bNPOEgTxw84R0xgSrSw39H/sRvtdsuymobl1T3DtaYTo92Y2EbsTNqtpt1w4rqrayHnGQoJF4CIju5YtmtYbcP27uym79R926o1Wq1nXXtAjMvQ0qVm6VqeJoT7RdqOnjHiU8Ax9wlIEfcF9KPgYuxLTx+UmPTuyRZlkZB150IsfNOEtRhBlCSwBmlqnph7Picx9yM8I0BkDL3mjHlHf927Xq9r63qNspnpWJZlWp4pfWKOZ9/17rdyM4pDMqXbdQ8QSjAECf4DFKgLJOY01oJkRhkW8/SD0LZpWyq0gXJoQNsl33XzLUGB7ouR9kAyDgw+B3YZ7BZNEUMEIu3+Nuzo3782we3eOwYIn1KW8oP130FCZIUSukCxwcvKSnRfj3ikXd0TBP2QwCTjeIUuFU0WACKuXTM0xfkYc0m+mGvF+LWcyx8uWYbg34zlxNzFKqGbR7rTxzPExf+Z2e68tlEeQJKh7sqaBssGag2d4XAc3zxZk/XYEc3e82W7U0DYdd6Cqsb9uj4ka8Wt101BchskccLP84HjXE/yl9bTuB2MoskfELH7Cd6cP7iPj/AsXrqDJyZG42dwM3qMRj+S+DoerMLz5tPd/WQThLd/+t8uXbC6Wpw+PUf9371fbu/CvSHhAGxOcZbCyLmfzaP+6CLBYJCCgNNgeRfcNza52f8xOn9ceRTQs2SKzpqpA9rf5qOr4c+H9c98ngcJTuvODe+81bRbw76xlIQom/xGUJRLRY+wrw3lvID4XF6UBcfGtHD1F0qjuEBE6F21S0mLn0kBwrEvh7ldW9Zw4J06nuf2bbsd9AZWo261PM8eWoElz1upQVsUBxB7lEyxyqVUdsufzwHC1OeIxIgZK5rBOeL6JxH7QAAtJLfycFDC0R1VKi4Vi3kv9ZlgMbMFWSY48WZ00Wzo2iUVV+SKBVOB2L52e3vafYsgXmCkBF4xnEuKcyGbsQSrTCR2bQVqBGXyCmBKhX3HbTdMjtNFghRUM6VxlqDaYr4oWmPy7b9jAMgLa38cRNfF2fuwtMNvZRekT4yVA1fVnCI5SXTkGrLKUj4s2XF2Sy7DB1mM1RGTLRUMwy2S/U9vTFEUqWhS1FSCrnwPDXtxzcOSqlTxCsOK7dU1LVVeakC3HMkS1Ja1bLXKiiG0lL4xGd6UMmebEYKZFKnNHX1BxKxCmF+6IyrUB5kr+z6+TMxJJIBAqaSMViy/8ECIEFcPhFCSPf/q62MvpeybQLk4Zusl8h2hEH/61IA+VH7SfC3/1pTFb+M6Emsnj6xTvgoEJjO1UrfB5gNaQCrDYilflO0GPxbgWPJ9Y9XkCouQbJpkAn38RVO61NEBhDQjIuzrhWFXKwucYrNA/pvTuzCFHr9esDn/8IL9dTGOpGqlQK988X87G7igC0S6uscLLB09l+9FmZzMdrT5FeA7eQ6Cvuu4gWsNmoU8N7by7NXr7aqBe5V035nfW3Z6engeuv8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD424B40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD424A40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD424A40E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B2994D118ACE05307991F0A0887</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B2994D118ACE05307991F0A0887</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465389588</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B2994D218ACE05307991F0A0887</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="66947913-a34e-4638-bccd-621dc2caa552"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="e63d9aa0-d1b7-49e1-adaf-da691d528dff"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="3030e466-d7fc-46bf-b8e6-6aebdc64b226"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="cb777fcd-b15b-4d1b-94dc-1b5221d76122"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="085f8c6d-9e51-46d9-b87a-b3889357855b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I4FH6fXxFlHquQOFwTFaQUyk400DKEdjp9WRnHBNPETmOHS3/92qFJgdJudyUk5JPj73zn4s++5DCJbdfjHGeCMKr5g67+97wNOu3GHBl2G1hGI7Qtw3EQNJwmcGAIWs2W1dI1n/Mc+5QLSEVXty3QMKyOAZwZaLl23QX1mkR51LV7nHEJLV1qlq5tk5hytwjb1fOMugxywl0KE8xdgdzAG49c6enCkpPeu9yzLAJmvaUQqWuaqBZihOMY1RBLzEvzyOcy5G5AIgpFnuHXmCHv6q97N5tNbVOvsSwybcuyTMsxpU/ISfRd730rN+PQpwu2X/chZZQgGJMXqEiNsViyUPPiiGVELJMPoIEJLAVt4C0yEGjQ77r5FqBg90WkI5IZhwZfQlCCTfECZ5girN1N/a7+/Wsd3O+dZZDyBcsSfrL+b5QwXeOYpTg0eJlZye7riGfK1bvEyPUpinNO1vhGjUkKEebaJMMLsh0RLocv5FrRfm3L5Y+UU4bRf2nLpXnIVVI3z1RnQCLMxf/p2WG/9ij3MM5xrz+/DiLY+f0jr//xn9rrx5fRjPF7f7uJugWFQ+c9qardr+vTYa1m63VTCnb+anK/arbygDd/zmDSn45v5mQ87A/+up9MkgvsrHcXwdD56YjAfgA0blnpcPfw+/Hl5/iCBv3l2B6P7gaz/PHb4zyeRsMkeib+w82v9p/k6mZZ92mY/frjtcEKjDqkf5ctdoDlv+okXN3Ox14dXSV4MZqLC9KZXd3Gd5kzYayRfvPWYdu8jaZjNp0nP34Mb7yn7ltOhzkcG0tJCPL5CiNRLtV4+ANtKPsFxefyoiwkNBaFq5sqjeICU6H31C4lLW4uBYiErmzmfm1Zw2vnygLXDdsBnSvr2mrWrbbjgKHltYANSg3aszih2Gd0QVQspbL7+fmcIEpcjmmIM2PNcrTEXP8EcQAF1Hw6lYeDUY5nTKo42ERRnbViZ/5CtvhpFXbSXSuPV1KEb5i4pbeZtxA4O5Zu50i6pxiRlGCl72rAuZxwLmQtnuE6FzGorWGN4lzeAJkSYddudJomJ0kaY8XUTFiYx7iWLtOiMibf/9sGRLywjkZeMCmO3oeZnX4riyB9QqIcuMrmCstG4jO3kFWm8mHKtn2Ycgnv5SFRJ0xWVGQE7Zkcf3obFDUh1ZQUOZWkK99TwxGueZpSFSpcE1QNe3VLS5GXEtArW/IMa8+1fL3Oiya0lbxlEt6UKgfMAKNcatRuxp4wNSsI80tXRMX6JHJlP+aXiyUNBBQ4kSOjFcsvvA8CzNX7QEoI3n718XEUUtZN4K04Z+vH8hmhGH/60kAuUn7SPJF/G5aFb+06g3UQR+YpHwWC0Eit1GWw+2AsEJOwRKoXyw7BzwGcC35srIpccRFymua5wB9/0ZQsdXWIEMup8Ad6YTiUyoKn2KXYfXN6B1PI8ev9uuUf3q8P41EgRSuBeuVL/t3ZIMW4IKyra7zg0tW38rkog9PoQJpfCb5TZ8/rX1tep2FdNwp1bu7VeVhveFUBjzLpvTO/txzU9PQ89P4B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AACE0A940E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AACE0A840E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AACE0A840E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B01E42918B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B01E42918B0E05307991F0A6121</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465392418</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B01E42A18B0E05307991F0A6121</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="3350732a-c7ae-4129-b15d-a8649497cf3a"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b99ab450-6b34-48f5-9ef3-76f477408532"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="5416febd-40a3-4420-be05-dcc67cf3cb25"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c97a5c6f-46cb-4a70-8e3a-c893fbe19f20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="1f1a16c1-d9f7-4f59-8ade-b8efa2b97fbd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSxyrku5AIkCilt2H7tUC73b6sXGcCbhMnxA6F/vq1A0mB0m7vSkjIk/HMmZnjY7cZSmLL7zEGOScpVYLzjvoPinAL0LOhNVu2qzk4dLSW1XQ1BJEHbjNqeZanKgFjBQSUcUR5R7UM09GMlmZ6E/PUt2zfdBstw3xSlQfImQgtXBqGqiyTmDK/TNtRi5z6KWKE+RQlwHyO/XHv+soXnj6qMKnd9hplmTDvzjjPfF3HjRAwxDFu4DTR2/qOTztk/phMKeJFDpucIeuom71vb2+NN7uR5lPdMgxDNzxd+ISMTI/V7lG1GcKARul63Uc0pQSjmLwjCeoa+CwNlV48TXPCZ8kXoU3dNGRoDZZYw6ZDj1X9I0GJ7oeRdkDmDGlshswq2AgiyIFiUO5HQUc9/tkE13snOaIsSvOE7a1/DxLQBcRpBqHGqsoqdD+PeKBd3TZgP6A4LhhZwI2kSYYwMOUuh4gsrwgT5AuZUo5fWTLxIxXLAP/OWNr6NlYBXT/QnXMyBcb/z8y257WO8oDiArpBQE4e70YGvm/Z9/1LIPNVduaiW+N02ikhbDuvQdXj3qz3yVpza7NpNmDezH26PPkVm8X9yXuP5bev02dn1B9HqP/wMEjeo4n52E9Y9KeuM/cPEpgXq1/3wRNjzsq8dezwxbJHaLhozY7e8PAyGuK7iXW9tN1VAXe3Vy9nj9TN4r/DR5Ra5vPgr8HLfRN7pMDDa3s1dm/oEDXnBhnemWR4skrS6/xqsZhPjpzRyg6jm9bl+8mTNT/xgszpfNS0XcOusZKEcfH8AphXS0mP4Fy5EPNC/Ht5kRYSalHp6mdSoxgHytWu3CWlxS+EAJHQF8Ncrw3jYuD1LgaObZpmqzcYGK5tND3PvDB6Lds7qzRojWIPYj+lEZG5pMqu+fM9QJz4DGgIubZICzwDpn4T8RxxpAR0JA5HShlMUqHi7wChuXz1AL9YbjOLTXPZPF3EharcpPyW3ua9iEO+q9zejnKPAJOMgJR3yW8mCM64aMUcLQoem40FalAoxAWQSw32Lafl6owkWQwSqJ6kYRFDI5tlZWN0tv63NIRZae31+4PxuDx6X1a2/61qgvAJiXRgspwzEIOEA7eQUdXyZc2WtV1zFb5XhESeMNFRnhO8RrL76YMokiE1S9ZFVahr533DTmB9v6Y6V7gguGZ7fU0LlRca0K2GMkeNeaNYLIpyDE2pb7kIrwuZM/Ux4EKI1GqSvgLV6xD6j+6IGvVe5tq+i6/gMzrmiEMiSKOUyx88EMbA5AMhEGRf/vT1sZNS9I3Dkh+y9WPxjpCIv31qYB9LP2G+E39vaR5+jOtArK08ok7xKuCETuVK3garL3iBUxGWCPlK8+3ghwIcSr5rrJtcY+GCTc8Fh6+/KFKXOirCOC0oD87V0rCtlSVOvsrA/3D6FKbU480Fu2RfXrCP11djoVoJUmtf8t/OGinpgkGV93iJpaMuxXtRJKfTLW3eAPwsz73+wDhrOsbAKeXZXcvzhe306gbuVNL9ZP5s2erp/nno/gs=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AACE0B840E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AACE0B740E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AACE0B740E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFE431118AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFE431118AEE05307991F0A839B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465395250</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFE431218AEE05307991F0A839B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="6b43d5b0-3ea8-4fee-ae09-1d3b8bba2639"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="47b87513-e78e-4fc4-b636-7d7b7e98e768"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ec3a8f5e-b1d5-4d21-a0d7-e71e08f388f7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="3ac88105-f221-4da1-9cdb-2ff5a15608a1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="a051b9cc-1791-4538-ba4d-d2cd2cbfda28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH69CnA8oiQoS5WOXlrZsgXbVlyvjTIJ3g0NjJ9D++rUDSYHS3u6VkJAn45kzM8fHPud4Gdt+h3NIBU2YNuy19H/rYQM5qAkGAGoY7pzYBgYXGRDOw2bozRuoSXRtyHkGQ8YFZqKl28hyDdQ0LG9qNXzb8a1mDdn2o67dQ8plaOlSQ7q2WcaM+0Xalp6lzE8wp9xneAncF8SfdK5HvvT0cYlJb59vURYJ0/ZCiJVvmqQWAIE4JjWSLM1z88DnPOD+hEYMiyyFXc6At/Td3vV6XVs7tSSNTBshZCLPlD4Bp9FXvf2l3AzBkIXJdt3FLGGU4Ji+YAXqGsQiCbROHCUpFYvlO6Et00IqtAEbYhDLZV918zVBge6TkQ5AphwbfIGtMtgdhJACI6DN7oYt/evnJrjdO00x42GSLvnR+u8gAcshTlYQGLysrET3+Ygn2tU+B+IPGYkzTnO4UTRZYQJcG6cQ0s2Ickm+gGvF+LUNlz9asgzI34zl3NzHKqGbJ7rToxFw8X9mtj+vbZR7HGfQfkim5Mp5GX9DTbZml8m80/3Zs5wn8+lHq4Cw77wFVY17tz4ma8Wt3abZc2TlL52m7UWdwdn4hrr12GmEzvPGWTUfRg3c4z0zf2wurm42AztaR48j83b6MPDWud2fiZfrK3ZDvNnVPW58/8Im7rfZ79HEM1+E24XF0LqMxtez8dSzZhbl9D76se4ObsPsYezak8uLh16/X2fOtTX/Tk3xiPOG9/0MP+XTR3H/hbCwh3/c47vRP8i+ukom1u/Wa037NRwaS0mYZPNfQES5VPQY9rSBnBcWH8uLstDACAtXf6U0igtgQm+rXUpa/EwKEA18OcztGqFB3+sMeheuNXDR4KKP6g6qe541QJ1GE6FSg7YojiB2ExZSlUup7JY/HwMkS58DCyA18iQjC+D6BxF7WGBtyO7k4UgYh2kiVdwC5pBGPM+Jyz1Lzhuf/Ypx3c6ldt8k4pbdpp1QQHqo3d6Bdt8BoSsKSuAVw7mkOBeyGU84z0Rs1XJcY5DJKyBVKuzbbrNucrpcxaCgmsskyGKorRarojUm3/5LMSK8sBZ9Jbw4fe8Wd/yt7IP0Cahy4KqeC5CzhBMXESqLebdo294vugzfyQKqDplsqkgp2SI5/PTKFUWSiii7qkrYlfex4SCyeVxUlSzIKakYX13VUumlDrTLsTzh2lMty/OsGMSZ0rhUhjel1FnmBEgmhep5mvwGZlYhzE/dExXqo8yV/RBfJhZsIrCApaSNViw/8UiYAFePhKEk/OazL5CDlLJvAjbilK0by7eEQvzhc4P4RPlJ81j+rZM0eB3XiVh7eWSd8mUgKIvUSt0Iz+8QgyQyLJUSlqT7wU8FOJX80Fg1ucIiJJvmmYD3v2hKm1o6JiTJmBj29MKwr5cFTvG8Av/V6U2YQpN3l+yGv3vJ/rweTaRyLbFe+dL/djZoQRcCurrLCywtfSPfjDI5i/b0eQfwrUR3un3UdVzUd/cleuC4naqBB5W035jfWvZ6enwe2n8A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AACE0C640E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AACE0C340E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AACE0C340E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFDB41F40FBE05305991F0A6800</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFDB41F40FBE05305991F0A6800</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465397396</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFDB42240FBE05305991F0A6800</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="738508d0-b97e-4fe8-9bca-699f62631528"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="1102f0a8-891d-4491-9c5d-0b6dfdd7fbda"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="1f0a4d94-677b-4d15-b134-7024673a058e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="25be75ec-4f31-4fbe-98b9-4693a0376322"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7afd03ef-32ca-4cb3-9007-5f6740eb0542"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVy4RKIAClcukvvBcpp98uRcQZwmzghdiDt1287kBQo7ek+ElLwZDyzZmZl2U2GAt9yXMYg5iSkyqDXUv8tG9NqzWo0tGrZnmqVctXTprb4Z1dsc2pNPaNetVVlwFgCA8o4orylWoZZ0Yy6ZjbGZs2xyo5llGqm+VtVJhAzEVq4lAxVSQOfMidL21KTmDohYoQ5FAXAHI6dkXtz7QhPB+WY1HZzgzJLGLcXnEeOruOSBxh8H5dwGOhNfc+n6TFnROYU8SSGbU6PtdTt3vV6XVqXS2E81y3DMHSjoQsfj5H5qdo+yTeDN6CzcLPuIhpSgpFP3pEEdQN8EXqK68/DmPBF8EVoUzcNGVqDFGvYrNBTVf9IkKH7YaQ9kDFDGlsgMw82hBnEQDEoj8NBSz392QQ3e8cxomwWxgE7WP8dJKAr8MMIPI3lleXofh7xSLvaTcDOgGI/YWQFt5ImEcLAlPsYZiS9JkyQz2NKNn4lZeJHcpYB/puxNPVdrAK6fqQ7PTIHxv/PzHbntYkyQX4C7fVVZ4r6y3f7F1o/PXbZA66fDUZVPOFuK4Ow67wBVYx7uz4ka8Gt7abbnnH1cHlL3WtojC9ZbdF5DybRpU3vL4fLyaiXJPHDWzS+Y/bjVaczTWr116eXh0kKOOx12dKovAYX4J3zVeciOOlY/TTi5zR4vntK2R2eoLMLtIbFRdJ/S5/mZlL+dVuf/uoZKD03fft5/Gze+Pf6ZTVIV+nvPqv49+lzuT7igwt+crks3/xzBi9Dl1iIdW/ptdv6qGm3hn1jLgmjZPoCmOdLSY9BTzkX80L8e3mRFuJps8zViaRGMQ6Uq225S0qLkwgBIp4jhrlZG8Z5v+G63V6tYpj1ut03qmXDbjTMc8N1K24t16ANigOI3ZDOiMwlVXbDn+8B4sBhQD2ItVWY4AUw9ZuIPcSRMqBD8XGElME4FCpuRr6X1hrmrIq9Cn598fzECPxwQVXlNuR39C52Zxzifelu7En3EDCJCEh9lwRnguGMi14s0SrhvllaoRKFRJwAsRRhx6rUqzojQeSDRKoHoZf4UIoWUdYZnW2eloYwy6w4DGPPwSz7+r4s7vBd3gfh4xHpwGRBHRCzhCMHkZlX82XVlrVbdR7eTTwiPzLRVB4TvEGy/+qDK5IkBVHysnLchfuhYS+0flhVkc1bEVxQvjirhdQLIWjng1mi0rKUrFZJNgpbilwswutC60x9BDgRSvU2Dl+B6kUI/UcHRYH6IHNh38eX8AUdccQhEMRRsuUPbgkjYPKWMBCMT396BdlLKfrGIeXHbF1fXCYk4m/vG9jB0k+Y78VjLUb4Ma4jsXbyiDrF1YATOpcreSS8fccMIjQsjHeDHwtwLPm+sWhygYULNk0TDl+/UaQ4tVSEcZhQPuipmWFXMDOc/C0C58PpU5hMlLenbMq+PGWfbq5HQroCpBa+5L+dNZLRBYMqD/MMS0tNxaVRJKfzHYHeAjyi0ZW+XbUrRt/KNLq61eh6r1E0cK+S9ifzZ8tOTw+/h/Yf</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AA4E75940E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AA4E75740E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AA4E75740E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AACD6401887E05307991F0AA4A6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AACD6401887E05307991F0AA4A6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465399607</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AACD6421887E05307991F0AA4A6</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_ValidateEmail_200_OK_P1" searchProperties="true" id="b4b00594-46bb-4292-8e3e-5b53db5d37e6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="63c057c9-0a04-468e-a013-323c1c080c72"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ef6a7f46-cf77-420e-97f1-21d0d5c85a98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="10a11f5f-60d3-484d-bf35-302f9af6ba30"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="84750873-824b-43b6-b71f-e7a89f6d1b62"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfnRK0/LajjCDvCgeFQVU9MudkKYlnjapTQrVX3+TYisgej13hhkm283us7tPnuSEwyi03S7nOBGEUW3Ub+v/eFZtARe+b4BqrWnUHFg3Wr7fMpwmrssPVt0HQNdGnKd4RLmAVLR1G1g1A7QMy5lZDdeuurZdaTTBk67d44TL0NKlIndlUUi5m6dt62lCXQY54S6FEeauQO60e3XpSk8XFpj0zskGZZ4w6SyFiF3TRBUPIxyGqIJYZJ6YOz4nHnenJKBQpAl+z+nxtv6+d71eV9bVCksC0wYAmMAxpY/HSXCkd34Vm7E3oj7brHuQMkoQDMkbVKCusFgyT+uGAUuIWEZfhLZMC6jQBs6QgawaPdLNjwQ5uh9G2gGZcGjwJbSKYBPs4wRThLW7yaitH/1sgpu9swRS7rMk4nvrv4OE6QqHLMaewYvKCnQ/j3igXZ0TjNwRRWHKyQpfK5rEEGGu3STYJ9kl4ZJ8Htfy8WsZlz9SsAyjvxnLibmNVUI3D3SnTwLMxf+Z2fa8NlHuYZjizuC3fzdwurTRHD/cvjXjc2cWzd9C2ry/becQtp03oMpxv6/3yVpy633TLJjd2jZfzAf9Pni+Pp/WL+jF8bD6WDsP6N38Yd5AL+FxhpbziRO0Vl4/WA4fa0Fz0sqsmF49DCzr4Yz1Lq7eaPJr8vJ84UwXc7Ca4jtYm/pnv+H46omjHrqNur1Vhp4ffZPAR3B2is/63bB7/3gzHj8RYNr+PZrfXiQ3lwNhn2XZ+hcdBvR2Go2Hq7NjM773yStrf9S0XcOusZCEabp4xkgUS0WPUV8bynlB8b28KAvxDD93dWOlUVxgKvSO2qWkxU2lABHPlcPcrAEYykENB/1BvVGzQHUA6lVQdxxrCLrV3mmj0KANij2IPUZ9onIpld3w53uAKHI5ph5OjBVL0RJz/ZuIfSigNqITeTgY5XjGpIpbYPGHkXhd9+0lsDCynTcvXAehU9W1aybGdJx0fYGTXe12drR7ghGJCVYCrxjOJcW5kM14gatUhFZlBSsUp/IKSJQKu3atVTc5ieIQK6hmxLw0xJV4GeetMfnm3zYg4rmVcBSzRMAQcSs/gl9WuP+taIb08Yhy4KqoUywHig/cRlZR0ZeV2/Z25UX4buoRddJkZ0VC0AbJ7qcPwiimlGzZLq3AXm7ZN+yEN/crKzN6K4JK7peXttR8qQidYkAvsPJSSVerNB9JU6ldIsObUvQsc4pRKiXrdcb+YGqWIcwf3Rgl6r3MpX0XXyqWdCqgwJEkkJYvf/BcmGKungsjSf3sp2+RnZSybwJn4pCtF8pXhUL87cMDuUj5SfON/FuzxPsY14FYW3lknfKNIAgN1ErdDa9fsAMxGZZIMWPJdvBDAQ4l3zWWTS6xCMmmRSrw1180pVJtHSLEUipGfT03bCtnjlO8xtj9cPoUJlfn9+s2419et/Ory6nUsAjqpS/5b2eD5HRBWFe3eo6lrWfy9SiT02BLqd8BfhLrU2ANarW61ToFuVg3N2LdsOyPI7lTSeeT+bNlq6f756HzLw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9B01E44618B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9B01E44518B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9B01E44518B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFEDE564103E05305991F0A3CB6</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFEDE564103E05305991F0A3CB6</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465402083</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFEDE574103E05305991F0A3CB6</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="6e1bab54-e84d-4ded-afd1-2b9e4e95bf02"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="8176269f-4f8d-4f5d-8bde-5e583bd06cf9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e77e6088-f64e-4eb2-a1e0-e227fa1cbd65"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="b34398e4-dc77-4b82-ba60-5f48f12f7b86"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="43ceef4d-4002-4600-aaa7-29cbd74d8822"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrkCoWoINECWnp62S3QpftSGWcAt4kDvnD79ccOTQqU9nSPhIQ8Gc98M/P5sy84SmIvbHIOTJCUGt1W3XzGaOy4o7FrVSojzwqQF1moch5YlaA69iAqO87YMY0u5xK6lAtERd30HDewnKrl1vpuJfT80AtKFS/4YxqPwLgKrVxKatcqiSkPs7R1UzIapogTHlKUAA8FDnvN25tQeYYox2Q2LrYos4SsMRViFto2LkWAIY5xCaeJfWHv+VxEPOyRCUVCMnjLGfG6+bZ3uVyWln4pZRPbcxzHdmq28ok4mZyajZN8M0RdOk636ytEU0owiskGaVC3IKZpZDTjScqImCafhHZt19GhLVhhC7sBPTXt9wQZum9G2gPJOLL4FLl5sAcYAwOKwRg8dOvm6fcmuN3bZ4jyccoSfrD+O0hAFxCnM4gsnleWo/t+xCPtalwADrsUx5KTBdxpmswQBm78ZDAmqxvCFfkibmTjN1Zc/UjOMsB/M5YLexergm4f6U6LTICL/zOz3XltozyiWEKDD++rnctYvs6v4/m8GZxtotr65n4UTLr1DMKu8xZUMe639SFZC269bXphboxvyt7NoDNq27ezqfv00B+1K1cdisvugm5YL3mhg9+BMzmrvI4GctC6uu759i+5euq8MDHw19zxPPd2xeTJcNOnqwF15mzAr/9c+svfTVmrpEDvk6ez2Uu1dX13Hfcv+9PlPSQD9Oino9V52et4bFgdxr/+CabD9o8fP/zBYzQ8WYwfUW/A75zLTbu8vpuXN6/195p2a9g35pLQk6MXwCJfanp0W0ZHzQuJr+VFW0hkjTPXcKY1igugwmzoXVpaQqkEiEShGuZ27Tiddq3ZaTmtVitwOp22U/adcq3mdpym6/nVXIO2KA4gXqV0THQurbJb/nwNECchBxoBsxapxFPg5hcRW0ggo0sf1OFIKYd+qlTcjYOpZC/YrbizdXWdnnuLTW0+LUvTuEvFPb1nzbEAti/dtT3pfgBMZgS0vmuCc8VwLlQv5mghReyWFqhEQaobgGkRVvuqZZuTZBaDRmonaSRjKM2ms6wzNt/+exbCPLM+tPvPV71nNzt9nxZ3+C3vg/KJiHbguqBLULOEIxeRm1fzadWet1t1Hr4pI6IPmWqqYARvkex/eueKJklBlLysHHfhfmjYC20fVlVkixYEF5Qv7mol9UoIGvlg5qg0L8nFQmajONcix1R4W2mda/cAS6VU6376CtQuQtjfuigK1AeZC/s+PimmtCeQgEQRx8iW33gl9IDrV0JXMX713SfIXkrVNwErccx2FavHhEb85XsDh1j7KfNP9bdMWfQ+riOxdvKoOtXTQBA60St9Jaw/YQZOVViiNCxlu8GPBTiWfN9YNLnAIhSbRlLA518MLU51E2GcSiq6LTMz7ApmhlOsZxC+O30Ik4ny2y274p/essPbm56SrgSZhS/5b2eLZHTBYOrLPMNSN1fq0aiS08mOQL8BPKLR7cD3fbfabGcafb7V6KpfuywauFdJ44P5o2Wnp4fnofEv</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFE433418AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFE433318AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFE433318AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFD0DDD40FFE05305991F0A1238</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFD0DDD40FFE05305991F0A1238</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465404116</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFD0DDE40FFE05305991F0A1238</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="b14ca06b-fbda-4838-8dd9-101193f37ca9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="8e8069e7-9296-4d85-98c8-71c0374787bd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="9840d1eb-d3d4-4edf-b9cf-41d242e1988b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="72867174-faba-4f32-8122-cabefd9b59fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6de05000-951f-4d13-8acd-8f90b5d4245f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1XIhQBJVJBSaM9GQC9AL5uXynUcME2cEDsh9OuPHZoUKPR0HwkJeTKeWTOzvOwLCsLAcFxKUcJwRKR+ry2/wKZl1V9NU9E1ra6YnmErlt/QlNdG0/JBw/J12JSlPqUp6hPKAGFt2dB0U9EsRbenetMx6o7RrJmt1kyWHlFCeWjuUtNkKQ8DQp0ibVtOE+JEgGLqEBAi6jDoTNzR0OGeDigxyZ2LLcoiYdJZMBY7qgprHoIoCGANRqF6oe75XHjUmeA5ASxN0EdOj7blj73r9bq2rteiZK4amqapmq1yH4/i+Znc+VVuRl6f+NF23QUkIhiCAL8DAWqE2CLyJDeYRwlmi/BEaF3VNRFaQTlUoG6SM1n9TFCg+2GkPZAJBQpdAL0MNkY+ShCBSHoY99vy2c8muN07TQChfpSE9GD9d5AQyVAQxchTaFlZie7nEY+0q3OBoNMnMEgpztCNoEkMIKLSXYJ8nA8x5eTzqFSMX8op/+GSZQj+zVgu1F2sHLp6pDs9PEeU/Z+Z7c5rG+URBCnquKY5zt1Z/6nlbkYoelvG63uUrjbq5qFdQNh13oKqxv2xPiRrxa2PTY93yXrhdh97g/v8nCXe/dDWkydGh8/deErsuLfAg+W7bxsBHaysjI5my39+rxuj3mCwzP3zzebmMsT49mmVjAa/kli3lvnD9PJK1fFglanWfK6fX2eTN388IK/GYvi8se/09ePNfGaN03z2rGVYn0Xe87SxYG80noDZBLPZbdxTf9G35viZ5d3N+Hf9/I9pP/1Ztz9r2q1h31hKwiR9XSLIyqWgR78nXfN5Afa9vAgL9hS/cHVioVGUIcLkjtglpMVJuQBhz+HD3K417frKvjRs27w2dcvtXmmNutaybf1aczXLapUatEVxALEbER+LXEJlt/z5HiAMHYqIhxIli1K4QFT+JmIPMCD1yZgfjohQNI24iut1MveXNHxv2LG+rMPM0i2/vgJzWbqJ2C25TVyfoWRfuu096R4jiGOMhL4LglPOcMp4L1YgS1mg1zJQIyjlN0AiRNgxTKuhUhzGARJI1TDy0gDV4kVcdEal239DAZAW1t7Qndy9dCcvenH+TpZ3+K3sBPfxsHCgoqRLxKeJjlxFelnPyboNY7fuMrybelgcM95WlmC4RbL/6ZMtgiYVVT4LK5FXGw4Ne8HVw7qqfF6GYUX76r7mcs/FoFMOZwVqq1qaZWkxjpYQuoSHV7ne6eoEwZSr1WYavSGiViHUH10WFeqDzJV9H1/KFmTCAEMhJ49ULH/wUpggKl4Kfc76/KfPkL2UvG8M5eyYrRvwB4VA/O2bAzpQ+HHzHf9bR4n3Oa4jsXby8Dr584BhMhcrcS1sTnADRjws5joWJbvBjwU4lnzfWDW5wsI4m15Thk5/kYRAtWUAYZQS1u/JhWFXNAucbBMj59PpS5hCmD9u2pyevGmfR8MJl68QyJUv/m9nBRd0gUgWF3qBpS3n/OHIk5P5jkh/APyi067bM42WYWpXzUKnG1udtut1q2rgXiWdL+avlp2eHp6Hzr8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD427340E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD427240E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD427240E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B2994F418ACE05307991F0A0887</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B2994F418ACE05307991F0A0887</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465405974</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B2994F518ACE05307991F0A0887</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="fe56271d-9ac6-463d-a3ee-b28e6029a784"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="9ec7eede-3953-457d-bdfc-7c7d753e4468"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ce6266dd-7b0a-4ca9-8bb2-64ccc36d64fa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="cd15a5dd-8df4-4e2b-b629-88efef46714d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="c218a720-a3f4-46b6-93e0-828d9012c846"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4j4zxBwaMJzADIWlJQkiApk1fOkJesFJbMpYMJL++kokdICQ3vTPMMFqvds/uHh3plKM4cvwu55AKwqg26Lf133ZQb9adpmdg1JgZbr1uG7PAaRi217I9NJ8HNdfVtQHnGQwoF4iKtu5YtmtYnmG3pnbDd2q+41VrVvOXrt1DymVo6VK1dG0TR5T7edq2nqXUZ4gT7lMUA/cF9ifd4bUvPX1UYNI7p1uUecK0EwqR+KaJqwFgiCJcxSw2T809n9OA+xOyoEhkKbzkDHhbf9m7Xq+r61qVpQvTsSzLtFqm9Ak4WZzonS/FZggGdM626zNEGSUYReQZKVBDECELtG60YCkRYfxOaNu0LRXagA02sO3SE918TZCj+2SkPZApRwYPkV0EG8McUqAYtO/jQVs/+dwEt3unKaJ8ztKYH6z/DRLQFUQsgcDgRWUFus9HPNKuzilgf0BxlHGyghtFkwRh4NptCnOyuSZcki/gWj5+bcPljxQsA/wvYzk1d7FK6OaR7vTJArj4PzPbndc2yj2KMugEdc/2MB2fjyqtK+d7peE8hG7vwqLPrJ1D2HXegirH/bI+JGvJrZdNyP1jYp484rUVjkP7cmZOl7ePm7PxOl1sHobryeO4tfrJcDCN+z9+NSx2+f3q6RttrNjVqN5b9jfDhM3jYQJ34eOX5aQyvX8ezStLF53dPfQrP5FXu7kUtVu+nlWYy354XwFfkCUe9b0lsRbfLofZlUvu2dQNbr726vVech/e3dE+tr4AbmS9MGkuKw+zh5u7OZux9mtNuzXsGwtJmGSzR8CiWCp6DPrahZwXEh/Li7KQwJjnrn6iNIoLoELvqF1KWvxMChAJfDnM7dqyLs5b3Ytzt+Y6ttc9P7fqUuFaLfvC6nq1Vq/QoC2KA4hnjM6JyqVUdsufjwHi2OdAA0iNFctwCFz/IGIfCaQN6FgeDkY5TJlSceykfxqYBk7WbNjhJqKOzZqtqCbPxw0TIzpKu3MB6b52t/a0ewyYJASUwCuGc0lxLmQzlmiViciurlCVQiavgFSpsO+4Xt3kJE4iUFDNmAVZBNUkTPLWmHz77xgI89x6fd2d3P4+m/y28wP4bn2H34pWSJ+AKAeuSuqBHCccuYvsop5363ac3bqL8N0sIOqcyb6KlOAtkv1Pr3RRPCm58lpYgbzccGjYC24e1lXmC1YEl7wvL2yp91INOsVwlqi6rGarVZaPo6mULpXhTSl4tjkBnEm5epqyP0DNMoT5qduiRH2QubTv48tESCcCCYglebR8+YmnwgS4eioMJO03n32H7KWUfROwEcdsZ5F8USjEHz46sI+VnzTfyr81S4PXcR2JtZNH1infB4LQhVqpe+HpHW5gJsMSKWQs3Q1+LMCx5PvGssklFiHZNMsEvP9FUwrV1hHGLKNi0Ndzw65q5jjFUwL+q9ObMLkyv1y1G/7uVftzeD2R+hUjvfQl/+1skJwuGHR1o+dY2vpGvhxlcrrYUekXgG+Futt3Hc92rfNGLtT1rVC3ajWvbOBeJZ035reWnZ4enofOXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD428240E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD428140E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD428140E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFE434218AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFE434218AEE05307991F0A839B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465407732</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFE434318AEE05307991F0A839B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_validateEmail_200_OK_P1" searchProperties="true" id="32b4908e-9bc1-4277-93a3-2073ade65cf1"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="53ea8a06-ce90-4263-b3d9-41e976e0c446"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="591e1f83-510c-4be2-a614-690b15c786a7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="7321dead-b396-4b6e-8919-a8313f9e90b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="78801212-1738-4fda-bdbf-7fc22225f672"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQL6AkKkh8dZeWlpZQttuXK68zIW4TJ40doP311w4kBUp7u1dCQp6MZ87MHB/7jKE4stwuY5BxklBlNGir/1gtVAcjwJrVtJtaHZ0GmmOhQAOwnYbfME2jGajKiLEcRpRxRHlbtQyzrhktzXRmZtO1bNc2arbTfFCVOWRMhBYuNUNV1nFEmVukbat5Rt0EMcJcimJgLseu170au8LTRSUmtXO2QVkkzDoh56mr67jmA4YowjWcxPqZvudz5jPXIwuKeJ7BNqfP2up272q1qq3sWpItdMswDN1wdOHjM7L4rna+lZvBH9Eg2az7iCaUYBSRVyRBXQEPE1/pRoskIzyMPwht6qYhQ2uwxho26/S7qr8lKNB9MdIeyIwhjYXILINNIYAMKAblbjpqq9+/NsHN3lmGKAuSLGYH67+DBHQJUZKCr7GyshLd1yMeaVfnDLA7ojjKGVnCtaRJijAw5SaDgKzHhAny+Uwpxq+smfiRkmWA/2YsZ/ouVgFdP9KdAVkA4/9nZrvz2kSZoyiHDn9J4WT840d6Nb8ZUuqPZpfI/j2Jb3usXUDYdd6Aqsa9XR+SteLWdlPm9a5vn6xpev88vh1PlmS64Nd+eNcKWK8RDc6ntJkPA0NknIMT0pPLy9wLMlv/DRzN4OqePPzSjccpRvAK39LX658nfy4foD+ZsRjP73rD6KH7/NS7Y8lJOPCmFwO6eppCbA/jx+kE/27695NZyke/nBt0exmt+9HN9V3kzMdw/+0nuknte8++aDXZxfx8knSf2m817dawbywlwcv/PALm5VLSYzRQzsW8EP9cXqSF+FpQuLqp1CjGgXK1I3dJaXFzIUDEd8UwN2vDOB86PcNq9AdO3TQaQ6NhGw3HMc+Nbt8a9koN2qA4gNhPaEBkLqmyG/58DhDHLgPqQ6YtkxyHwNRPIg4QR8qITsXhSCiDWSJUPCfW45NJV3ESrs1lI2854Sky/NBWleuET+gk6wYcsn3pdvakewqYpASkvkuCM8FwxkUvntEy55FZW6IahVzcAJkUYdeqtxo6I3EagUSqx4mfR1BLw7TojM42/5aGMCus3X5/6PW94vB9WNvht7INwscn0oHJenogRglH7iGrLObDoi1rt+gyfDf3iTxjoqc8I3iDZP/TG1UkRyqebKsqYVfeh4a9yPphUVUyf0lwRfjqphZCL2SgU47lGdWea/lymReDOJUSl4nwulA6U/cA50KnXmbJE1C9CqF/6ZqoUB9kruz7+HIeUo8jDrGgjVIsv/BG8IDJN8JI8H391QfIXkrRNw5rfszWj8RTQiL+9LWBXSz9hPlG/K2SzH8b15FYO3lEneJhwAldyJW8EF4+IAZORFgiFCzJdoMfC3As+b6xanKFhQs2/ck5fPxFkdLUVhHGSU75aKAWhl25LHDKK8l9c3oXppDk7R27Zh/esfdXY08IV4zUypf8t7NGCrpgUOVVXmBpq2vxZBTJ6WJHnrcA3yl0tzuoW45RN4bNXYV2bLtVNXCvks4783vLTk8Pz0PnXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD429140E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD429040E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD429040E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B025CD94105E05305991F0AC2EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B025CD94105E05305991F0AC2EB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465409622</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B025CDA4105E05305991F0AC2EB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="77df00e1-e0f6-47e8-aee3-a9d1f9987638"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="0c402e48-91e4-4e3d-9be4-7371cf9a17a1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="dd759915-43f3-4cbb-bcd9-751134ec6092"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="fc18699a-b4ec-42da-b0a2-878f073709b0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP" id="05c5a441-4889-47f6-a4c1-351d5ed9f3d1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="28c98409-7327-48da-9b13-c8fd3e933914"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxVy4R4BEm2gyt6UtkCvL0euM4A5iQOxA6Ffv+1AUqDQwz4SEvJkPLNmZnnZDYYC37LbjEHESUgV12mq/2DDqptezdIss1zSSrUi0upepax5CIrVilGteeCpistYDC5lHFHeVC3DLGlGTTPrI7NiW0W7aBWqpvmuKs8QMRFauBQMVUkCnzI7TdtU44jaIWKE2RQFwGyO7WH7rmcLTxtlmNRWY4MyTRi1ppzPbV3HBQ8w+D4u4DDQG/qeT8Nj9pBMKOJxBNucHmuq272r1aqwKhbCaKJbhmHoRl0XPh4jk0u1dZFtBs+l43CzvkE0pAQjn3wiCeoO+DT0lLY/CSPCp8GJ0KZuGjK0BgnWsFmil6r+lSBFd2akPZARQxqbIjMLNoAxREAxKE8Dt6lenjfBzd5RhCgbh1HADtZ/BwnoEvxwDp7GssoydOdHPNKuVgOw7VLsx4wsoS9pMkcYmPIQwZgkPcIE+TympONXEiZ+JGMZ4L8ZS0PfxSqg60e645AJMP5/ZrY7r02UZ+TH0Lp/GCbk/e3ZLD/ezmY87g/8t8GwPPKjTjOFsOu8AZWPe7s+JGvOre2mXnFx3e51Rnzdid/02cTDz7j6WoF1rRwbg+7Lp0Pc6PfnA3J6E/PliieUfQw63ZuAm75evfXL/Lr8+IJHn78Rv/j166rfG82LH9MbUr69esPGOBxFtb7hTB7Y3HwlrJ10qR/1b9GNz+Pk6fG9Ml7qTr9OHNp5qj8ErDb6WLijxSq+mDpW1fnECzHFxcDVZ8Pnp+ZXTbs17BszSRjGHzPAPFtKeriO0hXzQvxneZEW4mnj1NWeS41iHChXW3KXlBY7FgJEPFsMc7M2jG6n3m6XqqWqYdZqxY5RLhrVet3sGu1SqdbNNGiD4gDiTUjHROaSKrvhz88AcWAzoB5E2jKM8RSY+kNEB3GkuHQgDkdIGYxCoeLmfA3e7LNUT5CJ8NLHxZlRqS5qoCr9kN/T+6g95hDtS3d9T7oHgMmcgNR3SXAmGM646MUCLWPum4UlKlCIxQ0QSRG2rVKtrDMSzH2QSPUg9GIfCvPpPO2Mzjb/loYwS62Dzig9eCfrOvyWtUD4eEQ6MFnLNYgxwpE7yMoKOVmwZe0WnIVvxx6R50v0k0cEb5Dsf/qiieRHzhFRUQY59zw07EXVDwvKE3lLgnOi5ze0EHhx/FvZOBaosCjEy2WcDqAqpS0S4XWhcKY+BBwLfVqPwn+B6nkI/azrIUd9kDm37+OL+ZQOOeIQCLoo6fKMt8EQmHwbuILnybkPj72Uom8cEn7MduOLJ4RE/OMrA9tY+gnzg/hbhdFX4cdi7eQRdYoHASd0IlfyIlifIAUORVgilCuMdoMfC3As+b4xb3KOhQs2fcQcTn9RpCQ1VYRxGFPuOmpq2JXJFCdfz8H+cvoWJpXi7d2asJN36+tdbygEK0Bq7kv+21kjKV2wkCfhn2Jpqol4KorkdLIjy1uA35T52jCuSx2nZBpmqszljTJX2kY9b+BeJa1v5u+WnZ4enofWHw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9B00B4EE4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9B00B4ED4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9B00B4ED4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AA474701883E05307991F0A448F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AA474701883E05307991F0A448F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465411875</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AA474711883E05307991F0A448F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="a0f7c382-1807-49a7-a380-409572892c2b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="e7ce30b8-d858-4600-b17c-20485bcdb4c2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="12143cef-e841-4a4a-9bea-b87cf1d7bad5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="7786a419-e4dd-4716-b6c7-59d918ecbf8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV" id="3041db91-4050-4be3-a4ab-018bb69d869f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6cdd2a24-19b1-46f6-9460-923ec8289c2c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj05pCkWhI8xUqef2KL4AHvV8uRPShUbbBJsU0F9/kmIrIHo9d4YZJtvN7rO7T57kWOA0qXu+EJBJypkR9jrmv47TGk/G4FqkhYjlNutja9xuY+sQXBJNWrhFnEPTCIXIIWRCYiY7Zh05roValtMeOYdeveE1mrXDo+Zv0/gFmVChlUsNmcYyTZjwirQdM8+Yx7GgwmM4BeFJ4g39/oWnPD1cYjK7xyuURcKsG0s582yb1CIgkCSkRnhqH9sbPseR8IZ0yrDMM3jLGYmO+bZ3sVjUFo0az6Z2HSFko7atfCJBp/tmd6/cDFHIJny1PsWMM0pwQl+xBtUHGfPI8JMpz6iM009CO7aDdGgLlsQijsv2Tfs9QYHum5E2QGYCWyLGThlsABPIgBEwbgdhx9z/3gRXe0cZZmLCs1Rsrf8OErA5JHwGkSXKykp034+4o13dYyBeyEiSCzqHS02TGSYgjOsMJnR5QYUiXySMYvzGUqgfLVkG5G/GcmyvY1XQ7R3d6dEpCPl/ZrY+r1WUXzjJodtyMX9+uIwn52Qok7RB+iewmGf/0HvSKSCsO69AVeN+W2+TteLW26Yn+2D0eICSRRSLl8nPuH24BCd9dRM0SuTAJvYdurX96GWeucEyum7dXnL5eHMeh0Qdsez6gfDR5DI4eTj44dO93/2WGCb95ckRoaNxgPqjm9MoHJ4/XjVvevwi/HFxScY95w6N0MPNff46vDsHd5H36uM7p+HfwP3g6SgKxs+hvOB7gTO6fL39+eMOsnHwdBXFgd95r2m9hk1jKQnDfPwIRJZLTY+wZ5ypeWH5tbxoC42sSeHqzbRGCQlMml29S0uLlysBopGnhrlaI3QWtH3/NEDBkYsCN0DNBmq2284Z8s8arl9q0ArFFsRTziZU59Iqu+LP1wBJ6glgEWTWnOckBmF+EbGHJTZCNlCHgzMBI65UfJEigQWLOXmUZDGDRD4uBV68moYa7xW7yvyJhGxTudsbyj0AQmcUtLxrfgtFcCFVK57xPJeJU5vjGoNcXQCZ1mCv7raatqDpLAEN1E55lCdQm8WzojG2WP3XLUxEYR0Eo+LcfVrW9reyA8onotpB6FpOQE0RdlxB9bKQTwuu19cLLsP7eUT18VLtlBklKySbn95ZoulRUURVVEKuPLcNG1Ht7YKqRNGckorn1QWt9F2d/m45jmdce67l83leDOBIK1umwttK4Bx7CCRX8vQy4k/A7CqE/a3boUK9lbmyb+LLZcyGEktIFV2MYvmNp8EQhH4ahIrmy+++OzZSqr5JWMpdttNEvSA04i8fGcQj2k+Zr9XfgmfR+7h2xFrLo+pU7wFJ2VSv9D3w8gkpCFdhqRIunq0H3xVgV/JNY9XkCotUbBrnEj7/YmhF6piYEJ4zGfbMwrCukgVO+TID793pQ5hCid+u1qX49Gq9718MlV6l2Kx86X87W7SgCwFT3+AFlo65VC9FlZxN11T5DeAHYT5B6MQ9O3Ud5KwL86GP2lUDNyrpfjB/tKz1dPs8dP8A</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9B00B4FD4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9B00B4FC4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9B00B4FC4101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AACE0E740E4E05305991F0AF34A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AACE0E740E4E05305991F0AF34A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465414820</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AACE0E840E4E05305991F0AF34A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00033_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="0b739aae-ad46-4e77-8f9e-8267d1cbca32"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="4cf18dbe-5370-4a68-85e1-d38ba6d939dd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c5e71cba-25c6-4aad-8e10-0f52477ddabe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="cc53c642-c11a-490b-8a16-26d7436f4985"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS" id="9a1e0197-45d8-4584-a805-88287a1844b8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4fbc1872-a7db-4251-b781-6f46b1b6584e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtc6o6EP7eX8HQjx2EKL7AVGes1pYe29OqfTn9cieGgLEQkATF/vqboFC1trfnzjjjZNnsPrv75EnOGQyDqt1lDCecRFRx+m31H9hqAICQp03dhqeZjVpTg1WjoYGpWW/UoWWYVktVHMZS7FDGIeVttWoAUzNaGrAmoGFXa3atVQFW41VVnnDCRGjhUjFUJQsDyuw8bVtNE2pHkBFmUxhiZnNkj7u3Q1t42rDApHbONyjzhElnxnls6zqquBjhIEAVFIX6ub7nc+4ye0x8Cnma4G1Ol7XV7d7ValVZ1SpR4utVwzB0w9KFj8uIf6p2TorN2HWoF23WPUgjShAMyDuUoG4xn0Wu0g38KCF8Fn4RGujAkKE1nCENAZOeqvpHghzdDyPtgUwY1NgMgiLYCHs4wRRh5XHktNXTn01ws3eSQMq8KAnZwfrvIGG6xEEUY1djRWUFup9HPNKuzjlGtkNRkDKyxHeSJjFEmCn3CfZINiRMkM9lSj5+JWPiRwqWYfQ3YznXd7EK6PqR7vSJjxn/PzPbndcmyhMMUtx5eL03b7LLVrjqXvWn79QBbEJf3obRtd/OIew6b0CV496uD8lacmu7aT7y2fN6eX3LZ0vUXOpgtGr6w15Pf3iyrLsMuK/EHSX0rT6rnXlvfTNuuTVreHa/yIYLI3y69q8e9ZeLyfBiXn84GTwH3jgeteLwptk7e55Qzp5fzKdl2OjXX80/gX733jtbOCiceEPrIfPd2xUbx+uXuj5tzckFcn55Sba2jOnEIyc3o7l/te4/Pw7nzeeGN+Z/jPZHTbs17BsLSRin0zlGvFhKejh9ZSDmBfn38iItxNW83NWOpUYxjilXO3KXlBY7FQJEXFsMc7M2jMGl1R1cmrX6ALS6l5dGvWY0LQsMjG6rZl0UGrRBcQCxF1GPyFxSZTf8+R4gCm2GqYsTbRmlaIaZ+k3EPuRQcehIHI6IMjyJhIqDemQlwPRCCsgbfGvBZAFCEIZzVbmL+G/6O+l6HCf70m3tSfcIIxITLPVdEpwJhjMuerGAy5QHoLKEFYpTcQMkUoTtqtmq64yEcYAlUj2M3DTAlXgW553R2ea/qkHEcuvocpIfvC/rOvxWtED4uEQ6MFnLBRZjxEfuoGpRyJcFV6u7BRfhu6lL5PkS/eQJQRsk+58+aCL5UXJEVFRALj0PDXtR9cOCykTukqCS6OUNLQReHP9OMY4FrCwq6XKZ5gNoSmlLRHhdKBzQxxilQp/Wk+gNU70Mof/oeihRH2Qu7fv4Uj6jYw45DgVdlHz5g7fBGDP5NnAEz7OfPjz2Uoq+cZzxY7ZeIJ4QEvG3rwxkI+knzPfibxUl7se4jsTaySPqFA8CTqgvV/IiWH9BChSJsEQoV5TsBj8W4FjyfWPZ5BILF2yaphx//UWRktRWIUJRSrnTV3PDrkzmOPk6xvaH06cwuRRv79aMfXm3vtwOx0KwQqiWvuS/nTWS0wVhVV7hOZa2momnokhO/R1Z3gI8pswADLpCmbu7ylw3B6Bs4F4lnU/mz5adnh6eh86/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFE11FB18AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFE11FA18AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFE11FA18AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFE435F18AEE05307991F0A839B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFE435F18AEE05307991F0A839B</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465417495</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFE436018AEE05307991F0A839B</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00034_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_validateEmail(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="d0debe93-8696-4fab-8f3d-ed59313836ac"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="25cf88f7-7c05-4ae4-b95b-bf7d1ec601e7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="38eaaaf3-b098-44d6-b46b-528e9722f3fc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="3c153557-f749-47de-a552-7353a7458e47"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON" id="90c97c9d-050d-4649-a6f5-8ed366eb0293"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="11efb081-17d2-4ec0-9c72-ca6b72db1d63"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKflyFvBDeooJEG7ijLS0LaY/bLyfjDOA2cVLbCbC//uzQpMDSXvckJOTJeOaZmcePfcFRHDlen3NggiRUG/ld/R8HAQJ70TI6CDmG67QaBqqHS8MJ2wu33Vw42F7q2ojzDEaUC0RFV3cs2zWstmF3ArvpOXXPtWpNt/VD1x6BcRlautQsXdvGEeVekbarZ4x6CeKEexTFwD2BvVl/fOtJTw+VmPTexR5lkZD11kKknmniWggYogjXcBKbF+aRz0XIvRlZUSQyBq85Q97VX/duNpvapl5L2Mp0LMsyrY4pfUJOVl/13pdyM4Qjukz26ytEE0owishPpECNQayTUOtHq4QRsY7fCW2btqVCG7DFBrZd+lU33xIU6D4Z6Qgk48jga2SXwaawBAYUg/YwHXX1r5+b4H5vwBDly4TF/GT9e5CA5hAlKYQGLysr0X0+4pl29S4AeyOKo4yTHO4UTVKEgWsTBkuyvSVcki/kWjF+bcvlj5QsA/w7Y7kwD7FK6OaZ7vhkBVz8n5kdzmsf5RFFGfSSmxaZNxq+E1zv/tq04s68/+SaKX5mm24B4dB5D6oa9+v6lKwVt1437Z6uWX2SX8fPk4fV/OegnftXzbuX9XeW7vJh3ra/5w3rNsXi74gux99/TDbZ7dUuf9y4gb1hf9y6Szb3nXi85o/Wl+zhpkH8x+fx9fXi4dofBGl+M32ezr/VF8Hm3n0kAQ9MvAyuZn+6A5yJu/nddoKDcXPXeWKILYc+Sp47biP077df0nYY8m+tZjxGPyI2cSeXvPtW02ENx8ZSEmbZ4gmwKJeKHiNfG8p5IfGxvCgLCY1l4eqlSqO4ACr0ntqlpMXLpACR0JPD3K8tazjo9If+pesOXWt4ObAadavR6dhDq99sW1apQXsUJxCvErokKpdS2T1/PgaIY48DDYEZeZLhNXD9g4g+Ekgb0ak8HAnlECRSxSNkgWiIlyjJiY3XzP6ZtzovsHF17S4R9/Se9ZcC2LF0d46kewqYpASUviuCc8lwLmQvXlCeiciu5ahGIZM3AFMi7Dluu2FyEqcRKKRmnIRZBLV0nRadMfn+3zEQ5oV1OgiKg/duXaffyhZIn5AoB65quQQ5RjhzB9XLQt4t2HEOCy7D97OQqPMl+ykYwXskx5/eaKL4UXFEVlRCrjxPDUdRzdOCqkRhTnBF9OqGlgIvj3+vHMcLqr3UsjzPigG0lLQxGd6UCmebM8CZ1KddkDwDNasQ5qeuhwr1SebKfowvE2s6E0hALOmiFctPvA1mwNXbYCR5vv3sw+MopeybgK04Z7uK5BNCIf7wlYE9rPykeSL/NgkL38Z1JtZBHlmnfBAIQldqpS6C3TukwIkMS6RyJeww+LkA55IfG6smV1iEZNMiE/D+F01JUldHGCcZFSNfLwyHMlngFLsUvDenX8IUUvx6t275u3frfHw7k4IVI73yJf/tbJCCLhh0dYUXWLr6Vj4VZXK6OpDlV4BnlHlgO1bHbvf7hTK39srccId21cCjSnq/mH+1HPT09Dz0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFE120A18AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFE120918AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFE120918AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFDB44F40FBE05305991F0A6800</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFDB44F40FBE05305991F0A6800</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465419995</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFDB45040FBE05305991F0A6800</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00035_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_validateEmail_(Negative)_403_FORBIDDEN_P1" searchProperties="true" id="6e605fa8-e196-43bb-85a4-cccca93f6029"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="f373a73f-77e9-4731-8b0c-fd82a8220f72"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="d8ca5cd4-48f0-405d-826b-7d5a1f1ebc9f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="2ea65507-e4e9-4f9f-b314-358a3c659e51"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS" id="6c6fe15e-d04d-40a8-8300-d9f2513b0f41"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="bb8a99e8-3198-4477-80c1-5eefe11eb435"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_VE"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+j0fDxT2pT3jjBTQO5BBRXUc/XLnZAuEG2T0qQI/vqbFFsB0eu5M8ww2W52n9198iSnAkeh6/lCQCIpZ8ag1zL/qaHatBY0kUWaEFiVeg2s5mwaWI1qGZFaBaFK1TWNgRApDJiQmMmW6TqoYjkNCzVvUc1zy17FLTVR49E07iERKrRyKTmmsY5CJrwsbctME+ZxLKjwGI5AeJJ4E3946SlPD+eYzPbpFmWWMGkvpIw92yalAAiEISkRHtmn9p7PaSC8CZ0zLNME3nIGomW+7X15eSm9lEs8mduu4zi207SVTyDo/IfZPsk3QzBgM75ddzHjjBIc0lesQQ1BLnhg+OGcJ1Quok9CIxs5OrQFa2IRVGE/TPs9QYbum5H2QCYCW2KBUR5sDDNIgBEw7saDlvnjexPc7r1NMBMznkTiYP1nkICtIOSxyibyynJ03494pF3tUyDegJEwFXQFI02TGBMQxnUCM7q+pEKRLxBGNn5jLdSP5iwD8idjObV3sSro9pHu9OgchPw/M9ud1zbKPQ5TaF/7d/3uZTzpjuYoitMNCQj8db2pjX7dtTIIu85bUMW439aHZC249bZpvRgSflceBXhwXa+Ou5dz8TwKI3mzqD2/ViaNzuSnP6P+a70xR6FbZcNROK1PeI/F0GFPq/N6r3ODKxd4g9bDk4dO/VVesKv16nzhT+H+vnm++NmcRvdwkUIlpFcLt/xwPu3VL6qOkzZ+zx9vxuHE7/7qJ0F//bvu3OFw/PjEu/f0/GR55j4sw6uL6cuQ1H/HAMuH1ntNuzXsG3NJmKTTJyAyX2p6DHpGX80Ly6/lRVtoYM0yVy/WGiUkMGm29S4tLV6qBIgGnhrmdu04/bNmx3GrPadRQU71zKmWnWqzifqO33XPOrkGbVEcQOxyNqM6l1bZLX++BkgiTwALILFWPCULEOYXEXtYYmPAxupwcCbglisVp6yxofNl5DzxFMFGlRI7DoHnsmmMuLxiV4k/k5DsS3dzT7rHQGhMQeu7JrhQDBdS9WKJV6kMUWmFSwxSdQMkWoQ9t9Ko2oJGcQgaqR3xIA2hFC/irDO22P67FiYis47PbrOD92ldh9/yFiifgGoHoWvpgBojHLmDynkhnxbsursF5+H9NKD6fKl+yoSSLZL9T+800fwoOKIqyiEXnoeGvaj2YUFFomBFSUH04oZWAq+OfzsfxxKXlqV0tUqzAdS1tCUqvK0UDtkTIKnSp80tfwZmFyHsb10PBeqDzIV9H18qF2wisYRI0cXIlt94G0xA6LfBQPF8/d2Hx15K1TcJa3nM1g3VE0Ij/vKVQTyi/ZT5Wv298CR4H9eRWDt5VJ3qQSApm+uVvgg2n5CCcBWWKuXiyW7wYwGOJd83Fk0usEjFpmkq4fMvhpaklokJ4SmTg56ZGXZlMsMpNzF4704fwmRS/Ha3rsWnd+vfw8uJEqwIm4Uv/W9ni2Z0IWDqKzzD0jLX6qmokrP5jiy/AfygzH7/DLmogRq+nylzfavM1UofFQ3cq6T9wfzRstPTw/PQ/hc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFE121918AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFE121818AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFE121818AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B025D084105E05305991F0AC2EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B025D084105E05305991F0AC2EB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465422302</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B025D094105E05305991F0AC2EB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00037_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="39a70e35-334a-4489-9019-220416b1f22e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="a0308e3c-db22-4cb9-b822-78bc49fe2e58"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="dcbaae82-74be-4d22-b56a-7c2bcd9fed8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="fd2497ef-fdf3-4b4f-a771-5bca3788c92a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE" id="1894c282-4725-42e6-857d-610b8913df37"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="d5958dee-966b-4657-a204-a81b558dabe9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH3vr4jSRxTyAQUSARIldIsu0F6gtNuXletMwJA4aezw0V+/dmhSoLTbuxIS8mQ8c2bm+NhNhsLAcjqMQcJJRJW+21L/sVC9YvoNQ0MGIK1aq9S1hm9VNM+zroyGaVxhv6YqfcZS6FPGEeUt1TLMqmbUNMuaGnXHFD+7XG9cPavKDBImQguXsqEq2zCgzMnSttQ0oU6EGGEORSEwh2Nn0hkOHOHpoByT2m7uUWYJk/aC89jRdVz2AEMQ4DKOQr2pH/k0PeZMyJwinibwntNjLfV972azKW8q5SiZ65ZhGLph68LHY2R+qbYv8s3g9akf7dddRCNKMArIG5KghsAXkad0gnmUEL4Ivwht6qYhQ2uwxRo2q/RS1T8SZOh+GOkIZMKQxhbIzIONwYcEKAblYdxvqZc/m+B+7zRBlPlRErKT9Z9BArqGIIrB01heWY7u5xHPtKvdBOz0KQ5SRtYwkjSJEQam3Cfgk+2AMEE+jynZ+JUtEz+Sswzwn4ylqR9iFdD1M91xyRwY/z8zO5zXPsoMBSm0n0aJYQ97j49W+JwaVm3FkvHw1vu1LG1aGYRD5z2oYtzv61OyFtx63/S0g9hebMhwNWrUf4cJ69yR+fLv50WJ6/bt9WRUewseLVPvmpu1u5xOpn4pWKUv+tI1g85yat9f6/2JnYQPt8+9ixGh19C9e+g3ZoOSiR8npju5W2H39+J5PJ5Ww6enjj+/J89vlSvyelcP6lVsX5f80tt0+fYX7mwq8eaWX29t1FjNLh5XdL0tzR7i7XC2ux8M3NFD66OmwxqOjbkkTNKXJWCeLyU9+q5yI+aF+PfyIi3E0/zM1YmlRjEOlKttuUtKi5MKASKeI4a5X990aw2z16n26mbD6NlWz6ga5o3RMeq2XXFrlVyD9ihOIHYj6hOZS6rsnj/fA8Shw4B6kGjrKMULYOo3EV3EkdKnY3E4IspgGgkV57uK581JSO15VH+p7wJcq8Xz1ytVGUX8jt4lHZ9DcqTcpnGk3GPAJCYg5V3ymwmCMy5a8YrWKQ/M8hqVKaTiAkikBjtWtXGlMxLGAUigehh5aQDleBFnjdHZ/t/SEGaZddybZufuy7JOv+UdED4ekQ5M1nINYopw5goy8kK+LrhyWHAevpN6RB4v0U6eELxHcvzpgyWSHgVFREU55MLz1HAUVT8tqEjkrQkueF5c0ELfxelv5+N4ReXXcrpep9kA6lLZEhFeFwJn6hPAqZCn3TRaAdWLEPqPbocC9Unmwn6ML+ULOuGIQyjoomTLHzwNJsDk06AvaL796bvjKKXoG4ctP2frBuIFIRF/+8jADpZ+wnwv/jZR4n2M60ysgzyiTvEe4ITO5UreA7svSIEjEZYI4YqSw+DnApxLfmwsmlxg4YJNLymHr78oUpFaKsI4Sinvu2pmOFTJDCffxeB8OH0Kkynx+9W6ZV9erU/DwUToVYjUwpf8t7NGMrpgUOUNnmFpqVvxUhTJ6fxAld8BnhFmu2a6brVrVE+E+aZo4FEl7U/mz5aDnp6eh/a/</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA961DE4C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA961DD4C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA961DD4C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC681EA4E7180E92E0401F0A07993D63</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC681EA4E7180E92E0401F0A07993D63</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421438808</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC681EA4E7190E92E0401F0A07993D63</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00038_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="d3230972-60d2-44a5-bb01-1f437f5e8278"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="f20653b4-0fbe-4f77-9bc1-842cbd1ffcfc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="30730514-93b7-4ee4-8df9-af919e2c59e1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="351f8454-a071-44b3-aec7-b70df05e64b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="d029cff1-07c3-4434-836f-f122ac33decb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZb/I4FH3vr4jSxypkgQKJChIFOqU7S5fpy8g4N2CaONR2gPLrxw5NWAodvpGQkG+uzz138bEvOIpCx2twDkyQmGqdVk3/xy0OEbYs1wh82zZKVR8M5A5tAzto6JarwbBUruhah/MEOpQLREVNdyy7ZFhlw3EGVsWzK55TLLhV913XXoBxCS1dCpauLaKQci8NW9MTRr0YccI9iiLgnsBev3F/50lPD2Wc9PrFimUakNXHQkw908QFHzCEIS7gODIvzC2fC597fTKiSCQMvmP6vKZ/753P54V5sRCzkelYlmVaril9fE5Gp3r9JNsMfocG8WrdRDSmBKOQLJEidQ9iHPtaIxzFjIhxdADaNm1LQRuwwAa2S/RUN9cBUnZHIm2RZBwZfIzsDKwHATCgGLTnXqemnx7XwdXeAUOUBzGL+M76zygBnUEYT8E3eJZZxu54xD3lql8A9joUhwknM3hQYzJFGLj2xCAgizvC5fD5XEvbry24/JFsygD/SVsuzE2ukrq5pzotMgIu/k/PNvu1QnlBYQJ12uvevgadO2a+Tpxq96zVX748zxulydNHLaWw6bwilbf7e707rPlsfW/qjybWIKE39923t6DYKpOk/P7eY0v/wS7dWJxbt6TLHpZf9+eT/vU1cq97Xw/AbwbCv0RREgfIdSZxGPa7T5fdk7L1TunotXgdUz6l91cLetPrNh+qf93y0WuLD2Zho1exm/OX8PGpsjibmZ/JO3oew5dbnNgfy0ckQRpuMBelZ3Zybp4Ve6JiP85u28nj35Nex6qtc9rMYduYSUI/GU4Ai2ypxqPT0q5kv5D4XV6UhfhGkLp6U6VRXAAVel3tUtLiJVKAiO/JZq7WV81y1W433LJsbalpldpWybKvrIZVcV1Z1atMg1Ysdig2YxoQFUup7Gp+fieII48D9YEZszjBY+D6L4gtJJDWoT15OGRbYBBLFbdx6Fr0g2NOh2EFomg5HY9ny9DVtYdYPNJH1ggEsC3ptq0t6e4BJlMCSt/VgHM54VzIWnyiWSJCuzBDBQqJvAGYEmHPKVXPTU6iaQiKqRnFfhJCYTqeppUx+erfMRDmqZVwPI2ZQKGdnr+D6e1+yyohfXyiHLhK6RJkN2HPVWRn+RzOu7iZdwbfSHyijpksq2AEr5hsf1pPixqTfFTWiWXM8w27hi1wczevPJ4/Izgf+/y+lnIvxaCeNecTFT4LyWyWpO2oKKFjEt6UemebfcCJVKuvQfwB1MwhzKMui5z1TuTcvs0vEWPaF0hAJIdHS5dHvBT6wNVLoSOnfnHsM2QrpKybgIXYZ2uG8kGhGP/65sAeVn7S/CT/5jHz1+3ag7URR+YpnweC0JFaqWvh68Bs4FjCEqljMdsE3wewL/i2MS9yzkXIaRomAg5/0ZRA1XSEcZxQ0WnpqWFTNFOe4msK3trpB0wqzN837YIfvGnf7u/6Ur4ipOe+5L+dDZKOCwZdXegpl5q+kA9HGZyONkT6m+AenS61K07barvOjk4X8wJuZVL/Yf5p2ajp7nmo/ws=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA4E72F0E92E0401F0A07993D63</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA4E72E0E92E0401F0A07993D63</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA4E72E0E92E0401F0A07993D63</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC681EA962004C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC681EA962004C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421443238</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC681EA962014C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00039_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="0ebcd9e0-767b-41c8-bd29-90ffcc645309"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="7e260a26-aeb1-4637-932e-e8ae2ebd0a68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="fdb5e98a-e892-4324-a39f-569c6e719105"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="3e058d17-1738-436d-8ea9-79fc702702d9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="039a496f-546e-4abf-904c-8b34c1036b1a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKfqxCXoBCooJEebmLltIedOnefjkZZxJcEjuNnUD7688OTQos7XVPQkKejGeemXn82FccJbHjDTiHTBBGNX/U0/8B3G22MFoZK8ftGC276RruZdM2MHI7lh1aodsOdc3nPAefcoGo6OmOZbcM69JwnHur49kdz+k0uu3Ln7q2hIzL0NKlYenaLokp98q0PT3PqMcQJ9yjKAHuCewtBjdTT3p6qMKk96/2KMuEWX8tROqZJm4EgCGOcQOzxLwyj3yuAu4tSESRyDN4zRnwnv66d7vdNrbNBssi07Esy7RcU/oEnERf9f6XajMEPg3Zfj1ElFGCUUxekAJ1A2LNAm0QRywjYp28E9o2bUuFNmCHDWy36FfdfEtQovtkpCOQGUcGXyO7CjaHEDKgGLTvc7+nf/3cBPd77zNEeciyhJ+sfw8S0AJilkJg8KqyCt3nI55pV/8KsOdTHOecFDBTNEkRBq7dZRCS3ZRwSb6Aa+X4tR2XP1KxDPDvjOXKPMQqoZtnujMiEXDxf2Z2OK99lCWKc+jHy4fu2vdReN3afPt+P1vxGU273fn0JuqVEA6d96Dqcb+uT8lac+t1U5I/2W47uZiED6jp0zydPuG/p9EqsxcXaIOL3SaKB7cwc265e+ekD8xawnw5ZPMHZ7bMb34sZovI2ZBpm4+fv1jpy2bEB12/s31ZXicsmDCwh3kHIWTtimG0vpzN+KbVFuLJHxfELea7PzYXmf2485uj76Mfs5efmRs2FxcvjH8Z4J9dd/Jn0R5z+mj99eC0xr23mg5rODZWkrDIV4+ARbVU9PBH2kTOC4mP5UVZSGCEpauXKo3iAqjQ+2qXkhYvlwJEAk8Oc7+eDC+77WFrNL62J6NRszO2WpY9sQZWx3XbE6tVadAexQnEIaMhUbmUyu758zFAnHgcaACZUbAcr4HrH0QcIYE0n87l4WCUwz2TKm4Xj9vExYm12mTo5XHVacbBNotypGszJm7pbTYIBWRH0m1bR9I9B0xSAkrfFcG5ZDgXshdPqMhFbDcK1KCQyxsgUyLsOa1u2+QkSWNQSE1JjjyGRrpOy86YfP/vGAjz0jof35cH7926Tr9VLZA+AVEOXNVyDXKMcOYOsqtC3i+4eVhwFX6QB0SdL9lPkRG8R3L86Y0mih81R2RFFeTa89RwFNU8LahOFBQE10Svb2gp8PL496txPKHGUyMvirwcQEdJWybDm1LhbHMBOJf69HzPNkDNOoT5qeuhRn2SubYf48vFmi4EEpBIumjl8hNvgwVw9TbwJc93n314HKWUfROwE+dsw1g+IRTiD18Z2MPKT5rv5N+WZcHbuM7EOsgj65QPAkFopFbqInh+hxSYybBEKhfLDoOfC3Au+bGxbnKNRUg2rXIB73/RlCT1dIQxy6nwR3ppOJTJEqd4TsF7c/olTCnFr3frjr97t/64mS6kYCVIr33JfzsbpKQLBl1d4SWWnr6TT0WZnEYHsvwK8FSZu62B3Rw4bWswHtXK3HbdjmMN6wYeVdL/xfyr5aCnp+eh/y8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6884A13A260AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6884A13A250AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6884A13A250AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4DEB1FDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4DEB1FDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421446969</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4DEB20DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00040_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="3e7cfc45-0b71-4dfe-85bb-f9499bf95872"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d92baf00-e0d8-4134-acf2-34ea3f6f92b3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b441407a-c62a-4b2d-9c60-900cd0a5ca39"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="de3a3b2e-59bf-47b6-91ba-7bea20a31da7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="10c0dd99-e164-46f7-a12e-b1be93485e61"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbRbuI6EH3fr4jSxyokDoFAVJAotN10KaVA26UvV8Yx4JLYaewA3a+/dmhSoNDLXgkJeTKeOTNzfOwLDqPQ9lqc40QQRjW/09D/caYIlJ2JZdSDABrOBAXGxHarBqzbAAS1iVUDVV3zOU+xT7mAVDR02wKOYVUN2x5Zrgdcr1wuOZXqi6494YTL0NKlZOnaOgop97K0DT1NqMcgJ9yjMMLcE8gbtu66nvT0YI5Jb15sUGYJk+ZciNgzTVQKMMJhiEqIReaFueNzEXBvSGYUijTBHzkD3tA/9q5Wq9KqXGLJzLQtyzKtuil9Ak5mZ3rzR74ZBz6dss26DSmjBMGQ/IEK1B0WcxZorXDGEiLm0ZHQwASWCm3gNTIQcOiZbn4myNCdGGkHZMKhwecQ5MEGeIoTTBHWHgd+Qz87bYKbvaMEUj5lScT31n8HCdMlDlmMA4PnleXoTo94oF3NC4w8n6Iw5WSJe4omMUSYa/0ET8m6S7gkX8C1bPzamssfyVmG0d+M5cLcxiqhmwe60yEzzMX/mdn2vDZRnmCY4mZn4Iz8oQvF9fQ3vO/2Vv1zOrypzPw6a2QQtp03oIpxf6z3yVpw62OTf57+qrbf2/EYjp8HDN2Uo4UPOvHsPEV39bKIwGW9x9Dg6nHxuOjfPNwjemM+tyblVXdaTWYvWNSq9/T25fFyufpReaiL8V3cr9xOaj04h+58FL8unl9BObx+dPvPt7cCjAeXqMMcUWu9M7H6Gf4avDNunZ93n3vtvhiD6cPPij/jvR+3T+F0GIxrYDV+Qd0I/qG88VnTdg27xlwShunkFSORLxU9/I52LecFxffyoiwkMKaZqxcrjeICU6E31S4lLV4qBYgEnhzmZn3drtaqALTb4LLSsZ3OleVY4NpqWW697pav7FyDNij2ILYZnRKVS6nshj/fA0SRxzENcGIsWYrmmOvfROxAATWfDuThYJTjEZMqDmouWDoVd+kCtgDRijupGySJPQl0rcfEPb1PWlOBkx3tBtaOdg8wIjHBSuAVw7mkOBeyGW9wmYoQlJawRHEqr4BEqbBnO7WKyUkUh1hBNSMWpCEuxfM4a43JN/+2ARHPrJ1ua9jPzt7R0va/5V2QPgFRDlxVc4nlJPGBa8jOSzlecnm75Dx8Kw2IOmKypSIhaINk99MnUxRFCppkNeWgC999w05cc7+kIlWwJKhge3FNS5WXGtDMR/IGS2+ldLlMsyG4St8SGd6UMgfMIUapFKn3EVtgahYhzJPuiAL1XubCvosvFXM6FFDgSFJGy5YnPBCGmKsHgi/Jvj719bGTUvZN4LU4ZGuH8h2hEH/71EAeUn7S3Jd/K5YEn+M6EGsrj6xTvgoEoTO1UrfB+xFaICbDEilfLNkOfijAoeS7xqLJBRYh2TRJBT7+RVO61NAhQiylwu/omWFbKzOc4j3G3qfTlzCZHn9csGt+9IL9fdcdStWKoF74kv92NkhGF4R1dY9nWBr6Wr4XZXI629LmD4D78lxzWqDcKlet1tWnPFekPNtWu2jgTiXNL+avlq2e7p+H5r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6884A13A370AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6884A13A360AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6884A13A360AEDE0401F0A0599720C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC68611CC1B5D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC68611CC1B5D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421452634</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC68611CC1B6D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00041_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="7a49d9ac-e429-462f-8b0c-861306c29408"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="e0bbc4b1-166a-41dc-897b-86671fcd8673"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="6179c3a3-33b7-47f5-a7d0-9079a5a701c9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="dd5e3ebb-f16a-4cfd-aa06-69b1b310a5ae"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4f030be9-0022-497c-8ce7-646c3b4c1283"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH4/vyJKH1HIlUuigpRy2ROVtgh6W15WruOA28ROYwdCf/3aoUmB0m7PSkjIk/HMNzOfP/ucgSS2PJ8xlHFMiRIMe+o/5lO7g+wIaLDbBZpjPgENmLCj2WYEI9tsOy3HVJWAsRwFhHFAeE+1DNPRjLZmWbdGxzM7nt1ttozuQlXuUcZEaOHSNFSlSGLCvDJtT80z4lHAMPMISBDzOPTm/tXEE54eqDCp/fMdyjJh1l9xnnq6DpshgiiOYRPSRD/XD3zOQ+bN8ZIAnmfoPWfIeur73s1m09zYTZotdcswDN1wdeETMrw8U/u/qs0oDEhEd+sBIJRgCGL8BiSoK8RXNFT8eEkzzFfJF6FN3TRkaA0VUIOmQ85U/SNBie6HkQ5AZgxobAXMKtgMRShDBCLlbhb01LOfTXC39zYDhEU0S9jR+s8gIbJGMU1RqLGqsgrdzyOeaFf/HEEvIDDOGV6ja0mTFEDElGmGIlxMMBPkC5lSjl8pmPjhimUI/slYzvV9rAK6fqI7Q7xEjP+fme3PaxflHsQ56luNq4fi4nd4OVvMG1PXfxxf6w+YL69s2ish7DvvQNXjfl8fk7Xm1vumUVis7hI7dPXLJ55MDH/TNlf6eL7hqbuaYWcabV7cydCyb6aFH7oO8R/tbGA+P042gDQmo7uXeeMxD/HlNMK/xnTT+Du8gK+L9dsifbg1dX1EUbT+i711Bq+NceOqcfG2XVDwwp9tYxvdDmejx0Vwd29C+tCxnn+Dtyg0FpfBNLB/udblcPQAt3cX2era3MKncNn7qGm/hkNjJQnz/OkZQV4tJT2CoTIW8wL8e3mRFhxqUenqpVKjGEeEq325S0qLlwsBwqEnhrlbjwftbqvtjEcD1zEtuz0yHMMcG77Rct2WY/mVBu1QHEEcUBJhmUuq7I4/3wOEiccQCVGmrWkOV4ip30QcAg6UgMzE4aCEoVsqVdwIcWoYPO7iKInab630pcC8+1qoyjXlN+Qm8yOOsgPpNo0D6Z4hiFOMpL5LgjPBcMZFL17BOuex2VyDJkG5uAEyKcKe5XRbOsNJGiOJVE9omMeoma7SsjM62/1bGoCstE4m/nxaHr0vKzv+VjVB+IRYOjBZzQUSg0QnbiGrKuXrku39kqvwvqC7PGGiozzDcIfk8NMHUSRDapaUNVWga99jw0Fc/bikOlW4xrAme31LC5EXEtCvRvIKmq/NfL3OyyF0pLxlIrwuVM7U5wjmQqO2t/QFEb0Oof/oiqhRH2Wu7Yf4cr4icw44SgRllHL5g/fBHDH5PggE14ufPj4OUoq+cVTwU7ZBLJ4REvG3Lw3oQeknzFPxt6FZ+DGuE7H28og6xaOAY7KUK3kZbL+gBaQiLBbqRbP94KcCnEp+aKybXGPhgk1POUdff1GkLPVUACHNCQ+GamnYl8oSJ9+myPtw+hSmlOP3+7VgX96vj1eTuRCtBKi1L/5vZw2XdIFIldd4iaWnFuK5KJKT5Z40vwM8Vmdz5HdtZ9g23ZFbq3PHde1hu1M38KCS/ifzZ8teT4/PQ/9f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA834D719E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA834D619E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA834D619E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC68564FEC941236E0401F0A0599542A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC68564FEC941236E0401F0A0599542A</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421457577</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC68564FEC951236E0401F0A0599542A</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00042_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="9b64718c-4e32-4ccc-966c-4e691644dc99"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="2641bc2b-a931-489d-ae9a-03301d01fa58"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="e3f777f6-95aa-4b10-ad3c-cfebbe76293e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c6a22447-c55c-4dd3-aadd-f54cc2c86f04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="546eef37-99ab-4297-8a1c-a631eb252f3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1WIc+HSqCBRAmx2C2ULvb4cGccBt4lDYyek/PpjhyYFSnu6R0JCnoxnvpn5/NnnDEah6XQZwwknMVU8t63+A3wIbdyca2dNy9bsJmpprWbL1kBg+34LQcO3oKp4jKXYo4xDytuqCQzh0NBMcwaajtF0bKPWMK1HVbnFCROhhUsNqEoehZQ5Rdq2mibUiSEjzKEwwszhyJl2R5eO8HRgiUntnG9RFgmTzpLzlaPrqOZjhMMQ1VAc6ef6ns+5z5wpWVDI0wS/5fRZW33bu16va2urFicL3QQA6OBMFz4+I4sTtfOj3Ix9jwbxdt2DNKYEwZBsoAQ1wnwZ+0o3XMQJ4cvok9CGbgAZWsM50pBh0xNVf09QoPtmpD2QCYMaW0KjDHaNA5xgirByc+211ZPvTXC7d5ZAyoI4idjB+u8gYZrhMF5hX2NlZSW670c80q7OOUaOR1GYMpLhsaTJCiLMlEmCA5JfEibI5zOlGL+SM/EjJcsw+puxnOu7WAV0/Uh3XLLAjP+fme3OaxvlFoYp7jzwp5uJfzcDw9M4mkQ3w1OwiS8WV2cmaBcQdp23oKpxv60PyVpx623Tz7uNq79YQ3I6Wa1X43B4OWmsffcmfNlA0DAH9u3tT36X5UP9AUYGwE+jxvj16hQGevj4epsPkySb5H1mrcjdnx/h9ajfZMG04d0/z5bL7PJmA7u/g18P4dikYALqj+z51xxY8/Xcu1om7qte1/O8cREE9XnGzRm2TpveIBy6Ziv94V434jn4ff9nbD71Rmnr7q7ffq9pt4Z9YykJ03T+hBEvl5IenqsMxLwg/1pepIX4WlC4OiupUYxjytWO3CWlxUmFABHfEcPcrge9RqtV79Z7oHthWUa/D2xgDEAXNM/OzNZgUGrQFsUBxF5MAyJzSZXd8udrgChyGKY+TrQsTtESM/WLiC7kUPHotTgcMWV4FgsVz5bmxkgDsxGJ895Yh/ZTc+3Ts3SjKuOYX9GrpBtwnOxJtwH2pPsaI7IiWOq7JDgTDGdc9OIFZikPjVoGaxSn4gZIpAg7pt2q64xEqxBLpHoU+2mIa6vlquiMzrb/pgYRK6zdXq8/nRZn79PSDr+VXRA+PpEOTJZzgcUk8ZFryCpr+bxma7fmMnw39Yk8YqKlPCFoi2T/0ztTJEUqmmyLKlFXzoeGvcD6YU1VLj8jqKJ7dU8LmRci0CmH8gJrL7U0y9JiDE0pcIkIrwudM/QpRqlQqddZ/IypXoXQv3VJVKgPMlf2fXwpX9IphxxHgjRKsfzGC2GKmXwheILt+XefH3spRd84zvkxWy8UDwmJ+Mu3BnKQ9BPmifhbx4n/Pq4jsXbyiDrFs4ATupAreR28fsILFIuwROhXnOwGPxbgWPJ9Y9XkCgsXbJqnHH/+RZHC1FYhQnFKueeqhWFXLAuc/HWFnXenD2EKQX67YXP26Q17P7qcCtmKoFr5kv921khBF4RVeZEXWNpqLh6MIjld7IjzG8BDfa73bLd/Ue+5rtXc1ef6ANhVA/cq6Xwwf7Ts9PTwPHT+BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4DEB5DDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4DEB5CDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4DEB5CDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6885A5C0AB331EE0401F0A079928FF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6885A5C0AB331EE0401F0A079928FF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421461009</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6885A5C0AC331EE0401F0A079928FF</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00043_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="f8693770-39b8-4842-be75-ea9d74d72c30"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b8f6e7ce-739a-4747-aded-fb74f6a05a42"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="77df93fd-9304-474c-85d3-c451f95f2cd2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="435c677f-0133-452d-ac14-fdd157166a28"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="900b652c-982e-4335-8e59-7051f1664075"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj1XItQWigsR1T7ql7QK97cuRcUzwNrGp7ZDQX792IClQ2tM9EhLyZDzzzcznz77gIIkdv8M5YgJTogX9lv6vMwfNmd2wjVkIPMOzw9BooFnDOLOaIbRdF0DH1bWA8xQFhAtAREt3LNszrHPDcaZW3bfrvufVGg37l67dI8ZlaOlSs3QtT2LC/SJtS08Z8SngmPsEJIj7AvqTzujKl54+KDHp7YsNyiIhay+EWPqmCWshgiiOYQ3SxLww93wuQu5PcESASBna5gx5S9/uzbKslrk1yiLTsSzLtJqm9Ak5jk709rdyMwoDMqebdQ8QSjAEMX4FCtQIiQUNtU4cUYbFIvkgtG3algptoBwa0PbIiW6+JSjQfTHSHkjGgcEXwC6DjdEcMUQg0u7GQUs/+doEN3unDBA+pyzhB+u/g4TICsV0iUKDl5WV6L4e8Ui72hcI+gGBccrxCl0rmiwBRFy7ZWiO8yvMJflCrhXj13Iuf7hkGYJ/M5YLcxerhG4e6U4fR4iL/zOz3XltotyDOEXthDXXP8zT28T51bh5Zml3Cp5Xg9l17NFWAWHXeQOqGvd2fUjWilvbTd3LK+SdnjaeH+31+LKXD/F5sH68dG4GxBwsw2yAGOiBIIsmN1n0e/H6gz/0mw3rcv3P6ZKmd3XBp+73pwa7Hd3dfXsZi+w0cyccd0+d+1s2Tq7jp+klOctH3YCsHx7Tzjx7+vk6ziPXe61fW/QyX8xmkxe3M4ly7+fwKecPyaPN7uffv92RnjsneNQho8WaX3VF5LXeatqtYd9YSsIknf1GUJRLRY+grw3lvID4XF6UBYfGvHD1l0qjuEBE6G21S0mLn0oBwqEvh7lZD3vnDXvQaZ473sDrWd7A8ix7aHWserPp9s+HpQZtUBxA7FEyxyqXUtkNfz4HCBOfIxIiZqxoCheI659E7AMBtICM5eGghKMplSrOWR4tSPYMvFluL5y6qKNZ5p7TWNeuqbghN6wzF4jtSbdt7Un3GEG8xEjpuyI4lwznQvbiBaxSEdu1FagRlMobgCkR9h2vcWZynCxjpJCaCQ3TGNWWi2XRGZNv/h0DQF5Yi7ZCXhy+D2s7/Fa2QfqEWDlwVU8XyVGiI/eQWxbzcdHubtFl+E4aYnXGZE8Fw3CDZP/TG1UURyqebKsqYVfeh4a9yOZhUVWycIVhRfjqppZCL2WgXY7lBdReaulqlRaDqCuJYzK8KZXONicIplKn1lP6jIhZhTC/dE1UqA8yV/Z9fKlYkIkAAiWSNlqx/MIbYYK4eiMEku/5Vx8geyll3wTKxTFbL5ZPCYX409cG9KHyk+Zb+ZdRFr6N60isnTyyTvkwEJhEaqUuhPUHxIBUhsVSwSjbDX4swLHk+8aqyRUWIdk0SwX6+IumpKmlAwhpSkTQ1wvDrlwWOMV6ifw3p3dhCkne3rE5//COfRxdTaRwJUCvfPF/Oxu4oAtEurrKCywtPZdPRpmcRDvyvAV4qNBnPa8/6DYG/b5b31Xos6HlVQ3cq6T9zvzestPTw/PQ/gM=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4DEB91DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4DEB8EDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4DEB8EDD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC681EA9624E4C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC681EA9624E4C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421464286</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC681EA962514C04E0401F0A07993D6F</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00044_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="339517f8-cb14-4a22-be31-0e964c2ce629"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3d5d158a-6acc-4f52-aad7-31a66de951a9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="a0c5d605-87d3-4034-9fc7-5c634d5e887f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="37933025-f4f8-4efc-9545-23090e76963a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="cfe5b326-a020-47e3-a7ca-f1a9c0340772"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKflyFvAOJChKFckdLoQfdHr0vJ+MM4JI4aeyQdH/92qFJgaW97klIyJPxzDMzjx/7gqEotPweY5ByElNlNOio/wJ2LTAR0kyz7WoOCtpae9kyNBevAsN1rGXTdlRlxFgGI8o4oryjWobpaEZTs6x7o+WbLd9pNTzH/EdVHiBlIrRwaRiqUkQhZX6ZtqNmKfVjxAjzKYqA+Rz7897t2BeePqowqd2LPcoyYdrdcJ74uo4bAWAIQ9zAcaRf6Ec+FwHz52RNEc9SeM0ZsI76ujfP80ZuN+J0rVuGYeiGpwufgJH1V7X7pdoMwYiu4v26j2hMCUYh+YEkqFvgmzhQeuE6TgnfRO+ENnXTkKE1KLCGTYd+VfW3BCW6T0Y6ApkypLENMqtgM1hBChSD8n026qhfPzfB/d77FFG2itOInax/DxLQHYRxAoHGqsoqdJ+PeKZd3QvA/ojiMGNkBxNJkwRhYMpdCitSjAkT5AuYUo5fKZj4kYplgH9nLBf6IVYBXT/TnQFZA+P/Z2aH89pHeUBhBl1AjLvFgz2i3vThW9EPyWqSTmbX6cjplBAOnfeg6nG/rk/JWnPrddN38tfzVez9GdBk8riZbR6j/Ns0z5d5ELZDZmM8YOPFYzO8pv14tebZ9ulmemNug+b9oH27se9CPfwx/GZdrZY5+/LHcJhvmdf/kc8XW5gGRjtMkJcnfz/BrRtMFj00bo09MtfBc9PB3YT27HCez9o4ub3eLZZjO3peLxYeQ5PW7Mv1A70MCu/G2Q6mm5vHoqC481bTYQ3HxkoS5tnyCTCvlpIeo4EyFPNC/GN5kRYSaKvS1U+kRjEOlKtduUtKi58JASKBL4a5Xw/7zXbb7bl942pg2+bVleEY5tDoGS3Ps9rDYaVBexQnEPsxXRGZS6rsnj8fA8SRz4AGkGq7OMMbYOoHEQeII2VEZ+JwxJTBfSxUfNVspoEVo1ZiszWzttunpvmUubaqTGI+pdO0t+KQHim3aRwp9wwwSQhIeZf8ZoLgjItWPKNdxkOzsUMNCpm4AFKpwb7ltF2dkSgJQQLVozjIQmgkm6RsjM72/5aGMCutOI7TwMesPHzv1nb6rWqD8AmIdGCyoEsQo4Qz95BdVfN+1fZh1VX4XhYQecZET3lK8B7J8ac3qkiO1Dypyqpw1+6nhqPQ+mlVdbZgR3DN+PqqFkovdKBbDeYZNZ4b2W6XlaNoSY1LRXhdSJ2pzwFnQqhe7uMtUL0OoX/qnqhRn2Su7cf4Mr6hc444RII4Srn8xCNhDkw+EkaC8MVnXyBHKUXfOBT8nK0fireERPzhcwP7WPoJ8534y8UI38Z1JtZBHlGneBlwQtdyJW+El4+YQYSExelh8HMBziU/NtZNrrFwwaZlxuH9L4rUpo6KMI4zykcDtTQc6mWJk78k4L85/RKm1OTXS7Zg716yi9vxXChXhNTal/y3s0ZKumBQ5V1eYumohXgziuR0faDPrwBPJdrtOz3j8tIZmt7wUKLdoWHUDTyqpPuL+VfLQU9Pz0P3Jw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4A0BB6F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4A0BB4F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4A0BB4F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6885A5C0ED331EE0401F0A079928FF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6885A5C0ED331EE0401F0A079928FF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421467355</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6885A5C0EF331EE0401F0A079928FF</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00045_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="73ed1e75-6c8f-4266-a201-060e920f762b"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d8d0d8d2-30ce-4f9d-94e5-4ff0f39d2efc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="cd6e28f1-43c1-4782-991e-978157114d77"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="21f53cdb-a872-4692-9a8b-88d03f8b30fe"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="fe31de70-7820-4bc2-8c75-9af2e99fcd53"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU/I6EP3+/IpO/eiUvlDeOsAMgmgVRCmi+OVOSANE26Q0KS/++psUWwHR63NnmGGy3eye3T05SZ2BMLCcFmMo5pgSxe001H9ss2KXYaWqzYq+odnIn2m1UqmkTYu1MigZtVm1XFEVl7EEuYRxQHhDtQzT1oyyZlkjo+KYFadkFiyj+qIqYxQzEVq4FAxV2YQBYU6atqEmMXEoYJg5BISIORw6Xqvfc4SnAzJMarO+Q5kmjJsLziNH12HBRxAFASxAGup1/cCn7jPHw3MCeBKjj5w+a6gfe9frdWFdLNB4rluGYehGTRc+PsPzM7X5J9uMfJfM6G7dBoQSDEGA34EE1Ud8QX2lFcxpjPki/Ca0qZuGDK2hDdSgaZMzVf9MkKL7ZaQDkDEDGlsAMws2RDMUIwKR8jh0G+rZ7ya42zuKAWEzGofsaP13kBBZoYBGyNdYVlmG7vcRT7SrWUfQcQkMEoZX6E7SJAIQMeU+RjO86WEmyOczJR2/smHihzOWIfg3Y6nr+1gFdP1Edzp4jhj/PzPbn9cuyhgECWqaPWPyPO0OJ+Yde3qO3unEXV73H/WXgd1IIew770Dl4/5YH5M159bHppdi9/Ly+uH2qXqzWj2/47Clt2q81+2071g0H3ReLy+KT4tz5NvdMfBaPjh/Gd8vzWC7ubK21BvdvE8m729TfoPZ1Z9OrRdd+w9jY9Dtr0Yt13Mt9ubdzno9fP/YXr6eB6PLfsW9XY88ULoeTypmQta9yhW0n88fyo/jpwu+WWxvB9e4P/zjj+4nGHoDugm37qI4vghZ47Om/RoOjZkkeMn0FUGeLSU93I7SFfMC/Gd5kRbsa7PU1YmkRjGOCFebcpeUFicRAoR9Rwxzt+62y9Wq3bKNYvGiU+yULw3bMLtGy6jUapZVNDIN2qE4gtimZIZlLqmyO/78DBCGDkPER7G2oglcIKb+ELEDOFBcMhSHgxKGRlSo+HY63SyC12QdRFWToBWGM2tlJZVIVe4oH5BB3JpxFB9It2kcSPcQQRxhJPVdEpwJhjMuerEEq4QHZmEFCgQl4gaIpQg7ll0t6QyHUYAkUj2kfhKgQrSI0s7obPdvaQCy1IoZjGjMQQCZmZ7Abws8/pb1Qvj4WDowWdQFEvNEJy4jO6vo+8qL+5Vn4VuJj+VBE43lMYY7JIefPvkiiZKTZb+0DHu+5dhwEF4/rizP6IsZ5tTP72wh+UIQmtmAlqCwLCSrVZKOpCLFLhbhdaF5pu4hmAjF2o7oGyJ6HkL/1YWRoz7KnNsP8SV8QTwOOAoFgZR0+YvXgoeYfC24gvmb3z5FDlKKvnG04ads7UA8KiTiH98d0IHST5jvxd+axv7nuE7E2ssj6hRPBI7JXK7k1bD9hh2QirBYaBmN94OfCnAq+aExb3KOhQs2TROOvv+iSJFqqABCmhDudtTUsC+cKU6+jZDz6fQlTCrOH7fthn172z73e56QsBCouS/+b2cNp3SBSJWXeoqloW7E41EkJ/M9of4AeKzVpbbdMi7aZtesdfe1utQ1cq0+rKT5xfzVstfT4/PQ/Bc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4A0BC2F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4A0BC1F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4A0BC1F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A4033BD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A4033BD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421470522</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A4033CD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00046_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="182cd069-c969-4f08-9b03-5d3c0bb8ab39"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="d98ba2ea-0ea2-492e-b177-1b32cd265297"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="675714d9-8b17-45a2-9462-feff737416b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="5c7b566c-7dbe-4d38-849a-64f32a048a8a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f12ade23-23b0-440a-a6ca-98f56e4845d5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6uQD8JXVJAolL3pFtoC7Xb7sjLOBFwSJ7WdAP311wlNCpT2sldCQp6MZ87MHB/7nKMwsJwu58AEiaji9tvqH99H9gzqoFm+N9PsqgkaMqqe1vJmtun59abfslTF5TwBl3KBqGirlmHamlHXLGtqNByz4dTsitWwnlTlARiXoaVLxVCVdRhQ7uRp22rCqBMhTrhDUQjcEdiZdIfXjvR0UIFJ7ZxvUeYJWWchROzoOq54gCEIcAVHoX6u7/mce9yZkDlFImHwltPjbfVt72q1qqyqlYjNdcswDN1o6dLH42R+pna+FZvBc6kfbdc9RCNKMArIK8pADUEsIk/pBvOIEbEIPwlt6qaRhdZgjTVs2vRM1d8T5OhOjLQHknGk8QUyi2Bj8IEBxaDcj922enbaBLd7pwxR7kcs5Afrv4MENIUgisHTeFFZge70iEfa1TkH7LgUBwknKYwymsQIA1duGfhkfU24JJ/HlXz8yprLHylYBvhvxnKu72KV0PUj3emTOXDxf2a2O69tlAcUJNAJjNnFCCfLq9pyNQ0ul27fvTPQhn4f/G7nEHadt6DKcb+tD8lacutt06IVWTD348ga15n3+yL2bwez5PJ+9LvmE3Y/fA3v3NsNt5c6CRtXm8C+g5qddO20QUPeWj3PH6meNl/R0yT+9Q3FV6M79Ov7NUP2argONuPqvf9P3eiL9fCnhfTL6bPLH1fBz4snb/Dw44d5xYf09eJhM/sxnI1ux99Hj0+CDqzmJr755q4WkT5aChGag3nKkuebZvu9pt0a9o2FJEyS2TNgUSwzerh9ZSDnhcTX8pJZiKf5uasTZxrFBVChdrJdmbQ4iRQg4jlymNv1oFdv1k2z17OaZt+y+5eGbZgDo2s0Wq1G9dIqNGiL4gBiL6Ky12EuHsqWP18DxKHDgXrAtDRK8AK4+kXEPhJIcelYHo6IcphGUsXNtFFny1bDfKlVGyZpma81K7V4i1VVZRSJG3rDur4AtqfdprGn3WPAJCaQCXzGcC4pzoVsxgtKExGYlRRVKCTyCmCZCjuW3azpnIRxABlUPYy8JIBKvIjz1uh8+29pCPPcOr6c/ulN/pj58fu0usNvRSOkj0cyB54VdAFymHDkJrKLaj6vurpbdRG+m3gkO2Wyq4IRvEWy/+mdLBlLSqYUZRW4S/dDw15o/bCqMpuXElxyvryspdZLJegUg3lBlZdKkqZJPopGpnJMhtel2Jn6BHAipWozjZZA9TKEftJNUaI+yFza9/ElYkEnAgkIJXGUfHnCM2ECPHsmuJLy61PfIHspZd8ErMUxWy+Qr4kM8ZcPDuzgzE+ab+XfKmLe+7iOxNrJI+uUbwNB6DxbZXfC5hNm4EiGJVLEIrYb/FiAY8n3jWWTSyxCsmmWCPj8i5KpU1tFGEcJFW5fzQ27ipnjFJsYnHenD2FyVX67Ztf802v2cXg9kdoVIrX0Jf/trJGcLhjU7DbPsbTVtXw1yuR0vqPQbwAPRbrWs3uDaq/av7B7uyJdG9TqZQP3Kul8MH+07PT08Dx0/gU=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4CF3C4DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4CF3C3DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4CF3C3DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC68611CC281D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC68611CC281D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421473718</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC68611CC282D24DE0401F0A079973E2</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00047_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="33460527-5c3b-4a9b-bd07-c326fce321b8"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="32d6bf0a-38f4-42e0-955b-6606a89cc13e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="66bc9fd6-cd3b-4e34-b526-166ea7b771cf"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="9d1278e0-2082-4f4e-a6e3-c725dd7aed53"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="a76f1efa-ae53-4885-89af-0a63cb0db98f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSxyrkgwAhAiQKy5YtLV2gH/BSGccBbxM7xE6A/vq1Q5MCpb3dKyEhT8YzZ2aOj91gIAwst80YijmmROl3m+qzb4FqteI4Wt2woWb7ZV+bG9DQPMfxKtC3PA8gVekzlqA+YRwQ3lQtw7Q1o6pZ1sSouWbNrdRKVsWZqcoDipkILVxKhqpswoAwN0vbVJOYuBQwzFwCQsRcDt1x+2bgCk8X5JjUVmOHMksYt5acR66uw5KHIAoCWII01Bv6gU/DY+4YLwjgSYzecnqsqb7tXa/XpXW5ROOFbhmGoRt1Xfh4DC/O1dZZvhl5feLT3boDCCUYggC/AgnqBvEl9ZR2sKAx5svwk9CmbhoytIY2UIOmTc5V/T1Bhu6bkQ5AxgxobAnMPNgI+ShGBCLlftRvquffm+Bu7yQGhPk0DtnR+t8gIZKigEbI01heWY7u+xFPtKvVQNDtExgkDKfoVtIkAhAx5S5GPt4MMBPk85iSjV/ZMPHDOcsQ/JexNPR9rAK6fqI7XbxAjP+fme3PaxflAQQJaoHr6fTBsq6szfbx4urxfgbSl8eATjus38wg7DvvQBXjflsfk7Xg1tsmbwZ8cEvbJnqdz53h6Ak/9C7SmW4vIJ063nS6fSSdcmJa7dvHn7No4jxcOdfbH7PlK5vo5SW/vBo9bga114d4gs4m17/92WCw7m7GL3Pv13W09qv2+G46XL3iVb9T/+XX/d/3Juc2HJsmD9YX7HWyRL0X82b40kudZdr7ub0Y1iu3w/DsCQeJ5TzRm/Bic1O99zoru/le034Nh8ZcEsbJ/A+CPF9KevS7Sk/MC/Cv5UVasKf5masbSY1iHBGutuQuKS1uIgQIe64Y5m7d61Qdp3JZvey0jXbbcH4YtmH2jLZRq9etulHONWiH4ghihxIfy1xSZXf8+RogDF2GiIdiLaUJXCKmfhGxCzhQ+mQkDgclDE2oUHEzXa5JOYLVbWgE0bxuGHGQmvM/RFVuKR+SYdz2OYoPpNs0DqR7hCCOMJL6LgnOBMMZF71YgTThgVlKQYmgRNwAsRRh17Kdis5wGAVIItVD6iUBKkXLKOuMznb/lgYgy6zdQXt899wZP5vZ+fu0vONveSeEj4elA5MlXSIxTXTiKrLzej6vu7xfdx6+nXhYHjPRVh5juENy+OmdLZImBVXeC8uRFxuODQfB9eO6inxeimFB++K+FnIvxKCVD2cFSqtSkqZJNo6aFLpYhNeF3pn6GMFEqNV2Ql8Q0YsQ+rcuiwL1UebCfogv4Usy5oCjUJBHyZbfeCmMEZMvhb5g/ea7z5CDlKJvHG34KVsnEA8KifjLNwd0ofQT5jvxt6ax9z6uE7H28og6xfOAY7KQK3ktbD/hBqQiLBY6RuP94KcCnEp+aCyaXGDhgk3zhKPPvyhSoJoqgJAmhPe7ambYF80MJ99GyH13+hAmE+a3m3bDPr1pn24GYyFfIVALX/zfzhrO6ALFO1P4Z1ia6kY8HEVystgT6TeAxzpd6djdH5ddu9st1/Z1utIz7KKBB5W0Ppg/WvZ6enweWn8B</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4DEBD5DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4DEBD4DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4DEBD4DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6885B6BCA0AA08E0401F0A07992903</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6885B6BCA0AA08E0401F0A07992903</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421476697</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6885B6BCA1AA08E0401F0A07992903</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00048_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="092fc6d7-e3ea-4579-807a-d687d978782e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="b64368ee-ee81-46a1-8083-d79f13f17d04"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="a59f46e8-657e-423f-8c53-14e67fbb2b59"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c974798a-9325-433b-a89c-dbe13890a2aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="1918a917-ae07-4f94-9e34-1c4d1915b4ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdU+o8EL73V3TqpVPaUirQEWZ6QDz1IKIFRW+ckC4QbVNsUj789ScptgKir+edYYbJdrP77O6TJzljKArLjssYJJzEVPHaDfXJwGYFzPGpBhgFWmVi2loNWXWtatoI4aBcH0+wqniMpeBRxhHlDbVsmBXNONXK5YFRdcyqY9dLdct6VJU7SJgILVxKhqqsopAyJ0vbUNOEOjFihDkURcAcjh3fveo6wtNBOSa1ebZBmSVMmjPO546u41IAGMIQl3Ac6Wf6js9ZwByfTCniaQLvOQPWUN/3LpfL0tIqxclULxuGoRt1XfgEjEyP1eZRvhkCj07izbqFaEwJRiF5QxLUFfBZHChuOI0TwmfRF6FN3TRkaA1WWBNdpceq/pEgQ/fDSDsgE4Y0NkNmHuwWJpAAxaAMb72GevyzCW72DhJE2SROIra3/jdIQBcQxnMINJZXlqP7ecQD7WqeAXY8isOUkQX0JE3mCANT+glMyKpLmCBfwJRs/MqKiR/JWQb4X8Zypm9jFdD1A91pkykw/n9mtj2vTZQ7FKbQbMN8POovyqg+ejtZli1rahv9m1aCfw0bGYRt5w2oYtzv632yFtx63+RfpvZLf90LTDQK+9M/tbjq+ve3s8GlUb9L0NKt+u2bWu/80W29zO1T5F6sY1RdTy6W3hARG67G6UN7cP+8nnbdo86wT4L5zXOt/Rstfl+fGNXOwPLMUasaXg4fegMMeDyr3XeuzZvlZX/08Aet9elFRCyfjtY316HR681Ohg84GeHwCJvnl3dhxxvecRufPBJaYY2PmrZr2DXmkuCn42fAPF9KenhtpSPmhfj38iItJNAmmaszlxrFOFCuNuUuKS1OKgSIBI4Y5mbdaZ3WahW3Ylin9bbVPj03KobZMVyjWq+Xy5aRa9AGxR7EVkwnROaSKrvhz/cAceQwoAEk2iJO8QyY+k3ENuJI8eitOBwxZTCIhYqbCUT8ZblgUA1TE70torQ2Y4AIUpVezK/pdeJOOCQ72m0aO9p9C5jMCUiBlwxnguKMi2a8okXKQ7O0QCUKqbgCEqnCTrlSs3VGonkIEqoexUEaQmk+m2et0dnmv6whzDJrt+v6/aeW/2RmB/DL+va/5a0QPgGRDkyW9AvEOOHAXVTJ6/m6bmu77jy8mwZEnjPRV54QvEGy++mDLpInBVc+CsuRFxv2DTvB9f26inzBguCC98WFLfReqEEzH84rKr2W0sUizcZRlUqXiPC6EDxT9wGnQq7Wg/gFqF6E0H90WxSo9zIX9l18KZ9RnyMOkSCPki1/8FTwgcmngidov/rpO2QnpegbhxU/ZGuF4kUhEX/76MAOln7C3Bd/yzgJPsZ1INZWHlGneB9wQqdyJe+F9RfcwLEIS4SQxcl28EMBDiXfNRZNLrBwwaZxyuHrL4pUqIaKMI5Tyr22mhm2VTPDyddzcD6cPoXJlPn9ql2xL6/a0VXXF/oVIbXwJf/trJGMLhhUeaNnWBrqSrwcRXI63VLpd4D7Qm237EqtZrlVo1XZFmq7Y9eKBu5U0vxk/mzZ6un+eWj+BQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C54883B70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C54883A70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C54883A70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A40369D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A40369D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421479365</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A4036AD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00049_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_ResetPassword_200_OK_P2" searchProperties="true" id="5ef27bc6-91b5-4b20-8ed3-cb46c5662b35"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="251ae7e7-26aa-43c3-8568-e18506eee2fa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="56a99b49-3e43-49d8-99f4-7ee4f50a5537"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="268ba7a9-4ddc-4d45-8dbc-165af8337c88"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="b97739b3-4e52-4880-87f0-8245e22c8605"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chHwRIo4LEhbKN+glpe8u+XBnHgLeJHWwnhP76aweSAqW93SshIU/GM2dmjo99zkESO36fc8QEpkQLhl39n8ieAdexPWMeoabhWjNgeJHlGd4Zcl1kARs4HV0LOM9QQLgARHR1x7Jdw2objvNgdXzb8y2n0Wk5v3TtCTEuQ0uXhqVrRRIT7pdpu3rGiE8Bx9wnIEHcF9AP+zfXvvT0QYVJ751vUZYJWW8pROqbJmxECKI4hg1IE/PcPPA5j7gf4gUBImNolzPiXX23d71eN9bNBmUL07Esy7TOTOkTcbz4rve+VZtRFJA53a4HgFCCIYjxK1CgbpBY0kjrxwvKsFgmH4S2TdtSoQ1UQAPaLvmum28JSnRfjHQAknFg8CWwq2ATNEcMEYi0x0nQ1b9/bYLbvQ8MED6nLOFH6z+DhEiOYpqiyOBVZRW6r0c80a7eOYJ+QGCccZyjW0WTFEDEtXuG5ri4xlySL+JaOX6t4PKHK5Yh+CdjOTf3sUro5onuDPECcfF/ZrY/r22UJxBnqJe11r+9LG9F4ylboef0avXbfg1xPs1pt4Sw77wFVY97tz4ma82t3aZwnJnFL28cFcXwat28xRcvj0/mZeaMyGxxexGm95DBZRBetdFj8TCdkjzMk7HnkIvbtvf3fRxPLn/wv4JJH42fv+HHMetc0undi3U2TX9epMXLcDhZkc1l1Bm1LmOaNYvn500G6d3PFY/GG7N91V55I/c1t3+wW+tn/DR0YZG/0DT6NjGDm+vp5aj5aufj9qq1WdPuW037NRwaK0kIs9lvBEW1VPQIhtpIzguIz+VFWXBkzEtXP1UaxQUiQu+pXUpa/EwKEI58OcztejRoe57bd63mmT1sDtsXlmvZI6tvdc7OHKdpVRq0RXEEcUDJHKtcSmW3/PkcIEx8jkiEmJHTDC4R1z+JOAQCaAGZyMNBCUcPVKq43cJJi2dslq+y1MbRrIN5y7Gaa6Zrt1TckTvWnwvEDrTbtg60e4IgTjFSAq8YziXFuZDNWIE8E7HdyEGDoExeAUypsO+4XsvkOEljpKCaCY2yGDXSZVq2xuTbf8cAkJfW/mBwEQ7C8vR9WNzxt6oP0ifCyoGrev5Ccpbo3UXU8VtVMR8X3dwvugrfzyKsDplsqmAYbpEcfnrjiiJJTZRdVRXs2vvYcBDZPC6qThblGNaMr69qqfRSB3rVWFagsWpkeZ6Vg+gojWMyvCmlzjZDBDMpVJsH+oKIWYcwv3RP1KiPMtf2Q3yZWJJQAIESSRutXH7hkRAirh4JgSR88dUXyEFK2TeBCnHKNojlW0Ih/vS5AX2o/KT5Xv6tKYvexnUi1l4eWad8GQhMFmqlboTNB8SAVIbFUsIo2w9+KsCp5IfGusk1FiHZNMsE+viLprSpqwMIaUZEMNRLw75eljjFJkX+m9O7MKUm7y7Zgn94yT7fXIdSuRKg1774v50NXNIFIl3d5SWWrl7IN6NMThZ7+rwDeFqiPfcziT6spPfO/N6y19Pj89D7Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6884A40385D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6884A40384D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6884A40384D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A40391D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A40391D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421482286</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A40392D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00050_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="ad39890e-848f-446e-bd20-d263d4c87324"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="cd2c24ca-d1d6-4c34-886d-5308e209b255"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="93c037ab-97b0-406f-afbf-f3b81dfa1106"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="ed6af486-7628-4d7b-a7a5-eeff33fd5ec2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP" id="2b06ea7b-9d33-4824-aca5-3bcb9623b022"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="df54bbfd-66c0-476f-bf0e-84e0726939d3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4jSx1WIExICUUGiUFi2pR9At92+XBlnALeJE2IHaH/9tUOTAv243SshIU/GM2dmjo99wnEU2n6bc0gFjZk26Db1f6Zg1xoNXDeIG9QMx7bBmAaBZaAG8ryp5049j+jagPMMBowLzERTt5HlGKhm2PYEeb5V95Fb8er2g679hpTL0NKlgnRtE4WM+3napp6lzI8xp9xnOALuC+KP28MLX3r6uMCkt062KPOEaWshROKbJqkEQCAMSYXEkXli7vmcBNwf0znDIkvhNWfAm/rr3vV6XVlXK3E6N22EkIkapvQJOJ0f662jYjMEAzaLt+sOZjGjBIf0BStQQxCLONDa4TxOqVhEn4S2TAup0AZsiEEshx3r5luCHN03I+2BTDk2+AJbRbARzCAFRkC7HQ2a+vH3JrjdO0kx47M4jfjB+u8gAVtBGCcQGLyorED3/YgftKt1AsQfMBJmnK7gUtEkwQS4dp3CjG4uKJfkC7iWj1/bcPmjBcuA/M1YTsxdrBK6+UF3unQOXPyfme3OaxvlNw4zaDnh3cXg8WbS31hn7T+1R9o9RSLp/+ht6s0cwq7zFlQ57tf1IVlLbr1uWlwNL84XFz+yy+vkUqRJdLtED+K6XuVidDt6oVkyTiABQTx0/txPr/rjxJ2bD+eTzLnvx4/87twV1+v2tPrkBEfO/f1q1Otk98OHn3w+vt1k8ew+u70cOuNrUh1GN73uOrXaPbP/kt4t7XA2Oa26giSns0EHLW/7f36dLaPOCP0cCnQ0HyYJTPs37Yeo7nbv7LTmNN9q2q1h31hIwjibPgIRxVLRY9DVenJeWHwtL8pCA2OWu/qJ0igugAm9pXYpafEzKUA08OUwt+tep1Z3O04bdRpnPavRO0MOsnqojbxGw+0hVGjQFsUBxE7MZlTlUiq75c/XAEnkc2ABpMYqzsgCuP5FxC4WWBuwkTwcMeMwiaWKW9GTi+nTY2AvPctK5gvWWAabFzxjunYZiyt2lbZnAtI97bbQnnaPgNCEghJ4xXAuKc6FbMYSrzIRWpUVrjDI5BWQKhX2bafumpxGSQgKqhnFQRZCJVkkeWtMvv23DUx4bh2dTfKT92lhh9+KHkifgCoHrmo5BTlHeHcJeb5bFPJ5wdXdgovw7Syg6oDJhoqUki2S/U9vPFEEKUkiKyogl56Hhr2o5mFBZaJgRUnJ9PKKlgovz3+rGMcSV5aVbLXK8gF4SttSGd6UEmeZYyCZFKjnSfwEzCxDmN+6H0rUB5lL+z6+TCzYWGABkaSLli+/8TgYA1ePg4Ek+ua7L4+9lLJvAjbiI1snlG8IhfjLZwbxifKT5mv5t47T4G1cH8TaySPrlC8CQdlcrdRN8PwJKUgsw1IpXXG6G/yjAB8l3zeWTS6xCMmmaSbg8y+a0qSmjgmJMyYGXT037OpkjlM8J+C/Ob0Lk2vx6+W64Z9ervfDi7FUrAjrpS/9b2eD5nQhoKs7PMfS1DfyrSiTs/mOLr8CPJTmmlW1nY7d7XqutyvNXrVTSvN+Ja135veWnZ4enofWvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6861324C2ED757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6861324C2DD757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6861324C2DD757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4A0C9EF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4A0C9EF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421485016</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4A0C9FF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00051_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="f3d27da5-2e63-49a6-b72d-da203cd532a6"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="01366f44-bcf3-40f1-8170-69ca7f7dc053"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ab35b33b-636c-420d-899f-85f6346ad389"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="dea86530-cb56-4a92-968d-8964bc0fa06c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV" id="411c04d1-864d-416d-b53f-b06abf800b21"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="415fbc2e-5562-4d6e-9b8c-a59050c80509"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC5dCVJBSLi1deqHQ7tKXI+NMiCFx0tjh0l9/7NCkQEsPeyQk5Ml45puZz599wVAYWLbDGCScRFTpd5rqPxUw3WrdRRrgqalV3EpVq0MVNGR6MK15JtQAqUqfsRT6lHFEeVO1DLOiGTXNssbGuW3WbaNRqtWNF1V5hoSJ0MKlZKjKOgwos7O0TTVNqB0hRphNUQjM5tgeObcDW3jaKMekti62KLOEScvnPLZ1HZdcwBAEuISjUL/Q93wuXGaPyIwinibwntNlTfV972q1Kq3KpSiZ6ZZhGLrR0IWPy8jsTG39yDeD26detF23EY0owSggb0iCugXuR67iBLMoIdwPj4Q2ddOQoTVYYw2bFXqm6h8JMnQnRtoDmTCkMR+ZebBH8CABikF5euw31bPTJrjdO04QZV6UhOxg/XeQgC4hiGJwNZZXlqM7PeIX7WpdALb7FAcpI0u4kzSJEQamPCTgkfWAMEE+lynZ+JU1Ez+Sswzw34zlQt/FKqDrX3SnQ2bA+P+Z2e68tlGeUZBC68lpdO8e6IM37N/cDK86N5HV7fL7of/iNDMIu85bUMW439eHZC249b7pevi0vL12je64/+Z08VIP59Sb90i19vbi/B5F84DN+bzx52YWhz/RdUpG08nPZEh8Wl8YV/5ksXl60PUuvXQm9R8BTOL2gP6eOEGlGner0+mitxBOzmp0mdyFce1lEdQGFq8bkeXP5r/am6fr+6o+5uXnh6CK5pNHfdieO8srOuE/1l1/UB46gZd4jVV52gsYa37UtFvDvjGXhFE6nQPm+VLSo99RemJeiH8vL9JCXM3LXO1YahTjQLnakruktNipECDi2mKY23WvXavXK07FKF92OuVOrWtUDLNnOMZ5o2FZZSPXoC2KA4jtiHpE5pIqu+XP9wBxaDOgLiTaMkqxD0z9JmIHcaT06aM4HBFlMI6EipurN/ONvs7w64KuzNqGhg3sL7zk7VxV7iJ+T+8Tx+OQ7Gm3aexp9yNgEhOQAi8ZzgTFGRfNeEXLlAdmaYlKFFJxBSRShW2rUq/qjIRxABKqHkZuGkAp9uOsNTrb/lsawiyzPnbH2ck7Wtjht7wHwscl0oHJWi5BzBE+XULndjUv5HjB5d2C8/BO6hJ5wERDeULwFsn+pw+eSIIUJBEV5ZALz0PDXlT9sKAikbskuGB6cUULhRfnv5WP4xWVXkvpcplmAziX2paI8LqQOFMfAU6FQG3G0QKoXoTQT7ofCtQHmQv7Pr6U+3TEEYdQ0EXJlic8DkbA5OOgL4i+PvXlsZdS9I3Dmn9lawfiDSERf/vMwDaWfsL8IP5WUeJ+jOuLWDt5RJ3iRcAJncmVvAk2R0iBIxGWCOmKkt3gXwX4Kvm+sWhygYULNk1TDse/KFKTmirCOEop73fUzLCrkxlOvonB/nD6FCbT4vfLdc2OXq5/bgcjoVghUgtf8t/OGsnogkGVd3iGpamuxVtRJKezHV1+B/hJmquNy4ZpGZVKu7wnzfVep2jgXiWtT+bPlp2eHp6H1r8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68859B912144C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68859B912044C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68859B912044C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A403BDD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A403BDD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421488881</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A403BED3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00053_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d7d00fbb-c93a-46bd-a3f5-a8530d66090c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="38dd4853-d49d-499a-9d12-20cf4fea537d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="9cd70134-6697-4231-acab-82c3b2b430e0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="7d8720d7-2ac0-46d9-ae58-d43c3743aec7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS" id="b6934bbe-be74-445e-8d9e-2bd8352286aa"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="d16fa228-5958-4ba9-bbdd-e977cbb876ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtb+I4EP6+vyLKfjyFvBAoiQoShLLLLW05oFv2vpyMMwF3g53GDgR+/dmhSYGlve5JSMiT8cwzM48f+5qjdez4Xc4hFYRRbdhv6/9g7CHUqLuGB27LcJ1Gy1iEi8iAaIGv7MjxoNXStSHnGQwpF4iKtu5YtmtYTcNxZtaVb7d826l5nve3rn2HlMvQ0qVm6Vq+jin3i7RtPUupzxAn3KdoDdwX2J92b0e+9PRRiUnvXB9QFgnTzkqIxDdNXAsBQxzjGmZr89o88bkOuT8lS4pElsJLzpC39Ze92+22tq3XWLo0HcuyTMszpU/IyfKz3vlUboZwSCN2WAeIMkowiskeKVC3IFYs1LrxkqVErNZvhLZN21KhDcixgW2XftbN1wQFug9GOgGZcmTwFbLLYBOIIAWKQXuYDNv6549N8LB3liLKI5au+dn69yAB3UDMEggNXlZWovt4xAvt6lwD9ocUxxknG7hTNEkQBq6NU4hIPiJcki/kWjF+LefyR0qWAf6dsVybx1gldPNCd/pkCVz8n5kdz+sQ5TuKM+hMR5O6a8/RH8vFprm/aSZu3L/tTUb7kLULCMfOB1DVuF/W52StuPWyqZuP6A5a6T4QgfDmdw8/xWPO5pP5Fe97ztPNfnub/inm3xffxvlfo+WY34ygdxWhpw2sI9JN7r7sg9Eq/9F8fjQ/rb7UZ/357uuGjWaz6PGbeHRWOz7drepRd/94t0h2wbi3f3qo5+OnORFuK/qBH6LdpEH720b3Zu20+l+b3moyZvXmJ9wM7odO0tux8fy2+3Ox2eH2a03HNZwaS0mYZosnwKJcKnoM+9pAzguJ9+VFWUhoRIWrnyiN4gKo0Dtql5IWP5MCREJfDvOwHgTNViNwg4HrDfo9N7ixXMseWF3ryvMag0az1KADijOIAaMRUbmUyh748z5AvPY50BBSY8MyvAKuvxOxjwTShnQiDwejHGZMqjh6boa50/QE3+93TRa6dZfuE2uva3dM3NP7tBsJSE+U27ZOlHsCmCQElLwrfnNJcC5kK57RJhOxXdugGoVMXgCp0mDfcVsNk5N1EoMCaq5ZmMVQS1ZJ0RiTH/4dA2FeWCc3s+LcvVnW+beyA9InJMqBq1p6IKcIF64gqyzk7YLrxwWX4btZSNTxku0UKcEHJKefXlmi6FFRRFZUQq48zw0nUc3zgqpE4YbgiufVBS31XZ7+TjmOZ1R7rmWbTVYM4EopWyrDm1LgbHMKOJPytJuxn0DNKoT5oduhQn2WubKf4svEik4FErCWdNGK5QeeBlPg6mkwlDTPP/ruOEkp+yYgF5dsQSxfEArxu48M7GPlJ81j+bdlafg6rguxjvLIOuV7QBC6VCt1D+zeIAVmMiyRwsXS4+CXAlxKfmqsmlxhEZJNi0zA2180pUhtHWHMMiqGfb0wHKtkgVPsEvBfnX4JUyjxy9Wa8zev1vntaCr1ao30ypf8t7NBCrpg0NUNXmBp67l8KcrkdHmkyi8Az4W51fB6nu0GrhvUj4XZaQ36VQNPKun8Yv7VctTT8/PQ+Rc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68859B914D44C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68859B914C44C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68859B914C44C3E0401F0A079928FD</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4CF49FDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4CF49FDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421492431</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4CF4A0DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00054_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_ResetPassword(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="df957b5a-d84d-4a33-8e5b-7a609508f7c5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="be115966-523f-4806-90ba-d789b137d6a3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="64aa6219-6ea4-4d0b-8f0d-5823f787d98b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0e7d058c-4790-4b8a-b2ae-8900fd14f006"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON" id="1ca74404-2944-471d-bb13-5d4da3f6cd7a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="689c8b32-a79b-4e9a-b723-34a86f6448da"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP7ur+jUj07pCy+FjjCDIOfUF1CL6PHLnZCGNlqSkqSA/vqbFFsB0eu5M8ww2W52n9198iSnHMwTx+tyjpjAlGh+v63/49rNRmNqh4blhk2jNq3XjWa14Rhh03WbKGzMZtWGrvmcZ8gnXAAi2rpj2TXDahiOM7Zcz256tltpWNaTrk0Q4zK0dKlYuraeJ4R7edq2njHiUcAx9wiYI+4J6AXd6ytPenqgwKR3Tjco84SsEwuReqYJKyGCKElgBdK5eWru+JyG3AtwRIDIGHrPGfK2/r53tVpVVtUKZZHpWJZlWi1T+oQcR8d656jYjEKfzOhm3QOEEgxBgt+AAnWNRExDrZtElGERz78IbZu2pUIbaA0NaNfIsW5+JMjR/TDSDkjGgcFjYBfB7tAMMUQg0u7v/LZ+/LMJbvaOGSB8Rtmc763/DhIiS5TQFIUGLyor0P084oF2dU4R9HwCk4zjJRoqmqQAIq7dMDTD6yvMJflCruXj19Zc/nDBMgT/Ziyn5jZWCd080J0+jhAX/2dm2/PaRJmAJEOd2E0n5kMcXF6awxqcmsPheOa8pI8nT7ftHMK28wZUOe739T5ZS269b7p5uf/1FLZGwTmodePzlf8WD16jRhA8VwfMHp1F4+rtZd+/HC7ur5q3rz0wuubOyg9a6TUc119GXXNNs+t7MbVv8FH0UJ2c/R7QENQvlmTSIjw4852bl+dwcksZuCW9k98RDC12+etEPCz+XKzok+2Yr/U/1uND3ExHF32W8IE1eLhgR8OJXXuajfjl9PbMv1/BySNtf9S0XcOusZCEIJs+IyiKpaKH39cGcl5AfC8vyoJDY5a7eqnSKC4QEXpH7VLS4mVSgHDoyWFu1oNeo1nv1XpuazCo1arOuVWz7IHVtdxWqz6wmoUGbVDsQexRMsMql1LZDX++BwjnHkckRMxY0gzGiOvfROwDATSf3MnDQQlHYypV3G5FYEbI8i2uLojbiBo0A01ht+TxGFIxIiPWnQnEdqTbtnak+w5BnGKk9F0RnEuGcyF7sQDLTCR2ZQkqBGXyBmBKhD2n1qybHM/TBCmk5pyGWYIqaZzmnTH55t8xAOS59e58nB+8L+va/1a0QPqEWDlwVcsZkmNEB+4gqyjk64Kr2wUX4btZiNX5kv0UDMMNkt1PHzRR/Cg5IisqIJee+4adqOZ+QWWicIlhSfTyhpYCL49/pxjHAlQWlWy5zPIBuEramAxvSoWzzQDBTOrT65i+IGKWIcwfXQ8l6r3MpX0XXyZiEggg0FzSRcuXP3gbBIirt4Eveb7+6cNjJ6Xsm0BrccjWS+QTQiH+9pUBPaj8pPlG/q0oCz/GdSDWVh5Zp3wQCEwitVIXwesXpIBUhsVSuSjbDn4owKHku8ayySUWIdk0zQT6+oumJKmtAwhpRoTf13PDtkzmOMVrirwPp09hcil+v1vX/Mu79fH6KpCCNQd66Yv/29nAOV0g0tUVnmNp62v5VJTJSbQly+8A95W5YVedWt+q9926u63MbrVnlQ3cqaTzyfzZstXT/fPQ+Rc=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6861324D06D757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6861324D05D757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6861324D05D757E0401F0A079973C0</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4C79FF4432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4C79FF4432E0401F0A07995F08</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421496535</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4C7A004432E0401F0A07995F08</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00055_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_ResetPassword_(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d2932e18-10fb-470d-b28b-b6abaf764742"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="2eb26f0f-5cea-4b81-aacd-0d82f87851be"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="d0034ffd-73a1-4949-984c-d86ae46042b4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="6948ab8f-96b8-416c-8dac-cb2545538137"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS" id="a98b5ac4-093a-4dd0-babc-e572887f623d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="0c01cb44-42bd-42d7-ac10-bcf0073cbfcc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH6uQOIRLooJEoexJW3rh0pZ9OTKOA94mdho7gfbXrx2aFFja0z0SEvJkPPPNzOfPPuUwjmyvxzlOBWFU8wcd/d+w7jqh3Q4NCBzHcJC7MNqB2zLazQWw3CaAAFq65nOeYZ9yAano6LYFHMNqGrY9tVoeaHu2XXMazk9du8cpl6GlS03u2sQR5V6RtqNnKfUY5IR7FMaYewJ5k97oypOeHiwx6d3TLcoiYdpdCZF4polqAUY4ilANsdg8Nfd8TgPuTciSQpGl+C1nwDv62971el1b12ssXZq2ZVmm5ZrSJ+Bk+V3vfis348CnIduu+5AyShCMyCtUoEZYrFig9aIlS4lYxR+EBiawVGgDb5CBgEO/6+Z7ggLdFyPtgUw5NPgKgjLYGIc4xRRhbTb2O/r3r01wu3eaQspDlsb8YP13kDDNccQSHBi8rKxE9/WIR9rVPcXI8ymKMk5yfK1okkCEuXab4pBsrgiX5Au4Voxf23D5IyXLMPqbsZyau1gldPNIdwZkibn4PzPbndc2yj2MMtydJevnzJ09QD6+PA/JaIj8WPw8mT3O2p0Cwq7zFlQ17rf1IVkrbr1tivqN+Sg1W/4Zv34duezqAbhJOH9kC+dyzlr5TfDAGubd4GVm/bgFJ/llrzdtoNk4nU/cPHi9Hc3rzdaKZs1xM/oGHts/Tn7N6dOGA3swiy8sK7zok9u784vpSfM+tEeD/GTugx8X1A1u707uL6+uIXVjdLU+S9pP/bsXnG9ICJ6y/uDb3Z01dZ/AP4v26yJ5bbVaLu+817Rbw76xlIRJtviFkSiXih7+QBvKeUHxubwoCwmMsHD1EqVRXGAq9K7apaTFy6QAkcCTw9yuh/1mu9F3elZ/WB8Cd3huORYYWj2r5bqNoWWVGrRFcQCxz2hIVC6lslv+fA4QxR7HNMCpkbMMrTDXP4k4gAJqPh3Lw8Eox1MmVRwkbUuu8kXytHJAsxG4q/RXEsSrQNeumbihN2kvFDjd025g7Wn3GCOSEKwEXjGcS4pzIZvxDPNMRKCWwxrFmbwCUqXCnu20GyYncRJhBdWMWZBFuJaskqI1Jt/+2wZEvLCOz6fFyfuwsMNvZQ+kT0CUA1e1nGE5R3zkEgJlIR8XXN8tuAzfywKiDphsqEgJ2iLZ//TOE0WQiiSyohJy5Xlo2ItqHhZUJQpygiqmV1e0VHh5/rvlOJ5h7bmW5XlWDKCltC2V4U0pccCcYJRJgXqZsidMzSqE+aX7oUJ9kLmy7+PLxIpOBBQ4lnTRiuUXHgcTzNXjwJdE33z15bGXUvZN4I04ZutH8g2hEH/6zEAeUn7SfCv/1iwN3sd1JNZOHlmnfBEIQpdqpW6Clw9IgZgMS6R0sXQ3+LEAx5LvG6smV1iEZNMiE/jjL5rSpI4OEWIZFf5ALwy7OlngFC8J9t6d/ghTaPHb5brhH16uj6OriVSsGOqVL/lvZ4MUdEFYV3d4gaWjb+RbUSanyx1dfgN4RJr7rV7dcpy6fSDN7aqBe5V0/zD/adnp6eF56P4G</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4C7A314432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4C7A304432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4C7A304432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4A0CF3F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4A0CF3F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421501219</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4A0CF4F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00057_UVTC_PrimaryEmail_valid_Role_DECE_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="e32ba329-bfad-45de-938b-992adc166c15"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="98bb35cc-230a-47c9-beb9-ee31fb7886b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="1ac48c2f-18c6-4dc9-84f9-80d39802f725"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="ed88f563-1d66-4860-a94e-0ad302fde345"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DECE" id="aa909293-f1c4-48c1-9cd5-cbb56e7475a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECE"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="13f757b5-26a9-4109-b8c6-03541da5ea57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DECE</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGljyjkg0BCVJAo0C67pe0Wyrb7cuU6E+JuYtPY4aO//tqhSYGlvd0rISFPxjNnZo6PfcpRmjhBj3PIBGFUGw06+j+WH/q223g0fNuKDBeitoG8ZmjYURS2203XsZu+ro04z2FEuUBUdHTHsl3DahmOM7W8wPYDx6s3m+4vXZtBxmVo6VK3dG2dJpQHRdqOnmc0YIgTHlCUAg8EDia98WUgPQNUYtK7p1uURcKsGwuxCEwT10PAkCS4jllqnpp7PqchDyZkTpHIM3jNGfKO/rp3tVrVV406y+amY1mWabVN6RNyMj/Ru1/KzRCOaMS26z6ijBKMEvKCFKgxiJiFWi+Zs4yIOH0ntG3algptwBob2HbpiW6+JSjQfTLSHsiMI4PHyC6D3UIEGVAM2t3tqKOffG6C273TDFEesSzlB+u/gwR0CQlbQGjwsrIS3ecjHmlX9xRwMKI4yTlZwpWiyQJh4NpNBhFZXxIuyRdyrRi/tubyR0qWAf6bsZyau1gldPNIdwZkDlz8n5ntzmsbZYaSHLpn/OwRfrzAhR+t5vjpN768j3nteby8X3UKCLvOW1DVuF/Xh2StuPW66e4i2YQwufr5iB/EWfwcR/jmyYsbgxb+mn8dXlsv35Y1BqTXT64GcXMzG980KbDEm5pPrTH58XXUuLj4OTvzet97XzabpLZePwH3azf027UZ3z4MfvMLdL4YN54Se/zrIa3d9Ws+Gc08517ugd4LTrxhuuTUauW9NKmh77g984jPvpxPTddxGiPRfnx2Z+zbj4uHzltNuzXsG0tJmOSPT4BFuVT0GA20czkvJD6WF2UhoREVrsFCaRQXQIXeVbuUtAS5FCASBnKY2/V5v+U3++5g2Hf8waDhDS3Xss+tnuXJI3VuuaUGbVEcQOwzGhGVS6nslj8fA8RpwIGGkBlLluMYuP5BxAESSBvRW3k4GOUwZVLFbSE1ma34ym45CPhm5carTavttXXtiolrep31IgHZnnTb1p503wImCwJK3xXBuWQ4F7IXz2iZi8SuL1GdQi5vgEyJcOC4ftPkJF0koJCaKQvzBOqLeFF0xuTbf8dAmBfW2+G0OHjv1nX4rWyB9AmJcuCqljOQY4Qjd5BdFvJ+wY3dgsvwvTwk6nzJfoqM4C2S/U9vNFH8qDgiKyohV56Hhr2o5mFBVaJwSXBF9OqGlgIvj3+3HMczqj/X8+UyLwbgKWnLZHhTKpxtTgDnUp82U/YbqFmFMD91PVSoDzJX9n18uYjpRCABqaSLViw/8TaYAFdvg5Hk+fqzD4+9lLJvAtbimK2fyCeEQvzhKwMHWPlJ8438W7EsfBvXkVg7eWSd8kEgCJ2rlboINu+QAjMZlkjlYtlu8GMBjiXfN1ZNrrAIyabHXMD7XzQlSR0dYcxyKkYDvTDsymSBU2wWELw5/RGmkOLXu3XN371b78eXEylYKdIrX/LfzgYp6IJBV1d4gaWjr+VTUSan8x1ZfgV4qMz2sOc3ml7fbg/bu8osbzmvauBeJd0/zH9adnp6eB66/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA8357D19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA8357C19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA8357C19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4DEC28DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4DEC28DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421506374</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4DEC29DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00058_UVTC_PrimaryEmail_valid_Role_Portal_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="13d208c1-2627-4be0-876a-497d237723ec"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c609ab12-3da0-46c1-b680-2d655f3b73e9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="9c724b91-be97-4135-ac75-0a9c58f2a997"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="79d80d21-8e00-45c8-9bd6-f83b0ea58a9d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="dca922ea-6e5a-464d-87eb-7b77e0c6f333"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC6EhUUHilt1sL0uh2+3py5HrDOA22CF2uPTXrx2aFCjt6R4JCXkynvlm5vNnn3E0T5ygwzlkgjCqRf2W/i/4TdfzXNeI3frEcDG2jYcHZBkOwo5tY5hYTaRrEec5RJQLREVLdyzbNaxTw3FuLC+wm0Hdrll+817XbiHjMrR0qVm6tp4nlAdF2paeZzRgiBMeUDQHHggcjDuXF4H0DFCJSW+fbVEWCbP2TIg0ME1ciwFDkuAaZnPzzNzzOYt5MCZTikSewUvOmLf0l72r1aq2qtdYNjUdy7JMyzelT8zJ9ERvfyk3QxzRCduue4gySjBKyDNSoC5BzFisdZIpy4iYzd8JbZu2pUIbsMYGtl16opuvCQp0n4y0BzLjyOAzZJfBRjCBDCgG7dcoauknn5vgdu9NhiifsGzOD9Z/BwnoEhKWQmzwsrIS3ecjHmlX+wxwEFGc5Jws4UrRJEUYuDbMYELWF4RL8sVcK8avrbn8kZJlgP9mLGfmLlYJ3TzSnT6ZAhf/Z2a789pGuUVJDu1sev7YZcP6VWouMnT/dOkleHDxfDfKVq0Cwq7zFlQ17pf1IVkrbr1sGowi524TPm3OnbrfWHTDr99Onze4PorP4cmrP5FwdO9tRsxr/vO1/x2u/PFsvcq73cElfhzk3dRxN35vQcniV+/6izuM2LD5PfyVE8eZnteH3zo5Cm/pAD2m3sAPJ7fT9fo5/H7bj6+tJvsNs2Hy4xKu4C7sjfzJvN/tX9PfTuOH3+9/ycf3/vjrw4xd4/Epm11f3Uet15p2a9g3lpIwzh8eAYtyqegR9bVQzguJj+VFWUhsTArXIFUaxQVQobfVLiUtQS4FiMSBHOZ2HfZOm41ew212mp5n9dyB5Vp2aHUsz/cbYaNZatAWxQHEHqMTonIpld3y52OAeB5woDFkxpLleAZc/yBiHwmkRXQkDwejHG6YVHHbQ/TpEQnq5MRPZ15uOY+pvcywrl0x8ZP+zDoTAdmedNvWnnSPAJOUgNJ3RXAuGc6F7MUCLXOR2LUlqlHI5Q2QKREOHLfZMDmZpwkopOacxXkCtXSWFp0x+fbfMRDmhZVwnLJMoMQuzt+75R1+KzshfWKiHLgqqQtymnDkKnLKet6vu75bdxm+k8dEHTPZVpERvEWy/+mVLYomFVVeCyuRVxsODXvBzcO6qnzxkuCK9tV9LeVeikG7HM4C1Ra1fLnMi3F4SugyGd6UemebY8C5VKvNDXsCalYhzE9dFhXqg8yVfR9fLmZ0LJCAuSSPViw/8VIYA1cvhUiyfv3ZZ8heStk3AWtxzNZL5INCIf7wzYEDrPykeSj/ViyLX8d1JNZOHlmnfB4IQqdqpa6FzTvcwEyGJVLHWLYb/FiAY8n3jVWTKyxCsukhF/D+F00JVEtHGLOciqivF4Zd0Sxwik0KwavTmzCFML/ctGv+7k17d3kxlvI1R3rlS/7b2SAFXTDo6kIvsLT0tXw4yuR0uiPSLwDf6rTbCxunbr/r9g50+rRq4F4l7Tfmt5adnh6eh/Yf</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4CF565DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4CF564DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4CF564DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C548A8770C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C548A8770C4E0401F0A07995F58</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421510509</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C548A8870C4E0401F0A07995F58</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00059_UVTC_PrimaryEmail_valid_Role_Retailer_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="387d560b-000f-4c43-821c-6cb8b98c5023"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3f5c9a72-fc7d-4258-aad6-f37310e3783a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b1a582b8-334d-41cc-9ba2-3ab9255d0ca2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="fe7fe438-f3c0-4030-bb86-ceb60399ce21"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="11302146-740f-4bef-ae7b-0e540846a6b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxGlj6uQC/eoIFEuFaeldIGynH05Ms4kuJs4qe1w+/XHDk0KlPZ0j4SEPBnPfDPz+bOvOYpCx+1wDkyQmGrDXkv/p1y17aXn1w2rUasblUrDMtAS+0Zz2WxWPahA1Ue6NuQ8hSHlAlHR0h3LrhhWzXCcmVV37YZbLpca1dovXZsD4zK0dClZuraNQsrdLG1LTxl1Y8QJdymKgLsCu9PO6N6Vni7KMent6wPKLCFrr4RIXNPEJQ8whCEu4Tgyr80Tn2uPu1MSUCRSBq85Pd7SX/duNpvSplyKWWA6lmWZVtOUPh4nwZXe/pZvBm9I/fiw7iIaU4JRSPZIgRqBWMWe1gmDmBGxij4IbZu2pUIbsMUGtiv0SjffEmTovhjpBCTjyOArZOfBJuADA4pBe5oMW/rV1yZ42DtjiHI/ZhE/W/8ZJKBrCOMEPIPnleXovh7xQrva14DdIcVhyskaHhRNEoSBa48MfLK9J1ySz+NaNn5ty+WP5CwD/CdjuTaPsUro5oXu9EgAXPyfmR3P6xBljsIU2i+1ZrjrPNXH5QfCqPew6Hgvvd50sVuOWhmEY+cDqGLcr+tzshbcet3k2+askQg035u/Hx+bzsKa3JH0lz+vRIvkKRlPUT/tyrO6r5arfD7dLpuVv3y0n/Jy/KOzGC/x9sfdeDTv7W928G01WLIn8CfzLvu+3z91vwcBW992xKzi/R326usOHt2W+SZ4HNac/aJ5u+3+fB4Go8bd8+RnMJrexjWWrm/6A4h48M2KagnFo/49X950a6uKc9NovdV0XMOpMZeEabp8BizypaLHsKcN5LyQ+FxelIV4hp+5uonSKC6ACr2tdilpcVMpQMRz5TAP60G31qh2Kx2r5/QHdnPQtyqWPbA6Vl0eqoFl5Rp0QHEGsRtTn6hcSmUP/PkcII5cDtQDZqzjFK+A659E7CGBtCGdyMMRUw6zWKq4vXl2ls/7HWObaLWpbZIwqQuf19e69hCLMR2zji+AnUi3bZ1I9wQwSQgofVcE55LhXMhevKB1KkK7tEYlCqm8AZgSYdepNKomJ1ESgkJqRrGXhlBKVknWGZMf/h0DYZ5ZJ/1ZdvA+rOv8W94C6eMR5cBVLTcgxwgX7iAnL+TjgsvHBefhO6lH1PmS/RSM4AOS009vNFH8KDgiK8ohF57nhpOo5nlBRSJvTXBB9OKGlgIvj387H8cLKr2U0vU6zQZQV9LGZHhTKpxtTgGnUp92s/g3ULMIYX7peihQn2Uu7Kf4UrGiU4EERJIuWrb8wttgCly9DYaS59uvPjxOUsq+CdiKS7ZuKJ8QCvGnrwzsYuUnzY/ybxMz721cF2Id5ZF1ygeBIDRQK3UR7D4gBY5lWCKVK2bHwS8FuJT81Fg0ucAiJJuWqYCPv2hKklo6wjhOqRj29MxwLJMZTrFLwH1zehcmk+LXu3XLP7xbF6P7qRSsCOmFL/lvZ4NkdMGgqys8w9LSt/KpKJPT4EiWXwFeUOZeud/vW+Wb6oky9wf9ooEnlbTfmd9bjnp6fh7a/wI=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4D3EEF03B5E0401F0A07995EFE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4D3EEE03B5E0401F0A07995EFE</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4D3EEE03B5E0401F0A07995EFE</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4A0D2EF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4A0D2EF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421513200</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4A0D2FF19FE0401F0A07995F00</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00060_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="9b128b51-de3e-42fe-a5b7-7098d35df6f3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="760ff887-6c60-48af-99ba-5eb28aac4b65"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b95df7cf-5396-451d-ad8c-6908d21585ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="9af94fcb-34c5-427a-b24d-c55fb7363a38"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="6c1ab688-4a40-4553-b5f1-92ccecf41c06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZRc6o6EH4/v4Khjx2EKIoy1RmqbS+ttj21x/b05U4IQVMhIAmK/vqTYKFqbW/PnXHGybLZ/Xb3y5ecMRiFddthDKecxFRxB131X8/3QMuykGYZEGhmpxNoHgRtrWmgpoFbFjINX1VcxjLsUsYh5V21bgBTM1pavf5oWDZo2w2r1mw1XlRlglMmQguXmqEqeRRSZhdpu2qWUjuGjDCbwggzmyN77IyGtvC0YYlJ7Z1tURYJ096M88TWdVTzMcJhiGoojvQzfc/nzGf2mEwp5FmK33L6rKu+7V2tVrVVoxanU71uGIZudHTh4zMyPVF7P8rN2HdpEG/XfUhjShAMyQZKUCPMZ7GvOOE0TgmfRZ+EBjowZGgN50hDwKQnqv6eoED3zUh7IFMGNTaDoAz2gAOcYoqw8uvB7aon35vgdu9jCikL4jRiB+u/g4TpEodxgn2NlZWV6L4f8Ui7emcY2S5FYcbIEt9KmiQQYabcpzgg+ZAwQT6fKcX4lZyJHylZhtHfjOVM38UqoOtHujMgU8z4/5nZ7ry2USYwzHCv70fO1eD29HJK5tF5MElbm5ufQXJ1fd7uFhB2nbegqnG/rQ/JWnHrbdPk9uHq6Wn628Ov10tszl9iFi02Jj5NFo9R3/W8BZgs8vUyvwEWj73wugnuXdBsT3/zbHORXG6uHq4od59JNvJ+gOQunj+d+qY7dSC7mQD/3Jz/XN8G62R29TzsG/1/Go3XcP5kAS/If42yF0PfOMNJNJrVzYWTjYdPi3yuszy4Gfy4X5++PHUWd+vEvPNODZJYo+57Tbs17BtLSRhn3itGvFxKergD5VLMC/Kv5UVaiK8FhaudSI1iHFOu9uQuKS12JgSI+LYY5nZ92W+1m32zbzmtc9Ns1C8M0wCXhmNYnU7z0miXGrRFcQCxH9OAyFxSZbf8+RogimyGqY9TbRlnaIaZ+kXEAeRQcemDOBwxZfgxFioO2k0/m3XqQZ1Mk1UcrogJ5t4rCFTlNuZ39C51Ao7TPekGxp50P2BEEoKlvkuCM8FwxkUvFnCZ8RDUlrBGcSZugFSKsF03202dkSgJsUSqR7GfhbiWzJKiMzrb/tc1iFhhHQyd8X1x9D6t7PBb2QTh4xPpwGQ151gMEh+5heplKZ+X3NgtuQzvZD6RJ0x0lKcEbZHsf3onimRIxZKiphJ05Xto2IurH5ZUpfKXBFVkr25pIfJCAnrlSBawtqhly2VWDMGS8paK8LpQOaCPMcqERq0f4zmmehVC/9YVUaE+yFzZ9/FlfEbHHHIcCcooxfIb74MxZvJ94Aqu5999fOylFH3jOOfHbP1QPCMk4i9fGshG0k+Y78XfKk7fCz8WayePqFM8CjihU7mSl8H6E1qgWIQlQr3idDf4sQDHku8bqyZXWLhgk5dx/PkXRcpSV4UIxZkQ84FaGHalssDJ1wm2350+hCnk+O1+zdmn9+vzaDgWohVBtfIl/+2skYIuCKvyGi+wdNVcPBdFcjrdkeY3gIfqDC6cdqPZaYLORWdXnRuDllU1cK+S3gfzR8tOTw/PQ+8P</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA8359619E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA8359519E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA8359519E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4C7A6B4432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4C7A6B4432E0401F0A07995F08</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421517013</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4C7A6C4432E0401F0A07995F08</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00061_UVTC_PrimaryEmail_valid_Role_Linked_LASP_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="8f030846-cd24-47d1-afcd-9e105a44c41e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="5f87de46-3e9f-49d1-9e80-6fb102d23731"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="c3638927-0191-4100-b4ac-862bfda0af8f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="2a8950a4-d8b2-4d7d-8f28-bc7464510c17"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="06b7e5b0-f011-449f-9a7e-e9677b2ba20b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSx1VIQii5qCCxXCoq6AXYLu3LkWubxDSx09gBur/+2KFJgdIe9khIyJPxzDcznz/7koMkrgcdznEmCKPasNfS/3EhdB0AHcOtW77R8BEyfMvzDOfZ8ixg2Y2mZ+vakPMcDykXgIqWXpdmw2oa9frMcgPbCxpWzW94T7r2gDMuQ0uXmqVrmySmPCjStvQ8owEDnPCAggTzQMBg2hmPAukZgBKT3r7coiwSZu1IiDQwTVhDGOI4hjXIEvPS3PO5RDyYkpACkWf4PSfiLf1973q9rq2dGstCs25Zlmn5pvRBnITnevus3IzRkC7Ydt0FlFECQUz+AAVqjEXEkNaJQ5YRESVfhLZN21KhDbyBBrQb9Fw3PxIU6E6MtAcy48DgEbDLYBO8wBmmEGu/JsOWfn7aBLd7ZxmgfMGyhB+s/w4SpiscsxQjg5eVlehOj3ikXe1LDIMhhXHOyQrfKJqkAGKu3WV4QTYjwiX5ENeK8WsbLn+kZBmGfzOWS3MXq4RuHulOj4SYi/8zs915baM8gDjH7WsSXf38cT+PmqgXihuBxM2LH3XS2ZvVKiDsOm9BVeN+Xx+SteLW+6aEEQ76qD67eoouXh5+jN2nPHxc4ChN79dkbt5eeV1vSX/bqxfzD4ML5N5eD5OXCYn6yFrP/dHjoxPdzQd8SdKzJB1fP/16vvInV6b9NvRvxjCbzhfO1fr2Zsqf1/lgSb1Xe/Ub+E9Nq8Pu6XXS5zOTkHz5M4n6t9PRxA17C7iqj8/uu4PHC9+OwllTxPMQuQ+w9VHTbg37xlISpvnzEkNRLhU9hj1tIOcFxPfyoiwEGYvCNUiVRnGBqdDbapeSliCXAkRQIIe5XQ+6Te+i2+i6Hb/eaDj1vtWw7IHVsVzfvxhYXqlBWxQHELuMLojKpVR2y5/vAcIk4JginBkrlsMIc/2biD0ggDakE3k4GOV4xqSKg8yNHJuk3AKhvY4YQ8hZhh7WtRsmbult1lkInO0pt23tKfcEQ5ISrORd8ZtLgnMhW/EKVrmI7doK1CjO5QWQKQ0O6g3vwuQkSWOsgJoJQ3mMa2mUFo0x+fa/bgDIC+to1JneFSfvy8IOv5U9kD6IKAeuqvmJ5RzxkUvIKUv5umRnt+QyfCdHRB0w2VCREbhFsv/pgyeKIBVJippK0JXvoWEvrnlYUpUKrQisuF5d0lLjpQK0y5G8gtprLV+t8mIIrlK3TIY3pcjZ5hTDXErU24y9YGpWIcyTbogK9UHmyr6PLxcRnQogcCIpoxXLE54HU8zV82Aoqb459e2xl1L2TeCNOGbrxvIVoRB/+9CAAVR+0nwn/9YsQx/jOhJrJ4+sU74JBKGhWqm74O0LWkAmwxIpXizbDX4swLHk+8aqyRUWIdn0nAv89RdNqVJLBxCynIphTy8Mu0pZ4BRvKQ4+nD6FKdT4/Xrd8C+v1/l4NJWalQC98iX/7WyQgi5QSpT0L7C09I18LcrkNNxR5neAh+Js9zuec9Ed2H7f3xVnp9d0qwbuVdL+ZP5s2enp4Xlo/ws=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA835D019E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA835CF19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA835CF19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4C7A924432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4C7A924432E0401F0A07995F08</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421520166</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4C7A934432E0401F0A07995F08</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00062_UVTC_PrimaryEmail_valid_Role_AccessPortal_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="dbca792c-5541-4b4c-9345-b7090ccdeedf"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c4df755a-9300-45bd-ad9a-fb86dc168046"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportal"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="1d6789eb-3335-4f47-9874-b305e8e8056b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="c8382b6c-cf43-4e52-beb3-d9dae76868d4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="457457d3-195a-4b03-9d89-26bc6e9cfc91"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZZc+I4EH6fX+HyPE4Zn1yuQJWHY9YJ5OBIMvuyJeQGNLElYskc+fUrmdgBhmQzW0UVpXar++vuT590wVESO37AOaSCMKqF3Zb+T+Q1qtFs7hlWNYoML5q7RtNpgBFhp+o67gxqdlPXQs4zCCkXiIqW7li29K8ZjjOx6r7d8L1qpdFw/9a1e0i5DC1dKpaubZOYcj9P29KzlPoMccJ9ihLgvsD+OBgOfOnpowKT3r7Yo8wTpu2lECvfNHElAgxxjCuYJeaFeeRzEXF/TBYUiSyF15wRb+mvezebTWXjVli6MB3LskyraUqfiJPFV739pdgMUUjnbL/uIMoowSgmL0iBGoJYskgL4gVLiVgm74S2TdtSoQ3YYgPbHv2qm28JcnSfjHQEMuXI4EtkF8FGMIcUKAZtOgpb+tfPTXC/d5IiyucsTfjJ+s8gAV1DzFYQGbyorED3+Yhn2tW+AOyHFMcZJ2u4VjRZIQxcu01hTrYDwiX5Iq7l49e2XP5IwTLAfzKWC/MQq4RunulOlyyAi/8zs8N57aPcoziD9t00dOfPU3OY3A5Gs7vO4vJnjFw6mtRxK4dw6LwHVY77dX1K1pJbr5sWgyHho/XgZ9NyJje013mc3l0Gk/rNN8pZSMmkPuGjbrJzGnO2fegta1Neu/5+3XTQ7p7OrG+zzY8XuGJT0v9hf2Fhp/r0tL7c7IbDxEKJ93Bpivnt5Ppl2q/348e6HT+I5+qv21o3sL51EN/EwcJbJ1ezWv2lWv/LoeTO21z18GD38CUczzIS3jrBkPbROouGL43WW02HNRwbC0kYZ7NfgEWxVPQIu1pfzguJj+VFWUhkzHNXf6U0igugQm+rXUpa/EwKEIl8Ocz9ut+pNexe0HBr1ne72Wv2LM+y+1Zg1ZtNt1urFxq0R3ECscPonKhcSmX3/PkYIE58DjSC1FizDC+B6x9E7CKBtJCO5OFglMOESRW3t6sGWeFF9BTzdLNxn6qz6syauZ6uXTNxQ2/SYC4gPZJu2zqS7hFgsiKg9F0RnEuGcyF78SxnJWK7skYVCpm8AVIlwr4jVcfkJFnFoJCaCYuyGCqr5SrvjMn3/46BMM+tQafTG4/zs/duaaffii5In4goB67K+Q5yknDmGnKLWt6v2T2suQgfZBFRR0y2VKQE75Ecf3pjiqJISZN9UQXq0vnUcBTYPK2pzBWtCS7pXt7TUualCLSLoTyjynMlW6+zfAx1JXCpDG9KnbPNMeBMqtRuwp6AmmUI81OXRIn6JHNpP8aXiSUdCyQgkaTR8uUnXghj4OqFEEq2bz/7/DhKKfsmYCvO2TqxfEgoxB++NbCPlZ8038q/DUujt3GdiXWQR9YpnwWC0IVaqetg9w4vMJNhidQvlh4GPxfgXPJjY9nkEouQbJplAt7/oilhaukIY5ZREXb13HAoljlOsVuB/+b0W5hckF9v2C1/94Z9HA7GUrYSpJe+5L+dDZLTBYOuLvIcS0vfygejTE4XB+L8CvBUn6s1r1tz+72gV+0f6rPn1TplA48qaf9m/t1y0NPT89D+Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68564D63FFAE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68564D63FEAE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68564D63FEAE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC681EA8360B19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC681EA8360B19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421525183</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC681EA8360C19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00063_UVTC_PrimaryEmail_valid_Role_DECE_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="25ab9353-a23e-4932-899c-ce54f4e4c3d9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="80f88e42-9fe9-4e7c-a21b-78a47a28e3b7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDECECS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="2cc94151-408c-4071-9c4f-bcec6759a0c8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0eb014d1-df43-4c0f-affe-c51df54ab51d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="40bfaaf3-e975-4da0-88ce-e6d600784478"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chHwQIUUFiofTSL1pot7f7cmWcCZhNbBo7IfTXXzuQFFja270SEvJkPHNm5vjYZxzFkeP3OIdEEEa10aCj/9P06m2n1Q6Nut20Dddx64bnWDOj7c3sAFke9lBL10acpzCiXCAqOrpj2a5hNQ3HebBavu35brtmO95PXfsBCZehpUvN0rU8jij3i7QdPU2ozxAn3KcoBu4L7E97N9e+9PRRiUnvnm1RFgmT7kKIlW+auBYAhijCNcxi88w88DkLuD8lc4pEmsAuZ8A7+m7ver2ures1lsxNx7Is02qb0ifgZP5V734pN0MwoiHbrvuIMkowisgrUqBuQCxYoPWiOUuIWMTvhLZN21KhDcixgW2XftXNtwQFuk9GOgCZcGTwBbLLYBMIIQGKQXucjDr6189NcLv3IUGUhyyJ+dH6zyABzSBiKwgMXlZWovt8xBPt6p4B9kcURyknGdwqmqwQBq7dJRCS/JpwSb6Aa8X4tZzLHylZBvhPxnJm7mOV0M0T3RmQOXDxf2a2P69tlB8oSqH7NJush9albffbdAw/8CK7Yxt2/jCDm04BYd95C6oa9259TNaKW7tNyTd2kz4tX8TtaH3xOHR+DeF7xsz+8nm9MV/Hd3j8vHzqr3H/kuOfSwLL/Pmi8W1Jkhm9H03Du03oXK02EUHxxvpyXae3d1fDV+xMbrPW1Rhu3DCbTO8vLp7uyWX9/LmZjclixbKrhbPO3Ec3bTDzr9BF941br/28ehi+zpJ80/9Or+wv+cTmee61IKWP1oCLOX7svNW0X8OhsZSEaTpbAhblUtFjNNCGcl5IfCwvykICIyxc/ZXSKC6ACr2rdilp8VMpQCTw5TC362G/6TX6Ddfr9Rstq++eW65lD62e1Wq3G8OGV2rQFsURxD6jIVG5lMpu+fMxQBz7HGgAiZGxFC+A6x9EHCCBtBGdyMPBKIcHJlXcXrdtKw/BXfBm087hl+0FEMWMM127ZWJMx0kvFJAcaLdtHWj3BDBZEVACrxjOJcW5kM14QVkqIruWoRqFVF4BiVJh33G9hslJvIpAQTVjFqQR1FaLVdEak2//HQNhXliLvmJenL53izv+VvZB+gREOXBVz3eQs4QTF1G9LOb9ouv7RZfhe2lA1CGTTRUJwVskh5/euKJIUhFlV1UJu/I+NhxENo+LqpIFGcEV46urWiq91IFuOZYXVHuppVmWFoNoKY1LZHhTSp1tTgGnUqg2D+wXULMKYX7qnqhQH2Wu7If4UrGgU4EExJI2WrH8xCNhClw9EkaS8PlnXyAHKWXfBOTilK0fybeEQvzhcwP7WPlJ8538W7MkeBvXiVh7eWSd8mUgCJ2rlboRNu8QAzMZlkgJY8l+8FMBTiU/NFZNrrAIyaZZKuD9L5rSpo6OMGYpFaOBXhj29bLAKTYr8N+cfgtTaPLuks35u5fs3zfXU6lcMdIrX/LfzgYp6IJBV3d5gaWj5/LNKJPT+Z4+7wAeS7R93vPqTadlt8/b+xJdHzTfuHxQSfc38++WvZ4en4fuvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC681EA8362A19E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC681EA8362719E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC681EA8362719E9E0401F0A07993D67</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C548AC570C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C548AC570C4E0401F0A07995F58</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421528379</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C548AC870C4E0401F0A07995F58</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00064_UVTC_PrimaryEmail_valid_Role_Coord_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="19e342c6-f80c-43d4-8ac1-8e1f42bd6288"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="3a852829-561a-41bf-81fb-659072c3516f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCoordCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b762d7f7-1f0b-4d5d-bf3a-9abea8966408"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="8c11364c-0d8b-479e-85ad-496731c0d31a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7107bac0-f564-4c31-a58f-7f81043a4df7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH6uQDxJKooJEoayyu7S9wPbr5cq1J+A2cdLYCXR//dqhSYHS3u6VkJAn45kzM8fHPuEoiZ1gwDnkgqZMC0c9/d+O142I5d4b9z5xDTfyieET3zEIgY7vuseEOK6uhZwXEDIuEBM93bFs17A6huPMrePA7gZeu2VbnTtdu4Kcy9DSpWXp2jqJGQ+qtD29yFmQIk55wFACPBA4mA0mPwPpGaAak94/2aCsEub9pRBZYJq4RQBDHOMWThPzxNzxOSE8mNEFQ6LI4SUn4T39Ze9qtWqt2q00X5iOZVmm5ZvSh3C6+Kr3v9SbgYQsSjfrIWIpoxjF9DdSoCYglinRBvEizalYJu+Etk3bUqENWGMD2y77qpuvCSp0n4y0AzLnyOBLZNfBphBBDgyD9msa9vSvn5vgZu88R4xHaZ7wvfXfQQJWQpxmQAxeV1aj+3zEA+3qnwAOQobjgtMSzhVNMoSBa5c5RHT9k3JJPsK1avzamssfrVkG+G/GcmJuY5XQzQPdGdEFcPF/ZrY9r02UKxQX0PdXmHqPD+bd4CYcnx8no++/Tpm5ns3xqldB2HbegGrG/bLeJ2vDrZdN4lvnyIzLb+3pdfoLWe7YT85PF4NbuCDnZ3j5+0cnvcpz9DDyWXbDj6ed0ixvMAsndzeZO+2MhnGSXLLwyAwd/8vzapRcziaTq1HiRW7pQHsqopuLbP5wdTq0aX5kxeHy9h9/ad3duwNs/4gmTueI/yh4fs2yp/NiTgbut8n3R4usvzi3y7X7PL7thtdPYtktaXrbe61pu4ZdYy0Js+L+AbCol4oe4Ugby3kh8bG8KAslRlS5BpnSKC6ACb2vdilpCQopQJQEcpib9XjY6Xa9gTdsd7x22z47s1zLHlsD69j3ne54XGvQBsUexGHKIqpyKZXd8OdjgDgJODACuVGmBV4C1z+IOEICaSGbysORMg7zVKo4FPFT4T248b2IbPLIsyxrF/YDiXTtPBUX7CIfRALyHem2rR3pngKmGQWl74rgXDKcC9mLJ1QWIrZbJWoxKOQNkCsRDhy365mcJlkMCqmZpKSIoZUts6ozJt/8OwbCvLLiNM1JgHl1+t4tbv9b3QfpQ6hy4KqgU5CzhAMXkVtX837V7e2q6/CDglB1yGRTRU7xBsnup1euKJI0RKnLqnE37vuGndDmflVNNlJS3FC+uaul1Esh6NeDeUKtp1ZRlkU1imMlcrkMb0qts80Z4EIq1fM8fQRmNiHMT10UDeq9zI19F18hlmwmkIBEEkerlp94JcyAq1dCKBm//uwTZCel7JuAtThkG8byMaEQf/jewAFWftJ8Kf9WcoSv4zoQayuPrFM+DQRlC7VSV8LzR8ygUsPSfDv4oQCHku8amyY3WIRk030h4P0vmhKnno4wTgsmwpFeGbYFs8IpnjMIXp3ehKlE+eWWXfN3b9mbyc+ZlK4E6Y0v/W9ng1Z0waCry7zC0tPX8tEok7PFlkC/ANzXaG/oDscd72x06g63Ndobe52mgTuV9N+Y31q2erp/Hvp/AA==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4CF660DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4CF65EDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4CF65EDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6885A5C365331EE0401F0A079928FF</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6885A5C365331EE0401F0A079928FF</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421531979</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6885A5C367331EE0401F0A079928FF</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00065_UVTC_PrimaryEmail_valid_Role_Portal_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="f05cd425-2d9e-4f5d-bbaa-d5ac078eb3a9"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c78345c7-df0b-4fa8-87e4-d636b49a938b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="93ff58af-a118-4412-8d4f-e7ac646b5f57"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="4ee4562a-d415-48dc-8a30-0d5388ab70e5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="896b631c-7935-436c-9ecc-c6468451ae71"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+o4EH2/vyJKH1chH4SvCJAoXLrppdACLbd9WRlnAJfECbFDaX/92qFJA4Vu70pIyJPxzJmZ42M3GQp8y+kwBjEnIVXcXkv9p4LtCjJM0LxaZa7ZC+xp9fm8pjUshCzwFqZdK6uKy1gCLmUcUd5SLcO0NaOqWdbUqDlm3anUS6ZRf1KVB4iZCC1cSoaq7AKfMidN21KTmDohYoQ5FAXAHI6dSedm4AhPB2WY1HZzjzJNGLdXnEeOruOSBxh8H5dwGOhN/cCn6TFnQpYU8SSG95wea6nve19eXkov5VIYL3XLMAzdaOjCx2NkeaG2f2SbwXPpItyvu4iGlGDkkzckQd0AX4We0vGXYUz4KjgT2tRNQ4bWYIc1bNr0QtU/EqTovhnpAGTMkMZWyMyCjWEBMVAMyv3YbakX35vgfu80RpQtwjhgR+s/gwR0C34YgaexrLIM3fcjnmhXuwnYcSn2E0a2MJQ0iRAGptzGsCC7AWGCfB5T0vErOyZ+JGMZ4D8ZS1MvYhXQ9RPd6ZElMP5/Zlac1z7KA/ITaL9Zo87P5C2IvOvpZjybkit7ORmJrI/LVgqh6LwHlY/7fX1M1pxb75tu3kZ3tWlvQkfdO3xju6tBcP348FwbPS2jeuPSJTAM3sa7WaWcJP1FVN5N/mLkbqbTXzTomQNs1gbD9dVjPcKN4Y8NGPf3Qfi7MZ9vZtYvtz+57bG5UcUV937rzTDcBk8PD8n25Wl9WV7fjryki4fz2YJHV+P7XlBxYcjfXMMelj3vx99Xa/vqujucsfHkkjX43c269VFTsYZDYyYJk2T+DJhnS0kPt6f0xbwQ/1pepIV42iJ1dSKpUYwD5Wpb7pLS4iRCgIjniGHu1/1utV7p2t1+tWP2Lu3uT8M2zL7RMWqNRqVfqWYatEdxBLEb0gWRuaTK7vnzNUAcOAyoB7G2DRO8AqZ+EbGHOFJcOhaHI6QMpqFQcXPdIHOrUWbP5WrVrFcr6Hm3iaFMLVUZhnxER3FnwSE+0G7TONDuMWASEZACLxnOBMUZF83YoG3CfbO0RSUKibgCYqnCjmXXKzojQeSDhKoHoZf4UIpWUdoane3/LQ1hlloJw1EYc+RjZqZH8GyFx9+yZggfj0gHJou6BDFQOHEb2VlF5ysvFyvPwncSj8iTJjrLY4L3SA4/fRBGMiVnS7G0DHu+5dhwEF4/rizP6G0JzrmfX9pC84UitLMBbVBpU0q22yQdSU2qXSzC60L0TH0COBGS9ToN10D1PIT+rRsjR32UObcf4kv4ik444hAIAinp8hvPhQkw+VxwBfV3332LHKQUfeOw46dsXV+8KiTiLx8e2MHST5hvxd9LGHsf4zoRq5BH1CneCJzQpVzJu+H1DDtwKMISIWZhXAx+KsCp5IfGvMk5Fi7YNE84nP+iSJVqqQjjMKHc7ampoaicKU7+GoHz4fQpTKrO79ftjp29bn/fDCZCwwKk5r7kv501ktIFgypv9RRLS92J16NITpcFpX4HeCzWdbtjG3a/0Sv3qkWxtqyykTfwoJL2J/NnS6Gnx+eh/S8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6884A404FAD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6884A404F9D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6884A404F9D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4CF6A1DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4CF6A1DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421537112</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4CF6A2DB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00066_UVTC_PrimaryEmail_valid_Role_Retailer_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="47419b00-3302-4f25-90a2-37be3c83a5cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="96e9c954-b174-404c-b2f2-25041301ad91"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTLCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="a71bf60b-efad-4e87-9873-61f966eae8af"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="a6781d17-f547-4a6a-b9da-85b067d55f72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4d64e293-f25d-46f2-95fd-ba51898f249d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/A4jx1j2RgTewIzBJKWllwKlDZ56QhZgBJbcnThkl9fycQOkMuXfjPMMFqvds/uHh3pRMAs9eOOEJhLwqjV77XsP81GiGe4EThTMAucAIRTZ1qPIgd7YDYDieeBemRbfSEU7lMhIZUt2wde4IDQ8f0xaMZeFAOvFoDGrW1NMBc6tHapAdtaZykVcZG2ZStOYwYFETGFGRaxRPGoczGItWcMS0x2+2SLskjI2wsp89h1US3BCKcpqiGWuSfuns9JIuIRmVMoFcdPORPRsp/2rlar2qpeY3zu+gAAF0Su9kkEmR/Z7U/lZpz06Yxt111IGSUIpuQRGlAXWC5YYnXSOeNELrI3QnuuB0xoB6+Rg7yAHtnuc4IC3Qcj7YHkAjpiAb0y2FCPi2OKsPVz2G/ZRx+b4HbvmEMqZoxn4mD9b5AwXeKU5ThxRFlZie7jEV9pV/sEo7hPUaoEWeJLQ5McIiysa45nZD0gQpMvEVYxfmst9I+ULMPoX8Zy4u5i1dDdV7rTI3Ms5P+Z2e68tlEmMFW43b18+DxUZwBcbChf4i+T/OdkGtXVIgWtAsKu8xZUNe6n9SFZK249bbo//Xp+e79h30M16A18JqZRuvkV9L40/NHVrLdcDH6Nbjc3g9WtukbU+5HwwM+XvePvOeO3G98brH5F7FLBn1nz86eGl43RUJ1mXx6j6di/u4uaeWflPdIQRI3P+bebQbMOsyDo35xNZXfyw+/ce984Gt9dZTfzx3wc0qwB7yf6eJ+Fn+74rHn9O1tLMoVfx93J1ei+9VzTbg37xlISRmp6h5Esl4Ye/Z51rucF5fvyYiwkcWaFa5wbjRISU2m3zS4jLbHSAkSSWA9zuz7vhseNMDgP6p3eqR92zkAAvHPQAc0oCoKmX2rQFsUBxC6jM2JyGZXd8ud9gCiLBaYJ5s6SKbTAwn4nYg9KaPXpUB8ORgUeM63i+owvvDyBYXoXKi94kCQR6TRfaxpal0xe0SvemUnM97TbA3vaPcSI5AQbgTcMF5riQupmPMClkqlXW8IaxUpfAdyocOwHxw1XkCxPsYHqZixRKa7li7xojSu2/74DkSisw7Pxn+7oj1ccvzerO/xWNkL7JMQ4CFPQKdbDxC9uouO4UVbzdtX13arL8B2VEHPKdFclJ2iLZP/TM1kMSyqmlGWVuCv3Q8NeaPewqipbsiSo4nx1WWut10rQLgfzAGsPNbVcqmIUTaNyXId3tdh57ggjpaVqM2b3mLpVCPdDN0WF+iBzZd/Hp+SCjiSUONPEsYrlB54JIyzMM6GvKb/+6BtkL6Xum8Rr+Zqtm2q5MYjffXCgGBk/bb7WfyvGk+dxvRJrJ4+uU78NJKFzszJ3wuYNZiCmwxItYozvBn8twGvJ941VkyssUrNpqiR++4tl1KllQ4SYorLfswvDrmIWOOUmx/Gz04swhSo/XbNr8eY1+/tiMNLalUG78iX/7eyQgi4I2+Y2L7C07LV+NerkdL6j0E8AD0X6OOhoToFOr94Ld0Xa9+ugauBeJe0X5peWnZ4enof2Xw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC6884A4050BD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC6884A4050AD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC6884A4050AD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC68564F43ADB26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC68564F43ADB26AE0401F0A07994472</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421540883</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC68564F43AEB26AE0401F0A07994472</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00067_UVTC_PrimaryEmail_valid_Role_Dynamic_LASP_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="175bc5e6-1d04-48d9-8a74-b7a2cc2b464e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="900a6728-9d90-437b-ae91-4dcdaf937ed5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="8f0d6a98-bad5-4e82-b0f0-a342794ef513"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="679d6b44-ddc5-4cd3-86d9-f09051c5714d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="292e0885-6eb3-4fad-b923-84d493e7cbf0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF66JChLl0sNuoV2gt31ZGWcIbhObxk4I++uPHZoUKO3pHgkJeTKe+Wbm82efcRSFjtflHGJBGNVG/bb+23FbuO4sfQMWVsOotWqugZADRqMKFqr7ttW0lro24jyBEeUCUdHWHcuuGdLbceZW07Ndz6pVbLfxS9duIeYytHSpWLqWRSHlXp62rScx9RjihHsURcA9gb1Zd3zpSU8PFZj0ztkOZZ4w7qyEWHumiSs+YAhDXMEsMs/MA58zn3szElAkkhhecvq8rb/s3Ww2lU21wuLAdCzLMi3XlD4+J8FXvfOl2Az+iC7Zbt1DlFGCUUj+IAVqDGLFfK0bBiwmYhW9E9o2bUuFNiDDBrZr9KtuvibI0X0y0gHImCODr5BdBJvCEmKgGLSb6aitf/3cBHd75zGifMniiB+t/w4S0BRCtgbf4EVlBbrPRzzRrs4ZYG9EcZhwksJE0WSNMHDtOoYlyS4Jl+TzuZaPX8u4/JGCZYD/Zixn5j5WCd080Z0+CYCL/zOz/XntotyiMIHOtP9gLfpuwMhgmdz9TMdBBhertD/+/rOdQ9h33oEqx/2yPiZrya2XTRv+7VvWmjWqk4dfkbhjd9vtdnJl204raG2qLftq7j6m5+QHXczCQZo004U1erDwdnwxrN9foyf2PUgGd+GNk82TL8jJ7NvLh80/iyq/jSb3PF7Vx0NI0uj+e+reDeDXc+yuobl9mrBbNEyHP+ZZcPlnGAh3evF8l2y39xeZO2k1o+v7L4/nwWN3Op/8uK7fLG8Wy2DA26817ddwaCwkYZYsHgGLYqnoMeprQzkvJD6WF2UhvrHMXb210igugAq9o3YpafESKUDE9+Qwd+thr9Gq92pda1CrDm13OLBqlj20ulbTdetDyyo0aIfiCGKP0SVRuZTK7vjzMUAceRyoD7GRsgSvgOsfROwjgbQRncrDwSiHOZMq3qg+N9hTuG6wKqzsP9UoeNrKg1PXtQkTV/Qq7i4FxAfKbVsHyj0FTNYElLwrfnNJcC5kK55RmojQrqSoQiGRF0CsNNhzaq26yUm0DkEBNSPmJyFU1qt13hiT7/4dA2GeW/uX3dn1797st50fv3erO/5WNEL6+EQ5cFXSOchhwpubqOXVi3rer7u6X3cRvpv4RJ0y2VURE7xDcvjplSyKJSVTXgsrkJcbjg0Hwc3jusp8fkpwyfryupZqL7WgUwznGVWeK0maJvk4mkrnYhnelHJnmzPAiRSr7Zw9ATXLEOan7ooS9VHm0n6ILxErOhNIQCTJo+XLTzwUZsDVQ2EkSZ999hVykFL2TUAmTtl6oXxPKMQfPjmwh5WfNF/Lvw2L/ddxnYi1l0fWKV8HgtBArdStsH2HG5jJsETKGIv3g58KcCr5obFscolFSDYtEgHvf9GUPrV1hDFLqBj19dywr5k5TrFdg/fq9CZMrssvF23G371o78eXM6leEdJLX/LfzgbJ6YJBV/d5jqWtZ/LdKJPTYE+jXwCekOnesNHr9c9rvUOZrjfKBh5U0nljfmvZ6+nxeej8Cw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4CF6CDDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4CF6CCDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4CF6CCDB4CE0401F0A07995F56</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4A0E43F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4A0E43F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421543751</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4A0E44F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00068_UVTC_PrimaryEmail_valid_Role_Linked_LASP_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="14ad292b-b388-4cf9-b98f-451fd58782b4"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="9788cc62-b06f-4c84-ba07-4ab775a0329e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdLLASPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="130a658a-4c0f-420e-a17a-be1efb0cc2cd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1ffac4b0-4b5d-451f-b350-20d1ddeb5d03"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="1827d109-29be-4b5c-8808-73dff7d5d7ef"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7vr4jSxyrYuXCLClIK22229EY43bYvK9dxwCVxQuwA7a8/dmhSoJfTPRIS8mQ8883M588+5iiJLdfjnOSCpkzzhz39TyvCUceBloE6xDQc3IZG18bIcLqPdsts2jaGWNd8zgviMy4QEz3dgqZjwJZhWRPYds2uC9sNaJsPunZLci5DS5cG1LV1EjPulml7epEzN0WccpehhHBXYDfwLkau9HRRhUnvH29Qlgnz/kyIzAUAN0KCSRzjBk4TcAx2fI5D7gZ0ypAocvKaM+Q9/XXvarVqrOxGmk+BBSEEsAukT8jp9FDvH1SbSeizKN2sB4iljGIU0xekQF0QMUtDzYunaU7FLPkktAlMqEIbZI0NbDrsUAdvCUp034y0AzLnyOAzZFbBxiQiOWGYaP+M/Z5++L0JbvZOcsR4lOYJ31v/HSTCliROMxIavKqsQvf9iB+0q39MsOszHBecLsmlokmGMOHadU4iuh5RLskXcq0cv7bm8kcrlhH8N2M5BttYJXTwQXeGdEq4+D8z257XJsotigvSjy/BL7gEdtBu39vj+8vT9Wi1xMvzM3zTKyFsO29A1eN+Xe+TtebW66Zp0BwkFzM/X0zConvkLaKJ1wQ3ILCCm9EinyX38/YTg0c8mMcPo8nLUxF7j/n46GHmW/OmRXn7bhRFp8iK5/nB88V5duXMj6L7wfIyvLzxn+egBe46rdUCXuHi8ayVwfHPYSC5QM+mcG0fFb9/hidnJzFajPzxQtxaZ62b4azzFF8dzAU0jwL/1+8fNy2rOD8xA6f3VtN2DbvGShKC4vGJYFEtFT38oXYq54XE1/KiLDQ0otLVzZRGcUGY0Ptql5IWt5ACRENXDnOzPh20Op3mSWsAm7bnwc4P6EDzFHqw3e1aXWhXGrRBsQdxkLKIqlxKZTf8+RogTlxOWEhyY5kWeEa4/kXEIRJI89lYHo6UcTJJpYo78UvctXBzzmeRyTNBpqKdPTejVNcuU3HFrnIvEiTfkW4T7kj3mGCaUaL0XRGcS4ZzIXuxQMtCxGZjiRqMFPIGyJUIu5bTaQJOkywmCilI0rCISSObZWVnAN/8S1XCvLSORl5w/WcQ/DHL8/dpefvfqk5In5AqB65KOiFymuTdVdRxm1U9n9dtb9ddhfeKkKpjJtsqcoo3SHY/vbFF0aSmylthFfJ6w75hJzjYr6vOFy4prmlf39dS7qUY9KvhLFBj0SiWy6IcR1sJXS7DA6l3JggILqRaPU/SOWGgDgG+dVnUqPcy1/ZdfIWYsUAgQRJJHq1cfuOlEBCuXgq+ZP36u8+QnZSyb4KsxUe2QSwfFArxl28O7GLlJ83X8m+V5uHbuD6ItZVH1imfB4KyqVqpa+H5E27gVIalUsfSfDv4RwE+Sr5rrJtcYxGSTY+FIJ9/0ZRA9XSEcVow4Q/10rAtmiVO8ZwR983pXZhSmF9v2jX/9Ka9uxgFUr4SpNe+9L+dDVrSBRNdXegllp6+lg9HmZxNt0T6FeC+TjdbzqljD80Tq+Vt67TjtK26gTuV9N+Z31u2erp/Hvr/Ag==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68564F43D2B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68564F43D1B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68564F43D1B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6885B6C053AA08E0401F0A07992903</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6885B6C053AA08E0401F0A07992903</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421546491</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6885B6C054AA08E0401F0A07992903</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00069_UVTC_PrimaryEmail_valid_Role_AccessPortal_CS_with_TokeType_UnlockMe_200_OK_P2" searchProperties="true" id="2f1ec15e-c08b-49d4-92be-d6647ef3f0b3"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="518ef6aa-4874-4462-9cd6-711513dbc276"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdAccportalCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="4d5a5b09-811d-48a1-82d4-b0a209ed1bc0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="edb13bce-b5b2-4eb6-b895-388d9fdd3aad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7ca3fe56-2eb0-4fa2-8ab0-617e32a016b2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/C4jx1jGww2nsCMw0cvLSFpIKTh5Y6QF1BiS8SSHeivr2SwA5TkpneGwaP1avfs7vGRLjiKo6ofcA6JIIxqg25L/7fqOfW5i5sGNDEynNp8bnjy32gsLDQPQ6tuWZauDThPYUC5QFS09KplO4bVMKrVieX6dtO3rYpr1We6NoWEy9DSpSJ3beKIcj9P29LThPoMccJ9imLgvsD+OLga+tLTRwUmvX2xQ5knTNorIda+aeJKCBiiCFcwi80L88jnIuT+mCwpEmkC+5whb+n7vS8vL5WXWoUlS7MqazGtpil9Qk6Wn/X2p2IzhAO6YLt1B1FGCUYR+YUUqCsQKxZqQbRkCRGr+I3QtmlbKrQBG2xg26GfdfM1QY7ug5GOQCYcGXyF7CLYLSwgAYpBu7sdtPTPH5vgbu8kQZQvWBLzk/XfQQKaQcTWEBq8qKxA9/GIZ9rVvgDsDyiOUk4yGCmarBEGrt0ksCCbIeGSfCHX8vFrGy5/pGAZ4L8Zy4V5iFVCN890p0uWwMX/mdnhvHZRpihKoX0zufqy3aI0orNa/Ei/3V2SfnZjr6fjXiuHcOi8A1WOe78+JWvJrf2mZSMl0yxszEzhjmzHHhLGH7wsfI5/QXgbeJfL+nQ7HH3/PrZvs7ug+dCFoefYPfdZ3HUfgvn1go6E93OCv36Zf7LNRXPR5JHYPGXpjC3vI/6YPVx2al/Z/eQmib5Mhqv76dVT1E+9Plpe9y5d2+lN69Fo7f26+zHCdu/xoT7/R3iz/qdvL9E9S7YzPmONkbNZPFk/Wq81HdZwbCwkYZzOHwGLYqnoMehqfTkvJN6XF2UhobHIXf210igugAq9rXYpafFTKUAk9OUwd+t+p+F5Qd92mp7rNdxaz3Isu28FVr3ZtD3HLTRoh+IEYofRBVG5lMru+PM+QBz7HGgIiZGxFK+A6+9E7CKBtAG9lR8HoxwmTKo4xe7Sfn6aP26f5nYtEzzia3drY9C1ERPX9DoJFgKSI+m2rSPpvgVM1gSUviuCc8lwLmQvnlGWisiuZKhCIZUnQKJE2K86Xt3kJF5HoJCaMQvTCCrr1TrvjMl3z6qBMM+tQafTG3fG+cf3Zm2n74o2SJ+QKAeu6rkEOUo4cw5ZRTFvF107LLoIH6QhUd+Y7KlICN4hOX71ShXFkZIn+6oK2KX3qeEosnlaVJkszAguCV+e1FLopQy0i7E8o8pzJc2yNB+EqyQukeFNqXS2OQacSp3aTtgTULMMYX7omChRn2Qu7cf4UrGiY4EExJI2Wr78wB1hDFzdEQaS75uPXkCOUsq+CdiIc7ZOJK8SCvG7tw3sY+UnzTfy8cKS8HVcZ2Id5JF1youBIHSpVupA2L5BDMxkWCIVjCWHwc8FOJf82Fg2ucQiJJvmqYC332hKmlo6wpilVAy6em44lMscp9iuwX91+iNMLsn7M3bD3zxjf14Nx1K4YqSXvuS/nQ2S00XJlPTPsbT0jbwyyuR0eSDPe4CnCl1vOH3HCWqX1UZQKrTbbDqOWy0beFRJ+w/zn5aDnp5+D+3f</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68564F44A4B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68564F44A3B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68564F44A3B26AE0401F0A07994472</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC688AF149878673E0401F0A05991847</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC688AF149878673E0401F0A05991847</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421549932</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC688AF149888673E0401F0A05991847</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00070_UVTC_PrimaryEmail_Invalid_Role_dsp_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="6aa86049-da18-4d91-b98e-01f33a8615cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="e626c219-cb29-4fc1-83e0-883693f7aa94"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="d6a07709-52f7-4fef-ade3-80745a94eef4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="b5e9a9ae-f768-4963-ae2d-5912eb3510cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSP" id="90e874bc-4b40-4d53-82b8-ecea25f23598"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSP"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="51ec1a06-e40b-4f35-bb28-7bdd58a3c63d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxGlj6sQJwRSooJE+SjZlm0L2W7Ly5XrGHBJbGo7QPfXXzs0KVDa270SEvJkPHNm5vjYZwKmiRu0hcBcEkaNsNs0/wHu9LTqPjasOoqR5Tm4bkEIsFXDjy4ETjWugalphEJkOKRCQiqbpgsczwJ1y3Uj4AdOI3C8CnCrE9O4w1yo0MqlAkxjkyZUBHnapplxGjAoiAgoTLEIJArG7eFVoDwDWGAyW2dblHlC3ppLuQxsG1VijHCSoApiqX1m7/mcxSIYkxmFMuP4NWcsmubr3vV6XVlXK4zPbBcAYIOGrXxiQWYnZutbsRnHIZ2y7boDKaMEwYT8gRrUEMs5i412MmOcyHn6QWjHdoAObeENspDj0RPTfkuQo/tipD2QXEBLzKFTBBvhKeaYImz8GoVN8+RrE9zujTikYsp4Kg7WfwcJ0xVO2BLHligqK9B9PeKRdrXOMApCipJMkBX+qWmyhAgL44bjKdlcEaHIFwsjH7+xEepHCpZh9DdjObN3sSro9pHudMkMC/l/ZrY7r22UO5hkuHXR/30XdaNzL/PFfbXdC7Plb3Axmkx8r5lD2HXegirH/bo+JGvJrddNbIL9xcOiQ/88bRbp4HYgl4OQ1qvR3XnE5+vGfRJH1fGtoOFzFHamG9evDrLn4aLeC6cDZxR9T8isv3ja2LMH9m1z3r+p3S7i68a4Q4e8wZza7eUk7Zxeu72LXn3wnc3W1wOfOnfx+Ee0gPXuZTK7qt0/VPsjxj3/0Tl379z6gPfH8lv0PA6H/rB+sf51WZt8R3zSbr7VtFvDvrGQhHH2+ISRLJaaHmHX6Kt5Qfm5vGgLia1p7hostUYJiak0W3qXlpYgUwJE4kANc7vud+qntY7XBj3f6TuNfg94wOmDNvAbjVofgEKDtigOIHYYnRKdS6vslj+fA0RpIDCNMbdWLENzLMxPInahhEZIR+pwMCpwxJSKO3XpxH699lR79ACceRlaZKcNtmSm8ZPJa3rN21OJ+Z50O2BPukcYkSXBWt81wYViuJCqF89wlcnEqaxgheJM3QBci3Dgeqc1W5B0mWCN1E5ZnCW4spwv887YYvvvWhCJ3DrqRfnB+7Cuw29FC5RPTLSD0LWcYzVGfOQOAkUhHxdc3S24CN/OYqLPl+qn5ARtkex/eqOJ5kfJEVVRAbn0PDTsRbUPCyoTxSuCSqKXN7QSeHX8W8U4nmHluZKtVlk+AF9LG1fhbaVwjj3GKFP69BKxBaZ2GcL+0vVQoj7IXNr38WVyTscSSpwquhj58gtvgzEW+m0QKp5vvvrw2Eup+ibxRh6zdRL1hNCIP31loABpP2W+UX9rxuO3cR2JtZNH1akeBJLQmV7pi+DlA1IgpsISpVyM7wY/FuBY8n1j2eQSi1Rseswk/viLoSWpaUKEWEZl2DVzw65M5jjlyxIHb07vwuRS/Hq3bsSHd+v98GqsBCuFZulL/tvZIjldEDb1FZ5jaZob9VRUyelsR5ZfAR5R5o7fqbmeV3UPlPm0bOBeJa135veWnZ4enofWvw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4C7C534432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4C7C524432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4C7C524432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4A0E71F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4A0E71F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421553185</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4A0E72F19FE0401F0A07995F00</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00071_UVTC_PrimaryEmail_Invalid_Role_device_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="d494b61a-8681-402a-b948-0bf05e012ace"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="40ebaa51-c4fd-468d-9486-fe4c7220c7f4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="86b0bcf6-3a97-47e7-bcad-1166d58d532c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="7c122121-ffe9-4edb-8171-496e2b7ae635"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DEV" id="cbe55f32-0e1a-4aee-a209-12b168091ddf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDEV"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="4d61c10a-41c2-4270-a0bd-8c483fcefe70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DEV</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZRU+o6EH4/v6JTH8+UthQo7QgzCKKooFLUoy93YrrQYJtikxbw19+k2AqIXs+dYYbJdrP77e6XLzlmKAqrbocxSDiJqTLotdR/7KbdBAvq2tRATa1WB6Q1HTA0G6pTy280nmv1mqoMGEthQBlHlLfUqmHWNKOhVasTw3ZNR/wqpmM+qco9JEyEFi4VQ1VWUUiZm6dtqWlC3RgxwlyKImAux67XGV65wtNFBSa1fbxBmSdM2gHnC1fXccUHDGGIKziO9GN9x+fYZ65HZhTxNIH3nD5rqe97l8tlZWlV4mSmVw3D0A1HFz4+I7Mjtf2r2Az+gE7jzbqLaEwJRiF5QxLUEHgQ+0onnMUJ4UH0RWhTNw0ZWoMV1rBZo0eq/pEgR/fDSDsgE4Y0FiCzCDaGKSRAMSh340FLPfrZBDd7JwmibBonEdtb/x0koBmE8QJ8jRWVFeh+HvFAu9rHgN0BxWHKSAYjSZMFwsCUmwSmZHVFmCCfz5R8/MqKiR8pWAb4b8ZyrG9jFdD1A93pkRkw/n9mtj2vTZR7FKbQxp2zO+90CNSEuZ3BwDfs5/PVev3Wu23lELadN6DKcb+v98lacut9k7eOnI5pWm/Xp3UUPv45f3yy4CUNg2jcGyfGfNpYDjvB6NY5e9CzV+e+cbs4u0z8LOH3v40LUtOz2XwC48nF9YP+65J2u8g0G17nxLqbnwajSfZke+Po/Gbsz28u7lmaYoONPOLXXub91bNlLS4vpxcPD8Hwavx4ZT02newkerL1m5OzX2PClr/7zBiN2F3j0esObdb6qGm7hl1jIQle+jwHzIulpMegp/TFvBD/Xl6khfjaNHd1F1KjGAfK1bbcJaXFTYUAEd8Vw9ys+91Gs1nr1IzGSb9n9RqnRs0w+0bHsB2nWrWMQoM2KPYgdmM6JTKXVNkNf74HiCOXAfUh0bI4xQEw9ZuIPcSRMqBjcThiymASCxWPSL06f5tZ08CJTTtOUfBSn8UrI1WVUcyv6XXSmXJIdqTbNHakewyYLAhIfZcEZ4LhjItevKIs5aFZyVCFQipugESKsFutNes6I9EiBIlUj2I/DaGyCBZ5Z3S2+a9qCLPcOj6d5Afvy7r2vxUtED4+kQ5M1nICYoxw4A4yikK+LtjaLrgI30l9Is+X6CdPCN4g2f30QRPJj5IjoqICcum5b9iJqu8XVCbyM4JLopc3tBB4cfzbxTheUeW1kmZZmg/AltKWiPC6UDhT9wCnQp/Wk/gFqF6G0H90PZSo9zKX9l18KQ+oxxGHSNBFyZc/eBt4wOTbYCB4vvrpw2MnpegbhxU/ZOuG4gkhEX/7ysAuln7CfCP+lnHif4zrQKytPKJO8SDghM7kSl4E6y9IgWMRlgjlipPt4IcCHEq+ayybXGLhgk3PKYevvyhSkloqwjhOKR/01NywLZM5Tr5egPvh9ClMLsXvd+uKfXm3/hleeUKwIqSWvuS/nTWS0wWDKq/wHEtLXYmnokhOZ1uy/A7wkzJ3+qYQ516zYVulMtcdx2zW7LKBO5W0P5k/W7Z6un8e2v8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC688AF14A4E8673E0401F0A05991847</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC688AF14A4D8673E0401F0A05991847</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC688AF14A4D8673E0401F0A05991847</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A406BFD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A406BFD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421558041</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A406C0D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00073_UVTC_PrimaryEmail_Invalid_Role_dsp:customersupport_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="3c3e9b55-a4cb-4e4b-8bf5-c407e28058cd"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="54aa91f1-38e5-48f8-8648-3cfa972469e7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="eff6b34d-fc5b-40e9-ba8a-f8be450e83aa"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="01b7e790-018c-401f-a09d-fd2a7163432e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_DSPCS" id="ed14d9ee-a552-48aa-8570-12f7aee95f14"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdDSPCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="ad7aa5c7-dd69-44e2-afc5-720d070be7bd"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chF1IuUUGiUNpsoVzb3eXlyHUm4DZxQuxA2l9/7NCkQGlP90hIyJPxzDcznz/7nKEwsJwOY5BwElHF7bXUf5rYRPBg+5pn1zzN9gFpzRpqaDZA06j5dt1+AFVxGUvBpYwjyluqZZi2ZtQ0y5obdcdsOla10rDrC1W5h4SJ0MKlYqhKFgaUOXnalpom1IkQI8yhKATmcOzMOsOBIzwdVGBS2+c7lHnCpL3iPHZ0HVc8wBAEuIKjUD/XD3zOPebMyJIinibwmtNjLfV173a7rWyrlShZ6pZhGLrR1IWPx8jyu9r+VmwGz6V+tFt3EY0owSggL0iCGgJfRZ7SCZZRQvgq/CC0qZuGDK1BhjVs2vS7qr8lyNF9MdIByIQhja2QWQSbgg8JUAzK3dRtqd+/NsHd3nmCKPOjJGRH67+DBHQDQRSDp7GisgLd1yOeaFf7HLDjUhykjGzgVtIkRhiYMk7AJ9mAMEE+jyn5+JWMiR8pWAb4b8Zyru9jFdD1E93pkSUw/n9mtj+vXZR7FKTQvvhtz9dWbfp0Fz2eJUtz0EGuZ9oB9Fkrh7DvvANVjvt1fUzWkluvmxZ8uu5cmdcB3CaT6+oy87P1lncW4WBhwSxeX88XU3zfM5LBaHrzxx5NNvbwxb3OJvcX+g8eVauPqQnjG/PnTbT9NsweG+OJNdgOkm6IyHY8m/Svtve/ZtnE9y/+3GVPZPS7pl/qC2M++XF3QRma8mVC/2xnT5bVCX7wmI5/Ddwxe2l8uyJu//q+07ga0u5yEQ77I9x6q2m/hkNjIQmz9OERMC+Wkh5uT+mLeSH+ubxIC/E0P3d1YqlRjAPlalvuktLipEKAiOeIYe7W/W6tcdY9sxsXl5260bUvDdsw+0bHqDebZ/2zRqFBOxRHELsR9YnMJVV2x5/PAeLQYUA9SLRNlOIVMPWTiD3EkeLSqTgcEWUwj4SK+zTm1fULNSGLI76M7Ze4+syDUFVuIz6io6Tjc0gOlNs0DpR7CpjEBKS8S34zQXDGRSvWaJPywKxsUIVCKi6ARGqwY9mNM52RMA5AAtXDyEsDqMSrOG+Mznb/loYwy63Ty3l+7j4s6/hb0QHh4xHpwGQtFyCmCCeuILMo5OOCq/sFF+E7qUfk8RLt5AnBOySHn95YIulRUkRUVEAuPY8NB1H144LKRN6G4JLn5QUt9F2c/nYxjjWqrCvpZpPmA6hLZUtEeF0InKnPAKdCnp7n0RNQvQyhf+l2KFEfZS7th/hSvqIzjjiEgi5KvvzC02AGTD4NXEHz7KvvjoOUom8cMn7K1g3EC0Ii/vSRgR0s/YR5LP62UeK9jetErL08ok7xHuCELuVK3gPPH5ACRyIsEcIVJfvBTwU4lfzQWDa5xMIFmx5SDh9/UaQitVSEcZRS7vbU3LCvkjlO/hyD8+b0LkyuxK9Xa8Y+vFp/DwczoVchUktf8t/OGsnpgsXDUvjnWFpqJl6KIjld7qnyK8D3wmz3LnvNRq9XrR8Ks2GXDTyopP3O/N6y19Pj89D+Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4DED99DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4DED98DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4DED98DD37E0401F0A07995F04</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C548BEA70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C548BEA70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421563058</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C548BEB70C4E0401F0A07995F58</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00074_UVTC_PrimaryEmail_Invalid_Role_contentprovider_with_TokeType_UnlockMe(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="e2ee6a1b-e08a-4021-8799-6d944e148bd2"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="bb48b65e-ade9-4710-be62-ff5c99dc5d57"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="4e21402c-af93-4f17-a28b-ddf3b66d73ad"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="f591924c-ab40-484f-be83-d230e937671b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CON" id="228b8f6e-4f59-4398-b825-25d83a03ac70"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCON"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8b005c07-9c24-47b8-8e4b-2f0baacd4e8c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3vV0TpYxWcQC4QFSQKZSvaLZRLuy8vR44zIe4ODo2dQPv1xwlNCpT2dB8JCXkynlkzs7zsS45XcdPtcw6poAlTvGFX/Sfs+L6pB1izzbavmYFBNN/RQTPA8pu+1XZs31QVj/MMPMYFZqKrNnXD1HRbazYXuuMaHbfpNOy2+VtVHiDlMrR0aeiqsl3FjLtl2q6apcxNMKfcZXgF3BXEnfdvb1zp6eIKk9q73KEsE6a9SIi1ixBpBEAgjkmDJCt0iQ58LgPuzumSYZGl8Joz4F31de9ms2lsWo0kXaKmrutI7yDpE3C6PFd7Z9VmCDwWJrv1ALOEUYJj+oILULcgoiRQ+vEySamIVh+ENpChF6E12BKNGCY7V9FbghLdFyMdgEw51niEjSrYDEJIgRFQ7mdeVz3/2gR3excpZjxM0hU/Wv8dJGA5xMkaAo1XlVXovh7xRLt6l0Bcj5E44zSHcUGTNSbAlbsUQrq9oVySL+BKOX5ly+WPViwD8jdjuUT7WCV0dKI7Q7oELv7PzPbntYvygOMMer8m/cfxbTS1IptFnasBsnzdg/nSa//qlhD2nXeg6nG/ro/JWnPrdZOX8m/f764SdAv3Y8CjwPKj5tVkaiVb5vyc3bO72NpOh62HkCTTO3/WHHdssF+aNL+y/Tje9B2AyQwGFyH6cxYF32fRzXNrPX8abbY/Jv3xeLG8Dx+mHf0xX5iO0/6xRQm5Eo+deavt3SdoaHW+0eff+hP8uL/YTH6ao5uQTy9QdHeWbYKLePpg5SP2gNGKhguv+1bTfg2HxkoS5pn/CERUy4Ie3lAZyXlh8bm8FBYaaGHp6q4LjeICmFB7xa5CWtxMChANXDnM3Xo0sNvWwBw4w5Zlmq3mtW7qxkjv606nY430dqVBOxRHEAcJC2mRq1DZHX8+B0hWLgcWQKrlSUYi4OonEYdYYMVjM3k4EsZhkUgVN1ovT+08+mNEPGDtdkQeX3LH8W1fVcaJmLBJ2g8FpAfSbegH0j0DQtcUCn0vCM4lw7mQvXjCeSZio5HjBoNM3gBpIcJu02xbiNPVOoYCKVolQRZDYx2ty84gvvtvapjw0jq7XpQH78O6jr9VLZA+AS0ceFHLFcgxwok7yKgK+bjg1n7BVfh+FtDifMl+ipSSHZLDT280KfhRc0RWVEGuPY8NB1HRcUF1oiCnpCZ6fUNLgZfHv1eN4wk3nhpZnmflAJxC2lIZHkmFM9AcSCb16XmR/AGG6hDoS9dDjfooc20/xJeJiM0FFrCSdFHK5RfeBnPgxdvAkzzffvXhcZBS9k3AVpyyDWL5hCgQf/rKIC4p/KT5Tv5tkjR4G9eJWHt5ZJ3yQSAoWxar4iJ4/oAUJJFhqVSuJN0PfirAqeSHxrrJNRYh2eRnAj7+ohSS1FUxIUnGhDdUS8O+TJY4xfMa3Dend2FKKX69W7f8w7v15+3NXArWCqu1L/1vZ42WdCGgFld4iaWrbuVTUSZnyz1ZfgX4Tpltc2hbQ7t/bY32ldk07UHdwINKeu/M7y17PT0+D71/AQ==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC68564D65D7AE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC68564D65D6AE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC68564D65D6AE5FE0401F0A0799446C</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC685C4C7D354432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC685C4C7D354432E0401F0A07995F08</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421567005</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC685C4C7D364432E0401F0A07995F08</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00075_UVTC_PrimaryEmail_Invalid_Role_contentprovider:customersupport_with_TokeType_UnlockMe_(Negative)_403_FORBIDDEN_P2" searchProperties="true" id="0148f23c-8046-430b-b2da-ce16d6462cf5"><con:settings/><con:testStep type="groovy" name="NodeId_Setup_RET" id="89ccc142-c046-417e-8ec0-70410541dbd7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="394c6048-a129-4603-9e01-56395dba0f7e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1222eb22-726f-4744-aa0d-d5c2cba0bed8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_CONCS" id="4e24c087-4c46-4d7e-8ff5-1d927dcefc46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdCONCS"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="8249c8f9-4cb4-4b97-bf44-76368fc092e9"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","API_NOT_AUTH");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_UM"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+o4EH7vr4jSxyrkwi1EgES5HLFbSgu05xxeVsaZgNvEgdgJ0F+/diApUOhyVkJCnoxnvpn5/Nl1hgLfclqMQcRJSJV+p6H+g93azLBcS6vMDFMreYA1u1wua1VUNcEtW6b4qip9xmLoU8YR5Q3VMsySZlQ0y5oYVcesOUWzYBmlqaq8QsREaOFSMFRlE/iUOWnahhpH1AkRI8yhKADmcOyMW4MHR3g6KMOkNus7lGnCqLngfOnoOi64gMH3cQGHgV7Xj3zqLnPGZE4RjyPY53RZQ93vXa/XhXWxEEZz3TIMQzdquvBxGZnfqs2bbDO4feqFu3Ub0ZASjHzygSSoAfBF6Cotfx5GhC+CC6FN3TRkaA02WMNmid6q+meCFN2VkY5ARgxpbIHMLNgIPIiAYlBeRv2GenvdBHd7JxGizAujgJ2s/wwS0AT8cAmuxrLKMnTXRzzTrmYdsNOn2I8ZSeBR0mSJMDDlKQKPbB4IE+RzmZKOX9kw8SMZywD/yVjq+iFWAV0/050OmQPj/2dmh/PaRXlFfgzNbWVjbd5gQeC9OFwPZ/2nZFa59zY26zZSCIfOO1D5uPfrU7Lm3NpvGs1qhM8rr+tON0jM1nDD9CG6n7dGwzs/GfQiguNVtxi2bfI4eH5uL/iPpffjZWb/altxMu25H9UXb7GeVu6ff37cbGu41lnV7sy7aP6bLyZ96j+9lOzktfc3vGwXa9d7/mvZvX8bTR7tiZ7w9YDz39GoiA1vvTJ/2tNh8KrXytPe43R2Y8RRG3d/3Nt0WqGr5K0drxufNR3WcGzMJGEcz94A82wp6dHvKD0xL8S/lxdpIa7mpa7OUmoU40C52pS7pLQ4sRAg4jpimLt1r12x7VKrZFS6tU6xU+kaJcPsGS2jWqtZVtHINGiH4gRiO6Qekbmkyu748z1AHDgMqAuRloQxXgBTv4nYQRwpfToShyOkDCahUHH+EYXhewLzAPsBKb7H9nb1BjNVeQz5kA6jlschOhJu0zgS7hFgsiQg1V3Smwl+My46sUJJzH2zkKAChVjofyQl2LFKdllnJFj6IHHqQejGPhSWi2XaF53t/i0NYZZaR91JeuwuVnX6LWuA8HGJdGCylnsQQ4QzN5CVFXK54OJhwVn4VuwSebpEN7k4Gzskx58+SSLZkTNEVJRBzj1PDUdR9dOC8kRuQnBO8/x+FvIuDn8zG8cKFVaFOEnidABVKWyRCK8LfTP1MeBYqNN2Er4D1fMQ+lWXQ476JHNuP8YX8wUdc8QhEHRR0uUVL4MxMPky6AuWb659dhylFH3jsOHnbG1fPCAk4m/fGNjB0k+Yn8TfOozcz3GdiXWQR9QpngOc0LlcyWtge4EUOBRhidCtMDoMfi7AueTHxrzJORYu2DSLOVz+okhBaqgI4zCmvN9RU8OhSKY4+XYJzqfTlzCpEO9v1g27eLP+GjyMhVwFSM19yX87aySlCwZVXuAploa6EQ9FkZzOD0R5D/BUl8vtUrvaKddKpaJ1qMvlnmHnDTyqpPnF/NVy0NPT89D8Fw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>FC685C4C7D5A4432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>FC685C4C7D594432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:FC685C4C7D594432E0401F0A07995F08</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>FC6884A406E9D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:FC6884A406E9D3D6E0401F0A07992230</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140622_1403421570248</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>FC6884A406EAD3D6E0401F0A07992230</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>API_NOT_AUTH</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="RETRY_ATTEMPT_LIMIT" id="995a8c49-9174-4ab1-b375-f63259f0a408"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00168_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_200_OK_P1" searchProperties="true" id="fef151c8-6a1b-4241-adae-967b551b3283"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="5569cfbd-3aac-493c-97fb-82d8a4fce949"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="0645cab3-0dfa-45bf-abd7-b88f06d164d6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="11722852-0337-490c-b888-8c8f31312d2d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1ca9e7cb-5c05-47ba-87de-44206751af67"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="e44e6bc5-ee62-4e76-a398-3bfeeeb1bb01"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f93dfa8a-f723-40a2-a057-a4f5434787ac"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="3b25c8a2-27c2-4a48-adcd-26e9261f3505"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbc9o6EH7vr/C4jx3jC+ZiT2DGhdDSkEuBMGlezgh5DWpsybFkQ/Lrj2RiByjJSc8MM4zWq91vdz990hlHSez4AeeQCcKoNh729H/a7jJ07G7bWCLoGq7rguG53aVhL7GLnA4sW6ija2POcxhTLhAVPd2xbNewuobtze227zR9t91oNr17XVtAxmVo6dKwdG2bxJT7ZdqenmfUZ4gT7lOUAPcF9mfB5cSXnj6qMOn9sx3KMmHWXwuR+qaJGyFgiGPcwCwxz8wDn7OQ+zOyokjkGbzkDHlPf9m72Wwam2aDZSvTsSzLtDxT+oScrD7r/U/VZgjHNGK79QBRRglGMXlGCtQliDULtSBesYyIdfJGaNu0LRXagC02sO3Sz7r5mqBE98FIByAzjgy+RnYVbAoRZEAxaLfTcU///LEJ7vbOM0R5xLKEH63/DhLQAmKWQmjwqrIK3ccjnmhX/wywP6Y4zjkp4ErRJEUYuHaTQUS2E8Il+UKulePXtlz+SMUywH8zljNzH6uEbp7ozpCsgIv/M7P9ee2iLFCcQ//RHGyHv1n71/BrsTAvvrdjd/lz+WVxw857JYR95x2oetwv62Oy1tx62YTu7YvVDRmnvBXPrNsxmAN0/yXlaWC2B3kmsvnd9Mq9nNCL5fw7WE+3xc/pNTkvNpdfv4RRcmdvEyfeLKOn6eTu0+hylTn3LHTvW4NfwXOQTjfmpuPQ69nyR/c2GXvf4ofmZDp5iDq3EdpGgxv74s6Opov8jj5eLMQDNYPZ9ePts/tj8Mm7anuDn/Nv7sNC2MwaBtdW77Wm/RoOjZUkzPLlb8CiWip6jIfaSM4LifflRVlIaESlq58qjeICqND7apeSFj+XAkRCXw5zt7as0bkXjIJOy2q61mh4brWaVsvz7JEVBN1ht9KgHYojiANGI6JyKZXd8ed9gDjxOdAQMqNgOV4D19+JOEQCaWM6lYeDUQ5zJlW8KNpph3W78Fysba8duR62odVdrXTtiolrep0FkYDsULq9A+meAiYpAaXviuBcMpwL2YtHVOQithsFalDI5Q2QKRH2HbfbMjlJ0hgUUjNhYR5DI12nZWdMvvt3DIR5aZ2ez8uD92Zdx9+qFkifkCgHrmr5CnKMcOIOalaFvFmw4+wXXIUP8pCo8yX7KTKCd0gOP73SRPGj5oisqIJcex4bDqKaxwXVicKC4Jro9Q0tBV4e/341jkfUeGzkRZGXA+goactkeFMqnG3OAOdSn57m7AHkqatCmB+6HmrUR5lr+yG+XKzpTCABiaSLVi4/8DaYAVdvg7Hk+fajD4+DlLJvArbilG0QyyeEQvzuKwP7WPlJ843827AsfB3XiVh7eWSd8kEgCF2plboInt4gBWYyLJHKxbL94KcCnEp+aKybXGMRkk3LXMDbXzQlST0dYcxyKsZDvTTsy2SJUzyl4L86/RGmlOKXu3XL37xb7y4nMylYCdJrX/LfzgYp6YJBV1d4iaWnb+VTUSanqz1ZfgF4QpnPbcfp2N0gKJW5s1Pmljuy6wYeVNL/w/ynZa+nx+eh/y8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFE122818AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFE122718AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFE122718AAE05307991F0A54F1</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFA750340FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFA750340FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465425334</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFA750440FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>11722852-0337-490c-b888-8c8f31312d2d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e44e6bc5-ee62-4e76-a398-3bfeeeb1bb01</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00169_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1" searchProperties="true" id="0f882814-c07a-455f-97cb-659860bd701d"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="a3ed51ed-91b1-4390-afec-59a6528a1da7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="40267393-c30e-4596-ba95-df573c299f04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="89ac0e2a-7429-4a30-b9fb-a938bbab9ea4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="1c4b1a94-ce88-4512-9b65-a2fd47846160"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="45d67dfd-e83d-431e-b4b9-b18053f28c5b"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="66ea1430-0a59-40b7-b679-af161095bc07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="0dd27819-eb27-4f00-a969-c4b1645c44de"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3vr4iyj6uQD6CQqCCFAt200LJ89Hb7cmWcAbxNnBA7KfTXrx2aFCjt7V4JCXkynjkzc3zsC4bCwHJcxiDhJKKK122p//o1y7cNc67VjepcqzWQrdk109CweV6tV+sNy4SGqniMpeBRxhHlLdUyzJpmNDXTnprnjlV1anal1rAfVeUeEiZCC5eKoSqbMKDMydO21DShToQYYQ5FITCHY2fiDgeO8HRQgUltX+xQ5gmT9orz2NF1XPEBQxDgCo5C/UI/8LnwmTMhS4p4msBrTp+11Ne9z8/PledqJUqWumUYhm7YuvDxGVl+U9tnxWbwPbqIdutLRCNKMArIC5KghsBXka+4wTJKCF+FH4Q2ddOQoTXYYNG+Gv2m6m8JcnRfjHQAMmFIYytkFsHGsIAEKAZlNvZa6revTXC3d5ogyhZRErKj9d9BAppBEMXga6yorED39Ygn2tW+AOx4FAcpIxncSprECANTRgksyGZAmCCfz5R8/MqGiR8pWAb4b8Zyoe9jFdD1E93pkiUw/n9mtj+vXZR7FKTQHt0+xPXIm9TuOXGX42zkN2+6d8G1obNWDmHfeQeqHPfr+pisJbdeN40G6RNxb/tzNCLBcNqfGd85GjELPaLrVXxnd7bTxeV63X3ZzH7PFjezAdwMfm1/Jlk/nDxuYTi8Mh/XfH71I/7+cGa65n1nJtLe96KxB3243F5vf9mrh743fJoZ/gTNOhkKUKdPfhrmj9uweaPPb2F+nYwmC+b3aXqVDc5Xg8vwfHAW8If4+z/MWK576eOwMU6zYeutpv0aDo2FJEzS+W/AvFhKenhdpS/mhfjn8iItxNcWuasTS41iHChX23KXlBYnFQJEfEcMc7c2jH7Pdt1ar+HWa0bP6hn1qlG3bbNvuG6zaxcatENxBPEyogsic0mV3fHnc4A4dBhQHxIti1K8AqZ+ErGLOFI8OhaHI6IMppFQcRPXbSDpgjafzZWJXnDTf9pSP4yaqnIb8Tt6l7gLDsmhdtsH2j0GTGICUuAlw5mgOOOiGWuUpTwwKxmqUEjFFZBIFXasWrOuMxLGAUioehj5aQCVeBXnrdHZ7t/SEGa5ddyb5ifvw8KOvxU9ED4+kQ5M1tIBMUc4cQlVi0I+LNiy9gsuwrupT+QBEw3lCcE7JIef3ngiCVKSRFRUQC49jw0HUfXjgspEfkZwyfTyihYKL85/uxjHGlXWlTTL0nwADaltiQivC4kz9QngVAjUdho9AdXLEPqX7ocS9VHm0n6IL+UrOuGIQyjoouTLLzwOJsDk48ATRN989eVxkFL0jcOGn7JdBuINIRF/+szADpZ+wjwSf89R4r+N60SsvTyiTvEi4IQu5UreBNsPSIEjEZYI6YqS/eCnApxKfmgsm1xi4YJN85TDx18UqUktFWEcpZR7XTU37OtkjpNvY3DenN6FybX49XLdsA8v14fhYCIUK0Rq6Uv+21kjOV0wqPIOz7G01I14K4rkdLmny68A30lzxzB7taZpNjtGLs2NnTSfm5ZZNvCgkvY783vLXk+Pz0P7Dw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9B01E48218B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9B01E48118B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9B01E48118B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AA4E7A540E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AA4E7A540E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465428798</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AA4E7A640E2E05305991F0AA8D9</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00170_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_same_Node(negative)_403_FORBIDDEN_P1" searchProperties="true" id="8c8394b0-7821-40d2-943b-60208146c192"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="7ad0b626-f9d8-4b2a-88c9-4c9f5a3d75a4"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="def40c20-3a3f-4c61-89a3-9c55289a246c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="17f954d2-11d0-467e-8592-92b1df6cac64"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="bea70327-50bd-4a42-9275-d12bce693685"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="69dfa0f1-52f3-408a-8459-9097ade5d237"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="eea55f43-297d-45e9-a2d0-ed44528c6694"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def loopNumber = context.expand( '${Steps#Loop}' );
log.info("Iteration Number : '" + loopNumber + "'");

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));
def loop = context.expand( '${Steps#Loop}' )
log.info "Calling UVTC Primary Email : " + loop + " th Time ";
def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="4171db2b-6e2b-4a4c-afae-23a063dad4b7"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="f14e62c9-9601-4d8a-8c4a-893c029bd054"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzBjmNXoMoBkjATJgmQGYaXLSG3jSa2TCwJSL5+JQMeTC7L7pNL7Vb36e6jI10wlKV2EDIGBSc5bWyylLKgtLY1UdAgR4ywgKIMWMBxMA6Ht4HdNAO036I1Br229reNnHh+Zls6Mn1Td86Rr6PYnesWuN4cIhxHviddGRMwoIwjytuabVqOblm6ZU4sK3C8wHGatuPPtMYPKJiMLV2aprYDtWFtbcH5MjCM9XrdXLeaeZEYtmlaxnR4O8YLyJDWudhWVCYqOjt/3IwAQ5riJs4z48Ko+VxELBiThCIuCtjlij7KZRqmb0ifiJHki1bthWhA47xcdhHNKcEoJa9I9WcIfJFHjTBN8oLwRfZhEZapAuuwwTq2HPpFM+rQTgxUQ1gwpLMFsnaxRhBDARRD43E0aGtfTptauXVSIMrivMhYffnf8ABdQZovIdLZvqwdtNMDvtOpzgXgYEBxKhhZwXdF1iXCwHbTBHx6qMZ9ATHZ3BImCbphCp1xCO9oue1GjyTA+P8Z0MFwtkF+oFRAZ/n9gbFrdjm9MRxxGbpJ/rR+ebxyZna/XQI4dC4N1Wi3yyNSViTa7kgG63Ov57eS2To6D684nz5aw1nvd/+v7LGb9H5No3krwQ+RcZYAvrFc1//mT0jPnd+8ioc0vUumj3T1vMjS/DXr31/S2c+vw2wcmvas99S6ETEvwvWZbV/DzflkvhDZLLoLxeD+Gpti9dPNHsOv5PYn/zW9Gt0Z/Ww6RCvXeX26Dkdm4f3a9ItvbIOHN8lD6pjtqpwD/HXb/syPxfw3YL5fKhoMeo0rOSXEPxczZSGRHpeuwVKJD+NAudZRu5R2BELKHYkCOcPt2vTOzcvQ63pW78pquWHfdFum6/vWlRnaftfai8wWxRHEbk5jonIpyd3S5nOAOAsY0AgKfZULqXRM+yRiD3HUGNCRPAQ5ZTDJpTxb88U8nce//Zd1HlvZwvVZXCyWwl9rje85v6N3RRhzKOqi7NREeQSYLAko5VbEZpLZjMtmPKOV4KnVXKEmBSG1vVAyG9jOuWswki1TUFCNLI9ECs3lYlm2xmDbr60jzErrqD8pj9uHhR3/2/dA+kREOTBVyyXIOcI7t0trX8jHBXuHBe/DhyIi6mTJhvKC4C2S+q8/PFEEqUgiK9pDrjyPDbWoxnFBVaJoRXDF9Oq+ljIuD35nP45n1HxuitVKlAPwlMAVMrwhdc4yxoCF1KWXSf4E1KhCGCddAhXqo8yVvY5P8AUdc8Qhk3RplMsTbv0xMHXrDyTRN6c+KWopZd84bPh7tm4qXywK8aePGhxg5SfN9/Kzzovoz7jeiXWQR9YpL31OaKJW6gJ4+YAUOJdhiZSuvDgM/l6A95LXjVWTKyxcsmkuOHz8p6E0qa0hjHNB+aCnlYZDnSxx8pclBH+c3oQppbh6m5F/f5zppKQABvmiY6SMr67YQPGfJgdau0v6Vm7drmWeea3LsFXKrbeT2zOvXzWlhq7zxvzWctCnY453/gE=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>0780BA5C10683BA3E05307991F0A267E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0780BA5C10673BA3E05307991F0A267E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0780BA5C10673BA3E05307991F0A267E</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>0780BA7C71DF135AE05305991F0A29C1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:0780BA7C71DF135AE05305991F0A29C1</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20141110_1415620121235</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>0780BA7C71E0135AE05305991F0A29C1</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00171_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_same_Node(negative)_403_FORBIDDEN_P1" searchProperties="true" id="5c2e3ab0-888b-48c7-993b-603bd0b10500"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="7438ab30-30e4-419f-b6dd-b8faefac99ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="4b1a660f-7b37-4db4-a843-0ce85a75a030"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="6b57905a-e13e-4f55-a9f4-0e3ea6dcb999"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="fdf55c24-636e-4a4b-8cfa-d6f7eedda9ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="d442f8eb-2ec0-43f9-be2e-b08366de420f"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="3d49ab9a-ffef-4241-bf8b-74dda514ce5e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="f5c3f195-48a0-4a2b-b988-484ebdb21db1"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="becd402c-c9e2-4277-8bbf-69751fd1c089"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVbbbuo6EH3fXxGlj1WIA4SSqCBBKW22eody2r4cuc4kmCYOxA6Efv22Q5MCvZzuIyEhT8Yza2aWl33McRzV3R7nkAqaMM0bdPR/LRS0bALYcILAMpqtlmO0gwY22pZvOfazTWy/rmse5xl4jAvMREevI6tpoLZhOWOr5dabLrJqdsN+0rUJpFyGli41pGt5HDHuFmk7epYyN8GccpfhGLgriDvqXV640tPFJSa9e7xBWSRMu1Mh5q5pkpoPBKKI1EgSm8fmjs+xz90RDRkWWQpvOX3e0d/2rlar2qpRS9LQrCOETOSY0sfnNDzQu7/KzeB7LEg26xPMEkYJjugrVqAuQUwTX+tFYZJSMY2/CG2ZFlKhDciJQawmO9DN9wQFuh9G2gGZcmzwKbbKYHcQQAqMgHZ/53X0g59NcLN3nGLGgySN+d767yABW0KUzME3eFlZie7nET9pV/cYiOsxEmWcLuFK0WSOCXDtJoWA5heUS/L5XCvGr+Vc/mjJMiB/M5ZjcxurhG5+0p0BDYGL/zOz7XltokxwlEH3moxvFpM4Cs/82/PgdnzVytcPv+On8aHXKSBsO29AVeN+W++TteLW26aH2764ov31oQP2q7Pijk/a9m2WjkbmWWCjO3DY4wA79+h8huKLo7P19Hryu/XUz4fJ6KpPLrH1cH1lntpW89L5NbFfHz2cLe5nD2dmq51Pnm7OvKWXx2i5mh7eBvF6HFposabn7cU/Vti3kuvzdLaY3F9e0AngoB4mwaN/f+SnD+NfKDwZYn4eeo1RY9T0J+nipfNe03YNu8ZSEkbZ8wyIKJeKHt5AG8p5YfG9vCgL9Y2gcHXnSqO4ACb0rtqlpMXNpABR35XD3KwRGp46vWHvyG60mmg4OEV2A9mOYw1Rr9cetEsN2qDYg3iSsICqXEplN/z5HiCJXQ7Mh9RYJhmZAte/iTjAAmseu5OHI2EcxolS8dkMvVivJEfw+rogKFo4fJaLo1TXrhJxza7TXiAg3ZVuZ0e674DQOQWl74rgXDKcC9mLBV5mIrJqS1xjkMkbIFUiLLe2bZPTeB6BQmrGiZ9FUJtP50VnTL75rxuY8MJ6dzouDt6Xde1/K1sgfXyqHLiqpQ9yjPDhDmq4dlnIlwXX69sFl+F7mU/V+ZL9FCklGyS7n95povhRcURWVEKuPPcNO1HN/YKqRP6Skoro1Q0tBV4e/245jgWuLWrZcpkVAzhS0pbK8KZUOMscAcmkPq3HyQswswph/uh6qFDvZa7su/gyMWUjgQXEki5asfzB22AEXL0NPMnz/KcPj52Usm8CcvGZ7SSSTwiF+NtXBnGJ8pPmG/m3SlL/fVyfxNrKI+uUDwJBWahW6iJYf0EKksiwVCpXkm4H/yzAZ8l3jVWTKyxCsuk5E/D1F01JUkfHhCQZE95ALwzbMlngFOs5uO9OH8IUUvx2t+b8y7v14fJiJAUrxnrlS//b2aAFXQjo6govsHT0XD4VZXIWbsnyG8APytxHqG/XraaFrG1lbvWQUzVwp5LuB/NHy1ZP989D9w8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9B00B5224101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9B00B5214101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9B00B5214101E05305991F0A6A09</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFA753640FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFA753640FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465440506</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFA753740FDE05305991F0AA8D8</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00172_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_sameTokenType_same_EmailID_different_Nodes(negative)_403_FORBIDDEN_P1" searchProperties="true" id="df84f56f-3cac-4977-8eff-694db3437e58"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="0669d5be-1d5a-4df9-aa9b-565bf3c6e38f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="4e075911-9c78-45dd-a0d5-a2734cc9bdbb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="a4e804cc-fd2d-4fac-a230-05691227f95b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="29b71a0a-20e7-4c63-bf78-1bbdcd880fb0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="aae8605f-6306-4ca0-bf1c-05e7caa5503b"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">DECE</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">RET</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">iscportal1</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>Node_Role</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_loop" id="905178f2-b95d-4c0c-86f9-ff5e87945571"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",context.expand( '${Steps#Node_Role}' ));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="e4b366a8-64c3-46cd-9b2b-581d2da7842b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="d442c307-3343-47ca-a3e4-9da62836bc7f"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>NodeId_Setup_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="7763cbb7-591a-4d81-b998-38a1e5e3c96e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZdb+I6EH3fXxFlH1chH4RCooKUFlilLaUlbNn25co4A/E2cWjsBOivv3ZoUqAft3slJOTJeObMzPGxTxlKYsv1GIOMk5Qqfr+r/uNYdrtlI6RBMzQ120CGNm9bJ5p5Yi4c8bPwYq4qPmM5+JRxRHlXtQzT1oyOZjpT88S1bNewG3bbfFCVO8iYCC1cGoaqbJKYMrdM21XzjLopYoS5FCXAXI7dwBtducLTRRUmtXe6Q1kmzHoR5ytX13EjBAxxjBs4TfRT/cDnNGRuQJYU8TyDl5wh66ove9frdWPdbKTZUrcMw9ANRxc+ISPL72rvW7UZQp8u0t36HNGUEoxi8owkqBHwKA0VL16mGeFR8kFoUzcNGVqDDdawadPvqv6aoET3xUgHIDOGNBYhswo2gQVkQDEovyZ+V/3+tQnu9k4zRNkizRJ2tP47SEALiNMVhBqrKqvQfT3iO+3qnQJ2fYrjnJECriVNVggDU24yWJDNFWGCfCFTyvErGyZ+pGIZ4L8Zy6m+j1VA19/pTp8sgfH/M7P9ee2i3KE4h979fHY53nq/H8no+W6wNu3r8fQG27eXG69bQth33oGqx/2yPiZrza2XTePb60FzMk0i3xgGI5vc/7jj6aB1E03yEV0E10N8mybOxUXrvp0s7LYP/XANVnTP0sVDEF0+xstbP+5Ht1ETxt+KpXeyChKGYmc22vajeHtx0WedeTsLB3O98AH9eI5NNPs9Kzpe0DkrtuQH2Xjns1+buz/NWcu+9YrruF/w52fz2yL0bwrn5/PD4zj4SWeX9w+d7mtN+zUcGitJCPL5H8C8Wkp6+H1lKOaF+OfyIi0k1Balq7uSGsU4UK725C4pLW4uBIiErhjmbm0Yw4FzZpgD22ubnTNjYLSaRttxzKHhnZiWWWnQDsURxPOULojMJVV2x5/PAeLEZUBDyLQizXEETP0kYh9xpPh0Ig5HShlMU6HiS8if2k/OhjNOTcPZnkRzlKytVEj3dcrHdJx5Cw7ZoXQ7B9I9AUxWBKS+S4IzwXDGRS+eUJHz2GwUqEEhFzdAJkVYbO20dEaSVQwSqZ6kYR5DYxWtys7obPdvaQiz0joZTMuD92Fdx9+qFgifkEgHJms5AzFGeHMHNd1WVciHBVvWfsFVeC8PiTxfop88I3iH5PDTK00kP2qOiIoqyLXnseEgqn5cUJ0oLAiuiV7f0ELgxfHvVeN4Qo2nRl4UeTmAtpS2TITXhcKZegA4F/q0naaPQPU6hP6l66FGfZS5th/iy3lEA444JIIuSrn8wtsgACbfBr7g+earD4+DlKJvHDb8Pdt5LJ4QEvGnrwzsYuknzDfib51m4eu43om1l0fUKR4EnNClXMmLYPsBKXAqwhKhXGm2H/y9AO8lPzTWTa6xcMGmec7h4y+KlKSuijBOc8r9vloa9mWyxMm3K3Bfnd6EKaX45W7dsA/v1t+jq0AIVoLU2pf8t7NGSrpgUOUVXmLpqhvxVBTJ6XJPll8AvlFmb9g3BpZjG8NhqcytnTKbVrNTN/Cgkt4b81vLXk+Pz0PvXw==</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFD0E2A40FFE05305991F0A1238</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFD0E2940FFE05305991F0A1238</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFD0E2940FFE05305991F0A1238</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B01E4A718B0E05307991F0A6121</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B01E4A718B0E05307991F0A6121</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465443837</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B01E4A818B0E05307991F0A6121</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>905178f2-b95d-4c0c-86f9-ff5e87945571</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00173_Verify_for_RETRY_ATTEMPT_LIMIT_for_more_than_3_API_Calls_in_15_minutes_with_differentTokenTypes_same_EmailID_different_Nodes(negative)_403_FORBIDDEN_P1" searchProperties="true" id="d618467f-c9e7-4fdf-9c2f-dd4620db4a79"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="c2cbae9b-4ce6-4e76-a4f4-c90df3c5d2e2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="ada14987-387d-4467-8cc0-d093cba6dc04"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="df697f6c-b6a0-403b-a98b-a006f2e4ce7d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="0c6a47df-88f8-4979-8729-158ef747df07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="0c40585b-8809-47be-893a-f5e0e0d40832"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">DECE</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">RET</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">iscportal1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>Node_Role</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="NodeId_Setup_loop" id="09967076-ce97-4044-92af-6f589cf6b8dc"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",context.expand( '${Steps#Node_Role}' ));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="1d768d64-9d32-4ee3-97ca-8d4cc2818796"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="189d2833-f7d7-4fa2-b353-a47929c77fe2"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>NodeId_Setup_loop</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="05a04244-7c1e-4ac4-9627-ed8ea130ab80"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","FORBIDDEN_LIMIT");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFlH1chN26JChK3dOkpXcqlZ7UvR8YZwN3EhtgJtL/+2KFJgdKe7pGQkCfjmW9mPn/2FUdx5PgdziERhFFt2G/p/zQXDbfuNBbGAppVo1pbhAaqL8GoN1DVbmLwrFpN14acpzCkXCAqWrpj2VXDahq2N7PrvlP1rUbFs6xfuvYACZehpUvF0rV9HFHu52lbeppQnyFOuE9RDNwX2J92Rre+9PRRgUlvXx1Q5gmT9lqIjW+auBIChijCFcxi88o88bkKuT8lK4pEmsBLzpC39Je9u92usnMrLFmZjmVZpuWZ0ifkZPVVb38pNkM4pEt2WPcQZZRgFJFnpECNQKxZqHWiFUuIWMfvhLZN21KhDdhjA9tV+lU3XxPk6D4Z6QRkwpHB18gugk1gCQlQDNp8MmzpXz83wcPeWYIoX7Ik5mfrP4MENIOIbSA0eFFZge7zES+0q30F2B9SHKWcZHCnaLJBGLg2TmBJ9reES/KFXMvHr+25/JGCZYD/ZCxX5jFWCd280J0+WQEX/2dmx/M6RHlAUQrteTd7vk+38+tBh3X6s23/u9hdb8GZPA1bOYRj5wOoctwv63Oyltx62XT91+LZmm/Fb5x9X95FD72g+/Qcj+wB6y4i+tP8NRp0Q2Ytgv1sejM255N04fbd4LHZSRpRcNe97m6T+3F91O/Px1+cm+Dmx0/779oTerCj9Xx3i7bX3zzWn4ZV/i2ws/vHhXfPtpjO3evx92HP8yyxm475gu073fv9aDWtp4/fbnt8n3zJmjfOstdcx9vZb3fpxpPurvVa03ENp8ZCEqbp4hGwKJaKHsO+Fsh5IfGxvCgLCY1l7upvlEZxAVTobbVLSYufSgEioS+HeVhbVjDwOkHfGrjNqhUEA6vmWjXPswOrYztus9CgA4oziD1Gl0TlUip74M/HAHHsc6AhJEbGUrwGrn8QsY8E0oZ0Ig8HoxxmTKo4i9eQuMluuctWtoOaNZcRVq9VG7p2x8QP+iPpLAUkp9LtnUj3BDDZEFD6rgjOJcO5kL3YoiwVkV3JUIVCKm+ARImw3NqsmZzEmwgUUjNmYRpBZbPe5J0x+eHfMRDmuXUymOUH7926zr8VLZA+IVEOXNXSBTlGeHMHuX6tKOTdgh3nuOAifCcNiTpfsp8iIfiA5PTTK00UP0qOyIoKyKXnueEkqnleUJkozAguiV7e0FLg5fFvF+PYosq2kmZZmg+goaQtkeFNqXC2OQWcSn16mrHfQM0yhPmp66FEfZa5tJ/iS8WaTgUSEEu6aPnyE2+DKXD1NhhKnu8/+/A4SSn7JmAvLtl6kXxCKMQfvjKwj5WfNI/l344l4eu4LsQ6yiPrlA8CQehKrdRF8PQOKTCTYYlULpYcB78U4FLyU2PZ5BKLkGxapALe/6IpSWrpCGOWUjHs67nhWCZznOJpA/6r05swuRS/3K17/u7d+nN0O5WCFSO99CX/7WyQnC4YdHWF51ha+l4+FWVyujqS5ReAF5Q5qHp2tWoNmsfK3K93grKBJ5W035jfWo56en4e2v8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AFF491540E8E05305991F0AD6AF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AFF491440E8E05305991F0AD6AF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AFF491440E8E05305991F0AD6AF</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9AFD0E3840FFE05305991F0A1238</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9AFD0E3840FFE05305991F0A1238</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465446887</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9AFD0E3940FFE05305991F0A1238</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>FORBIDDEN_LIMIT</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00174_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_sameTokenType_same_EmailID_200_OK_P1" searchProperties="true" id="36532db6-c234-4d53-835d-0e5c9d70233e"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="74b27d98-f15b-4e22-a7ff-8432c769cde8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="b1c32452-d5ed-4581-a0c0-26825be1fc10"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="bb93eba5-4d3d-4d3a-8ce5-a5821e50f108"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="fc6c807b-127b-46be-ab75-d06291d42ae0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="0a22c982-7093-4308-a21e-63e3226be046"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">1&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">2&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">3&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="f1a37d35-6249-41f1-a15b-1ea4efd0a44c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="87dd8bab-106f-4059-87e8-2865e4c3d8ed"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="delay" name="Delay_15Min" id="c26b4e13-0465-4e37-9f68-7de62cb5d5d4"><con:settings/><con:config><delay>960000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="069c2407-5451-4737-bd3e-32934652f766"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZbb+I6EH7fXxFln0OulCQqSFyrbG/Lpd1dXo6MM4AhOBA7Afrrjx2aFCjt6R4JCXkynvlm5vNnXzO0iiy/yRgknMRUCTp19Z9JWKs6thdqpm3amlObeJpb8xzNQRPXNQ0LbHeqKgFjKQSUcUR5XbUM09EMVzO9kXnlW45vmhWrZo9V5RkSJkILl4qhKrtVRJmfp62raUL9GDHCfIpWwHyO/WHz/s4Xnj4qMKmN6wPKPGHSmHO+9nUdV0LAEEW4guOVfq2f+FyHzB+SGUU8TeA1Z8jq6uve7XZb2dqVOJnplmEYuuHpwidkZPZdbXwrNkMY0Gl8WLcRjSnBKCIvSIK6Bz6PQ6UZzeKE8Pnqg9CmbhoytAY7rGHTod9V/S1Bju6LkU5AJgxpbI7MItgAppAAxaA8DYK6+v1rEzzsHSWIsmmcrNjZ+u8gAc0gitcQaqyorED39YgX2tW4BuwHFEcpIxk8SJqsEQam/ExgSnZ3hAnyhUzJx6/smPiRgmWA/2Ys1/oxVgFdv9CdDpkB4/9nZsfzOkR5RlEKDWvamZrd6WMa3d6Or5ZPzaw/Bjv49bh/qucQjp0PoMpxv67PyVpy63XT4veMZxCyF3t1R7Y3PdJ77vZHZDGA1m31IRiM57H9w2gHf3pD3o8XuNvuhuFT/5lvOK6RX31nPfs5a6PHSWsy/rbm285jdGP9wbNmr4296aYfz39nP15aV6MR3v9YJx7vR79un/7s7wQp5nPvZTMejY1l0squwmByQ43WJoTnSZLRb/Pt+N69sXcBq93Y3m0TP+P6W03HNZwaC0kYppMFYF4sJT2CjtIT80L8c3mRFhJq09zVX0uNYhwoVxtyl5QWPxUCREJfDPOwNoxe12tZnld1mqbbbHeNqm3UPM/sGU3DdWuFBh1QnEFsx3RKZC6psgf+fA4Qr3wGNIREy+IUz4Gpn0TsII6UgA7E4Ygpg1EsVNx0amSx3y6rLll6kxldLOzd0omXrqo8xPyRPibNKYfkVLq9E+keACZrAlLfJcGZYDjjohcblKU8MisZqlBIxQ2QSBEWW92qzshqHYFEqq/iMI2gsp6v887o7PBvaQiz3DrojvKD92Fd59+KFgifkEgHJmtpgRgjXLiDjKKQDwu2rOOCi/DNNCTyfIl+8oTgA5LTT280kfwoOSIqKiCXnueGk6j6eUFlojAjuCR6eUMLgRfHv1GMY4Mqm0qaZWk+gJqUtkSE14XCmfoQcCr0aT+Kl0D1MoT+peuhRH2WubSf4kv5nA454rASdFHy5RfeBkNg8m0QCJ7vvvrwOEkp+sZhxy/Z2pF4QkjEn74ysI+lnzD/FH/bOAnfxnUh1lEeUad4EHBCZ3IlL4L9B6TAsQhLhHLFyXHwSwEuJT81lk0usXDBpknK4eMvipSkuoowjlPKg46aG45lMsfJ92vw35zehcml+PVu3bEP79bf93dDIVgrpJa+5L+dNZLTBYMqr/AcS13diaeiSE5nR7L8CvCdMjebHcfqmI7RvcqVuXpQZs+23bKBJ5U03pnfW456en4eGv8C</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AAD42D240E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AAD42D140E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AAD42D140E6E05305991F0A9338</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B29954A18ACE05307991F0A0887</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B29954A18ACE05307991F0A0887</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465450384</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B29954B18ACE05307991F0A0887</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00175_Verify_for_RETRY_ATTEMPT_LIMIT_for_3_API_Calls_in_15_minutes_and_new_Call_after_15_minutes_with_differentTokenTypes_same_EmailID_200_OK_P1" searchProperties="true" id="766dfdb9-ec4b-4c5a-9546-c20726f6a52c"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="ba7e25c6-0a30-4550-97a4-2cbcd6eb3be6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" id="4840696b-826b-488f-9811-05e4d796e0cb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_AlternateEmailGeneration_TestCase" id="904a487b-a058-4553-921c-42d440059cf3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("AlternateEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" id="d26462e8-2884-49a0-8077-e7b994ac42ed"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="datasource" name="Steps" id="305d9850-27c0-45c1-8dd9-6f0136442fc7"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">1</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ResetPassword</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">2</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:ValidateEmail</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">3</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:type:token:UnlockMe</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Loop</con:property><con:property>TokenType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken_loop" id="5f484a9f-d94b-4b1a-a9e2-a40b0f11fba6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ).toString());
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="datasourceloop" name="Looping3Times" id="0bd49e05-97e2-4782-b777-2b2bcac6b0a0"><con:settings/><con:config><dataSourceStep>Steps</dataSourceStep><targetStep>Call_UserValidationToken</targetStep></con:config></con:testStep><con:testStep type="delay" name="Delay_15Min" id="d3b6e0cf-6324-4a29-a754-01f3ef959a21"><con:settings/><con:config><delay>960000</delay></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="727c2abc-8e10-4982-a3d4-f7ac2bb67787"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",context.expand( '${Steps#TokenType}' ).toString());
log.info "TokenType is = "+context.expand( '${Steps#TokenType}' );

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=nVZtU+o6EP5+fkWnfrxT2pSX0o4wg4LKEdQRfP1yJ6ZLibRpbdKC/vqTFFsB0eu5M8ww2W52n9198iSHHEeh7fU4h1TQmGnDfkf/1wLfcp5I3XBsRIyGhZHRJk+O4WKnYc8ajoNmdV0bcp7BkHGBmejotoUahtU2kDtFLc9ueKheayP0qGu3kHIZWrrULF1bRSHjXpG2o2cp82LMKfcYjoB7gniT3njkSU8Pl5j07uEaZZEw7c6FSDzTJDUfCIQhqZE4Mg/NLZ9Dn3sTGjAsshTec/q8o7/vXS6XtWW9FqeBaVuWZVquKX18ToMDvfur3Az+kM3i9foYs5hRgkP6hhWoMYh57Gu9MIhTKubRF6GRiSwV2oAVMQhqsAPd/EhQoPthpC2QKccGn2NUBruGGaTACGg318OOfvCzCa73TlPM+CxOI76z/jtIwHII4wR8g5eVleh+HnFPu7qHQLwhI2HGaQ4XiiYJJsC1qxRmdDWiXJLP51oxfm3F5Y+WLAPyN2M5NDexSujmnu70aQBc/J+Zbc5rHeUWhxl08xURKBasbj+i1tsjv8dZz2Z31pJanQLCpvMaVDXu9/UuWStuvW9aTk3HDQZvpxcLq3F5exqd/mOeNa7G43NH9BYLOHt0yJF52T+lo4d2FL1wuAmGgUMHp7csMc0FPRqc37yI0WP+in+Jx/ngMl8+PQ8v7i5/p7n78JZwd5aOzu+er67H7DZGE1c0zEWAFuPfUXYybZ2cu9HNqNXOTgZhMIhyiNzRw+ytP/nVbCT3D2wanCao7zxcJednVuejps0ato2lJEyyp2cgolwqegz72omcFxbfy4uyUN+YFa5eojSKC2BC76pdSlq8TAoQ9T05zPXask4G7pFlN/v1owaymgOrWbearotOrN6xPTgqNWiNYgficcxmVOVSKrvmz/cASeRxYD6kRh5nZA5c/yZiHwusDdm1PBwx4zCNpYoj5/kpTVqtpA2sjZI4ZYi3qP0SSe2+iMUlu0x7MwHptna7W9p9DYQmFJTAK4ZzSXEuZDNecJ6JENVyXGOQySsgVSost7abJqdREoKCakaxn4VQS+ZJ0RqTr/9tAxNeWK8H0+LkfVnY7reyB9LHp8qBq1qOQM4R9lxCVlnIlwXb9mbBZfhe5lN1wGRDRUrJGsn2pw+eKIJUJJEVlZArz13DVlRzt6AqkZ9TUjG9uqKlwsvz3y3H8YJrL7Usz7NiAI7StlSGN6XEIXMCJJMC9TqNF8DMKoT5o/uhQr2TubJv48vEnE0EFhBJumjF8gePgwlw9TgYSqKvfvry2Eop+yZgJfbZjkP5hlCIv31mEI8oP2m+kn/LOPU/xrUn1kYeWad8EQjKArVSN8HrF6QgsQxLpXTF6WbwfQH2Jd82Vk2usAjJpqdMwNdfNKVJHR0TEmdMDPt6YdjUyQKneE3A+3D6FKbQ4vfLdcW/vFzvx6OJVKwI65Uv/W9ngxZ0IaCrO7zA0tFX8q0ok7NgQ5ffAX6S5l6v0ay3+6jdRoU0O2tpbjXdftXArUq6n8yfLRs93T0P3T8=</con:value></con:property><con:property><con:name>ACCOUNT_OID</con:name><con:value>00FE9AA4538E1881E05307991F0A659D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>00FE9AA4538D1881E05307991F0A659D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:00FE9AA4538D1881E05307991F0A659D</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>00FE9B025D3B4105E05305991F0AC2EB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:00FE9B025D3B4105E05305991F0AC2EB</con:value></con:property><con:property><con:name>UserName1</con:name><con:value>UVTCPrimaryEmail_firstuser20140819_1408465453157</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>00FE9B025D3C4105E05305991F0AC2EB</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties/><con:tearDownScript>if(context.expand( '${#Project#runTeardown}' )=='true')
	{
	log.info("Executing TearDown for Suite '" + testSuite.getName() + "'");
	
	for ( testCaseResult in runner.results )
	{
	   currentTestCaseName = testCaseResult.getTestCase().name;  
	   currentTestCase = testCaseResult.getTestCase(); 
	   log.info("Current TestCase : '"+ currentTestCaseName + "'");
	   log.info("Current TestCase Status : '" + testCaseResult.getStatus().toString() + "'");
	   
	   if ( testCaseResult.getStatus().toString() == 'FAILED' )
	   {
	      log.info("Re-executing failed TC");
	      def currentRunnerTC = currentTestCase.run(null, false);
	      log.info("Status on re-execution : '" + currentRunnerTC.status + "'");
	   }
	}
	log.info("Execution of TearDown for Suite '" + testSuite.getName() + "' Completed" );
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:testSuite name="UserValidationTokenCreate TestSuite" disabled="true" id="d18412af-131c-46ac-a9b5-757e00e538cb"><con:description>TestSuite generated for REST Service [UserValidationTokenCreate]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserValidationTokenCreate TestCase" searchProperties="true" id="a8c86fe8-d38c-4255-aacb-0aa7b6f12021"><con:description>TestCase generated for REST Resource [UserValidationTokenCreate] located at [/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}]</con:description><con:settings/><con:testStep type="restrequest" name="Request 1" id="ebe86813-44ef-470e-9406-fe7657ad46c7"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1" id="d518e1c7-22e6-457b-bbb7-348cd8659ece" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 2" id="f8f50e05-ec41-4f99-8161-93b5e25c8e1a"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 2" id="f7810e26-714c-4d74-add5-ef703a16a6e1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 3" id="999778e4-d7fa-4e6a-8184-00493388f03b"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 3" id="20541f67-eb37-4cab-b933-da6048380d80" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 4" id="3f13a1a7-528a-4b70-84e8-2ec5d62cd65f"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-4" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 4" id="689307f0-db5d-4de3-a1cd-9ec7079e2e19" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Request 1 5" id="9a521bad-3a08-4021-8306-85443c0468df"><con:settings/><con:config service="UserValidationTokenCreate" resourcePath="${#Project#HostName}/rest/${#Project#versionMajor}/${#Project#versionMinor}/VerificationToken/{TokenType}?subject={UserIdentifier}" methodName="UserValidationTokenCreate-5" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Request 1 5" id="8614e2c4-c855-40e4-bd6c-8f191c66c89f" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Test" disabled="true" id="168b6a7e-e22b-4344-858f-2a8f4639e725"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_UVTC_PrimaryEmail_Token_Type_ResetPassword_P1_SUCCESS" searchProperties="true" id="1a8ebef0-35f2-4249-9dea-e6d723e57c10"><con:settings/><con:testStep type="groovy" name="NodeId_Setup" id="97a96dea-fd09-4fae-b1af-e5490321b7e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeIdRTL"));
log.info tC.getPropertyValue("nodeid")</script></con:config></con:testStep><con:testStep type="groovy" name="PrimaryEmail_Set" id="572afc5e-6cd4-404b-80bb-25111fc1b5cf"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Used a combination of test_uvtc for PrimaryEmail Generation
def email = "aravind.racharla@compugain.com";

log.info "generated emailId: "+email;
tP.setPropertyValue("PrimaryEmail",email);</script></con:config></con:testStep><con:testStep type="groovy" name="Calling_PrimaryEmailGeneration_TestCase" disabled="true" id="5a8195c2-bc18-4ed6-8c02-fd79cbbde601"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("PrimaryEmailGeneration");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create_FirstUser" disabled="true" id="d394eda2-869e-4e97-a073-90548981101a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTS = tP.getTestSuiteByName("First_User_Create");

myTS.setPropertyValue("Country",tP.getPropertyValue("Country"));
myTS.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTS.setPropertyValue("tName",tC.getName());
myTS.setPropertyValue("sName",tS.getName());

log.info "Country = "+myTS.getPropertyValue("Country")+"---and---"+"nodeid = "+myTS.getPropertyValue("nodeid");

def runnerTS = myTS.run( null , false );

assert runnerTS.status == Status.FINISHED;

def myTC = tP.getTestSuiteByName("First_User_Create").getTestCaseByName("Account_Create_First_User_Create_STS_Policies");

tC.setPropertyValue("SAML_USER1",myTC.getPropertyValue("SAML_USER1"));
tC.setPropertyValue("ACCOUNT_OID",myTC.getPropertyValue("ACCOUNT_OID"))
tC.setPropertyValue("NODE_ACCOUNT_ID",myTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",myTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID1",myTC.getPropertyValue("NODE_USER_ID1"));
tC.setPropertyValue("NODE_USER_ID_FULL1",myTC.getPropertyValue("NODE_USER_ID_FULL1"));
tC.setPropertyValue("UserName1",myTC.getPropertyValue("UserName"));
tC.setPropertyValue("user_oid1",myTC.getPropertyValue("user_oid1"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call_UserValidationToken" id="a1663756-0d39-4b41-932f-a8c60dee4b82"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tP.setPropertyValue("TokenType",tP.getPropertyValue("TokenType_RP"));

def myTC = tP.getTestSuiteByName("CommonTestSteps").getTestCaseByName("UVTCPrimaryEmail_PostRequest");

myTC.setPropertyValue("tName",tC.name);
myTC.setPropertyValue("sName",tS.name);

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>572afc5e-6cd4-404b-80bb-25111fc1b5cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://qa.p.uvvu.com:7001/${#TestCase#endPoint}</con:endpoint></con:endpointStrategy><con:requirements/><con:properties><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>YOUTH_DOB_XML</con:name><con:value>yyyy-MM-dd</con:value></con:property><con:property><con:name>YOUTH_DOB</con:name><con:value>28-Jul-99</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>User_OID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userType</con:name><con:value>CHILD</con:value></con:property><con:property><con:name>Username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urntokenType_saml</con:name><con:value>urn:dece:type:tokentype:saml2</con:value></con:property><con:property><con:name>urntokenType_deviceauthtoken</con:name><con:value>urn:dece:type:tokentype:DeviceAuthToken</con:value></con:property><con:property><con:name>urnNode</con:name><con:value>urn:dece:org:org:dece:</con:value></con:property><con:property><con:name>urnError</con:name><con:value>urn:dece:errorid:org:dece:</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TokenType_VE</con:name><con:value>urn:dece:type:token:ValidateEmail</con:value></con:property><con:property><con:name>TokenType_UM</con:name><con:value>urn:dece:type:token:UnlockMe</con:value></con:property><con:property><con:name>TokenType_RP</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>TokenType</con:name><con:value>urn:dece:type:token:ResetPassword</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value>+1.703598741</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetPort_TOU</con:name><con:value>7002</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>SurName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value>VA</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>../../GlobalScripts</con:value></con:property><con:property><con:name>SAML2</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwKYqVpGoQUFTcwI2bt3AYFmWTRdBf/w4aPUlOcr6835VOT0/30ws9zzwnhu/RXZAkKE7dMKjKwkvtH8SSu86ubTa4DkSNZqvTanA7kmswLdTptFm2BRFXq8pJkiE5SFIjSF9qNEkxDbLdoFmN5LotskuRTxTd0WvVFYoTbBqrPJG1auF7QdK9un2pZXHQDY3ETbqB4aOkm8KuCpRxF2t2jTum2uvzDeXVYfzqpGnUJQj4ZCKIPA8+wdAnnokPOs9m0lVdOzDSLEZvPs3kpfZ2Ns/zp5x5CmOboEmSJEiOwDpm4tq/aq+V+2FkyoEV3tY9IwgDFxqeezFKUApKndCsAs8OYzd1/G9MUwRFlqYbqIANSDWDXzXit4Mruh9a+gAyToxG4hjU3dgCWShGAUTV5UJ+qf36WQVvZ7XYCBIrjP3k0/q/QULBCXlhhMxGco/sju7nFr9I1+szgl05gF6WuCc0KdskMiBKqrMYWW4xdhPcfGZSvZa/WiT3DkPwv5TkmXiPE8MmvsiM4NooSf+fer2v1c3KyvAy9MoZ7PBiMoRYP5BC33Y7JhGKkj4dLZSXK4T3yjdQj1K/rT836qOv3g4Jq9O6ZRuIopoxtJBKLHb5hLN344MwAgKkDlMjGJvOQmR2RV9vtk6AXuWuUW9FM5bRjxqfGrO1bHBCKsUVx9+01MEyXBfMead47daU5yext6D2LrM6G6Z3aW74DWXZXphLI3CuA53pxQeHXu/HZ28+pRxvns+WoXJ2PYxMG0vrjZtlWYR0werozZffMb2PoYxrhM7XIMv/mxbJCUZqPBa9clJY+PNM0asiy7260OsB1LNBLvPAlvnxBUx4+3B0Dm6fy0kezJcSEMBZWYBcsLfCaj4fibm5Wnn6SpYkXlk08wHYChW8IYjFStA3Q9JY69GWlkhd5Xlzswh3zDAyB4d84MCJoin5RJPPyl4sJppIrq8yu8Dri7JXqKm2ZCrrPc8pCzEX8qtHQcydib5eRNsll8OLOFdAsw+opdhzlIHmryjILBy4F8cKOFzlvKP0ViulEDUwq/D2ZIVj03qSHkHfjHa+57wzPsDGNbO/Ou/6XqZfxL3SE/s99dhX5R0jzMUhWGyXu/XqYKylUwUOJmB39+i2XGMT5rbeyYX5djgKddk5wQmYizw/BzhdJFDk/hCEfR4oTeAWl96eZ8OeKeXEkE4qdc7rs5uze9wkRp/0DKrTobbjNTs7soIY1PVRtts7irORpvWRap6WXMpdtsmpfmINl4JFZM034iAdFdZgrlZ2M6HYwEHdtIeEd+GkWGkPQXw5O55iL9I1O03OO9ey1vxm2vTalqcwi8jyrOic1LVwfohJlkcMTWzPp1FaAbbCA9DfL/f8XOE7ZVJNOZ9vFd4Akphm4LKn0xG9Og4HJw9uGRAWo/V0f3grjCnkIk/kcxG3lVjpCMAsizBQl6K0B0vetmPeFiV+DgUw38qjfIvztRxg5c95lK55tEUeiIwOWG5QYZYkl05TtdkE54BfBhLnKMdibbI+2T4icaxOomauJBMr0NfhQfHdeBln6nI0moyLnZb1D3s8qyxSHZ0YvSKeDhFwJyPNOQihYMyi7TaN6gGMYSpHviIXl6me7DvuzieH9RbFz0gBtumlv8uXfUPUR7GtUqPBIpgxba6SZNZ54Nf3nXxd11Q2apu9wBLOZ0KPV2QIQolbtI5mQdMHZ5mP2dwagsPOoCeFx/FnThzpGswX89Fa9eutSus0HvvkRSOak2iaq/28Kc7ndcbktYGWRLG7zTp2EU8Dk94aKXvSyRXrRt6Bo7OD1oyYle3jYs1OZtRWZpV5cwN1325HcEgsiBMQ29ZY7p93F+MS+VN4G6Cfp8NDeJsfxPvJ8mH03EmHirsVwfS+LC8gWahK+FYw0r8TmFLimg3rqtqNShaUpChIa6/lqZK8dDNMcVyzi6+M21qk2Q4pMjTHdnotlmRFsklSEgnINseRNN27s5wbik8Qe2FguaWvksfdbqm/A4R+N0GBieLGKcygg5LaXyyW+arKwQJfv2GQIC3EPLHTFHoUaDabUpsDFAO4liS12HYbgCbLCz2mVp2E6TSYxsBKUfyBI1L0B464QNCNXFQSyfI2TfB1mqQ4JUfjlKUe9XQyngKUYaoZl2yvSzc7LSJx/chDJWDCD83MQ0+RE10TRCS3X7phwOQqXYjaP7Lau97034b4ee+eDaxjuqVCUsbDI1xR9AXhJe/BfB90633Qd/MgM93yQsepTWMX3pB83PrdMWWrPNoFR3WH/ND8LPhglfgc0MOReXLho+cfzwHMJjHfeL2X5Gg8HZ+y0ym7FqFdcqkYmycogmwTKoIZJkRnLTyggHiYIH7ERR+oP3l+yD/iy1InUFP8Pfu4ZarX5Q8eIipKyoeIjFu++Okr54NLnLcUFelXsp6H3ysl4r8+aWAXlnpYPMM/eRibv8v1ha13fnCc5QBzA7tclczz/E1TwBCbdfEQC+P3xr8y8JXzj8JHkh9YUtxNuyxF3+9Uy+n0UjMgDLMglYXaVfB+Yl5xpucIdX8r/WHmyv3eyHyRfEvmN8pYxbPLN2oPXfd/Kzfca7tAhE8l7hXLS63A71LsPLDfTeg3gF8O6ZbE/m1If4zk9Q/xn5J3Of38Pbz+Cw==</con:value></con:property><con:property><con:name>SAML1</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwqCBWkqphUVFxw5Wbt3AYEGWTAUF//Tto9CQ5yfnyflc6PT3dTy/0PPOMTd9j2wBjFCduGJRV+aXyD2c3OaZlbWst2GjUGk3bqgl1vlFrMS1oNhFqtLhtpaxinCI1wIkZJC8VlmbqNZqvsdycoduM0G7Wn7hmw6iUlyjGxDRReaIr5dz3Aty+un2ppHHQDk3s4nZg+gi3E9jWgTZsE822ecdUeX2+obw6jF93SRK1KQo+WQgiz4NPMPSpZ+qDzrOF27rrBGaSxujNp4VfKm9nsyx7yupPYexQLE3TFC1QRMfCrvOr8lq6H0aWGtjhbS2ZQRi40PTci1mA0lCyC60y8JwwdpOd/41phmLownQN5bAGmUbwq0L9dnBF90NLH0DG2Kzhncncjc2QjWIUQFRezNSXyq+fVfB2dh6bAbbD2Mef1v8NEgpOyAsjZNXwPbI7up9b/CJdr88IttUAeil2T2hUtElkQoTLkxjZbj50MWk+C5ev5S/n+N5hCP6XkjxT73ES2NQXmZFdB+Hk/6nX+1rdrCxNL0Wv8yrPxynfyS7VzoHVu8dcy6U5xeMReLlCeK98A/Uo9dv6c6M++urtkBnTs1BtZkYQ7OvKLGUWikdNxsal1Tx05LS5x+N063p1fEw5WuOwhpWR0jzWca8pBUzmHB2QpvvBuTuaqqWhLrsHLhlBdwH2MBpI7Bo3uvGazT18OOFgXN1EzfRCdRlrPRYPF2AgaiK7k56uVgOOderV1uXgIdh0ZFzqTlLeUcYabycGYIXcndIvv2N6H0MR1wCdr0EW/9dNWpDNxHwspGJS2OTzTNCrpqpSVZYkgCQHZKoIHFUcXsBIdA7H3cHtChktgumiA2Rw1mYgk52NvJxOB0pmLZeesVQ7HVGbNbIe2MglsiEr+VI21n3aXBnRhu3Qhi6K1noWbuv9yOodst4OjrS5lo3m6lnbK/lortCrq8zJyfqi7TVmPF/US6u9KGgzJZOzq0dZyXYjYzWLNgshgxdlqoFGF5D6SDutN/eXDKzPdnCvDDVwuMrFnSYtl1quzMGkJDqjJYltLnWMCPpWtPW93TvjPWJ8bnWX523XS42LstckpSvpx66ubuvyVOmD2WaxXS0P5qpzKsHeCGzvHt2ma67DzDFamTzd9Aehoe5OcASmiihOAUkXDTS12wdhVwRaA7j5RdqLXChZnYzqs7hUFbwutz67xzU2u7RnMq0WsxmuuMmRk5WgagzS7X6n7dadcXWgW6eFkAiXDT5VT5zpMjCP7Ola6SWD3O5N9dJ2Iudr2KtaTp/yLkIn1vg+iC/nnac5s2TFjfF569r2SlyPGx5ve1p9FtmeHZ1xdR5ODzHNiajOUpvzaZCUgKOJAHT3i7041cRWkVRLzaYbTTRBR0lScNmzyYBdHvu9kwc3dRDmg9V4f3grjCVnikhlU4W0lVJqycAqitDTF0pnDxai48Sio3TEKZTBdKMOsg3J16JHlD/nsXPNo6OIQKkbgBN6pfqCFpJxojca4ByIi6Aj7LRjvrI4n+aPSBnqo6iRaXhkB8YqPGi+Gy/iVF8MBqNhvp2n3cOezCqb1genulFSTocIuKPBfHeQQ9mcRJtNElUDGMNEjXxNzS9jA+9b7tan+9UmI05oGfLswt9mi66pGIPY0ZlBbxZM6rxQwql97vnVfStbVec6F/GWFNjy+UwZ8ZIOQdgRZs2jlbPsYbfIhlxm98Fha7Kj3BPEs6AMjDnMZtPBSverzVLzNBz69GVONUbRONO7WUOZTqt1S5z35jiK3U3acvJ4HFjsxky4k0EvOTfyDgKbHuaNqL50fFKsycmKeG1SmjbW0PAdPoJ9akadgMLbQ7V73l7MS+SP4W2Afp4OD+FtflDvJ8uH0XMnHTrpVgST+7K4gFS53CG3gpn8ncAUEteq2VfVdlSwIJygIKm8FqcK8tJOCcVxrTa5Mm5rheVafFPmBZkW6hJHK3SDZjo0oJuCwLF8/c5ybig+QZTCwHYLXwWPu91SfwcI/TZGgYXi2ilM4Q7hyl8sFvkqq8GMXL9hgNE8LHgiLck8kDkZEG4h0S1eYhhREQAjdGSpITOV8ihMxsE4BnaC4o8csf6BI84QdCMXFUSyuE0xuU5xQlJyNE9p4jFPJ/MpQCmhmnHB9tpso9WksOtHHioAU35opR56inbRNUEUvv2yNRPiq3SmzP9Rdel6038b4ue9ezaIjuUWCriIR0SkougLwtu4B/N90Nz7oO/mQWq5xYVOUpvELrwh+bj1u2OKVnm0C4nqDvmh+VnwwSr1OaCHI+vkwkfPP54DhE0SvvF6L8nRfDo+padTei0CX3CpmJinGIrmKR3BlBCi8zw8oIB6mKB+xEUfqD95fsg/4kuTXaAn5Hv2ScuUr8sfPER0hIuHiEpaPv/pK+eDS5K3BOXJVzLJI++VAvFfnzSwDQs9Ip6QnyyMrd/l+sLWOz8kzmKAuYFTrArmef6mKWBIzLpkiIXxe+NfGfjK+UfhI8kPLAnppm2aoO93ysV0eqmYEIZpkKhy5Sp4PzGvOJNzhNq/lf4wc+V+b2Q+x9+S+bU21Mns8s3KQ9f938o199ouEJFT2L1ieank5F1KnAfOuwn9BvDLIS116L8N6Y+RvP4h/lPyLqefv4fXfwE=</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbU+o6FP4rTPfjntIr0naEGRQvHFEU1KO+nAnpAqJtWpKU26/fSYFKUTyc89TJ6sq3vnXJl5xyFEd20OIcmCAJrSziiPIgtza0jNEgQZzwgKIYeCBwMGjddgO7agZou0WrdNoN7R8ENb+Ow5GOTOzpbt21dG/k+TryLd93Tpwa9i3pynkGHcoFoqKh2aZV080T3TIfTSew64FVq3p1/02rPAPjElu6VE1tQ2rBG9pEiDQwjPl8Xp071YSNDds0LePltjvAE4iR1jxdZ5QHYs2NP66GgCGKcBUnsXFqlHxOQx4MyJgikTHYxAoPxTIN0zekT8jJ+JdW7IWwQ0dJvjxHNKEEo4iskKrPLYhJElZa0ThhREzig0lYpgLWYYF1bLn0l2aUqR0JVGLIONL5BFkbrD6MgAHFUHnqdxrar+O6lm99ZIjyUcJiXl7+Nz5AZxAlKYQ636a1oXY84DeVap4CDjoURxknM7hTw5oiDHzTTcDHQ1XuGYzIoku4HNAFV+yMXXp7y3U12mQMXPyfBu00Zw3yjKIMmm20JL2T+8UD8rFjTER38TS8vn7i495tIyew65wbitaul3tDWQzRekd2Vvt9O+ktfvuobk2d1dP0biAEXQ7QqzN9ueqgh+tp/f7e7vQ898nOjNa5NaftMUt7D6zeHzvvF/2bC+f9Kv176D2+TG+c6+uLJZvbz29wY+A3l6Q3q8xNQqP15t2Qrus5Z97HXY069dez4SV4o+Ftj7LeFX2N4Wq0quNB7bn+LlAnWlpXJ5G48nuLYffy+q+a2SjS2eFftm3P/CAbvgMW26Uag067cim7hMTPYqYsJNRHuWuQKvHhAqjQmmqX0o4gk3JHwkD2cL22PNt2ztz6ueOet33bvTBrjtP2fevSbHn1S28rMmsWexTPEzoiKpaS3PXY/EwQxwEHGgLTZ0kmlY5rPyC2kUCVDu3LQ5BQDo+JlGcrW7Low/G5l6xcK40n9oqMsA3uSqvcJaJHe6w1EsDKonxSEuU+YJISUMqtBpvLyeZCFmOKZpmIrOoMVSlkUtuZktnAdr2awUmcRqCoGnESZhFU00mal8bg66+tI8xza//iMT9uBxPb/7etgfQJiXLgKpczkH2Eb24Xc5vI4YT93YS38K0sJOpkyYIKRvCaSfnX55yoASmGRGa0pVx47htKqMZ+QkWgcEZwMenFfS1lXB785rYdU2RVp9VsNsvyDriuYzAJb6gUDdM2BoAzKU3Lx+QDqFGgGEfdAwXxveCFvUwxExM6EEhALCemki+PuPgHwNXF35Gzvjj2VVEKKUsnYCG+s51H8tGiGP/4rsEBVn7SfC8/84SFnx37BmsnjsxT3vuC0LFaqTtgeWAucCJhiVSvhO2CfwfwXfCysShywUXIgRpmAg7/qShZamgI4ySjotPWcsOuVOY8xTKF4NPpC0yuxsXzjPz7+0wn+QhgkI86TnJ8dcsG6gjQ8Y7cboIeUNyznxS3zK75xfzVslOn/Rlv/gE=</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>ResourceStatus</con:name><con:value/></con:property><con:property><con:name>Request_XML_Buffer</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}"> 	<Name> 		<GivenName>${#TestCase#UserName}</GivenName> 		<SurName>${#TestCase#UserName}</SurName> 	</Name> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#Project#PrimaryEmail}</Value> 		</PrimaryEmail> 		<AlternateEmail> 			<Value>${#Project#AlternateEmail}</Value> 		</AlternateEmail> 		<Address> 			<PostalAddress>${#Project#PostalAddress}</PostalAddress> 			<PostalCode>${#Project#PostalCode}</PostalCode> 			<Locality>${#Project#Locality}</Locality> 			<StateOrProvince>${#Project#StateOrProvince}</StateOrProvince> 			<Country>${#Project#Country}</Country> 		</Address> 		<TelephoneNumber> 			<Value>${#Project#TelephoneNumber}</Value> 		</TelephoneNumber> 		<MobileTelephoneNumber> 			<Value>${#Project#MobileTelephoneNumber}</Value> 		</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#Project#Language1}</Language> 	</Languages> 	<!-- <DateOfBirth> depricated </DateOfBirth> --> 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password>${#Project#password}</Password> 	</Credentials>]]></con:value></con:property><con:property><con:name>Request_XML</con:name><con:value><![CDATA[<User UserClass="urn:dece:role:user:class:${#TestCase#Privilege}" xmlns="${#Project#coordinatorSchema}"> 	<Name> 		<GivenName>${#TestCase#UserName}</GivenName> 		<SurName>${#TestCase#UserName}</SurName> 	</Name> 	<ContactInfo> 		<PrimaryEmail> 			<Value>${#Project#PrimaryEmail}</Value> 		</PrimaryEmail> 		<AlternateEmail> 			<Value>${#Project#AlternateEmail}</Value> 		</AlternateEmail> 		<Address> 			<PostalAddress>${#Project#PostalAddress}</PostalAddress> 			<PostalCode>${#Project#PostalCode}</PostalCode> 			<Locality>${#Project#Locality}</Locality> 			<StateOrProvince>${#Project#StateOrProvince}</StateOrProvince> 			<Country>${#Project#Country}</Country> 		</Address> 		<TelephoneNumber> 			<Value>${#Project#TelephoneNumber}</Value> 		</TelephoneNumber> 		<MobileTelephoneNumber> 			<Value>${#Project#MobileTelephoneNumber}</Value> 		</MobileTelephoneNumber> 	</ContactInfo> 	<Languages> 		<Language>${#Project#Language1}</Language> 	</Languages> 	<!-- <DateOfBirth> depricated </DateOfBirth> --> 	<Credentials> 		<Username>${#TestCase#UserName}</Username> 		<Password>${#Project#password}</Password> 	</Credentials>]]></con:value></con:property><con:property><con:name>RandomPwdFlag</con:name><con:value/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionID2</con:name><con:value>1650</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value>1200</con:value></con:property><con:property><con:name>Query_HostNameForProxy</con:name><con:value>https://uvqa-proxycache-elb-2009492071.us-west-2.elb.amazonaws.com:7001</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>projectPath</con:name><con:value>C:\Users\rshrivastava\Desktop</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>basic</con:value></con:property><con:property><con:name>PrimaryEmail_Prefix</con:name><con:value>test_uvtc_pe_</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>test_uvtc_pe_20150610_09364@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalCode</con:name><con:value>20166</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value>46000 Center Oak Plaza</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E528808A600535F3E0401F0A07996230</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E151F333D66812AFE0401F0A07996C63</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E528648B66BDACF7E0401F0A05994DAF</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdNotProvisioned</con:name><con:value>notprovisioned</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeDeviceDefault</con:name><con:value>0200</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>E1AF78725D9E6410E0401F0A07997B12</con:value></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value>+1.703598742</con:value></con:property><con:property><con:name>minUserName</con:name><con:value>6</con:value></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value>true</con:value></con:property><con:property><con:name>maxUserName</con:name><con:value>64</con:value></con:property><con:property><con:name>Locality</con:name><con:value>Sterling</con:value></con:property><con:property><con:name>LBS_Provision_HostName</con:name><con:value>https://UvCoordActiveActiveQALP3-1060918058.us-west-2.elb.amazonaws.com:7003</con:value></con:property><con:property><con:name>Language2</con:name><con:value>de</con:value></con:property><con:property><con:name>Language1</con:name><con:value>en</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>user20130716_022720</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>eTag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>Encoded_PolicyClass</con:name><con:value>urn:dece:type:policy:</con:value></con:property><con:property><con:name>Encoded_NodeUser_Id</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>Encoded_NodeAcc_Id</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>encodedUserID</con:name><con:value/></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>Email</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value>http://www.mamut.com/media/company/press/resources/eilerthanoa/EilertHanoa_4_800x1200.jpg</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa1.d.uvvu.com</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DateOfBirthXML</con:name><con:value>1999-07-19</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>Coordinator_Schema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>CHILD_DOB_XML</con:name><con:value>2002-08-15</con:value></con:property><con:property><con:name>CHILD_DOB</con:name><con:value>27-Jul-02</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property><con:property><con:name>assertionUID</con:name><con:value>E19E3D2D6A904D06E0401F0A05994A7A</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>AlternateEmail_Prefix</con:name><con:value>test_uvtc_ae_</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_uvtc_ae_20150610_09364@uvvutesting.biz</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-08-17</con:value></con:property><con:property><con:name>ADULT_DOB</con:name><con:value>29-Jul-94</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>FC685C5797924FBBE0401F0A05997F09</con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property></con:properties><con:afterLoadScript/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
	byte [] tempByteArrRequest = testStepResult.getRawRequestData();
	String tempRequest = new String(tempByteArrRequest);

	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
	log.info(tempRequest);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

	byte [] tempByteArrResponse = testStepResult.getRawResponseData();
	String tempResponse = new String(tempByteArrResponse);


	log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
	log.info(tempResponse);
	log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}</con:script></con:eventHandlers><con:eventHandlers type="TestSuiteRunListener.beforeTestCase" name="TestSuiteRunListener.beforeTestCase"><con:script>log.info("################################################################################");</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>