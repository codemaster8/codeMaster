<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="DiscreteMediaRightDelete" resourceRoot="${projectDir}" soapui-version="4.6.1" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="D:\Execution_Report_R2_Builds\Build_1_0_1_3_F_NewTCs\DMRDelete"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">/home/QAUV/Desktop/R4Reports/DMRDelete</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="H:\DECE_API_PROJECT_UPDATED\DMR_PROJECT\1_06\DELETEDMRRTLP2"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightCreate" type="rest" basePath="" id="7c020d4b-7b3f-4840-b494-b4734a8acb16" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" id="efadb44e-00da-47b2-9e5a-68161ad3f84f"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightCreatePost" method="POST" id="882b8c1d-14f5-451a-8942-8bd51c1e029e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202 200 201</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401 500 404 403 409</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503 401 500 404 400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405 404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" id="6b34076d-9c6b-4a58-a4a8-c9c47f03ad60"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="DiscreteMediaRightCreatePut" method="PUT" id="d1680add-d8c0-4bbf-aeea-d7dbbfad24d6"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202 200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightCreatePut" mediaType="application/xml" postQueryString="false" accept="application/xml" id="da483ff8-82c5-407d-b9d2-35c258187d6e"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="DiscreteMediaRightCreateGet" method="GET" id="cbac7b44-c7b2-4447-8382-9b538d48353c"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 401</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503 500</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightCreateGet" mediaType="application/xml" postQueryString="false" accept="application/xml" id="6238e0d2-0893-41d8-8ef7-cc75d4b2056d"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="DiscreteMediaRightCreateDelete" method="DELETE" id="95ec7408-3e99-4abe-8649-da24c72caa5a"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightCreateDelete" mediaType="application/xml" postQueryString="false" accept="application/xml" id="116564fa-5e1f-4a75-a626-5a5fd507c1da"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="DiscreteMediaRightCreateOptions" method="OPTIONS" id="dba1613b-d6c0-4218-9968-007966453436"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightCreateOptions" mediaType="application/xml" postQueryString="false" accept="application/xml" id="61aee6b3-4f8d-40c7-8824-baf440a02281"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="DiscreteMediaRightCreateHead" method="HEAD" id="76709328-5375-4341-b735-24cfa5689aac"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>202</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightCreateHead" mediaType="application/xml" postQueryString="false" accept="application/xml" id="f2b63402-89d4-47fe-ad22-f8e5406242be"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RightsTokenCreate" type="rest" id="af43cb30-10a2-447a-8da2-f17205160e3e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="RightsTokenCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" id="63a8a284-2cfb-456c-bf70-4778c95370cc"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter></con:parameters><con:method name="RightsTokenCreatePost" method="POST" id="c93d94a0-88ed-419f-b133-fc93cae6668b"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>500 404 401 502 503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>500 400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>401 404 400 500 403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" id="17fde9e3-6523-481b-b941-5673093fd20f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:RightsTokenData xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" xmlns:dece="http://www.decellc.org/schema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:ALID>${#Project#ALID}</dece:ALID>
   <dece:CID>${#Project#CID}</dece:CID>
   <dece:SoldAs>
      <dece:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</dece:DisplayName>
      <dece:CID>${#Project#SoldAsCID}</dece:CID>
      <dece:BundleID>${#Project#SoldAsBundleId}</dece:BundleID>
   </dece:SoldAs>
   <dece:RightsProfiles>
      <dece:PurchaseProfile Profile="${#Project#PurchasedMediaProfile}">
         <dece:BurnsLeft>${#Project#PurchaseProfileBurnsLeft}</dece:BurnsLeft>
         <dece:CanDownload>${#Project#PurchaseProfileCanDownLoad}</dece:CanDownload>
         <dece:CanStream>${#Project#PurchaseProfileCanStream}</dece:CanStream>
      </dece:PurchaseProfile>
   </dece:RightsProfiles>
   <dece:LicenseAcqLoc DRMType="${#Project#LicenseAcqLoc1DRMType}">
      <dece:Location>${#Project#LicenseAcqLoc1Location}</dece:Location>
      <dece:Preference>${#Project#LicenseAcqLoc1Preference}</dece:Preference>
   </dece:LicenseAcqLoc>
   <dece:LicenseAcqLoc DRMType="${#Project#LicenseAcqLoc1DRMType}">
      <dece:Location>${#Project#LicenseAcqLoc2Location}</dece:Location>
      <dece:Preference>${#Project#LicenseAcqLoc2Preference}</dece:Preference>
   </dece:LicenseAcqLoc>
   <dece:LicenseAcqLoc DRMType="${#Project#LicenseAcqLoc1DRMType}">
      <dece:Location>${#Project#LicenseAcqLoc3Location}</dece:Location>
      <dece:Preference>${#Project#LicenseAcqLoc3Preference}</dece:Preference>
   </dece:LicenseAcqLoc>
   <dece:FulfillmentWebLoc xsi:type="dece:ResourceLocation-type">
      <dece:Location>${#Project#FulfillmentWebLoc1Location}</dece:Location>
      <dece:Preference>${#Project#FulfillmentWebLoc1Preference}</dece:Preference>
   </dece:FulfillmentWebLoc>
   <dece:FulfillmentManifestLoc xsi:type="dece:ResourceLocation-type">
      <dece:Location>${#Project#FulfillmentManifestLoc1Location}</dece:Location>
      <dece:Preference>${#Project#FulfillmentManifestLoc1Preference}</dece:Preference>
   </dece:FulfillmentManifestLoc>
   <dece:PurchaseInfo>
      <dece:RetailerID>${#Project#PurchaseInfoRetailerID}</dece:RetailerID>
      <dece:RetailerTransaction>${#Project#RetailerTransactionId}</dece:RetailerTransaction>
      <dece:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</dece:PurchaseAccount>
      <dece:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</dece:PurchaseUser>
      <dece:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</dece:PurchaseTime>
   </dece:PurchaseInfo>
   <dece:ViewControl>
      <dece:AllowedUser/>
   </dece:ViewControl>
</dece:RightsTokenData>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:inferredSchema><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xml-fragment><inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>https://qa.p.dece.neustar.com</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>data</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:qa="https://qa.p.dece.neustar.com">qa:_data</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>html</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:qa="https://qa.p.dece.neustar.com">qa:_html</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>html_body</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>h1</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>p</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>hr</inf:name><inf:type xsi:type="inf:EmptyType"><inf:completed>true</inf:completed></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>address</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="qa:h1" xmlns:qa="https://qa.p.dece.neustar.com"><inf:other>qa:p</inf:other><inf:other>qa:hr</inf:other><inf:other>qa:address</inf:other></inf:comesBefore><inf:comesBefore qname="qa:hr" xmlns:qa="https://qa.p.dece.neustar.com"><inf:other>qa:address</inf:other></inf:comesBefore><inf:comesBefore qname="qa:address" xmlns:qa="https://qa.p.dece.neustar.com"/><inf:comesBefore qname="qa:p" xmlns:qa="https://qa.p.dece.neustar.com"><inf:other>qa:hr</inf:other><inf:other>qa:address</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_html</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>head</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:qa="https://qa.p.dece.neustar.com">qa:html_head</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>body</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:qa="https://qa.p.dece.neustar.com">qa:html_body</inf:reference></inf:type></inf:particle><inf:comesBefore qname="qa:head" xmlns:qa="https://qa.p.dece.neustar.com"><inf:other>qa:body</inf:other></inf:comesBefore><inf:comesBefore qname="qa:body" xmlns:qa="https://qa.p.dece.neustar.com"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>html_head</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>meta</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:qa="https://qa.p.dece.neustar.com">qa:head_meta</inf:reference></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>title</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="qa:meta" xmlns:qa="https://qa.p.dece.neustar.com"><inf:other>qa:title</inf:other></inf:comesBefore><inf:comesBefore qname="qa:title" xmlns:qa="https://qa.p.dece.neustar.com"/></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>head_meta</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>content</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>name</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:EmptyContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>true</inf:mixed><inf:name>_data</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentType</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>contentLength</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>positiveInteger</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SimpleContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:typeName>string</inf:typeName></inf:content></inf:complexType></inf:schema><inf:schema xmlns:inf="http://www.eviware.com/soapui/InferredSchema"><inf:namespace>http://www.decellc.org/schema</inf:namespace><inf:particle xsi:type="inf:ElementParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>Errors</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:sch="http://www.decellc.org/schema">sch:_Errors</inf:reference></inf:type></inf:particle><inf:prefix key="http://www.w3.org/2001/XMLSchema" value="xs"/><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>Errors_Error</inf:name><inf:attribute xsi:type="inf:AttributeParticle" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:name>ErrorID</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:attribute><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>Reason</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>OriginalRequest</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:particle xsi:type="inf:ElementParticle"><inf:name>ErrorLink</inf:name><inf:type xsi:type="inf:SimpleType"><inf:completed>false</inf:completed><inf:typeName>string</inf:typeName></inf:type></inf:particle><inf:comesBefore qname="sch:ErrorLink" xmlns:sch="http://www.decellc.org/schema"/><inf:comesBefore qname="sch:OriginalRequest" xmlns:sch="http://www.decellc.org/schema"><inf:other>sch:ErrorLink</inf:other></inf:comesBefore><inf:comesBefore qname="sch:Reason" xmlns:sch="http://www.decellc.org/schema"><inf:other>sch:OriginalRequest</inf:other><inf:other>sch:ErrorLink</inf:other></inf:comesBefore></inf:content></inf:complexType><inf:complexType><inf:completed>true</inf:completed><inf:mixed>false</inf:mixed><inf:name>_Errors</inf:name><inf:content xsi:type="inf:SequenceContent" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><inf:completed>true</inf:completed><inf:particle xsi:type="inf:ElementParticle"><inf:name>Error</inf:name><inf:type xsi:type="inf:TypeReference"><inf:reference xmlns:sch="http://www.decellc.org/schema">sch:Errors_Error</inf:reference></inf:type></inf:particle><inf:comesBefore qname="sch:Error" xmlns:sch="http://www.decellc.org/schema"/></inf:content></inf:complexType></inf:schema></xml-fragment>]]></con:inferredSchema></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightLeaseCreate" type="rest" id="4a918e65-974d-4a51-b603-3e2b58450765" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightLeaseCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaProfile}/Lease" id="98989eb3-681d-4d99-8e84-110abea24007"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter><con:parameter><con:name>ContentProfile</con:name><con:value>${#TestCase#ContentProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#ContentProfile}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaProfile</con:name><con:value>${#TestCase#DiscreteMediaProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaProfile}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenID</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightLeaseCreatePost" method="POST" id="94cf50dc-94ff-4aa9-81b0-d81603881136"><con:settings/><con:parameters><con:parameter><con:name>ContentProfile</con:name><con:value>${#TestCase#ContentProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#ContentProfile}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaProfile</con:name><con:value>${#TestCase#DiscreteMediaProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaProfile}</con:default></con:parameter><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404 409</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:DiscreteMediaToken</con:element></con:representation><con:request name="DiscreteMediaRightLeaseCreatePost" mediaType="application/xml" postQueryString="false" id="2f3447c1-66e1-48f7-8aab-87d7c6b599d3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="DiscreteMediaTokenID" value="${#TestCase#DiscreteMediaTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightLeaseConsume" type="rest" id="e5b89a4f-b817-485a-b692-41c4c0230597" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightLeaseConsume" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}/Consume" id="76af7249-d2f9-4807-988a-98c9345f457b"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightLeaseConsumePost" method="POST" id="72156823-31ea-495d-a8e9-f8daf3f06807"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="DiscreteMediaRightLeaseConsumePost" mediaType="application/xml" postQueryString="false" id="d3e029a7-6ed7-424f-bec5-559aea9f41f2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="NodeAccountId" value="${#Project#NodeAccountId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightLeaseRelease" type="rest" id="8bd25426-ffce-40f6-ab66-3628896dd824" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightLeaseRelease" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}/Lease/Release" id="9bebf7cb-c493-4cad-8c77-9effcfe45d7b"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="DiscreteMediaRightLeaseReleasePost" method="POST" id="5cf15b9b-fc3e-4331-956c-9b00e3596336"><con:settings/><con:parameters><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/201$major/$minor/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightLeaseReleasePost" mediaType="application/xml" postQueryString="false" id="2dfe33d3-71a7-48b5-9eeb-5e3e7a0ef856"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NodeAccountId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightDelete" type="rest" id="f3d4b435-e523-4a7d-ba44-a5d6d0a931d3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" id="5839841a-90f9-4d85-b047-1dbbea5060a8"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightDeleteDelete" method="DELETE" id="863b6d8c-48c7-4dd6-baa4-be89f9b15d89"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightDeleteDelete" mediaType="application/xml" id="84e7e3ff-feb6-425e-9233-3f8abbe59132"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightDeleteGet" method="GET" id="47cd6a5c-ade6-4db5-b3c0-ef98e91dea8f"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/201$major/$minor/coordinator">coor:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:DiscreteMediaToken</con:element></con:representation><con:request name="DiscreteMediaRightDeleteGet" mediaType="application/xml" id="e5b98f2a-0678-436a-ac8e-4d4b71fe34f4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightDeletePost" method="POST" id="54d6faa4-3927-4176-8d63-335ed4183bab"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightDeletePost" mediaType="application/xml" postQueryString="false" id="3854033a-a4f4-4962-8836-e95717cbe23b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightDeletePut" method="OPTIONS" id="9cfc9967-569b-4b51-9ac1-b680c241e507"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500 400 405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>412</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightDeletePut" mediaType="application/xml" postQueryString="false" id="2fba612c-de6a-4c41-a552-3230b4eb86cb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightDeleteOptions" method="OPTIONS" id="1c3427d8-b3e6-43f7-a48b-571c2366ca84"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500 405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:request name="DiscreteMediaRightDeleteOptions" mediaType="application/xml" id="9abf2026-5058-40fa-814a-ab1a9e604288"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightDeleteHead" method="HEAD" id="83d1e52d-df7c-458c-94b1-839d89eb815e"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightDeleteHead" mediaType="application/xml" id="9a4a0788-724c-4b73-9a70-9d38ebb1418d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightUpdate" type="rest" id="d77b4022-fa74-47eb-aedd-226e418d0d61" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightUpdate" path="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" id="5e0698f5-312f-4506-bf5b-1a8047034dbe"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightUpdatePut" method="PUT" id="50a6ecf9-398f-40a3-afc5-2a8b042cc5da"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightUpdatePut" mediaType="application/xml" postQueryString="false" id="0b170d6d-5edb-4cef-9ecc-8a953f63e65e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightUpdateGet" method="GET" id="3b8ae170-df4d-4896-8181-1eb859b5cda4"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightUpdateGet" mediaType="application/xml" postQueryString="false" id="9f6096f2-7dc1-4d41-932e-9944738b65f2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightUpdatePost" method="POST" id="2d1d0ae2-c7b1-49b8-91a0-6587bbeb03f9"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightUpdatePost" mediaType="application/xml" postQueryString="false" id="d729efe2-99af-4c5f-8b5a-ffbb05f0c7d6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightUpdateDelete" method="DELETE" id="66e2e41e-0911-4433-ac47-0d7de9394d2c"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="DiscreteMediaRightUpdateDelete" mediaType="application/xml" postQueryString="false" id="008b6680-cdba-4c34-8a4e-b40e1960be48"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightUpdateOptions" method="OPTIONS" id="a5765edb-82af-4995-9ee3-8e2e26e560c0"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightUpdateOptions" mediaType="application/xml" postQueryString="false" id="219d03a4-25a2-4f85-bc52-a7dcb965998c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DiscreteMediaRightUpdateHead" method="HEAD" id="4be7e78c-6005-4b1b-9ccc-3b56110cbae8"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DiscreteMediaRightUpdateHead" mediaType="application/xml" postQueryString="false" id="ec7f204e-5def-460c-8819-5692b698d569"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightConsume" type="rest" id="70a17d22-4c80-4544-8042-c39b9c72bf03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightConsume" path="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaProfile}/Consume" id="a23718cb-300b-4241-8640-9be795e76c57"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#Project#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:default>${#Project#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter><con:parameter><con:name>ContentProfile</con:name><con:value>${#TestCase#ContentProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#ContentProfile}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaProfile</con:name><con:value>${#TestCase#DiscreteMediaProfile}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaProfile}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightConsumePost" method="POST" id="7f610254-3918-4e5a-8199-466a2ff76af8"><con:settings/><con:parameters/><con:request name="DiscreteMediaRightConsumePost" mediaType="application/xml" postQueryString="false" id="a3674ac7-481f-420e-9d9e-e17391fc38fb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightLeaseRenew" type="rest" id="ff7b482b-e6de-49b0-a966-6b9c01938504" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DiscreteMediaRightLeaseRenew" path="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}/Lease/Renew" id="2163055d-64eb-4ac7-b6ef-6364514e56f6"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="DiscreteMediaRightLeaseRenewPut" method="PUT" id="99186958-4de2-47f4-aa5d-1e66944df0b5"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DiscreteMediaToken</con:element></con:representation><con:request name="DiscreteMediaRightLeaseRenewPut" mediaType="application/xml" postQueryString="false" id="13c39a5c-047c-498c-8e61-3d5d0d2f6751"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NodeAccountId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE Policy PolicyCreate" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ankit.nidhi\Desktop\DECE Policy PolicyCreate_1.wadl" id="cd04d4a3-c184-4d2d-850f-bab173347be5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/DECE%20Policy%20PolicyCreate_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/DECE%20Policy%20PolicyCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="DECE Policy PolicyCreate"/>
  <resources base="https://${#Project#targetHost}:${#Project#targetPort}">
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="PolicyCreate">
      <doc xml:lang="en" title="PolicyCreate"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="USER" default="${#TestCase#assertionUserIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="PolicyCreate Account">
      <doc xml:lang="en" title="PolicyCreate Account"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="f5d77de9-857b-44cc-b3e3-8d717b0125b7"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="31843fed-2538-40b5-ac67-527e00daa6c7"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem" id="53cbf092-e6bf-4cb3-acd7-f73eccc88858"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
     <dece:Resource>urn:dece:userid:org:dece:D46DC87F65E50CAFE0401F0A05996851</dece:Resource>
      <!--<dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>-->
      <dece:RequestingEntity>urn:dece:org:org:dece:3232</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:role:type:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:D46DC87F65E50CAFE0401F0A05996851">
            <dece:Value>urn:dece:type:status:active</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="urn:dece:accountid:org:dece:D46DBF7B03450622E0401F0A059956DF"/>
  <con:entry key="POLICYCLASS" value="urn:dece:type:policy:ManageUserConsent"/>
  <con:entry key="USER" value="urn:dece:userid:org:dece:D46DC87F65E50CAFE0401F0A05996851"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="PolicyCreate Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" id="2e026879-09a3-4aeb-abc6-fa85feb19f7d"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="5ab79bfb-4923-4600-9570-fb04a95a2e01"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="b85dba8b-7061-4fba-818f-987d213ff9e9"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policies" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ankit.nidhi\Desktop\Policies_Delete.wadl" id="d0451fbc-ac86-469b-9d5d-836e5c7e5d50" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/Policies_Delete.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/Policies_Delete.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Policies"/>
  <resources base="https://${#Project#targetHost}:${#Project#targetPort}">
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="PolicyDelete Account">
      <doc xml:lang="en" title="PolicyDelete Account"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="DELETE">
        <doc xml:lang="en" title="DELETE"/>
        <request/>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="PolicyDelete User">
      <doc xml:lang="en" title="PolicyDelete User"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="USER" default="${#TestCase#assertionUserIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="DELETE">
        <doc xml:lang="en" title="DELETE"/>
        <request/>
        <response status="400">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyDelete Account" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="432950eb-ba48-460c-a0c2-4ab6c83697b8"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="fe649e18-e310-4e6f-afac-9174ab957d06"><con:settings/><con:parameters/><con:request name="Request 1" id="a2348d3e-ebc2-48d4-8d7f-743de773b1a1" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyDelete User" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="4247cccb-2b4f-45fc-a412-27b198f2d145"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="29d79c19-6589-4362-bbe7-98e31d9490df"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="95fe8b75-c4d2-4e5d-a859-f56f23e0cc08" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Coordinator APIs" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ankit.nidhi\Desktop\Coordinator APIs_Policy_Get.wadl" id="1052cd87-7ae4-4905-86b6-01642e2c7b54" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/Coordinator%20APIs_Policy_Get.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/Coordinator%20APIs_Policy_Get.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Coordinator APIs"/>
  <resources base="https://${#Project#targetHost}:${#Project#targetPort}">
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="PolicyGet I">
      <doc xml:lang="en" title="PolicyGet I"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="USER" default="${#TestCase#assertionUserIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="0 200">
          <representation mediaType="application/xml" element="dece:PolicyList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="PolicyGet User">
      <doc xml:lang="en" title="PolicyGet User"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="USER" default="${#TestCase#assertionUserIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:PolicyList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="PolicyGet Account">
      <doc xml:lang="en" title="PolicyGet Account"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="POLICYCLASS" default="${#TestCase#policyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:PolicyList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="403 404">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyGet I" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" id="e753a3fb-7189-4275-a670-88d06d9c8dce"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>USER</con:name><con:value>${#TestCase#assertionUserIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUserIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="08ae425d-50d0-4a5f-8ed2-1403f9d01331"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="9a91ff3d-f4bf-4c99-9536-540f16ffafc2" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="GET-1" method="GET" id="200e74a1-ddc7-4699-90ca-23ec51a54086"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ced08feb-cdb1-49e5-a125-697696053a8b" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="PolicyGet Account" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" id="2434add7-5978-478f-a1f5-69b8dcac570b"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>POLICYCLASS</con:name><con:value>${#TestCase#policyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#policyClass}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="44ca6b6f-92cf-4930-bef4-2c4d9dc3db4c"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="ccaa4389-a60b-4c82-978a-9d7312f0a76d" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DECE StreamCreate API" type="rest" basePath="" definitionUrl="C:\Documents and Settings\ankit.nidhi\Desktop\DECE StreamCreate API_1.wadl" id="69339129-1a06-4adc-aee3-dbe5c5620678" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/DECE%20StreamCreate%20API_1.wadl"><con:part><con:url>file:/C:/Documents%20and%20Settings/ankit.nidhi/Desktop/DECE%20StreamCreate%20API_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="DECE StreamCreate API"/>
  <resources base="https://${#Project#targetHost}:${#Project#targetPort}">
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="StreamCreate">
      <doc xml:lang="en" title="StreamCreate"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 401 403 404 409 500">
          <representation mediaType="application/xml"/>
        </response>
        <response status="401 500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0 200">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml" element="sch:StreamCreate-resp" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0">
          <representation mediaType="text/plain"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType="text/html"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="405">
          <representation mediaType=""/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" id="RightsTokenCreate">
      <doc xml:lang="en" title="RightsTokenCreate"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#testCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml" element="data"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="StreamView">
      <doc xml:lang="en" title="StreamView"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="STREAM" default="${#TestCase#streamhandleFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 401 403 404 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0 200">
          <representation mediaType="application/xml" element="sch:Stream" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="StreamListView">
      <doc xml:lang="en" title="StreamListView"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="404 413 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="html"/>
        </response>
        <response status="400 401 500">
          <representation mediaType="application/xml" element="sch:Errors" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0 200">
          <representation mediaType="application/xml" element="sch:Account" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken/{RT}" id="RightsToken Delete">
      <doc xml:lang="en" title="RightsToken Delete"/>
      <param name="ACCT" default="${#Project#urnacct}${#TestCase#rtrnodeaccountid}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RT" default="${#Project#urnrightstoken}${#TestCase#rightstokenid}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="DELETE">
        <doc xml:lang="en" title="DELETE"/>
        <request/>
        <response status="403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="STS">
      <doc xml:lang="en" title="STS"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <param name="tokentype" default="${#TestCase#tokentype}" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0 201">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="STS GET">
      <doc xml:lang="en" title="STS GET"/>
      <param name="ASSERTION" default="${#TestCase#assertionUUID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="403">
          <representation mediaType="application/xml" element="sch:ErrorList" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0 200">
          <representation mediaType="text/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </response>
        <response status="0">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAMHANDLE}" id="StreamDelete">
      <doc xml:lang="en" title="StreamDelete"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="STREAMHANDLE" default="${#TestCase#streamhandleFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="Delete">
        <doc xml:lang="en" title="Delete"/>
        <request/>
        <response status="0">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="StreamCreate1">
      <doc xml:lang="en" title="StreamCreate1"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 401 403 404 409 500">
          <representation mediaType="application/xml"/>
        </response>
        <response status="401 500">
          <representation mediaType="text/html"/>
        </response>
        <response status="0 200">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="0 201">
          <representation mediaType="application/xml" element="sch:StreamCreate-resp" xmlns:sch="http://www.decellc.org/schema"/>
        </response>
        <response status="0">
          <representation mediaType="text/plain"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType="text/html"/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="StreamCreate" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream" id="6ed89119-cb38-4c01-9f96-0bbc86b449aa"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="ef3ecf06-103b-404f-a1c0-7568cefa5781"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 409 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:StreamCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType/><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false" id="15267d35-614e-4559-9914-b26ae104ea53"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST-1" method="POST" id="09a1fb81-a8b7-4a11-a641-f9a3ee18d576"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 409 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:StreamCreate-resp</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="80d7d84a-8d0c-4531-ba4b-925288701495" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsTokenCreate" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" id="1db397c1-723d-4209-94b5-13f32b4cfb8e"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#testCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#testCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="5426eabe-b677-4bc9-bcf2-0ffaf265c24a"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="2858ba8a-7b82-48a7-b3be-0293003a624e" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamView" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAM}" id="79068024-ed53-4cb3-8335-868f52a43aa6"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAM</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="296dd436-dade-4d5d-bce0-91ed790fce09"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Stream</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="5d1ecbdd-7c05-4f37-91d7-4cf5330f44aa" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamListView" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/List" id="a4ca4839-54ff-4187-b82c-4437166e6135"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="394ac2e6-5b31-4005-a96f-08472d3f4bef"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>404 413 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:html</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 500</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:Account</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c8e50e69-d472-421b-8c81-487fdb38e365" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="RightsToken Delete" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken/{RT}" id="317b2c88-ccda-4f81-8a7b-88e68890738e"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#Project#urnacct}${#TestCase#rtrnodeaccountid}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnacct}${#TestCase#rtrnodeaccountid}</con:default></con:parameter><con:parameter><con:name>RT</con:name><con:value>${#Project#urnrightstoken}${#TestCase#rightstokenid}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#urnrightstoken}${#TestCase#rightstokenid}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="DELETE" method="DELETE" id="ff1cd695-7c92-4120-ac1d-901d24d9e291"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="a9431e78-f301-4abe-9689-87d58d82f7fb" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS" path="rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" id="839d6bbc-0e27-493f-8c23-c25aba5603a6"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="6634759f-a6a6-4b8e-bcb7-53fb2c6e9387"><con:settings/><con:parameters><con:parameter><con:name>tokentype</con:name><con:value>${#TestCase#tokentype}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#tokentype}</con:default></con:parameter></con:parameters><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>0 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="c237861e-9ff3-440f-80c1-970cb7983727" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="STS GET" path="rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" id="816d1c61-11a9-452b-8e5d-0598bf4ad17a"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>${#TestCase#assertionUUID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionUUID}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="58a3d37f-60fb-44d0-ae2b-c97b2bed0065"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:sch="http://www.decellc.org/schema">sch:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="1f2d6291-753f-4c58-b23d-d8d2670afa3f" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="StreamDelete" path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Stream/{STREAMHANDLE}" id="a0518da7-8347-4341-a7a4-0f8c1aa414a5"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFULL}</con:default></con:parameter><con:parameter><con:name>STREAMHANDLE</con:name><con:value>${#TestCase#streamhandleFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#streamhandleFULL}</con:default></con:parameter><con:parameter><con:name>MAJOR</con:name><con:value>${#Project#versionMajor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>${#Project#versionMinor}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="Delete" method="DELETE" id="d9b03c9c-7817-4f2d-a5ac-cb0dda089959"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="d2704a9b-2134-49ef-9598-037b1f11e99e" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountCreate" type="rest" basePath="" definitionUrl="D:\DECE_API\DECE_API_R3\DMR\WADLs\WADLs\E2E\AccountCreate_1.wadl" id="52777d22-ba76-4e45-a123-8d5ec6eb0842" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/DECE_API/DECE_API_R3/DMR/WADLs/WADLs/E2E/AccountCreate_1.wadl"><con:part><con:url>file:/D:/DECE_API/DECE_API_R3/DMR/WADLs/WADLs/E2E/AccountCreate_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="AccountCreate"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400">
          <representation mediaType="text/xml"/>
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="0c106a7f-47eb-48b2-be4d-0c122c7fc4b9"><con:settings/><con:parameters/><con:method name="Method 1" method="POST" id="94c9e2b6-07f1-40ab-959b-53dcf3a97627"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="93dedcd2-19d6-406f-bf70-b566363e5058" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="E2EServices" type="rest" basePath="" definitionUrl="D:\DECE_API\E2EWADLs\E2EServices_1_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/D:/DECE_API/E2EWADLs/E2EServices_1_1.wadl"><con:part><con:url>file:/D:/DECE_API/E2EWADLs/E2EServices_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="E2EServices"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="E2E_AccountCreate">
      <doc xml:lang="en" title="E2E_AccountCreate"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml" element="coor:Account" xmlns:coor="${Coordinator_Schema}"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:Account" xmlns:coor="${Coordinator_Schema}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" id="E2E_FirstUser">
      <doc xml:lang="en" title="E2E_FirstUser"/>
      <param name="AccountID" default="AccountID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="${Coordinator_Schema}"/>
        </request>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:User" xmlns:coor="${Coordinator_Schema}"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="E2E_SinglePolicyCreate">
      <doc xml:lang="en" title="E2E_SinglePolicyCreate"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" default="NodeUserId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="PolicyClass" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="${Coordinator_Schema}"/>
        </request>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="${Coordinator_Schema}"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="E2E_ManageAccountConcentPolicy">
      <doc xml:lang="en" title="E2E_ManageAccountConcentPolicy"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="PolicyClass" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="${Coordinator_Schema}"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="coor:PolicyList" xmlns:coor="${Coordinator_Schema}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="E2E_STSCreate">
      <doc xml:lang="en" title="E2E_STSCreate"/>
      <param name="tokentype" type="xs:string" required="false" default="" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request>
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="${Coordinator_Schema}"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="coor:Credentials" xmlns:coor="${Coordinator_Schema}"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}" id="E2E_STSGet">
      <doc xml:lang="en" title="E2E_STSGet"/>
      <param name="ASSERTION" default="ASSERTION" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="Method 1">
        <doc xml:lang="en" title="Method 1"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="E2E_AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account"><con:settings/><con:parameters/><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="E2E_FirstUser" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:User</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="E2E_SinglePolicyCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>NodeUserId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeUserId</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="E2E_ManageAccountConcentPolicy" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default></con:parameter></con:parameters><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="E2E_STSCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}&amp;audience=${#TestCase#audience}"><con:settings/><con:parameters/><con:method name="Method 1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="E2E_STSGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{ASSERTION}"><con:settings/><con:parameters><con:parameter><con:name>ASSERTION</con:name><con:value>ASSERTION</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ASSERTION</con:default></con:parameter></con:parameters><con:method name="Method 1" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\Account_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/wadl/Account_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/wadl/Account_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Account"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" id="AccountCreate">
      <doc xml:lang="en" title="AccountCreate"/>
      <method name="POST" id="AccountCreate">
        <doc xml:lang="en" title="AccountCreate"/>
        <request>
          <representation mediaType="application/xml" element="data"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="403 404 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 403 500">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403 405 500 503">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="GET" id="AccountGET">
        <doc xml:lang="en" title="AccountGET"/>
        <request/>
        <response status="">
          <representation mediaType="application/xml" element="data"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
        <response status="200 201 303">
          <representation mediaType="application/xml"/>
        </response>
        <response status="403 404 503">
          <representation mediaType="text/html"/>
        </response>
        <response status="400 401 403 500">
          <representation mediaType="application/xml" element="dece:ErrorList" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403 405 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}" id="Account">
      <doc xml:lang="en" title="Account"/>
      <param name="AccountID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="AccountGet">
        <doc xml:lang="en" title="AccountGet"/>
        <request/>
        <response status="400 401 403">
          <representation mediaType="application/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="dece:Account" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="DELETE" id="AccountDelete">
        <doc xml:lang="en" title="AccountDelete"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
      </method>
      <method name="PUT" id="AccountUpdate">
        <doc xml:lang="en" title="AccountUpdate"/>
        <request>
          <representation mediaType="application/xml" element="dece:Account" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="403">
          <representation mediaType="application/xml" element="urn:Response" xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="dece:Account" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="dece:Account" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account"><con:settings/><con:parameters/><con:method name="AccountCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 403 405 500 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountGET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201 303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>403 404 503</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 500</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 403 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="AccountGet" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="AccountUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:protocol">urn:Response</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Account</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DMR" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\DMR.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/wadl/DMR.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/wadl/DMR.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="DMR"/>
  <resources base="${#Project#Provision_HostName}">
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" id="DMRCreate">
      <doc xml:lang="en" title="DMRCreate"/>
      <param name="NodeAccountId" default="${#TestCase#NodeAccountID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenId" default="RightsTokenId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml" element="proj:DiscreteMediaToken" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </request>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:DiscreteMediaToken" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaFulfillmentMethod}/Lease" id="DMRLeaseCreate">
      <doc xml:lang="en" title="DMRLeaseCreate"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenId" default="RightsTokenId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ContentProfile" default="ContentProfile" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaTokenID" default="DiscreteMediaTokenID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaFulfillmentMethod" default="DiscreteMediaFulfillmentMethod" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="401">
          <representation mediaType="text/xml"/>
        </response>
        <response status="403 409">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" id="DMRGET_Update_Delete_107">
      <doc xml:lang="en" title="DMRGET_Update_Delete_107"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenId" default="RightsTokenId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaTokenId" default="DiscreteMediaTokenId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=utf-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType=""/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="401 404">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD">
        <doc xml:lang="en" title="HEAD"/>
        <request/>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=utf-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="DELETE" id="DMRDelete_107">
        <doc xml:lang="en" title="DMRDelete_107"/>
        <request/>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=utf-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="PUT" id="DMRUpdate_107">
        <doc xml:lang="en" title="DMRUpdate_107"/>
        <request>
          <representation mediaType="application/xml" element="proj:DiscreteMediaToken" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </request>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="text/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
          <representation mediaType="application/xml;charset=utf-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:DiscreteMediaToken" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/List" id="DMRList">
      <doc xml:lang="en" title="DMRList"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenId" default="RightsTokenId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaTokenList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="HEAD" id="HEAD">
        <doc xml:lang="en" title="HEAD"/>
        <request/>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaTokenList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
          <representation mediaType="application/xml;charset=ISO-8859-1"/>
        </response>
        <response status="304">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaFulfillmentMethod}/Consume" id="DMRConsume">
      <doc xml:lang="en" title="DMRConsume"/>
      <param name="NodeAccountId" default="${#TestCase#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenId" default="${#TestCase#rightsTokenId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ContentProfile" default="${#TestCase#mediaProfile}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaFulfillmentMethod" default="${#TestCase#fulfillmentMethod}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="POST">
        <doc xml:lang="en" title="POST"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}" id="DMRLease_Update_Delete_06">
      <doc xml:lang="en" title="DMRLease_Update_Delete_06"/>
      <param name="NodeAccountID" default="${#TestCase#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaRightID" default="${#TestCase#discreteMediaRightId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <resource path="Consume" id="Consume_106">
        <doc xml:lang="en" title="Consume_106"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
          </request>
          <response status="404">
            <representation mediaType="text/xml;charset=UTF-8" element="data"/>
          </response>
          <response status="">
            <representation mediaType="application/xml"/>
          </response>
          <response status="200">
            <representation mediaType="application/xml;charset=UTF-8" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
          </response>
        </method>
      </resource>
      <resource path="Lease/Release" id="Release">
        <doc xml:lang="en" title="Release"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request>
            <representation mediaType="application/xml"/>
          </request>
          <response status="">
            <representation mediaType="application/xml"/>
          </response>
          <response status="404">
            <representation mediaType="text/xml;charset=UTF-8" element="data"/>
          </response>
          <response status="200">
            <representation mediaType="application/xml;charset=UTF-8" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
          </response>
        </method>
      </resource>
      <resource path="Lease/Renew" id="Renew">
        <doc xml:lang="en" title="Renew"/>
        <method name="PUT" id="PUT">
          <doc xml:lang="en" title="PUT"/>
          <request>
            <representation mediaType="application/xml"/>
          </request>
          <response status="404">
            <representation mediaType="text/xml;charset=UTF-8" element="data"/>
          </response>
          <response status="">
            <representation mediaType="application/xml"/>
          </response>
          <response status="200">
            <representation mediaType="application/xml;charset=UTF-8" element="coor:DiscreteMediaToken" xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator"/>
          </response>
        </method>
      </resource>
      <resource path="Lease/Consume" id="Consume_107">
        <doc xml:lang="en" title="Consume_107"/>
        <method name="POST" id="POST">
          <doc xml:lang="en" title="POST"/>
          <request/>
        </method>
      </resource>
      <method name="DELETE" id="DMRDelete">
        <doc xml:lang="en" title="DMRDelete"/>
        <request/>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="PUT" id="DMRUpdate">
        <doc xml:lang="en" title="DMRUpdate"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountID}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaRightID}" id="DMRUpdate_Delete_07">
      <doc xml:lang="en" title="DMRUpdate_Delete_07"/>
      <param name="NodeAccountID" default="${#TestCase#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DiscreteMediaRightID" default="${#TestCase#discreteMediaRightId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="RightsTokenID" default="${#TestCase#RightsTokenID}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="DELETE" id="DMRDelete">
        <doc xml:lang="en" title="DMRDelete"/>
        <request/>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="PUT" id="DMRUpdate">
        <doc xml:lang="en" title="DMRUpdate"/>
        <request>
          <representation mediaType="application/xml"/>
        </request>
        <response status="400 403">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="DMRCreate" path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestCase#NodeAccountID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountID}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRLeaseCreate" path="rest/{SchemaVersion}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaFulfillmentMethod}/Lease"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>ContentProfile</con:name><con:value>ContentProfile</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>ContentProfile</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenID</con:name><con:value>DiscreteMediaTokenID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaTokenID</con:default></con:parameter><con:parameter><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>DiscreteMediaFulfillmentMethod</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaFulfillmentMethod</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>401</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 409</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRGET_Update_Delete_107" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>DiscreteMediaTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DiscreteMediaTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>401 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD" method="HEAD"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DMRDelete_107" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DMRUpdate_107" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRList" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/List"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>RightsTokenId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>RightsTokenId</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="HEAD" method="HEAD"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaTokenList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>304</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRConsume" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaFulfillmentMethod}/Consume"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestCase#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#rightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#rightsTokenId}</con:default></con:parameter><con:parameter><con:name>ContentProfile</con:name><con:value>${#TestCase#mediaProfile}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#mediaProfile}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>${#TestCase#fulfillmentMethod}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#fulfillmentMethod}</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRLease_Update_Delete_06" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountID</con:name><con:value>${#TestCase#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaRightID</con:name><con:value>${#TestCase#discreteMediaRightId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#discreteMediaRightId}</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter></con:parameters><con:resource name="Consume_106" path="Consume"><con:settings/><con:parameters/><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Release" path="Lease/Release"><con:settings/><con:parameters/><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Renew" path="Lease/Renew"><con:settings/><con:parameters/><con:method name="PUT" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://wadl.dev.java.net/2009/02">ns:data</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:DiscreteMediaToken</con:element><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="Consume_107" path="Lease/Consume"><con:settings/><con:parameters/><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:method name="DMRDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DMRUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="DMRUpdate_Delete_07" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountID}/RightsToken/{RightsTokenID}/DiscreteMediaRight/{DiscreteMediaRightID}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountID</con:name><con:value>${#TestCase#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaRightID</con:name><con:value>${#TestCase#discreteMediaRightId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#discreteMediaRightId}</con:default></con:parameter><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter><con:name>RightsTokenID</con:name><con:value>${#TestCase#RightsTokenID}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#RightsTokenID}</con:default></con:parameter></con:parameters><con:method name="DMRDelete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="DMRUpdate" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Policy_Create" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\Policy_Create_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/wadl/Policy_Create_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/wadl/Policy_Create_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="Policy_Create"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="Policy_Create_User">
      <doc xml:lang="en" title="Policy_Create_User"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" default="NodeUserId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="PolicyClass" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Policy_Create_User">
        <doc xml:lang="en" title="Policy_Create_User"/>
        <request>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#coordinatorSchema}"/>
        </request>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#coordinatorSchema}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="400">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" id="Policy_Create_Account">
      <doc xml:lang="en" title="Policy_Create_Account"/>
      <param name="NodeAccountId" default="NodeAccountId" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="PolicyClass" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Policy_Create_Account">
        <doc xml:lang="en" title="Policy_Create_Account"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="Policy_Create_User" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>NodeUserId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeUserId</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default></con:parameter></con:parameters><con:method name="Policy_Create_User" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Policy_Create_Account" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default></con:parameter></con:parameters><con:method name="Policy_Create_Account" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\STS_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/wadl/STS_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/wadl/STS_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="STS"/>
  <resources base="">
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" id="STSCreate">
      <doc xml:lang="en" title="STSCreate"/>
      <param name="tokentype" default="tokentype" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="audience" default="audience" type="xs:string" required="false" style="query" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="STSCreate">
        <doc xml:lang="en" title="STSCreate"/>
        <request>
          <representation mediaType="application/xml" element="proj:Credentials" xmlns:proj="${#Project#coordinatorSchema}"/>
        </request>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:Credentials" xmlns:proj="${#Project#coordinatorSchema}"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" id="STSGet">
      <doc xml:lang="en" title="STSGet"/>
      <param name="assertionUUID" default="assertionUUID" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="STSGet">
        <doc xml:lang="en" title="STSGet"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="STSCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>tokentype</con:name><con:value>tokentype</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>tokentype</con:default></con:parameter><con:parameter disableUrlEncoding="true"><con:name>audience</con:name><con:value>audience</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>audience</con:default></con:parameter></con:parameters><con:method name="STSCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:Credentials</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="STSGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>assertionUUID</con:name><con:value>assertionUUID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>assertionUUID</con:default></con:parameter></con:parameters><con:method name="STSGet" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserPolicy" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\UserPolicy_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/pgour/Desktop/wadl/UserPolicy_1.wadl"><con:part><con:url>file:/C:/Users/pgour/Desktop/wadl/UserPolicy_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="UserPolicy"/>
  <resources base="">
    <resource path="rest/{SchemaVersion}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="UserPolicyCreate">
      <doc xml:lang="en" title="UserPolicyCreate"/>
      <param name="SchemaVersion" default="${#Project#SchemaVersion}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeAccountId" default="${#TestCase#AccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" default="${#TestCase#NodeUserId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="${#TestCase#PolicyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="UserPolicyCreate">
        <doc xml:lang="en" title="UserPolicyCreate"/>
        <request>
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </request>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="">
          <representation mediaType="application/xml" element="proj:PolicyList" xmlns:proj="${#Project#SchemaNameSpace}"/>
        </response>
        <response status="201">
          <representation mediaType="application/xml"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="400 403 404">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator"/>
        </response>
        <response status="404 500">
          <representation mediaType="text/xml"/>
        </response>
        <response status="303">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
        <response status="403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="DELETE" id="UserPolicyDelete">
        <doc xml:lang="en" title="UserPolicyDelete"/>
        <request/>
      </method>
      <method name="GET" id="UserPolicyGet">
        <doc xml:lang="en" title="UserPolicyGet"/>
        <request/>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserPolicyCreate" path="rest/{SchemaVersion}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>SchemaVersion</con:name><con:value>${#Project#SchemaVersion}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#Project#SchemaVersion}</con:default></con:parameter><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestCase#AccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#AccountId}</con:default></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>${#TestCase#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#NodeUserId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="UserPolicyCreate" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:proj="${#Project#SchemaNameSpace}">proj:PolicyList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 404</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/03/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserPolicyDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserPolicyGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Users" type="rest" basePath="" definitionUrl="C:\Users\pgour\Desktop\wadl\Users_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="UserCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserCreate" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Head" method="HEAD"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Options" method="OPTIONS"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Put" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Post" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="UserUpdate" path="rest/${Project#V1}/${#Project#versionMinor}/Account/{AccountID}/User/{UserID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter><con:parameter><con:name>UserID</con:name><con:value/><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/></con:parameter></con:parameters><con:method name="UserUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="UserDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DiscreteMediaRightGet" type="rest" basePath="" definitionUrl="C:\Users\zaid.momin\Desktop\DiscreteMediaRightGet_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="DiscreteMediaRightGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}"><con:settings/><con:parameters><con:parameter><con:name>RightsTokenId</con:name><con:value>${#TestCase#RightsTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#RightsTokenId}</con:default></con:parameter><con:parameter><con:name>DiscreteMediaTokenId</con:name><con:value>${#TestCase#DiscreteMediaTokenId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#DiscreteMediaTokenId}</con:default></con:parameter></con:parameters><con:method name="DiscreteMediaRightGetGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json"><con:settings/><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="CommonSteps" disabled="true" id="0bc2ae11-183f-43b6-ba0c-9836196cec13"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract and Store Account and User Info based on Assertion UUID" searchProperties="true" id="df3b2cb3-bcbb-46ad-9090-834b9f15758c"><con:settings/><con:testStep type="groovy" name="Extract and Store Account and User Info based on Assertion UUID" id="2c9ef83d-0c19-45e1-aeb0-4b1a95431af9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String uuid = testProject.getPropertyValue("UUID");
def v2 = context.expand( '${#Project#versionMinor}' )


//Full User 1

def e2E_UUID_FAU1 = context.expand( '${#Project#E2E_UUID_FAU1}' )
def sAMLFullUser1 = context.expand( '${#Project#SAML-FullUser1}' )
def nodeAccountOidAllUsers = context.expand( '${#Project#NODE_ACCOUNT_ID}' )
def nodeAccountIdAllUsers = context.expand( '${#Project#NODE_ACCOUNT_ID_FULL}' )
def nodeUserOidFullUser1 = context.expand( '${#Project#NODE_USER_OID_FAU1}' )
def nodeUserIdFullUser1 = context.expand( '${#Project#NODE_USER_ID_FAU1}' )
def e2E_AccountOID_FAU1 = context.expand( '${#Project#E2E_AccountOID_FAU1}' )
def e2E_UserOID_FAU1 = context.expand( '${#Project#E2E_UserOID_FAU1}' )

//Full User 2

def e2E_UUID_FAU2 = context.expand( '${#Project#E2E_UUID_FAU2}' )
def sAMLFullUser2 = context.expand( '${#Project#SAML-FullUser2}' )
def nodeUserOidFullUser2 = context.expand( '${#Project#NODE_USER_OID_FAU2}' )
def nodeUserIdFullUser2 = context.expand( '${#Project#NODE_USER_ID_FAU2}' )
def e2E_AccountOID_FAU2 = context.expand( '${#Project#E2E_AccountOID_FAU2}' )
def e2E_UserOID_FAU2 = context.expand( '${#Project#E2E_UserOID_FAU2}' )


//Standard User 1

def e2E_UUID_SAU1 = context.expand( '${#Project#E2E_UUID_SAU1}' )
def sAMLStandardUser1 = context.expand( '${#Project#SAML-StandardUser1}' )
def nodeUserOidStandardUser1 = context.expand( '${#Project#NODE_USER_OID_SAU}' )
def nodeUserIdStandardUser1 = context.expand( '${#Project#NODE_USER_ID_SAU}' )
def e2E_AccountOID_SAU1 = context.expand( '${#Project#E2E_AccountOID_SAU1}' )
def e2E_UserOID_SAU1 = context.expand( '${#Project#E2E_UserOID_SAU1}' )

//Basic User 1

def e2E_UUID_BAU1 = context.expand( '${#Project#E2E_UUID_BAU1}' )
def sAMLBasicUser1 = context.expand( '${#Project#SAML-BasicUser1}' )
def nodeUserOidBasicUser1 = context.expand( '${#Project#NODE_USER_OID_BAU}' )
def nodeUserIdBasicUser1 = context.expand( '${#Project#NODE_USER_ID_BAU}' )
def e2E_AccountOID_BAU1 = context.expand( '${#Project#E2E_AccountOID_BAU1}' )
def e2E_UserOID_BAU1 = context.expand( '${#Project#E2E_UserOID_BAU1}' )


if(uuid == e2E_UUID_FAU1){


	testProject.setPropertyValue("NodeUserSAMLAssertion", sAMLFullUser1);
	testProject.setPropertyValue("NodeAccountOid", nodeAccountOidAllUsers);
	testProject.setPropertyValue("NodeUserOid", nodeUserOidFullUser1);
	testProject.setPropertyValue("AccountOid", e2E_AccountOID_FAU1);
	testProject.setPropertyValue("UserOid", e2E_UserOID_FAU1);
	testProject.setPropertyValue("NodeAccountId",nodeAccountIdAllUsers);
	testProject.setPropertyValue("NodeUserId",nodeUserIdFullUser1);

	if(v2!=testProject.getPropertyValue("versionURLEncode"))
	{
		testProject.setPropertyValue("AccountId", "urn:dece:accountid:org:dece:" + e2E_AccountOID_FAU1);
	}
	else 
	{
		testProject.setPropertyValue("AccountId", URLEncoder.encode("urn:dece:accountid:org:dece:" + e2E_AccountOID_FAU1,"UTF-8"));
	}
	
	
}

else if(uuid == e2E_UUID_FAU2){


	testProject.setPropertyValue("NodeUserSAMLAssertion",sAMLFullUser2 );
	testProject.setPropertyValue("NodeAccountOid", nodeAccountOidAllUsers);
	testProject.setPropertyValue("NodeUserOid", nodeUserOidFullUser2);
	testProject.setPropertyValue("AccountOid", e2E_AccountOID_FAU2);
	testProject.setPropertyValue("UserOid", e2E_UserOID_FAU2);
	testProject.setPropertyValue("NodeAccountId",nodeAccountIdAllUsers);
	testProject.setPropertyValue("NodeUserId",nodeUserIdFullUser2);
	
	if(v2!=testProject.getPropertyValue("versionURLEncode"))
	{
	     testProject.setPropertyValue("AccountId", "urn:dece:accountid:org:dece:" + e2E_AccountOID_FAU2);
	}
	else
	{
	     testProject.setPropertyValue("AccountId", URLEncoder.encode("urn:dece:accountid:org:dece:" + e2E_AccountOID_FAU2,"UTF-8"));
	}

}

else if(uuid == e2E_UUID_SAU1){


	testProject.setPropertyValue("NodeUserSAMLAssertion", sAMLStandardUser1);
	testProject.setPropertyValue("NodeAccountOid", nodeAccountOidAllUsers);
	testProject.setPropertyValue("NodeUserOid", nodeUserOidStandardUser1);
	testProject.setPropertyValue("AccountOid", e2E_AccountOID_SAU1);
	testProject.setPropertyValue("UserOid", e2E_UserOID_SAU1);
	testProject.setPropertyValue("NodeAccountId",nodeAccountIdAllUsers);
	testProject.setPropertyValue("NodeUserId",nodeUserIdStandardUser1);
	
	if(v2!=testProject.getPropertyValue("versionURLEncode"))
	{		
	     testProject.setPropertyValue("AccountId", "urn:dece:accountid:org:dece:" + e2E_AccountOID_SAU1);
	}
	else
	{		
	     testProject.setPropertyValue("AccountId", URLEncoder.encode("urn:dece:accountid:org:dece:" + e2E_AccountOID_SAU1,"UTF-8"));
	}
	
}

	else if(uuid == e2E_UUID_BAU1){


	testProject.setPropertyValue("NodeUserSAMLAssertion", sAMLBasicUser1);
	testProject.setPropertyValue("NodeAccountOid", nodeAccountOidAllUsers);
	testProject.setPropertyValue("NodeUserOid", nodeUserOidBasicUser1);
	testProject.setPropertyValue("AccountOid", e2E_AccountOID_BAU1);
	testProject.setPropertyValue("UserOid", e2E_UserOID_BAU1);
	testProject.setPropertyValue("NodeAccountId",nodeAccountIdAllUsers);
	testProject.setPropertyValue("NodeUserId",nodeUserIdBasicUser1);
		
	if(v2!=testProject.getPropertyValue("versionURLEncode"))
	{
		testProject.setPropertyValue("AccountId", "urn:dece:accountid:org:dece:" + e2E_AccountOID_BAU1);
	}
	else 
	{		
		testProject.setPropertyValue("AccountId", URLEncoder.encode("urn:dece:accountid:org:dece:" + e2E_AccountOID_BAU1,"UTF-8"));
	}
	
}

else{

	log.info "Wrong UUID Provided"
	assert 1==2
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify Content Location and Get RightsTokenOid" searchProperties="true" id="7ab76cc1-81cb-46af-a4a0-7f714edd352c"><con:settings/><con:testStep type="groovy" name="Verify Content Location and Get RightsTokenOid" id="c2e4ef26-702f-4a10-baff-e37c16e2c3ab"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );
def nodeAccountId =testProject.getPropertyValue("NodeAccountId");
def callingTCName = testCase.getPropertyValue("CallingTestCase");
def callingTestCase = testSuite.getTestCaseByName(callingTCName);
def contentLocation = callingTestCase.getTestStepByName("RightsTokenCreatePost - RightsTokenCreatePost").httpRequest.response.responseHeaders["Location"][0];
def contentLocationURL = contentLocation.toURL();
def contentLocationURLStr = contentLocationURL.getPath();

 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){

	assert contentLocationURL.getPath().matches("/rest/$major/$minor/Account/" + nodeAccountId + "/RightsToken/urn:dece:rightstokenid:org:dece:" + "[0-9A-Z]*");
	int lastColon = contentLocationURLStr.lastIndexOf(":");
	int lastSlash = contentLocationURLStr.lastIndexOf("/");
	
	def rightsTokenOid = contentLocationURLStr.substring(lastColon + 1);
	def rightsTokenId = contentLocationURLStr.substring(lastSlash + 1);
	 
	testCase.setPropertyValue("RightsTokenOid", rightsTokenOid);
	testCase.setPropertyValue("RightsTokenId", rightsTokenId);

 }
 else
 {

	assert contentLocationURL.getPath().matches("/rest/$major/$minor/Account/" + nodeAccountId + "/RightsToken/urn%3Adece%3Arightstokenid%3Aorg%3Adece%3A" + "[0-9A-Z]*");

	int lastColon = contentLocationURLStr.lastIndexOf("%3A");
	int lastSlash = contentLocationURLStr.lastIndexOf("/");
	
	def rightsTokenOid = contentLocationURLStr.substring(lastColon + 3);
	def rightsTokenId = contentLocationURLStr.substring(lastSlash + 1);
	 
	testCase.setPropertyValue("RightsTokenOid", rightsTokenOid);
	testCase.setPropertyValue("RightsTokenId", rightsTokenId);
	
}</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCase</con:name><con:value>RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_With_Valid_AccountId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9ab7a6d4-7f47-44a7-aeba-4f5eefef669c"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="752c4ca5-2ec9-4835-998b-83b7ad74fed5"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="690819c6-0611-469c-8a35-009b5a1b5ddf"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'US', 'active',
sysdate,
'highdefinition',
'Y')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY
)
values
(
'US', 'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:hd");
testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("PurchaseProfileBurnsLeft", "0");
testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="21496931-a052-468c-899c-ac93cdeb8eb9"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile ContentProfile ="${#Project#PurchasedMediaProfile}">
         <!--<ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfile}">${#Project#PurchaseProfileBurnsLeft}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>        
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <!--<ns4:ResourceStatus>
      <ns4:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:iby" DeletionDate="2012-02-22T15:12:03" DeletedBy="urn:dece:ab" ModificationDate="2011-06-29T15:12:03" ModifiedBy="urn:dece:cd">
         <ns4:Value>urn:dece:type:status:active</ns4:Value>
         <ns4:Description>dnFu.WQ2R06AV900TAEZEw</ns4:Description>
      </ns4:Current>
   </ns4:ResourceStatus>-->
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc ContentProfile ="${#Project#PurchasedMediaProfile}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Status" id="3a7d74eb-2067-45bc-9aa3-ee17492a7b92"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"][0] == "HTTP/1.1 201 Created";</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="2237c056-896d-47c0-992c-50699c486dad"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName"))

callingTC.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
callingTC.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A4987D310E505500E0401F0A07992CB1</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>794052</con:value></con:property><con:property><con:name>CallingTestCase</con:name><con:value>TC_DECE_00001_RightsTokenCreate_FUNC_RTL_With_Valid_AccountId</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A4987D310E505500E0401F0A07992CB1</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00001_DiscreteMediaRightLeaseCreate_PERM_Access_Control_Rights_Positive</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_With_Allow_Adult_Content" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d044d4d3-d069-48a9-8589-d5188ea9e478"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="7b5b2909-2ffc-4b8d-9340-4a9a6c242051"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="a2beb725-a053-48dc-848f-805e231b5a43"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'US', 'active',
sysdate,
'highdefinition',
'Y')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY
)
values
(
'US', 'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");
testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");
testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID,
is_adult)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid,
'Y')"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="b14bb939-a3b6-4c6d-99f1-a3c26551f29c"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile ContentProfile ="${#Project#PurchasedMediaProfile}">
         <ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfile}">${#Project#PurchaseProfileBurnsLeft}</ns4:DiscreteMediaRightsRemaining>
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>        
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <ns4:ResourceStatus>
      <ns4:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:iby" DeletionDate="2012-02-22T15:12:03" DeletedBy="urn:dece:ab" ModificationDate="2011-06-29T15:12:03" ModifiedBy="urn:dece:cd">
         <ns4:Value>urn:dece:type:status:active</ns4:Value>
         <ns4:Description>dnFu.WQ2R06AV900TAEZEw</ns4:Description>
      </ns4:Current>
   </ns4:ResourceStatus>
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc ContentProfile ="${#Project#PurchasedMediaProfile}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Status" id="cb06417d-4469-4186-b547-fa48f8729bd0"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"] == "HTTP/1.1 201 Created";</scriptText></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="dc2e5dc9-0ec2-48c4-bc4c-80f5f9e0241e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testCase.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testCase.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>9E13CBDF636480C9E0401F0A059925B0</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>476313</con:value></con:property><con:property><con:name>CallingTestCase</con:name><con:value>TC_DECE_00001_RightsTokenCreate_FUNC_RTL_With_Valid_AccountId</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>10</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:9E13CBDF636480C9E0401F0A059925B0</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_Without_DiscreteMediaRight" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ece83fbc-2f94-4d40-a43a-f4c5ff6a9744"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="c4879d9b-da09-47e2-9acc-ad43c597e59e"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="4d0df8fb-9915-4433-98e6-9c2a97e796f5"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'US', 'active',
sysdate,
'highdefinition',
'Y')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY
)
values
(
'US', 'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");
testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("PurchaseProfileBurnsLeft", "3");
testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="b1ef599a-133c-4e67-a534-6da1e14a4f9d"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfile}">
         <!--<ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="${#Project#DiscreteMediaProfile}">${#Project#PurchaseProfileBurnsLeft}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <ns4:ResourceStatus>
      <ns4:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:iby" DeletionDate="2012-02-22T15:12:03" DeletedBy="urn:dece:ab" ModificationDate="2011-06-29T15:12:03" ModifiedBy="urn:dece:cd">
         <ns4:Value>urn:dece:type:status:blocked:eula</ns4:Value>
         <ns4:Description>dnFu.WQ2R06AV900TAEZEw</ns4:Description>
      </ns4:Current>
      <ns4:History>
         <ns4:Prior ModificationDate="2011-11-01T15:12:03" ModifiedBy="urn:dece:uq">
            <ns4:Value>urn:dece:type:status:deleted</ns4:Value>
            <ns4:Description>RiF67oz2tfdzfJyDq5GM17oEm</ns4:Description>
         </ns4:Prior>
         <ns4:Prior ModificationDate="2011-02-18T15:12:03" ModifiedBy="urn:dece:bj">
            <ns4:Value>urn:dece:type:status:archived</ns4:Value>
            <ns4:Description>AXvGDbjiIc9q35QeTtD81-FY</ns4:Description>
         </ns4:Prior>
      </ns4:History>
   </ns4:ResourceStatus>
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
   <ns4:ViewControl>
      <ns4:AllowedUser>${#Project#PurchaseInfoPurchaseUser}</ns4:AllowedUser>
   </ns4:ViewControl>
</ns4:RightsTokenData>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="1fa32c92-96db-4621-ad6e-f4fc90fc2e7a"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testCase.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testCase.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:93B4192C20DC2CE6E0401F0A07995B71</con:value></con:property><con:property><con:name>Accountid</con:name><con:value>140298</con:value></con:property><con:property><con:name>NodeAccountid</con:name><con:value>3823101</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>93B4192C20DC2CE6E0401F0A07995B71</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>232844</con:value></con:property><con:property><con:name>CallingTestCase</con:name><con:value>TC_DECE_00001_RightsTokenCreate_FUNC_RTL_With_Valid_AccountId</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>3</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_Without_PurchaseProfile" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e5b5d38f-dd69-4822-b729-02c55d284ea0"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="373d7eae-1144-4cff-a404-962cf6d376b4"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="9c15a119-e47d-46c8-94e0-febdb129e825"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'US', 'active',
sysdate,
'highdefinition',
'Y')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY
)
values
(
'US', 'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");
testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");
testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="12ea7b17-c0fe-4a61-93d0-a32dc7571636"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>      
   </ns4:RightsProfiles>   
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc MediaProfile="${#Project#PurchasedMediaProfileHD}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="e6686078-068a-47b8-afd2-bce078927e0e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testCase.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testCase.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
callingTC.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59EE1F4A8BE15D7E0401F0A079933F5</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>514923</con:value></con:property><con:property><con:name>CallingTestCase</con:name><con:value>TC_DECE_00001_RightsTokenCreate_FUNC_RTL_With_Valid_AccountId</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>3</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59EE1F4A8BE15D7E0401F0A079933F5</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Error Codes</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00025_DiscreteMediaRightCreate_ERRC_404_NotFound_PurchaseProfileNotFound</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="94616e21-713c-41c5-a15c-a6183be37ebe"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="ab59e84d-f804-4837-94c9-c3e27e344cf7"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="add3d5a6-e666-4651-bae1-db43a0a93a96"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length,
NORMALIZED_CONTENT_ID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000',
'urn:dece:cid:org:200002'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED,
NORMALIZED_ALID,
NORMALIZED_CID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'active',
sysdate,
'hd',
'Y',
'urn:dece:alid:org:200002',
'urn:dece:cid:org:200002')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY,
NORMALIZED_BUNDLE_ID
)
values
(
'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29',
'urn:dece:bid:200002')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");

def v2 = context.expand( '${#Project#versionMinor}' )

 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){
 testProject.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
 testProject.setPropertyValue("DiscreteMediaProfileInURL", "urn:dece:type:discretemediaformat:bluray:packaged");
 }
 else
 {
  testProject.setPropertyValue("ContentProfile", "urn%3Adece%3Atype%3Amediaprofile%3Ahd");
  testProject.setPropertyValue("DiscreteMediaProfileInURL", "urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged");
 }


testProject.setPropertyValue("PurchasedMediaProfileHD", "urn:dece:type:mediaprofile:hd");
testProject.setPropertyValue("PurchasedMediaProfileSD", "urn:dece:type:mediaprofile:sd");
testProject.setPropertyValue("PurchasedMediaProfilePD", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");

testProject.setPropertyValue("DiscreteMediaProfileHD", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("DiscreteMediaProfileSD", "urn:dece:type:discretemediaformat:dvd:cssrecordable");
testProject.setPropertyValue("DiscreteMediaProfilePD", "urn:dece:type:discretemediaformat:securedigital");

testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");

testProject.setPropertyValue("PurchaseProfileBurnsLeftHD", "1");
testProject.setPropertyValue("PurchaseProfileBurnsLeftSD", "0");
testProject.setPropertyValue("PurchaseProfileBurnsLeftPD", "0");

testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", "urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeid"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
log.info contentRatingOid
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values_old" id="3eb57176-f045-4204-9e88-98686a28a2ad" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
COUNTRY,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length,
NORMALIZED_CONTENT_ID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000',
'urn:dece:cid:org:200002'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED,
NORMALIZED_CID,
NORMALIZED_ALID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'active',
sysdate,
'hd',
'Y',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002'
)""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY,
NORMALIZED_BUNDLE_ID
)
values
(
'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29',
'urn:dece:bid:200002')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("PurchasedMediaProfileHD", "urn:dece:type:mediaprofile:hd");
testProject.setPropertyValue("PurchasedMediaProfileSD", "urn:dece:type:mediaprofile:sd");
testProject.setPropertyValue("PurchasedMediaProfilePD", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");

testProject.setPropertyValue("DiscreteMediaProfileHD", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("DiscreteMediaProfileSD", "urn:dece:type:discretemediaformat:dvd:cssrecordable");
testProject.setPropertyValue("DiscreteMediaProfilePD", "urn:dece:type:discretemediaformat:securedigital");

testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");

testProject.setPropertyValue("PurchaseProfileBurnsLeftHD", "1");
testProject.setPropertyValue("PurchaseProfileBurnsLeftSD", "0");
testProject.setPropertyValue("PurchaseProfileBurnsLeftPD", "0");

testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
log.info callingTC.getName()
testCase.setPropertyValue("NodeId", callingTC.getPropertyValue("NodeId"));
testCase.setPropertyValue("NodeOid", callingTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeRole", callingTC.getPropertyValue("NodeRole"));

testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);
log.info sqlStr
dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""

log.info sqlStr

sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="1a56a953-a60e-4865-95e3-5b7a5daea81e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreatePost - RightsTokenCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="366f2937-6b81-4783-8c1a-24862c340303"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileHD}">
         <!--<ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileHD}">${#Project#PurchaseProfileBurnsLeftHD}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileSD}">
         <!--<ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileSD}">${#Project#PurchaseProfileBurnsLeftSD}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
     </ns4:RightsProfiles>   
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc MediaProfile="${#Project#PurchasedMediaProfileHD}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 	
		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		 
		<ns4:Preference>3</ns4:Preference> 	
</ns4:StreamWebLoc> 
<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type"> 	
		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		 
		<ns4:Preference>3</ns4:Preference> 	
</ns4:StreamWebLoc> 
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="65d8dd1f-f20e-485b-bded-f6ec737f6699"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testCase.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testCase.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
callingTC.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>874336</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>61</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Error Codes_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00010_DiscreteMediaRightDelete_ERRC_400_BadRequest_UserIdInvalid_FLAKY</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1a56a953-a60e-4865-95e3-5b7a5daea81e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3eb57176-f045-4204-9e88-98686a28a2ad</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_With_SD_Content_Profile" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d4a08969-af39-433a-808a-7ca07dc8e967"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="a15cd204-23dd-4939-94b6-ec9a0440cf87"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values" id="b64da2e0-e2e1-4d60-a44a-dc137d0198c7"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length
)
values
(
'200002',
'urn:dece:cid:org:200002',
'US', 'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'US', 'active',
sysdate,
'highdefinition',
'Y')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY
)
values
(
'US', 'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("PurchasedMediaProfileHD", "urn:dece:type:mediaprofile:hd");
testProject.setPropertyValue("PurchasedMediaProfileSD", "urn:dece:type:mediaprofile:sd");
testProject.setPropertyValue("PurchasedMediaProfilePD", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");

testProject.setPropertyValue("DiscreteMediaProfileHD", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("DiscreteMediaProfileSD", "urn:dece:type:discretemediaformat:dvd:cssrecordable");
testProject.setPropertyValue("DiscreteMediaProfilePD", "urn:dece:type:discretemediaformat:securedigital");

testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");

testProject.setPropertyValue("PurchaseProfileBurnsLeftHD", "0");
testProject.setPropertyValue("PurchaseProfileBurnsLeftSD", "1");
testProject.setPropertyValue("PurchaseProfileBurnsLeftPD", "0");

testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", testCase.getPropertyValue("NodeId"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="52709f10-5931-41a0-acaa-9e25cfe80189"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreatePost - RightsTokenCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost" id="0a88a47b-1148-4c8d-8971-d4982989729f"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#SchemaNameSpace} file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#SchemaNameSpace}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <!--<ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileHD}">
         <ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileHD}">${#Project#PurchaseProfileBurnsLeftHD}</ns4:DiscreteMediaRightsRemaining>
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile> -->
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileSD}">
         <ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileSD}">${#Project#PurchaseProfileBurnsLeftSD}</ns4:DiscreteMediaRightsRemaining>
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfilePD}">
         <ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfilePD}">${#Project#PurchaseProfileBurnsLeftPD}</ns4:DiscreteMediaRightsRemaining>
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
   </ns4:RightsProfiles>
   <ns4:ResourceStatus>
      <ns4:Current CreationDate="2011-02-17T15:12:03" CreatedBy="urn:dece:iby" DeletionDate="2012-02-22T15:12:03" DeletedBy="urn:dece:ab" ModificationDate="2011-06-29T15:12:03" ModifiedBy="urn:dece:cd">
         <ns4:Value>urn:dece:type:status:active</ns4:Value>
         <ns4:Description>dnFu.WQ2R06AV900TAEZEw</ns4:Description>
      </ns4:Current>
   </ns4:ResourceStatus>
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc MediaProfile="${#Project#PurchasedMediaProfileSD}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
   <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type"> 	
		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		 
		<ns4:Preference>3</ns4:Preference> 	
</ns4:StreamWebLoc> 
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Status" id="b18f2677-e65e-4c45-9e73-d1397d8f8eda"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"] == "HTTP/1.1 201 Created";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid" id="174500d5-e729-4970-b3af-54dddb0ac9fd"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testCase.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testCase.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>9E14209C48057F1DE0401F0A05993C9C</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>627289</con:value></con:property><con:property><con:name>CallingTestCase</con:name><con:value>TC_DECE_00001_RightsTokenCreate_FUNC_RTL_With_Valid_AccountId</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>0</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:9E14209C48057F1DE0401F0A05993C9C</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>52709f10-5931-41a0-acaa-9e25cfe80189</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Lease Created Date" searchProperties="true" id="d9c4a7f2-2a5a-41cd-bc61-f440d1e46be5"><con:settings/><con:testStep type="groovy" name="Get Lease Created Date" id="b0ca3c45-a412-464a-b814-1cf057bcbf8f"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");

sqlStr = """select created_date from discrete_media_token where discrete_media_token_oid = $discreteMediaTokenOid and state = 'available'""";

def leaseCreatedDate;
sql.eachRow(sqlStr){
	leaseCreatedDate = it[0];
}

testProject.setPropertyValue("LeaseCreatedDate", leaseCreatedDate.toString());

sqlStr = """select to_char((created_date + interval '6' hour), 'yyyy-mm-dd hh:mi:ss') from discrete_media_token where discrete_media_token_oid = hextoraw($discreteMediaTokenOid) and state = 'available'""";

def leaseExpirationDate;
sql.eachRow(sqlStr){
	leaseExpirationDate = it[0];
}

testProject.setPropertyValue("LeaseExpirationDate", leaseExpirationDate);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>UUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A535E7813BEDA4FDE0401F0A07994A44</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4AE52405396DA76E0401F0A07996A0F</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Discrete Media Rights Remaining" searchProperties="true" id="2300b489-3217-447e-88de-f9acb6f47c7a"><con:settings/><con:testStep type="groovy" name="Get Discrete Media Rights Remaining" id="2737a3c0-e790-4fbb-9f94-2c77c16d8922"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
def purchasedMediaProfile = testCase.getPropertyValue("PurchasedMediaProfile").split('urn:dece:type:mediaprofile:')[1];

sqlStr = """select DISCRETE_MEDIA_RIGHTS_REMAIN from purchase_profile where rights_token_oid = $rightsTokenOid and PURCHASED_CONTENT_PROFILE = '$purchasedMediaProfile'""";

def discreteMediaRightsRemaining;
sql.eachRow(sqlStr){
	discreteMediaRightsRemaining = it[0];
}

if(purchasedMediaProfile == 'highdefinition')
{
	testProject.setPropertyValue("DiscreteMediaRightsRemainingHD", (discreteMediaRightsRemaining - 1).toString());
	testProject.setPropertyValue("DiscreteMediaRightsRemainingSD", testProject.getPropertyValue("PurchaseProfileBurnsLeftSD"));
	testProject.setPropertyValue("DiscreteMediaRightsRemainingPD", testProject.getPropertyValue("PurchaseProfileBurnsLeftPD"));
}
else if(purchasedMediaProfile == 'standarddefinition')
{
	testProject.setPropertyValue("DiscreteMediaRightsRemainingSD", (discreteMediaRightsRemaining - 1).toString());
	testProject.setPropertyValue("DiscreteMediaRightsRemainingHD", testProject.getPropertyValue("PurchaseProfileBurnsLeftHD"));
	testProject.setPropertyValue("DiscreteMediaRightsRemainingPD", testProject.getPropertyValue("PurchaseProfileBurnsLeftPD"));	
}
else
{
	testProject.setPropertyValue("DiscreteMediaRightsRemainingPD", (discreteMediaRightsRemaining - 1).toString());
	testProject.setPropertyValue("DiscreteMediaRightsRemainingHD", testProject.getPropertyValue("PurchaseProfileBurnsLeftHD"));
	testProject.setPropertyValue("DiscreteMediaRightsRemainingSD", testProject.getPropertyValue("PurchaseProfileBurnsLeftSD"));		
}
sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A535E7813BEDA4FDE0401F0A07994A44</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>PurchasedMediaProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DISCRETE_MEDIA_TOKEN Table" searchProperties="true" id="1333336c-8507-4da9-8426-6b46c14175b3"><con:settings/><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN Table" id="7b188db8-d8b8-4087-842e-574c521ca876" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
String userOid = testProject.getPropertyValue("UserOid");
String nodeOid = testProject.getPropertyValue("NodeOid");
String leaseType = testProject.getPropertyValue("LeaseType");
String leaseStatus = "active";//testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(dmt.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmt.ACCOUNT_OID)),
to_char(rawtohex(dmt.USER_OID)),
to_char(rawtohex(dmt.CREATED_BY)),
to_char(dmt.STATE),
to_char(dmt.STATUS),
to_char(dmt.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmt.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmt.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID
from 
DISCRETE_MEDIA_TOKEN dmt  
where 
dmt.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmt.ACCOUNT_OID = '$accountOid'
and
dmt.STATE = 'available'""";

log.info sqlStr
	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	RIGHTS_TOKEN_OID = it[0];
	ACCOUNT_OID = it[1];
	USER_OID = it[2];
	CREATED_BY = it[3];
	TYPE = it[4];
	STATUS = it[5];
	EXPIRATION_DATE = it[6];
	CREATED_DATE = it[7];
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
}

try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

try
{
	assert null == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info USER_OID;	
	iFailed = true;
}

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ALID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>AccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsLockerOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeUserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseAccount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Error Codes_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00010_DiscreteMediaRightDelete_ERRC_400_BadRequest_UserIdInvalid_FLAKY</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DISCRETE_MEDIA_TOKEN_HISTORY Table" searchProperties="true" id="a7cb03ca-568f-404d-a4fd-674d5cfd20e2"><con:settings/><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN_HISTORY Table" id="54a2db19-1481-47f8-90f3-c31134037e93" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
String userOid = testProject.getPropertyValue("UserOid");
String nodeOid = testProject.getPropertyValue("NodeOid");
String leaseType = testProject.getPropertyValue("LeaseType");
String leaseStatus = "active";//testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");

boolean iFailed = false;

sqlStr = """select count(*) from DISCRETE_MEDIA_TOKEN_HISTORY dmth
where 
dmth.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')""";

sql.eachRow(sqlStr){
	actualCountDMT = it[0];
}

try
{
	assert actualCountDMT.toString() == testProject.getPropertyValue("PurchaseProfileBurnsLeft");
}
catch(Throwable e)
{
	log.info e;
	log.info testProject.getPropertyValue("PurchaseProfileBurnsLeft");
	log.info actualCountDMT;	
	iFailed = true;
}

sqlStr = """select 
to_char(rawtohex(dmth.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmth.ACCOUNT_OID)),
to_char(rawtohex(dmth.USER_OID)),
to_char(rawtohex(dmth.CREATED_BY)),
to_char(dmth.STATE),
to_char(dmth.STATUS),
to_char(dmth.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmth.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmth.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID
from 
DISCRETE_MEDIA_TOKEN_HISTORY dmth  
where 
dmth.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmth.ACCOUNT_OID = '$accountOid'
and
dmth.STATE = 'available'""";

log.info sqlStr
	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	RIGHTS_TOKEN_OID = it[0];
	ACCOUNT_OID = it[1];
	USER_OID = it[2];
	CREATED_BY = it[3];
	TYPE = it[4];
	STATUS = it[5];
	EXPIRATION_DATE = it[6];
	CREATED_DATE = it[7];
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
}

try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

try
{
	assert null == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info USER_OID;	
	iFailed = true;
}

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B682007E3E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ALID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>AccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsLockerOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeUserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseAccount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B23BC2C22C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00061_DiscreteMediaRightDelete_FUNC_after_DMRDelete</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate PURCHASE_PROFILE Table" searchProperties="true" id="c491e5ca-2499-4a48-91df-5d61a8c6a4b0"><con:settings/><con:testStep type="groovy" name="Validate PURCHASE_PROFILE Table" id="7b4e7a93-8887-4cb6-bf16-eb10d797a919" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testSuite.getPropertyValue("ExpectedCount");
Integer recordCountAct = 0;
String purchasedMediaProfileHD = testProject.getPropertyValue("PurchasedMediaProfileHD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfileSD = testProject.getPropertyValue("PurchasedMediaProfileSD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfilePD = testProject.getPropertyValue("PurchasedMediaProfilePD").split("urn:dece:type:mediaprofile:")[1];
String discreteMediaRightsRemainingHD = testProject.getPropertyValue("DiscreteMediaRightsRemainingHD");
String discreteMediaRightsRemainingSD = testProject.getPropertyValue("DiscreteMediaRightsRemainingSD");
String discreteMediaRightsRemainingPD = testProject.getPropertyValue("DiscreteMediaRightsRemainingPD");
String purchaseProfileCanDownLoad = testCase.getPropertyValue("PurchaseProfileCanDownLoad");
String purchaseProfileCanStream = testCase.getPropertyValue("PurchaseProfileCanStream");

def discreteMediaRightsRemaining = null;

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(RIGHTS_TOKEN_OID)),
to_char(DOWNLOAD),
to_char(STREAM),
to_char(DISCRETE_MEDIA_RIGHTS_REMAIN),
to_char(PURCHASED_CONTENT_PROFILE)
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid')
order by
PURCHASED_CONTENT_PROFILE""";
	
sql.eachRow(sqlStr){
	recordCountAct = recordCountAct + 1;
	RIGHTS_TOKEN_OID = it[0];
	DOWNLOAD = it[1];
	STREAM = it[2];
	DISCRETE_MEDIA_RIGHTS_REMAIN = it[3];
	PURCHASED_CONTENT_PROFILE = it[4];
	try
	{
		assert rightsTokenOid == RIGHTS_TOKEN_OID;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info rightsTokenOid;
		log.info RIGHTS_TOKEN_OID;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanDownLoad == DOWNLOAD;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanDownLoad;
		log.info DOWNLOAD;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanStream == STREAM;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanStream;
		log.info STREAM;	
		iFailed = true;
	}

	if(recordCountExp == '1')
	{
		purchasedMediaProfile = purchasedMediaProfilePD;
		discreteMediaRightsRemaining = discreteMediaRightsRemainingPD;	
	}
	else if(recordCountExp == '2')
	{
		if(recordCountAct == 1)
		{
			purchasedMediaProfile = purchasedMediaProfileHD;	
			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;		
		}
		else if(recordCountAct == 2)
		{
			purchasedMediaProfile = purchasedMediaProfileSD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;			
		}
	}
	else if(recordCountExp == '3')
	{ 
		if(recordCountAct == 1)
		{
			purchasedMediaProfile = purchasedMediaProfileHD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;				
		}
		else if(recordCountAct == 2)
		{
			purchasedMediaProfile = purchasedMediaProfilePD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingPD;	
		}
		else if(recordCountAct == 3)
		{
			purchasedMediaProfile = purchasedMediaProfileSD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;
		}
	}
	if(DISCRETE_MEDIA_RIGHTS_REMAIN == null)
	{
		DISCRETE_MEDIA_RIGHTS_REMAIN = '0';
	}

	try
	{
		//assert discreteMediaRightsRemaining == DISCRETE_MEDIA_RIGHTS_REMAIN;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info discreteMediaRightsRemaining;
		log.info DISCRETE_MEDIA_RIGHTS_REMAIN;		
		iFailed = true;
	}	

	try
	{
		assert purchasedMediaProfile == PURCHASED_CONTENT_PROFILE;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchasedMediaProfile;
		log.info PURCHASED_CONTENT_PROFILE;	
		iFailed = true;
	}
}
try
{
	assert recordCountExp == recordCountAct.toString();
}
catch(Throwable e)
{
	log.info e;
	log.info recordCountExp;
	log.info recordCountAct;	
	iFailed = true;
}
def contentProfile = testCase.getPropertyValue("ContentProfile").split(":")[4];

sqlStr = """select 
to_char(rawtohex(PURCHASE_PROFILE_OID))
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid')
and
PURCHASED_CONTENT_PROFILE = '$contentProfile'""";

def purchaseProfileOid;
	
sql.eachRow(sqlStr){
	purchaseProfileOid = it[0];
}

testCase.setPropertyValue("PurchaseProfileOid", purchaseProfileOid);

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B682007E3E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ExpectedCount</con:name><con:value>3</con:value></con:property><con:property><con:name>PurchaseProfileCanStream</con:name><con:value>Y</con:value></con:property><con:property><con:name>PurchaseProfileCanDownload</con:name><con:value>Y</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00061_DiscreteMediaRightDelete_FUNC_after_DMRDelete</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C10B68200843E5FE05305991F0AEE98</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Assertions for a Node Role" searchProperties="true" id="778329cd-7bec-4ac2-baea-e1f969e54930"><con:settings/><con:testStep type="groovy" name="Update Assertions for a Node Role" id="e5d148fd-0670-4a1a-96f2-9ce9ca56aac8"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def uuidSAML = ['_a60454e2-0e00-48d2-818a-e999c2f6de4a', 'fbbdd202-bj4u-4e57-b32a-100002', 'fbbdd202-bj4u-4e57-b32a-100003', '_19db1850-243c-4781-baf3-7d0e78482d1e', '_4556ec6b-ed33-4cda-948c-b8cd7e3b0d77', 'fbbdd202-bj4u-4e57-b32a-100007'];
def nodeId = testCase.getPropertyValue("NodeId").split(":")[5];

for(i = 0; i &lt;= uuidSAML.size() - 1; i++)
{	
	uuid = uuidSAML[i];
	sqlStr = """update node_user_saml_assertion set node_oid = $nodeId where node_user_saml_uuid = '$uuid'""";
	sql.executeUpdate(sqlStr);

	sqlStr = """update node_account set node_oid = $nodeId where node_account_oid in (select node_account_oid from node_user_saml_assertion where node_user_saml_uuid = '$uuid')""";
	sql.executeUpdate(sqlStr);

	sqlStr = """update node_user set node_oid = $nodeId where node_user_oid in (select node_user_oid from node_user_saml_assertion where node_user_saml_uuid = '$uuid')""";
	sql.executeUpdate(sqlStr);

	log.info "Done updating SAML UUID '" + uuid + "'"	;
	sleep(1000);	
}

sql.close();

log.info 'Woohoo!';</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set SSLSettings KeyStore" searchProperties="true" id="b96f071e-8de9-4460-86bf-1b2c830889b6"><con:settings/><con:testStep type="groovy" name="Set SSLSettings KeyStore" id="9539f241-9ec0-4deb-9c67-df9c0fe3b117"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;

def testCase  = testRunner.getTestCase();

String keyStorePath = testCase.getPropertyValue("keyStorePath");
soapUtils = new soapUIUtils(log);
soapUtils.setSSLSettingsKeyStore(keyStorePath);
log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Metadata\ajjak.pem</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update Node Credential Table" searchProperties="true" id="00c43195-7726-4404-8b78-3cf41cd3b580"><con:settings/><con:testStep type="groovy" name="Update Node Credential Table" id="72d412da-4fa8-482b-9f3b-3da809fe049e"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

nodeCredentialId = testProject.getPropertyValue("NodeCredentialId");
nodeOid = testCase.getPropertyValue("NodeOid");
sqlStr = """update node_credential set node_oid = $nodeOid where credential_id = hextoraw($nodeCredentialId)""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete All My Policies" searchProperties="true" id="21661339-8fb2-489e-8a4a-293b8a0acf10"><con:settings/><con:testStep type="groovy" name="Delete All My Policies" id="7d8001d7-87f5-4a7a-b456-217de75909f7"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

//def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName"));

def policyClassesToBeDeleted = testCase.getPropertyValue("PolicyClassesToBeDeleted");

policyDeleteArray = policyClassesToBeDeleted.split(",");
def existingPolicyOid;
def policyToDelete;

//def myUserOids = new String[6];
//myUserOids = ['194558', '194559', '194560', '194561', '194562', '194563'];

def myUserOids = new String[4];
myUserOids = ['72CF66310F1B38F9E1FF3A7879ABFD0F', 'A5E3EEBDCA5480B6E61E2A4113B4E6D3', '5AF313EE5A80D6B5CE4D72E442C75853', 'FF08731049B7B33CED5BD7BF0E284047'];

//def myUUIDs = new String[6];
//myUUIDs = ['_a60454e2-0e00-48d2-818a-e999c2f6de4a', 'fbbdd202-bj4u-4e57-b32a-100002', 'fbbdd202-bj4u-4e57-b32a-100003', '_19db1850-243c-4781-baf3-7d0e78482d1e', '_4556ec6b-ed33-4cda-948c-b8cd7e3b0d77', 'c09e74cf-a653-457b-9708-d0a675535771'];

def myUUIDs = new String[4];
myUUIDs = ['_4556ec6b-ed33-4cda-948c-b8cd7e3b0d77', '_19db1850-243c-4781-baf3-7d0e78482d1e', '_a60454e2-0e00-48d2-818a-e999c2f6de4a', '_ca49dcc2-20fe-4b64-bacf-d740990441a4'];


//def restrictedUserOid = testCase.getPropertyValue("RestrictedUserOid");
//def requestorUUID = testCase.getPropertyValue("RequestorUUID");

for(i = 0; i &lt; policyDeleteArray.size(); i++)
{
    for(j = 0; j &lt; myUUIDs.size(); j++) 
    {
        requestorUUID = myUUIDs[j];
        for(k = 0; k &lt; myUserOids.size(); k++) 
        {
            restrictedUserOid = myUserOids[k];
            
            // DELETES
        
            existingPolicyOid = null;
            policyToDelete = policyDeleteArray[i].trim(); 
        
            if(policyToDelete.toInteger() == 100)
            {
            		sqlStr = """select 
            		to_char(rawtohex(pr.policy_oid ))
            		from 
          		POLICY p,
            		POLICY_RELATIONSHIP pr
            		where
            		p.policy_oid = pr.policy_oid
            		and 
            		pr.policy_actor = (select to_char(rawtohex(account_oid)) from node_account where row_oid in (select to_char(rawtohex(node_account_id)) from node_user_saml_assertion where node_user_saml_uuid = '$requestorUUID'))
            		and
            		p.policy_class = $policyToDelete""";
            }
            else
            {
        		sqlStr = """select 
        		     to_char(rawtohex(pr.policy_oid ))
            		from 
          		POLICY p,
            		POLICY_RELATIONSHIP pr
            		where
            		p.policy_oid = pr.policy_oid
            		and 
            		pr.policy_actor = '$restrictedUserOid'
            		and
            		p.policy_class = $policyToDelete""";
            }            
            
            // Check if policy already exists
            
            sql.eachRow(sqlStr){
                existingPolicyOid = it[0];
			 log.info existingPolicyOid;
                
                // POLICY_RESOURCE
                sqlStr = """delete from POLICY_RESOURCE where policy_oid = hextoraw('$existingPolicyOid')""";
                sql.execute(sqlStr);
                
                // POLICY_REQUESTING_ENTITY
                sqlStr = """delete from POLICY_REQUESTING_ENTITY where policy_oid = hextoraw('$existingPolicyOid')""";
                sql.execute(sqlStr);
                
                // POLICY_RELATIONSHIP
                sqlStr = """delete from POLICY_RELATIONSHIP where policy_oid = hextoraw('$existingPolicyOid')""";
                sql.execute(sqlStr);
                
                // POLICY
                sqlStr = """delete from policy where policy_oid = hextoraw('$existingPolicyOid')""";
                sql.execute(sqlStr);        
            }
        }
    }	
    log.info "Done deleting Policy Class '" + policyToDelete + "'";
}

sql.close();

log.info "Woohoo!";
</script></con:config></con:testStep><con:properties><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>100, 300, 301, 302, 303, 304</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete Parental Control Policies" searchProperties="true" id="f3ffd34f-28cd-4836-b1e4-2bbfc961e8b3"><con:settings/><con:testStep type="groovy" name="Delete Parental Control Policies" id="37003da2-ba1f-45ce-90bc-4bc31deeb148"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

//def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName"));

def policyClassesToBeDeleted = testCase.getPropertyValue("PolicyClassesToBeDeleted");

policyDeleteArray = policyClassesToBeDeleted.split(",");
def existingPolicyOid;
def policyToDelete;

def restrictedUserOid = testCase.getPropertyValue("RestrictedUserOid");
def requestorUUID = testCase.getPropertyValue("RequestorUUID");

for(i = 0; i &lt; policyDeleteArray.size(); i++)
{
    // DELETES

    existingPolicyOid = null;
    policyToDelete = policyDeleteArray[i].trim(); 

    if(policyToDelete.toInteger() == 100)
    {
    		sqlStr = """select 
    		to_char(rawtohex(pr.policy_oid ))
    		from 
  		POLICY p,
    		POLICY_RELATIONSHIP pr
    		where
    		p.policy_oid = pr.policy_oid
    		and 
    		pr.policy_actor = (select account_oid from node_account where row_oid in (select node_account_id from node_user_saml_assertion where node_user_saml_uuid = '$requestorUUID'))
    		and
    		p.policy_class = $policyToDelete""";
    }
    else
    {
		sqlStr = """select 
		to_char(rawtohex(pr.policy_oid ))
    		from 
  		POLICY p,
    		POLICY_RELATIONSHIP pr
    		where
    		p.policy_oid = pr.policy_oid
    		and 
    		pr.policy_actor = $restrictedUserOid
    		and
    		p.policy_class = $policyToDelete""";
    }
    
    // Check if policy already exists
    
    sql.eachRow(sqlStr){
        existingPolicyOid = it[0];
        // POLICY_RESOURCE
        sqlStr = """delete from POLICY_RESOURCE where policy_oid = hextoraw($existingPolicyOid)""";
        sql.execute(sqlStr);
        
        // POLICY_REQUESTING_ENTITY
        sqlStr = """delete from POLICY_REQUESTING_ENTITY where policy_oid = hextoraw($existingPolicyOid)""";
        sql.execute(sqlStr);
        
        // POLICY_RELATIONSHIP
        sqlStr = """delete from POLICY_RELATIONSHIP where policy_oid = hextoraw($existingPolicyOid)""";
        sql.execute(sqlStr);
        
        // POLICY
        sqlStr = """delete from policy where policy_oid = hextoraw($existingPolicyOid)""";
        sql.execute(sqlStr);        
    }	
}

sql.close();

log.info "Woohoo!";
</script></con:config></con:testStep><con:properties><con:property><con:name>RestrictedUserOid</con:name><con:value>A5E3EEBDCA5480B6E61E2A4113B4E6D3</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00033_DiscreteMediaRightDelete_FUNC_with_Unmatched_Requestor_Retailer_with_LockerViewAll_Consent_Negative</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P1_TestCases</con:value></con:property><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>100, 300, 301, 302, 303, 304</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:2</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>_19db1850-243c-4781-baf3-7d0e78482d1e</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Lease Expiration Date" searchProperties="true" id="dbef9e07-99e4-4add-835d-a11455213d64"><con:settings/><con:testStep type="groovy" name="Get Lease Expiration Date" id="57782909-c5a8-4886-93b6-8a799db81bb0"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")

def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStr = """select to_char((sysdate + interval '6' hour), 'yyyy-mm-dd hh:mi:ss') from dual""";

def leaseExpirationDate;
sql.eachRow(sqlStr){
	leaseExpirationDate = it[0];
}

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("LeaseExpiration", leaseExpirationDate.replace(" ", "T"));

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>UUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A32085305525359EE0401F0A05996D40</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00032_DiscreteMediaRightLeaseCreate_METH_Invocation_with_method_HEAD</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify Content Location and Get DiscreteMediaTokenOid" searchProperties="true" id="b7205422-804c-4af6-9e5b-d2cd43681102"><con:settings/><con:testStep type="groovy" name="Verify Content Location and Get DiscreteMediaTokenOid" id="bde6fed1-dbba-4166-b713-43b2eb1b7257"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeAccountId =testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
def contentLocation = callingTC.getTestStepByName("DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost").httpRequest.response.responseHeaders["Location"][0];

def contentLocationURL = contentLocation.toURL();
def contentLocationURLStr = contentLocationURL.getPath();
def major = context.expand( '${#Project#versionMajor}' )
def minor = context.expand( '${#Project#versionMinor}' )


if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){

	assert contentLocationURL.getPath().matches("/rest/$major/$minor/Account/" + nodeAccountId + "/RightsToken/"+rightsTokenId+"/DiscreteMediaRight/urn:dece:discretemediatokenid:org:dece:" + "[0-9A-Z]*");

	int lastColon = contentLocationURLStr.lastIndexOf(":");
	int lastSlash = contentLocationURLStr.lastIndexOf("/");
	
	def discreteMediaTokenOid = contentLocationURLStr.substring(lastColon + 1);
	def discreteMediaTokenId = contentLocationURLStr.substring(lastSlash + 1);
	 
	testCase.setPropertyValue("DiscreteMediaTokenOid", discreteMediaTokenOid);
	testCase.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);

	callingTC.setPropertyValue("DiscreteMediaTokenOid", discreteMediaTokenOid);
	callingTC.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);

 }
 else
 {

	assert contentLocationURL.getPath().matches("/rest/$major/$minor/Account/" + nodeAccountId + "/RightsToken/DiscreteMediaRight/urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3A" + "[0-9A-Z]*");

	int lastColon = contentLocationURLStr.lastIndexOf("%3A");
	int lastSlash = contentLocationURLStr.lastIndexOf("/");
	
	def discreteMediaTokenOid = contentLocationURLStr.substring(lastColon + 3);
	def discreteMediaTokenId = contentLocationURLStr.substring(lastSlash + 1);
	 
	testCase.setPropertyValue("DiscreteMediaTokenOid", discreteMediaTokenOid);
	testCase.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);

	callingTC.setPropertyValue("DiscreteMediaTokenOid", discreteMediaTokenOid);
	callingTC.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);
}

</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCase</con:name><con:value>RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>DiscreteMediaRightCreatePost</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>CommonSteps</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:13E6D8F93CB3795AE05307991F0A9707</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Enable Test Steps" searchProperties="true" id="a6d9ed15-dac3-4a75-88e5-4f8992b63a3b"><con:settings/><con:testStep type="groovy" name="Enable Test Steps" id="35782cb1-433d-4c19-a759-385c4ce83a00"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTCName = testCase.getPropertyValue("CallingTestCaseName");
def callingTSName = testCase.getPropertyValue("CallingTestSuiteName");
def callingTC = testProject.getTestSuiteByName(callingTSName).getTestCaseByName(callingTCName);

def testSteps = callingTC.getTestStepList();
for(i = 0; i &lt; testSteps.size(); i++)
{
	testStep = testSteps[i];	
	if(testStep.isDisabled() == true)
	{
		testStep.setDisabled(false);
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCaseName</con:name><con:value>DiscreteMediaRightCreatePost</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>CommonSteps</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate PURCHASED_FULFILLMENT_METHOD Table" searchProperties="true" id="0a23ab24-6360-41a7-84dd-e17ed1e77dfe"><con:settings/><con:testStep type="groovy" name="Validate PURCHASED_FULFILLMENT_METHOD Table" id="7632dcd7-9b37-4d36-bab6-47b339b895f4" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testCase.getPropertyValue("ExpectedCount");
String purchaseProfileOid = testCase.getPropertyValue("PurchaseProfileOid");
Integer recordCountAct = 0;

boolean iFailed = false;

sqlStr = """select 
count(*)
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID = hextoraw('$purchaseProfileOid')"""
	
sql.eachRow(sqlStr){
	recordCountAct = it[0];
}
	try
	{
		assert recordCountExp == recordCountAct.toString();
	}
	catch(Throwable e)
	{
		log.info e;
		log.info recordCountExp;
		log.info recordCountAct;	
		iFailed = true;
	}

	assert iFailed == false;

def fmExp = new Object[4];
fmExp[0] = "bluray:packaged";
fmExp[1] = "dvd:cssrecordable";
fmExp[2] = "dvd:packaged";
fmExp[3] = "securedigital";

def fmAct = new Object[4];

sqlStr = """select 
AUTHORIZED_FULFILLMENT_METHOD
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID = hextoraw('$purchaseProfileOid')
order by
AUTHORIZED_FULFILLMENT_METHOD"""

Integer i = 0;
	
sql.eachRow(sqlStr){
	fmAct[i] = it[0];	
	i = i + 1;	
}

assert fmExp == fmAct;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B682007E3E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ExpectedCount</con:name><con:value>4</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00061_DiscreteMediaRightDelete_FUNC_after_DMRDelete</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C10B68200843E5FE05305991F0AEE98</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreatePost" searchProperties="true" id="5c2617f0-d775-4b4a-8ebb-da988fb412df"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="3db82f32-be17-424f-b181-27d03ca5abf7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="a6d225e2-b4eb-47ba-961d-a12079c1f7d8"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" id="780f7a80-c1a2-45b4-aa48-434c1b69795b"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:${#Project#NodeUserOid}</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#RightsTokenOid}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="82ff6a36-18ac-4f5c-bc60-d4f7faaf539d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="2ac92412-34a3-4dec-bcb0-8aff0e8bc256"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("RightsTokenOid",testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="9a17191d-3f19-4bb0-a5a1-77b5c9fea4c4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error Codes_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00010_DiscreteMediaRightDelete_ERRC_400_BadRequest_UserIdInvalid_FLAKY</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>a6d225e2-b4eb-47ba-961d-a12079c1f7d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreatePost with Duplicate AuthorizedFulfillmentMethods" searchProperties="true" id="ffcc9299-83a4-4ff7-9364-ab50d24455ba"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="3131a89a-d48e-42e6-aa80-05752564ffc4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" id="10f1b8be-d1c8-46ea-8c68-c891ff955399"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="e6335aaa-5955-427c-885e-de67dd07b28c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="5a07c8cc-85d5-4d4b-ad9a-7289b0828476"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="26bede98-d69a-4768-b843-40a08fc75ee3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A5364CABA2D98B8AE0401F0A07996641</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A5364CABA2D98B8AE0401F0A07996641</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A535E7813C4EA4FDE0401F0A07994A44</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A535E7813C4EA4FDE0401F0A07994A44</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreatePost with Invalid AuthorizedFulfillmentMethod" searchProperties="true" id="ebfcb9d7-e1ec-4e94-99ba-2bd312b45d5d"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="2138990a-3006-4782-995d-766be9dac839"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" id="6b2fa885-3951-489a-89af-515443b930e7"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discreteemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="f60d4a63-5837-41a4-8657-7c7b7fbd02f9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePost - DiscreteMediaRightCreatePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="f79bb1f1-ccf7-43bd-94ff-2141bea9b2ed"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="2d4518ad-a4ab-4132-a28c-a0a38df12d18"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A5364CABA33C8B8AE0401F0A07996641</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A5364CABA33C8B8AE0401F0A07996641</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestAuthorizedFulfillmentMethodNotValid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A535E7813C4EA4FDE0401F0A07994A44</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A535E7813C4EA4FDE0401F0A07994A44</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate Error Codes" searchProperties="true" id="4e7c404c-7bbc-4eff-86ce-17213899fcef"><con:settings/><con:testStep type="groovy" name="Validate Error Codes_OLD" disabled="true" id="f77e4c48-dbd5-4dc1-a865-73ed7ff434b4"><con:settings/><con:config><script><![CDATA[import dbUtils.dbErrors;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");
def responseStatusAct = testCase.getPropertyValue("ResponseStatus");
def connectionStatusAct = testCase.getPropertyValue("ConnectionStatus");
def contentTypeAct = testCase.getPropertyValue("ContentType");
def HTTPMethod = testCase.getPropertyValue("HTTPMethod");

def hostError = "qa.q.uvvu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

def resXML = resXML = testCase.getPropertyValue("ResponseXML");
def myXML = null;

myDBErrors = new dbErrors(log, testProject.getPropertyValue("DBIDentifier"));

if(errorResponse != "MethodNotAllowed" && resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

switch (errorResponse) 
{	
    case "ForbiddenRoleInvalid":        		
        xmlData = myDBErrors.errGetIdInfo("ForbiddenRoleInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenUserIdUnmatched":        		
        xmlData = myDBErrors.errGetIdInfo("ForbiddenUserIdUnmatched");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
      
    case "Created":        
        responseStatusExp = "HTTP/1.1 201 Created";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "text/plain; charset=UTF-8";                
        break; 

    case "ForbiddenMethodNotAllowed":        		
        xmlData = myDBErrors.errGetIdInfo("ForbiddenMethodNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 405 Method Not Allowed";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "text/plain; charset=UTF-8";        
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        //errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
   
    case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "text/xml";
        break;

    case "BadRequestMediaProfileNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestMediaProfileNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAccountIdNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestAccountIdNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAuthorizedFulfillmentMethodNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestAuthorizedFulfillmentMethodNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaStateShouldBeAvailable":
        xmlData = myDBErrors.errGetIdInfo("BadRequestDiscreteMediaStateShouldBeAvailable");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaStateNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestDiscreteMediaStateNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaLimitExceeded":
        xmlData = myDBErrors.errGetIdInfo("BadRequestDiscreteMediaLimitExceeded");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestContentProfileNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestContentProfileNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestUserIdInvalid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestUserIdInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAccountIdNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestAccountIdNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestNodeIdInvalid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestNodeIdInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenNodeNotActive":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenNodeNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenUserNotActive":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenUserNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "NotFoundUserNotFound":
        xmlData = myDBErrors.errGetIdInfo("NotFoundUserNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenAccountIdUnmatched":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenAccountIdUnmatched");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();  
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenAccountNotActive":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenAccountNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenLockerViewAllConsentRequired":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenLockerViewAllConsentRequired");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "DSPForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DSPForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "BadRequestRightsTokenIDNotValid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestRightsTokenIDNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRightsTokenNotActive":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenRightsTokenNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundRightsTokenNotFound":
        xmlData = myDBErrors.errGetIdInfo("NotFoundRightsTokenNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ConflictContentProfileNotValidForRightsToken":
        xmlData = myDBErrors.errGetIdInfo("ConflictContentProfileNotValidForRightsToken");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

   case "ConflictDiscreteMediaRightRemainingCountRestriction":
        xmlData = myDBErrors.errGetIdInfo("ConflictDiscreteMediaRightRemainingCountRestriction");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;	           

    case "BadRequestDiscreteMediaProfileInvalid":
        xmlData = myDBErrors.errGetIdInfo("BadRequestDiscreteMediaProfileInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ConflictDiscreteMediaProfileNotValidForRightsToken":
        xmlData = myDBErrors.errGetIdInfo("ConflictDiscreteMediaProfileNotValidForRightsToken");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundDiscreteMediaProfileDoesNotExist":
        xmlData = myDBErrors.errGetIdInfo("NotFoundDiscreteMediaProfileDoesNotExist");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundPurchaseProfileNotFound":
        xmlData = myDBErrors.errGetIdInfo("NotFoundPurchaseProfileNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenUserPrivlegeAccessRestricted":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenUserPrivlegeAccessRestricted");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();    
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenContentIDNotActive":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenContentIDNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundContentIDNotFound":
        xmlData = myDBErrors.errGetIdInfo("NotFoundContentIDNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenUnratedContentBlocked":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenUnratedContentBlocked");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRatingPolicyExists":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenRatingPolicyExists");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenAdultContentNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("ForbiddenAdultContentNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;
	                          
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

if(errorResponse == "ForbiddenMethodNotAllowed")
{
	//if(HTTPMethod != "HEAD")
	//{
		try
		{
			assert errorBodyExp == resXML.trim();
		}
		catch(Throwable e)
		{
			log.info e;		
			log.info errorBodyExp;
			log.info resXML;
			iFailed = true;
		}
	//}
}

if (myXML != null) 
{	
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "BadRequestRightsTokenIDNotValid" && errorResponse != "BadRequestDiscreteMediaStateNotValid")
    {
         // Verify response sizes...
         assert myXML.Error.size() == 1;
         assert myXML.Error.Reason.size() == 1;
         assert myXML.Error.OriginalRequest.size() == 1;
         assert myXML.Error.ErrorLink.size() == 1;
    
         errorIDAct = myXML.Error.@ErrorID.toString();
         errorReasonAct = myXML.Error.Reason.toString();
         errorLinkAct = myXML.Error.ErrorLink.toString();
         orgRequestAct = myXML.Error.OriginalRequest.toString().replace("%3A", ":");
    }
    else if(errorResponse == "BadRequestRightsTokenIDNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[1].@ErrorID.toString();
         errorReasonAct = myXML.Error[1].Reason.toString();
         errorLinkAct = myXML.Error[1].ErrorLink.toString();
         orgRequestAct = myXML.Error[1].OriginalRequest.toString().replace("%3A", ":");
    } 
    else if(errorResponse == "BadRequestDiscreteMediaStateNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[0].@ErrorID.toString();
         errorReasonAct = myXML.Error[0].Reason.toString();
         errorLinkAct = myXML.Error[0].ErrorLink.toString();
         orgRequestAct = myXML.Error[0].OriginalRequest.toString().replace("%3A", ":");
    } 
    if(errorResponse != "ForbiddenNodeNotActive")
    {                              
     	// ErrorId
    		try
     	{
     		assert errorIDAct == errorIDExp;
   	  	}
   		catch(Throwable e)
		{
			log.info e;		
			log.info errorIDExp;
			log.info errorIDAct;
			iFailed = true;
		} 
	          
     	// ErrorReason
     	try
     	{
     		assert errorReasonAct == errorReasonExp;
		}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorReasonExp;
			log.info errorReasonAct;
			iFailed = true;
		}
	
     	// ErrorLink
     	try
     	{
     		//assert errorLinkAct == errorLinkExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorLinkExp;
			log.info errorLinkAct;
			iFailed = true;
		}
		// OriginalRequest
		try
     	{
     		//assert orgRequestAct == orgRequestExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info orgRequestExp;
			log.info orgRequestAct;
			iFailed = true;
		}		
    }	
} 



assert iFailed == false;

log.info 'Woohoo!';
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes_Original" id="e2a357f0-c00e-4b4f-a651-7a3c959e98fb" disabled="true"><con:settings/><con:config><script><![CDATA[import dbUtils.dbErrors;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");
def responseStatusAct = testCase.getPropertyValue("ResponseStatus");
def connectionStatusAct = testCase.getPropertyValue("ConnectionStatus");
def contentTypeAct = testCase.getPropertyValue("ContentType");
def HTTPMethod = testCase.getPropertyValue("HTTPMethod");

def hostError = "qa.q.uvvu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

def resXML = resXML = testCase.getPropertyValue("ResponseXML");
def myXML = null;

myDBErrors = new dbErrors(log, testProject.getPropertyValue("DBIDentifier"));

if(errorResponse != "MethodNotAllowed" && resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

switch (errorResponse) 
{	
    case "ForbiddenRoleInvalid":    
    	   log.info "We are in ForbiddenRoleInvalid"    		
        xmlData = myDBErrors.errGetIdInfo("Security:RoleInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenUserIdUnmatched":        		
        xmlData = myDBErrors.errGetIdInfo("UserIdUnmatched");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
      
    case "Created":        
        responseStatusExp = "HTTP/1.1 201 Created";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "text/plain; charset=UTF-8";                
        break; 

    case "ForbiddenMethodNotAllowed":        		
        xmlData = myDBErrors.errGetIdInfo("ForbiddenMethodNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 405 Method Not Allowed";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "text/plain; charset=UTF-8";    
        if(HTTPMethod == "OPTIONS")
        {
        	contentTypeExp = "text/xml";    
        }    
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
   
    case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "text/xml";
        break;

    case "BadRequestMediaProfileNotValid":
        xmlData = myDBErrors.errGetIdInfo("MediaProfileNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAccountIdNotValid":
        xmlData = myDBErrors.errGetIdInfo("AccountIdNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAuthorizedFulfillmentMethodNotValid":
        xmlData = myDBErrors.errGetIdInfo("AuthorizedFulfillmentMethodNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaStateShouldBeAvailable":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaStateShouldBeAvailable");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaStateNotValid":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaStateNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DuplicateAuthorizedFulfillmentMethodsNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestDiscreteMediaLimitExceeded":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaLimitExceeded");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestContentProfileNotValid":
        xmlData = myDBErrors.errGetIdInfo("ContentProfileNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestUserIdInvalid":
        xmlData = myDBErrors.errGetIdInfo("UserIdInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestAccountIdNotValid":
        xmlData = myDBErrors.errGetIdInfo("AccountIdNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "BadRequestNodeIdInvalid":
        xmlData = myDBErrors.errGetIdInfo("NodeIdInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenNodeNotActive":
        xmlData = myDBErrors.errGetIdInfo("NodeNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenUserNotActive":
        xmlData = myDBErrors.errGetIdInfo("UserNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "NotFoundUserNotFound":
        xmlData = myDBErrors.errGetIdInfo("UserNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "NotFoundNotFound":
        xmlData = myDBErrors.errGetIdInfo("NotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenAccountIdUnmatched":
    	   log.info "We are in ForbiddenAccountIdUnmatched Case";
        xmlData = myDBErrors.errGetIdInfo("AccountIdUnmatched");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();  
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        log.info "Exit ForbiddenAccountIdUnmatched Case"
        break;

    case "ForbiddenAccountNotActive":
        xmlData = myDBErrors.errGetIdInfo("AccountNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;

    case "ForbiddenLockerViewAllConsentRequired":
        xmlData = myDBErrors.errGetIdInfo("Policy:LockerViewAllConsentRequired");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "DSPForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DSPForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("RightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "BadRequestRightsTokenIDNotValid":
        xmlData = myDBErrors.errGetIdInfo("RightsTokenIDNotValid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRightsTokenNotActive":
        xmlData = myDBErrors.errGetIdInfo("RightsTokenNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundRightsTokenNotFound":
        xmlData = myDBErrors.errGetIdInfo("RightsTokenNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ConflictContentProfileNotValidForRightsToken":
        xmlData = myDBErrors.errGetIdInfo("ConflictContentProfileNotValidForRightsToken");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

   case "ConflictDiscreteMediaRightRemainingCountRestriction":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaRightRemainingCountRestriction");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;	           

    case "BadRequestDiscreteMediaProfileInvalid":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaProfileInvalid");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ConflictDiscreteMediaProfileNotValidForRightsToken":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaProfileNotValidForRightsToken");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundDiscreteMediaProfileDoesNotExist":
        xmlData = myDBErrors.errGetIdInfo("DiscreteMediaProfileDoesNotExist");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundPurchaseProfileNotFound":
        xmlData = myDBErrors.errGetIdInfo("PurchaseProfileNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenUserPrivlegeAccessRestricted":
        xmlData = myDBErrors.errGetIdInfo("UserPrivlegeAccessRestricted");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();    
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenContentIDNotActive":
        xmlData = myDBErrors.errGetIdInfo("ContentIDNotActive");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text(); 
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "NotFoundContentIDNotFound":
        xmlData = myDBErrors.errGetIdInfo("ContentIDNotFound");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 404 Not Found";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenUnratedContentBlocked":
        xmlData = myDBErrors.errGetIdInfo("Policy:UnratedContentBlocked");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenRatingPolicyExists":
        xmlData = myDBErrors.errGetIdInfo("Policy:RatingPolicyExists");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;

    case "ForbiddenAdultContentNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("Policy:AdultContentNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:" + sqlResult.ResultSet.Row.ERROR_ID.text();
        errorReasonExp = sqlResult.ResultSet.Row.REASON.text();
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#" + sqlResult.ResultSet.Row.ERROR_ID.text();
        responseStatusExp = "HTTP/1.1 403 Forbidden";  
        connectionStatusExp = "Keep-Alive"; 
        contentTypeExp = "application/xml";         
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
        orgRequestExp  = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";        
        break;
	                          
}

boolean iFailed = false;
log.info "Out from the Switch Case Block"
try
{
	log.info "responseStatusExp-->"+responseStatusExp;
	log.info "responseStatusAct-->"+responseStatusAct;
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	log.info "connectionStatusExp-->"+connectionStatusExp;
	log.info "connectionStatusAct-->"+connectionStatusAct;
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	log.info "contentTypeExp-->"+contentTypeExp;
	log.info "contentTypeAct-->"+contentTypeAct;
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

if(errorResponse == "ForbiddenMethodNotAllowed")
{
	if(HTTPMethod != "OPTIONS" && HTTPMethod != "HEAD")
	{
		try
		{
			assert errorBodyExp == resXML.trim();
		}
		catch(Throwable e)
		{
			log.info e;		
			log.info errorBodyExp;
			log.info resXML;
			iFailed = true;
		}
	}
}

if (myXML != null) 
{	
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "BadRequestDiscreteMediaStateNotValid" && HTTPMethod != "OPTIONS")
    {
         // Verify response sizes...
         assert myXML.Error.size() == 1;
         assert myXML.Error.Reason.size() == 1;
         assert myXML.Error.OriginalRequest.size() == 1;
         assert myXML.Error.ErrorLink.size() == 1;
    
         errorIDAct = myXML.Error.@ErrorID.toString();
         log.info "In IF Condition errorIDAct="+errorIDAct;
         errorReasonAct = myXML.Error.Reason.toString();
          log.info "In IF Condition errorReasonAct="+errorReasonAct;
         errorLinkAct = myXML.Error.ErrorLink.toString();
          log.info "In IF Condition errorLinkAct="+errorLinkAct;
         orgRequestAct = myXML.Error.OriginalRequest.toString().replace("%3A", ":");
          log.info "In IF Condition orgRequestAct="+orgRequestAct;
    }
    /*else if(errorResponse == "BadRequestRightsTokenIDNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[1].@ErrorID.toString();
         errorReasonAct = myXML.Error[1].Reason.toString();
         errorLinkAct = myXML.Error[1].ErrorLink.toString();
         orgRequestAct = myXML.Error[1].OriginalRequest.toString().replace("%3A", ":");
    }*/ 
    else if(errorResponse == "BadRequestDiscreteMediaStateNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[0].@ErrorID.toString();
         errorReasonAct = myXML.Error[0].Reason.toString();
         errorLinkAct = myXML.Error[0].ErrorLink.toString();
         orgRequestAct = myXML.Error[0].OriginalRequest.toString().replace("%3A", ":");
    } 
    if(errorResponse != "ForbiddenNodeNotActive" && HTTPMethod != "OPTIONS")
    {                              
     	// ErrorId
    		try
     	{
     		log.info "errorIDAct-->"+errorIDAct;
     		log.info "errorIDExp-->"+errorIDExp;
     		assert errorIDAct == errorIDExp;
   	  	}
   		catch(Throwable e)
		{
			log.info e;		
			log.info errorIDExp;
			log.info errorIDAct;
			iFailed = true;
		} 
	          
     	if(errorResponse != "NotFoundNotFound")
     	{
     		// ErrorReason
	     	try
	     	{
	     		assert errorReasonAct == errorReasonExp;
			}
	     	catch(Throwable e)
			{
				log.info e;		
				log.info errorReasonExp;
				log.info errorReasonAct;
				iFailed = true;
			}
     	}
	
     	// ErrorLink
     	try
     	{
     		//assert errorLinkAct == errorLinkExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorLinkExp;
			log.info errorLinkAct;
			iFailed = true;
		}
		// OriginalRequest
		try
     	{
     		//assert orgRequestAct == orgRequestExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info orgRequestExp;
			log.info orgRequestAct;
			iFailed = true;
		}		
    }	
} 



assert iFailed == false;

log.info 'Woohoo!';

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes" id="f9cd10c0-bee9-4790-820f-3e537d2e6aa3"><con:settings/><con:config><script><![CDATA[import dbUtils.dbErrors;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def discreteMediaTokenId = testCase.getPropertyValue("DiscreteMediaTokenId");
def contentProfile = testProject.getPropertyValue("ContentProfile");
def discreteMediaProfile = testProject.getPropertyValue("DiscreteMediaProfileInURL");
def errorResponse = testCase.getPropertyValue("ErrorResponse");
def responseStatusAct = testCase.getPropertyValue("ResponseStatus");
def connectionStatusAct = testCase.getPropertyValue("ConnectionStatus");
def contentTypeAct = testCase.getPropertyValue("ContentType");
def HTTPMethod = testCase.getPropertyValue("HTTPMethod");

def hostError = "qa.q.uvvu.com";
if(port != "443")
        {
        	port =":"+ port;
        }
        else
        {
        	port = "";
        }
String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
String responseStatusExp = null;
String connectionStatusExp ="Keep-Alive";
String contentTypeExp = "application/xml;charset=UTF-8";
String errorBodyExp = null;
def resXML = testCase.getPropertyValue("ResponseXML");
def myXML = null;


if(errorResponse != "MethodNotAllowed" && resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

switch (errorResponse) 
{	
    case "ForbiddenRoleInvalid":    
    	   log.info "We are in ForbiddenRoleInvalid"    		
        errorIDExp = "urn:dece:errorid:org:dece:Security:RoleInvalid";
        errorReasonExp = "The API call is not authorized.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                              
         break;

    case "ForbiddenUserIdUnmatched":      		
        errorIDExp = "urn:dece:errorid:org:dece:UserIdUnmatched";
        errorReasonExp = "The user ID does not match.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                          
        break;
      
    case "Created":        
        responseStatusExp = "HTTP/1.1 201 Created";           
        contentTypeExp = "text/plain;charset=UTF-8";                     
        break; 

    case "ForbiddenMethodNotAllowed":        		
        errorIDExp = "urn:dece:errorid:org:dece:ForbiddenMethodNotAllowed";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ForbiddenMethodNotAllowed";
        responseStatusExp = "HTTP/1.1 405 Method Not Allowed";           
        contentTypeExp = "text/plain;charset=UTF-8";    
        if(HTTPMethod == "OPTIONS")
        {
        	contentTypeExp = "text/xml";    
        }    
       
        errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
   
    case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        break;

    case "BadRequestMediaProfileNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValid";
        errorReasonExp = "The media profile is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";           
        break;

    case "BadRequestAccountIdNotValid":       
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;

    case "BadRequestAuthorizedFulfillmentMethodNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:AuthorizedFulfillmentMethodNotValid";
        errorReasonExp = "The authorized fulfillment method is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AuthorizedFulfillmentMethodNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateShouldBeAvailable":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateShouldBeAvailable";
        errorReasonExp = "The discrete media right is not available.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateShouldBeAvailable"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateNotValid";
        errorReasonExp = "The status of the discrete media right is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:DuplicateAuthorizedFulfillmentMethodsNotAllowed";
        errorReasonExp = "The authorized fulfillment methods are not allowed.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DuplicateAuthorizedFulfillmentMethodsNotAllowed"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaLimitExceeded":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
        errorReasonExp = "The maximum number of discrete media rights allowed has been exceeded.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";         
        break;

    case "BadRequestContentProfileNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:ContentProfileNotValid";
        errorReasonExp = "The content profile is not valid";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestUserIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:UserIdInvalid";
        errorReasonExp = "The user ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
         break;

    case "BadRequestAccountIdNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestNodeIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:NodeIdInvalid";
        errorReasonExp = "The node ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenNodeNotActive":
	   errorIDExp = "urn:dece:errorid:org:dece:NodeNotActive";
        errorReasonExp = "The node is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenUserNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotActive";
        errorReasonExp = "The member is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundUserNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotFound";
        errorReasonExp = "The user ID was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "NotFoundNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:NotFound";
        errorReasonExp = "The requested resource was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenAccountIdUnmatched":
    	   log.info "We are in ForbiddenAccountIdUnmatched Case";
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdUnmatched";
        errorReasonExp = "The account ID does not match.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";  
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        log.info "Exit ForbiddenAccountIdUnmatched Case"
        break;

    case "ForbiddenAccountNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:AccountNotActive";
        errorReasonExp = "The account is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenLockerViewAllConsentRequired":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:LockerViewAllConsentRequired";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:LockerViewAllConsentRequired";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    /*case "DSPForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DSPForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
                 
       
                
        break;*/

    case "ForbiddenRightsTokenAccessNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenAccessNotAllowed";
        errorReasonExp = "The member does not have permission to access the content.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAccessNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "BadRequestRightsTokenIDNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
        errorReasonExp = "The rights token ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenRightsTokenNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotActive";
        errorReasonExp = "The rights token is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

	 case "ForbiddenDiscreteMediaRightNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightNotActive";
        errorReasonExp = "The discrete media right is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundRightsTokenNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotFound";
        errorReasonExp = "The rights token was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ConflictContentProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValidForRightsToken";
        errorReasonExp = "The media profile is not valid for the rights token.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;

   case "ConflictDiscreteMediaRightRemainingCountRestriction":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightRemainingCountRestriction";
        errorReasonExp = "Insufficient discrete media rights remain.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaRightRemainingCountRestriction";
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        break;	           

    case "BadRequestDiscreteMediaProfileInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileInvalid";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;

    case "ConflictDiscreteMediaProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValidForRightsToken";
        errorReasonExp = "The discrete media fulfillment method is not valid for the rights token.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;

    case "NotFoundDiscreteMediaProfileDoesNotExist":
		errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileDoesNotExist";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileDoesNotExist";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "NotFoundPurchaseProfileNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:PurchaseProfileNotFound";
        errorReasonExp = "The purchase profile was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#PurchaseProfileNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenUserPrivlegeAccessRestricted":
        errorIDExp = "urn:dece:errorid:org:dece:UserPrivlegeAccessRestricted";
        errorReasonExp = "";    
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserPrivlegeAccessRestricted";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenContentIDNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotActive";
        errorReasonExp = "The content is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundContentIDNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotFound";
        errorReasonExp = "The content ID was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenUnratedContentBlocked":
    	   log.info "UNRATED"
        errorIDExp = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
        errorReasonExp = "The user does not have permission to access this content because it is unrated.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenRatingPolicyExists":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
        errorReasonExp = "The user does not have permission to access this content because of its rating.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
        responseStatusExp = "HTTP/1.1 403 Forbidden";          
        break;

    case "ForbiddenAdultContentNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
        errorReasonExp = "The user does not have permission to access this content because of its rating.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;
	                          
}

boolean iFailed = false;
log.info "Out from the Switch Case Block"
try
{
	log.info "responseStatusExp-->"+responseStatusExp;
	log.info "responseStatusAct-->"+responseStatusAct;
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	log.info "connectionStatusExp-->"+connectionStatusExp;
	log.info "connectionStatusAct-->"+connectionStatusAct;
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	log.info "contentTypeExp-->"+contentTypeExp;
	log.info "contentTypeAct-->"+contentTypeAct;
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

if(errorResponse == "ForbiddenMethodNotAllowed")
{
	if(HTTPMethod != "OPTIONS" && HTTPMethod != "HEAD")
	{
		try
		{
			assert errorBodyExp == resXML.trim();
		}
		catch(Throwable e)
		{
			log.info e;		
			log.info errorBodyExp;
			log.info resXML;
			iFailed = true;
		}
	}
}

if (myXML != null) 
{	
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "OK" && errorResponse != "BadRequestDiscreteMediaStateNotValid" && HTTPMethod != "OPTIONS")
    {
         // Verify response sizes...
         assert myXML.Error.size() == 1;
         assert myXML.Error.Reason.size() == 1;
         assert myXML.Error.OriginalRequest.size() == 1;
         assert myXML.Error.ErrorLink.size() == 1;
    
         errorIDAct = myXML.Error.@ErrorID.toString();
         log.info "In IF Condition errorIDAct="+errorIDAct;
         errorReasonAct = myXML.Error.Reason.toString();
          log.info "In IF Condition errorReasonAct="+errorReasonAct;
         errorLinkAct = myXML.Error.ErrorLink.toString();
          log.info "In IF Condition errorLinkAct="+errorLinkAct;
          orgRequestAct = myXML.Error.OriginalRequest.toString();
          log.info "In IF Condition orgRequestAct="+orgRequestAct;
    }
    /*else if(errorResponse == "BadRequestRightsTokenIDNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[1].@ErrorID.toString();
         errorReasonAct = myXML.Error[1].Reason.toString();
         errorLinkAct = myXML.Error[1].ErrorLink.toString();
         orgRequestAct = myXML.Error[1].OriginalRequest.toString().replace("%3A", ":");
    }*/ 
    else if(errorResponse == "BadRequestDiscreteMediaStateNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[0].@ErrorID.toString();
         errorReasonAct = myXML.Error[0].Reason.toString();
         errorLinkAct = myXML.Error[0].ErrorLink.toString();
         orgRequestAct = myXML.Error[0].OriginalRequest.toString();
    } 
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "OK" && HTTPMethod != "OPTIONS")
    {                              
     	// ErrorId
    		try
     	{
     		log.info "errorIDAct-->"+errorIDAct;
     		log.info "errorIDExp-->"+errorIDExp;
     		assert errorIDAct == errorIDExp;
   	  	}
   		catch(Throwable e)
		{
			log.info e;		
			log.info errorIDExp;
			log.info errorIDAct;
			iFailed = true;
		} 
	          
     	if(errorResponse != "NotFoundNotFound")
     	{
     		// ErrorReason
	     	try
	     	{
	     		assert errorReasonAct == errorReasonExp;
			}
	     	catch(Throwable e)
			{
				log.info e;		
				log.info errorReasonExp;
				log.info errorReasonAct;
				iFailed = true;
			}
     	}
	
     	// ErrorLink
     	try
     	{
     		//assert errorLinkAct == errorLinkExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorLinkExp;
			log.info errorLinkAct;
			iFailed = true;
		}
		// OriginalRequest
		try
     	{
     		//assert orgRequestAct == orgRequestExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info orgRequestExp;
			log.info orgRequestAct;
			iFailed = true;
		}		
    }	
} 



assert iFailed == false;

log.info 'Woohoo!';

]]></script></con:config></con:testStep><con:properties><con:property><con:name>ResponseXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ConnectionStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>ContentType</con:name><con:value>text/plain; charset=UTF-8</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>HTTPMethod</con:name><con:value>POST</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6AEBAF53E61E05305991F0AE572</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreateGet" searchProperties="true" id="f1c6e495-e266-4e6e-8e18-96d084d0fc0b"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="d5190dd7-3113-4728-9ce7-263be462e71f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet" id="23bb40bb-d25c-47bc-b5f6-d3894966ca7a"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreateGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="0d8784d4-b644-446a-9294-298f2eea3b5b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateGet - DiscreteMediaRightCreateGet').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "GET");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="2b1e42b1-792d-4e4e-aa67-ecd07646eea9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="b699cdc9-ab36-42e9-abe7-084d967e7dd8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A599F1DD9E58622AE0401F0A079974B8</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A599F1DD9E58622AE0401F0A079974B8</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A07991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A4D55E615AF19457E0401F0A07991EBB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreatePut" searchProperties="true" id="b2db8d53-1ce1-4794-9644-91b542d1acf3"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="b902b115-7e49-48aa-a5aa-4aa91cd8ec68"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut" id="017d1ace-32e5-45fd-aa6c-12e33671b44f"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="44c637bd-4d71-4d33-ac02-2e089054e0d9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreatePut - DiscreteMediaRightCreatePut').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "PUT");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="ddf22050-a585-4226-ba9f-5cf1bd0bfaf8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="53b2ea7b-b9e0-4ae4-8027-05a7cff19617"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A4D653A4D16C2CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A4D653A4D16C2CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A07991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A4D55E615AF19457E0401F0A07991EBB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreateDelete" searchProperties="true" id="071ed7dc-30ba-42f4-b9b7-a5727595eeb0"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="7687ceef-b106-42c1-ac13-9c02adf3fbe1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete" id="72e810de-8cce-4246-8cae-08a004204824"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreateDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="403fe2c9-acc5-40e6-8965-52fc0617876a"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateDelete - DiscreteMediaRightCreateDelete').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "DELETE");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="ebdd2dc2-0037-4485-8e15-595df6aa91f3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="71dabf14-1e58-41ee-8962-e0dc82400ba7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59B68D8C821B95DE0401F0A05995674</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59B68D8C821B95DE0401F0A05995674</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:00:41</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A07991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A4D55E615AF19457E0401F0A07991EBB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreateOptions" searchProperties="true" id="75934adb-772a-44d1-be86-17c250b09a5c"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="0630cf02-9305-4c30-96ef-82ac48b32f49"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions" id="50625ef6-2f34-4c26-919e-05a858b34779"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreateDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="6ddace6b-8ac0-4bcd-949f-963a2e505a17"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateOptions - DiscreteMediaRightCreateOptions').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "OPTIONS");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="5407d0e2-613a-48a8-b870-d8048201fbbd"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="2fa09a9d-34ba-4ecf-b338-8ec641a5d069"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions" id="e5e3bd76-da89-4539-965c-f03657eb6e42"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteOptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A4D653A4D1822CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A4D653A4D1822CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A07991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A4D55E615AF19457E0401F0A07991EBB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightCreateHead" searchProperties="true" id="d5052c8b-a300-4953-b2f2-46d55393a8ed"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" id="a776be27-3870-47f8-a955-728cc5607a50"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead" id="50c3e84a-24b3-4d06-81e4-e2e8005aa217"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreateDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="RightsTokenId" value="${#TestCase#RightsTokenId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightCreate" id="9be720b9-9da7-431c-b810-b1f0c913051b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightCreateHead - DiscreteMediaRightCreateHead').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "OPTIONS");

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" id="5e241e7d-c468-413e-93e2-a72c796fe3de"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" id="96ddc358-da1a-46dc-a4c8-bc9998a15dbf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A4D653A4D1822CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A4D653A4D1822CBCE0401F0A079905CE</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A4D55E615AF19457E0401F0A07991EBB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A4D55E615AF19457E0401F0A07991EBB</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set IS_ADULT" searchProperties="true" id="2293b43d-c3fa-47cc-af84-98fb3d33302c"><con:settings/><con:testStep type="groovy" name="Set IS_ADULT" id="be29df63-e62f-407c-bba5-d45f2a966b2c"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def basicOid; 
def isAdult = testCase.getPropertyValue("IsAdult");

sqlStr1 = """Select
rawtohex(BASIC_OID)
from
MD_BASIC
where
CONTENT_ID ='urn:dece:cid:org:200002'""";

sql.eachRow(sqlStr1){
	BASIC_OID = it[0];
}

basicOid = BASIC_OID ;

log.info "Basic Oid : "+basicOid;

sqlStr = """update
md_basic_rating_set
set
is_adult = '$isAdult'
where
BASIC_OID = hextoraw('$basicOid')"""

sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00051_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_with_AllowAdult_and_RatingPolicy_User_X_Content_X_Parental_Control_Policy</con:value></con:property><con:property><con:name>IsAdult</con:name><con:value>N</con:value></con:property><con:property><con:name>BasicOid</con:name><con:value>200002</con:value></con:property><con:property><con:name>BasicOid</con:name><con:value>200002</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightLeaseCreatePost" searchProperties="true" id="7bb295ed-afa7-4f2f-a1d9-d34ca3bd7490"><con:settings/><con:testStep type="groovy" name="Set pem" id="d9f9bb15-8cd5-4243-81f3-ea36630b09a2"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost" id="3e834acd-4375-4967-8a1c-7a2490f8ab15"><con:settings/><con:config service="DiscreteMediaRightLeaseCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaTokenID}/{DiscreteMediaProfile}/Lease" methodName="DiscreteMediaRightLeaseCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ContentProfile" value="${#Project#ContentProfile}"/>
  <con:entry key="DiscreteMediaProfile" value="${#Project#DiscreteMediaProfile}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightLeaseCreate" id="5b4ae006-1f69-4ba8-a2f5-cd9c153f00f0"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	responseStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["#status#"][0]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connectionStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["Connection"][0];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentTypeAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseCreatePost - DiscreteMediaRightLeaseCreatePost').httpRequest.response.responseHeaders["Content-Type"][0];	
}
catch(Throwable e)
{
	log.info e;
}

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

def hostError = "qa.q.uvuu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

switch (errorResponse) 
{
	case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

assert iFailed == false;

/*if(resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

discreteMediaTokenId = myXML.@DiscreteMediaTokenID.text;

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);*/

log.info 'Woohoo!';
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RTL_CS_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00058_DiscreteMediaRightDelete_FUNC_with_Fulfilled_State_Negative</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6AEBAF53E61E05305991F0AE572</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d9f9bb15-8cd5-4243-81f3-ea36630b09a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightLeaseConsumePost" searchProperties="true" id="ae5b9361-d4a1-4bfb-a52f-051a6bb390b6"><con:settings/><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountID}/RightsToken/DiscreteMediaRight/{DiscreteMediaRightID}/Lease/Consume" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost" mediaType="application/xml" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DiscreteMediaRightID" value="${#TestCase#DiscreteMediaTokenId}"/>
  <con:entry key="NodeAccountID" value="${#Project#NodeAccountId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseConsumePost - DiscreteMediaRightLeaseConsumePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
/*valErrTC.setPropertyValue("ResponseStatus", status);
valErrTC.setPropertyValue("ConnectionStatus", connection);
valErrTC.setPropertyValue("ContentType", contentType);*/
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");
valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00058_DiscreteMediaRightDelete_FUNC_with_Fulfilled_State_Negative</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>State</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>LeaseExpiration</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6AEBAF53E61E05305991F0AE572</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteDelete06" searchProperties="true" id="16e036f3-cb71-4af2-b90a-ee410b6826f3"><con:settings/><con:testStep type="groovy" name="Set PEM File" id="121e7449-1b7c-431e-ba62-6ecfba0f27f4"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete" id="295aecad-a540-4761-a5fe-f3519e500004"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete" mediaType="application/xml" accept="" sslKeystore="ACCESCS_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="8048de81-c45c-4bb5-8aeb-fbb32bc43626"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "DELETE");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P1_TestCases_mi</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_10_DiscreteMediaRightDelete_PERM_Access_Control_Rights_ACCESSCS_Negative</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>E97ADB55C02688E1E0401F0A05993D04</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3AE97ADB55C02688E1E0401F0A05993D04</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3AE97ADB55C04188E1E0401F0A05993D04</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>E97ADB55C04188E1E0401F0A05993D04</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/certs/ACCESCS_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteDelete07" searchProperties="true" id="3d15e98d-a79b-4719-b846-94a835566c71"><con:settings/><con:testStep type="groovy" name="Set PEM File"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete"><con:settings/><con:config service="DMR" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DMRDelete_107" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NodeAccountId}"/>
  <con:entry key="RightsTokenId" value="${#TestCase#RightsTokenId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "DELETE");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00010_DiscreteMediaRightDelete_ERRC_400_BadRequest_UserIdInvalid_FLAKY</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>Error Codes_P1_TestCases</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestUserIdInvalid</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightLeaseReleasePost" searchProperties="true" id="85275ea6-1e1d-4a11-a854-2d2a59024671"><con:settings/><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMRLeaseReleasePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRLeaseReleasePost"><con:settings/><con:config service="DiscreteMediaRightLeaseRelease" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}/Lease/Release" methodName="DiscreteMediaRightLeaseReleasePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRLeaseReleasePost" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_CS_1_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DMRLeaseReleasePost').httpRequest.response.getResponseContent();
	
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DMRLeaseReleasePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DMRLeaseReleasePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DMRLeaseReleasePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
/*valErrTC.setPropertyValue("ResponseStatus", status);
valErrTC.setPropertyValue("ConnectionStatus", connection);
valErrTC.setPropertyValue("ContentType", contentType);*/
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");
valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6ADDF1C3E65E05305991F0A8961</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_CS_1_concat.pem</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B23BC2A52C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_CS_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00060_DiscreteMediaRightDelete_FUNC_after_DMRLeaseRelease_and_DMRDelete</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B23BC2A52C7FE05305991F0A45E4</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate Error Codes for DiscreteMediaRightDelete" searchProperties="true" id="f376d4ac-c387-4e33-8cfb-bfd64093c578"><con:settings/><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="ee22b68c-dca3-45c0-a7f9-3f6868002d94"><con:settings/><con:config><script><![CDATA[import dbUtils.dbErrors;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def discreteMediaTokenId = testCase.getPropertyValue("DiscreteMediaTokenId");
def contentProfile = testProject.getPropertyValue("ContentProfile");
def discreteMediaProfile = testProject.getPropertyValue("DiscreteMediaProfileInURL");
def errorResponse = testCase.getPropertyValue("ErrorResponse");
def responseStatusAct = testCase.getPropertyValue("ResponseStatus");
def connectionStatusAct = testCase.getPropertyValue("ConnectionStatus");
def contentTypeAct = testCase.getPropertyValue("ContentType");
def HTTPMethod = testCase.getPropertyValue("HTTPMethod");

def hostError = "qa.q.uvvu.com";
if(port != "443")
        {
        	port =":"+ port;
        }
        else
        {
        	port = "";
        }
String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp=null;
def v2 = context.expand( '${#Project#versionMinor}' )
if (v2=='06')
{
	orgRequestExp = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/DiscreteMediaRight/" + discreteMediaTokenId;
}
else if (v2=='07'||v2=='11')
{
	orgRequestExp = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId +"/DiscreteMediaRight/" + discreteMediaTokenId;
}
String responseStatusExp = null;
String connectionStatusExp ="Keep-Alive";
String contentTypeExp = "application/xml;charset=UTF-8";
String errorBodyExp = null;
def resXML = testCase.getPropertyValue("ResponseXML");
def myXML = null;


if(errorResponse != "MethodNotAllowed" && resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

switch (errorResponse) 
{	
    case "ForbiddenRoleInvalid":    
    	   log.info "We are in ForbiddenRoleInvalid"    		
        errorIDExp = "urn:dece:errorid:org:dece:Security:RoleInvalid";
        errorReasonExp = "The API call is not authorized.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                              
         break;

    case "ForbiddenUserIdUnmatched":      		
        errorIDExp = "urn:dece:errorid:org:dece:UserIdUnmatched";
        errorReasonExp = "The user ID does not match.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                          
        break;

    case "ForbiddenAccountNotActive":      		
        errorIDExp = "urn:dece:errorid:org:dece:AccountNotActive";
        errorReasonExp = "The account is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                          
        break;
      
    case "Created":        
        responseStatusExp = "HTTP/1.1 201 Created";           
        contentTypeExp = "text/plain;charset=UTF-8";                     
        break; 

    case "ForbiddenMethodNotAllowed":        		
        errorIDExp = "urn:dece:errorid:org:dece:ForbiddenMethodNotAllowed";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ForbiddenMethodNotAllowed";
        responseStatusExp = "HTTP/1.1 405 Method Not Allowed";           
        contentTypeExp = "text/plain;charset=UTF-8";    
        if(HTTPMethod == "OPTIONS")
        {
        	contentTypeExp = "text/xml";    
        }    
       
        errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;
   
    case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";  
        //contentTypeExp = "text/xml;charset=UTF-8";        
        break;

    case "BadRequestMediaProfileNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValid";
        errorReasonExp = "The media profile is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";           
        break;

     case "BadRequestDiscreteMediaRightIDNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightIDNotValid";
        errorReasonExp = "The discrete media right ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";           
        break;

   case "BadRequestDiscreteMediaRightAlreadyConsumedOrLeased":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightAlreadyConsumedOrLeased";
        errorReasonExp = "The discrete media right has been consumed or leased.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";           
        break;

    case "BadRequestAccountIdNotValid":       
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;

    case "BadRequestAuthorizedFulfillmentMethodNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:AuthorizedFulfillmentMethodNotValid";
        errorReasonExp = "The authorized fulfillment method is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AuthorizedFulfillmentMethodNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateShouldBeAvailable":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateShouldBeAvailable";
        errorReasonExp = "The discrete media right is not available.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateShouldBeAvailable"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateNotValid";
        errorReasonExp = "The status of the discrete media right is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:DuplicateAuthorizedFulfillmentMethodsNotAllowed";
        errorReasonExp = "The authorized fulfillment methods are not allowed.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DuplicateAuthorizedFulfillmentMethodsNotAllowed"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaLimitExceeded":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
        errorReasonExp = "The maximum number of discrete media rights allowed has been exceeded.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";  
        connectionStatusExp ="close";         
        break;

    case "BadRequestContentProfileNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:ContentProfileNotValid";
        errorReasonExp = "The content profile is not valid";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestUserIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:UserIdInvalid";
        errorReasonExp = "The user ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
         break;

    case "BadRequestAccountIdNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestNodeIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:NodeIdInvalid";
        errorReasonExp = "The node ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenNodeNotActive":
	   errorIDExp = "urn:dece:errorid:org:dece:NodeNotActive";
        errorReasonExp = "The node is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenUserNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotActive";
        errorReasonExp = "The member is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundUserNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotFound";
        errorReasonExp = "The user ID was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "NotFoundNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:NotFound";
        errorReasonExp = "The requested resource was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#NotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenAccountIdUnmatched":
    	   log.info "We are in ForbiddenAccountIdUnmatched Case";
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdUnmatched";
        errorReasonExp = "The account ID does not match.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";  
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        log.info "Exit ForbiddenAccountIdUnmatched Case"
        break;

    case "ForbiddenAccountNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:AccountNotActive";
        errorReasonExp = "The account is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenLockerViewAllConsentRequired":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:LockerViewAllConsentRequired";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:LockerViewAllConsentRequired";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    /*case "DSPForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DSPForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
                 
       
                
        break;*/

    case "ForbiddenRightsTokenAccessNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenAccessNotAllowed";
        errorReasonExp = "The member does not have permission to access the content.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAccessNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "BadRequestRightsTokenIDNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
        errorReasonExp = "The rights token ID is not valid.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenRightsTokenNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotActive";
        errorReasonExp = "The rights token is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundRightsTokenNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotFound";
        errorReasonExp = "The rights token was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

	case "NotFoundDiscreteMediaRightNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightNotFound";
        errorReasonExp = "The discrete media right ID was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ConflictContentProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValidForRightsToken";
        errorReasonExp = "The media profile is not valid for the rights token.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;

   case "ConflictDiscreteMediaRightRemainingCountRestriction":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightRemainingCountRestriction";
        errorReasonExp = "Insufficient discrete media rights remain.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaRightRemainingCountRestriction";
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        break;	           

    case "BadRequestDiscreteMediaProfileInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileInvalid";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;

    case "ConflictDiscreteMediaProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValidForRightsToken";
        errorReasonExp = "The discrete media fulfillment method is not valid for the rights token.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;

    case "NotFoundDiscreteMediaProfileDoesNotExist":
		errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileDoesNotExist";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileDoesNotExist";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "NotFoundPurchaseProfileNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:PurchaseProfileNotFound";
        errorReasonExp = "The purchase profile was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#PurchaseProfileNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenUserPrivlegeAccessRestricted":
        errorIDExp = "urn:dece:errorid:org:dece:UserPrivlegeAccessRestricted";
        errorReasonExp = "";    
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#UserPrivlegeAccessRestricted";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenContentIDNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotActive";
        errorReasonExp = "The content is not active.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundContentIDNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotFound";
        errorReasonExp = "The content ID was not found.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenUnratedContentBlocked":
    	   log.info "UNRATED"
        errorIDExp = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
        errorReasonExp = "The user does not have permission to access this content because it is unrated.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenRatingPolicyExists":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
        errorReasonExp = "The user does not have permission to access this content because of its rating.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
        responseStatusExp = "HTTP/1.1 403 Forbidden";          
        break;

    case "ForbiddenAdultContentNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
        errorReasonExp = "The user does not have permission to access this content because of its rating.";
        errorLinkExp   = "https://" + hostError + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;
	                          
}

boolean iFailed = false;
log.info "Out from the Switch Case Block"
try
{
	log.info "responseStatusExp-->"+responseStatusExp;
	log.info "responseStatusAct-->"+responseStatusAct;
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	log.info "connectionStatusExp-->"+connectionStatusExp;
	log.info "connectionStatusAct-->"+connectionStatusAct;
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	log.info "contentTypeExp-->"+contentTypeExp;
	log.info "contentTypeAct-->"+contentTypeAct;
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

if(errorResponse == "ForbiddenMethodNotAllowed")
{
	if(HTTPMethod != "OPTIONS" && HTTPMethod != "HEAD")
	{
		try
		{
			//assert errorBodyExp == resXML.trim();
		}
		catch(Throwable e)
		{
			log.info e;		
			log.info errorBodyExp;
			log.info resXML;
			iFailed = true;
		}
	}
}

if (myXML != null) 
{	
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "OK" && errorResponse != "BadRequestDiscreteMediaStateNotValid" && HTTPMethod != "OPTIONS")
    {
         // Verify response sizes...
         assert myXML.Error.size() == 1;
         assert myXML.Error.Reason.size() == 1;
         assert myXML.Error.OriginalRequest.size() == 1;
         assert myXML.Error.ErrorLink.size() == 1;
    
         errorIDAct = myXML.Error.@ErrorID.toString();
         log.info "In IF Condition errorIDAct="+errorIDAct;
         errorReasonAct = myXML.Error.Reason.toString();
          log.info "In IF Condition errorReasonAct="+errorReasonAct;
         errorLinkAct = myXML.Error.ErrorLink.toString();
          log.info "In IF Condition errorLinkAct="+errorLinkAct;
          orgRequestAct = myXML.Error.OriginalRequest.toString();
          log.info "In IF Condition orgRequestAct="+orgRequestAct;
    }
    /*else if(errorResponse == "BadRequestRightsTokenIDNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[1].@ErrorID.toString();
         errorReasonAct = myXML.Error[1].Reason.toString();
         errorLinkAct = myXML.Error[1].ErrorLink.toString();
         orgRequestAct = myXML.Error[1].OriginalRequest.toString().replace("%3A", ":");
    }*/ 
    else if(errorResponse == "BadRequestDiscreteMediaStateNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[0].@ErrorID.toString();
         errorReasonAct = myXML.Error[0].Reason.toString();
         errorLinkAct = myXML.Error[0].ErrorLink.toString();
         orgRequestAct = myXML.Error[0].OriginalRequest.toString();
    } 
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "OK" && HTTPMethod != "OPTIONS")
    {                              
     	// ErrorId
    		try
     	{
     		log.info "errorIDAct-->"+errorIDAct;
     		log.info "errorIDExp-->"+errorIDExp;
     		assert errorIDAct == errorIDExp;
   	  	}
   		catch(Throwable e)
		{
			log.info e;		
			log.info errorIDExp;
			log.info errorIDAct;
			iFailed = true;
		} 
	          
     	if(errorResponse != "NotFoundNotFound")
     	{
     		// ErrorReason
	     	try
	     	{
	     		assert errorReasonAct == errorReasonExp;
			}
	     	catch(Throwable e)
			{
				log.info e;		
				log.info errorReasonExp;
				log.info errorReasonAct;
				iFailed = true;
			}
     	}
	
     	// ErrorLink
     	try
     	{
     		//assert errorLinkAct == errorLinkExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorLinkExp;
			log.info errorLinkAct;
			iFailed = true;
		}
		// OriginalRequest
		try
     	{
     		//assert orgRequestAct == orgRequestExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info orgRequestExp;
			log.info orgRequestAct;
			iFailed = true;
		}		
    }	
} 



assert iFailed == false;

log.info 'Woohoo!';

]]></script></con:config></con:testStep><con:properties><con:property><con:name>ResponseXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E6CB401D415DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ResponseStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>ConnectionStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>ContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestUserIdInvalid</con:value></con:property><con:property><con:name>HTTPMethod</con:name><con:value>DELETE</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:13E6D8F93CB3795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93CB3795AE05307991F0A9707</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ee22b68c-dca3-45c0-a7f9-3f6868002d94</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdatePut" searchProperties="true" id="f7804886-76ac-4b2d-ada2-419a118afcce"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="de9583a5-9f15-4b17-ac3b-cff1dd311c42"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" id="eee1fa1c-8d50-4a97-9c46-c5b01ba1c4ed"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdatePut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <!--<AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>-->
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="2bb5a81e-7fdd-4ffb-9353-cbe72e21f5bb"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "PUT");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="f908b51a-8f71-4cf0-9b9f-513ccbb77c96"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="2e5259cb-6eab-4151-8a87-65c866f9ef5d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RTL</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00067_DiscreteMediaRightUpdate_FUNC_RTL_POST_after_DMRLeaseRelease_and_DMRDelete</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A5C6EFF15F495D95E0401F0A07996556</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A5C6EFF15F495D95E0401F0A07996556</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A5C6EFF15F645D95E0401F0A07996556</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A5C6EFF15F645D95E0401F0A07996556</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate Error Codes for DiscreteMediaRightUpdate" searchProperties="true" id="51f40243-83a7-4b9c-b9a6-8f8249ba36f0"><con:settings/><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="ea17cbd9-273d-4c56-bb38-85fba09668f2"><con:settings/><con:config><script><![CDATA[import dbUtils.dbErrors;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def major = context.expand( '${#Project#versionMajor}' );
def minor = context.expand( '${#Project#versionMinor}' );
def accountId = URLDecoder.decode(testProject.getPropertyValue("NodeAccountId"),"UTF-8");
def rightsTokenId = URLDecoder.decode(testCase.getPropertyValue("RightsTokenId"),"UTF-8");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");
def responseStatusAct = testCase.getPropertyValue("ResponseStatus");
def connectionStatusAct = testCase.getPropertyValue("ConnectionStatus");
def contentTypeAct = testCase.getPropertyValue("ContentType");
def HTTPMethod = testCase.getPropertyValue("HTTPMethod");

def hostError = "qa.q.uvvu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
def v2 = context.expand( '${#Project#versionMinor}' )
if (v2=='06')
{
	String orgRequestExp = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/DiscreteMediaRight/" + discreteMediaTokenId;
}
else if (v2=='07' || v2=='11' | v2=='21')
{
	String orgRequestExp = "https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId +"/DiscreteMediaRight/" + discreteMediaTokenId;
}

String responseStatusExp = null;
String connectionStatusExp ="Keep-Alive";
String contentTypeExp = "application/xml;charset=UTF-8";
String errorBodyExp = null;

def resXML = resXML = testCase.getPropertyValue("ResponseXML");
def myXML = null;

if(errorResponse != "MethodNotAllowed" && resXML != null)
{
	try
	{
		myXML = new XmlSlurper().parseText(resXML);
	}
	catch(Throwable e)
	{
		log.info e;					
	}
}

switch (errorResponse) 
{	
    case "ForbiddenRoleInvalid":    
    	   log.info "We are in ForbiddenRoleInvalid"    		
        errorIDExp = "urn:dece:errorid:org:dece:Security:RoleInvalid";
        errorReasonExp = "The API call is not authorized.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                              
         break;

    case "ForbiddenUserIdUnmatched":      		
        errorIDExp = "urn:dece:errorid:org:dece:UserIdUnmatched";
        errorReasonExp = "The user ID does not match.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
        responseStatusExp = "HTTP/1.1 403 Forbidden";                          
        break;
      
    case "Created":        
        responseStatusExp = "HTTP/1.1 201 Created";           
        contentTypeExp = "text/plain; charset=UTF-8";                
        break; 

    /*case "ForbiddenMethodNotAllowed":        		
        xmlData = myDBErrors.errGetIdInfo("ForbiddenMethodNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:ForbiddenMethodNotAllowed";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#ForbiddenMethodNotAllowed";
        responseStatusExp = "HTTP/1.1 405 Method Not Allowed";           
        contentTypeExp = "text/plain; charset=UTF-8";    
        if(HTTPMethod == "OPTIONS")
        {
        	contentTypeExp = "text/xml";    
        }    
        
        errorBodyExp = HTTPMethod + " method is not allowed for API call: https://" + host + port + "/rest/$major/$minor/Account/" + accountId + "/RightsToken/" + rightsTokenId + "/DiscreteMediaRight";
        break;*/
   
    case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "text/xml";
        break;

    case "BadRequestMediaProfileNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValid";
        errorReasonExp = "The media profile is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";             
        break;

    case "BadRequestAccountIdNotValid":       
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;

    case "BadRequestAuthorizedFulfillmentMethodNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:AuthorizedFulfillmentMethodNotValid";
        errorReasonExp = "The authorized fulfillment method is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#AuthorizedFulfillmentMethodNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateShouldBeAvailable":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateShouldBeAvailable";
        errorReasonExp = "The discrete media right is not available.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateShouldBeAvailable"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaStateNotValid":        
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaStateNotValid";
        errorReasonExp = "The status of the discrete media right is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaStateNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:DuplicateAuthorizedFulfillmentMethodsNotAllowed";
        errorReasonExp = "The authorized fulfillment methods are not allowed.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DuplicateAuthorizedFulfillmentMethodsNotAllowed"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestDiscreteMediaLimitExceeded":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
        errorReasonExp = "The maximum number of discrete media rights allowed has been exceeded.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaLimitExceeded"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestContentProfileNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:ContentProfileNotValid";
        errorReasonExp = "The content profile is not valid";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentProfileNotValid"; 
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestUserIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:UserIdInvalid";
        errorReasonExp = "The user ID is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#UserIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
         break;

    case "BadRequestAccountIdNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdNotValid";
        errorReasonExp = "The account ID is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "BadRequestNodeIdInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:NodeIdInvalid";
        errorReasonExp = "The node ID is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeIdInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenNodeNotActive":
	   errorIDExp = "urn:dece:errorid:org:dece:NodeNotActive";
        errorReasonExp = "The node is not active.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#NodeNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "ForbiddenUserNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotActive";
        errorReasonExp = "The member is not active.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundUserNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:UserNotFound";
        errorReasonExp = "The user ID was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#UserNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "NotFoundNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:NotFound";
        errorReasonExp = "The requested resource was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#NotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ForbiddenAccountIdUnmatched":
    	   log.info "We are in ForbiddenAccountIdUnmatched Case";
        errorIDExp = "urn:dece:errorid:org:dece:AccountIdUnmatched";
        errorReasonExp = "The account ID does not match.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountIdUnmatched";  
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        log.info "Exit ForbiddenAccountIdUnmatched Case"
        break;

    case "ForbiddenAccountNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:AccountNotActive";
        errorReasonExp = "The account is not active.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#AccountNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    /*case "ForbiddenLockerViewAllConsentRequired":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:LockerViewAllConsentRequired";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:LockerViewAllConsentRequired";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;*/

    /*case "DSPForbiddenRightsTokenAccessNotAllowed":
        xmlData = myDBErrors.errGetIdInfo("DSPForbiddenRightsTokenAccessNotAllowed");
    	   if(xmlData.trim() != "")
	   {
	       try
	       {
	            sqlResult = new XmlSlurper().parseText(xmlData);
	       }	
	       catch (Throwable e)
	       {
	           log.info e;	
	       }
        }
        errorIDExp = "urn:dece:errorid:org:dece:";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
                 
        if(port != "443")
        {
        	port = ":" + port;
        }
        else
        {
        	port = "";
        }
                
        break;*/

    case "ForbiddenRightsTokenAccessNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenAccessNotAllowed";
        errorReasonExp = "The member does not have permission to access the content.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenAccessNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "BadRequestRightsTokenIDNotValid":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
        errorReasonExp = "The rights token ID is not valid.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenIDNotValid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";           
        break;

    case "ForbiddenRightsTokenNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotActive";
        errorReasonExp = "The rights token is not active.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotActive";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundRightsTokenNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:RightsTokenNotFound";
        errorReasonExp = "The rights token was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break; DiscreteMediaRightNotFound

	case "NotFoundDiscreteMediaRightNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightNotFound";
        errorReasonExp = "The discrete media right ID was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#RightsTokenNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    case "ConflictContentProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:MediaProfileNotValidForRightsToken";
        errorReasonExp = "The media profile is not valid for the rights token.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#MediaProfileNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;

   case "ConflictDiscreteMediaRightRemainingCountRestriction":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaRightRemainingCountRestriction";
        errorReasonExp = "Insufficient discrete media rights remain.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaRightRemainingCountRestriction";
        responseStatusExp = "HTTP/1.1 409 Conflict";  
        break;	           

    /*case "BadRequestDiscreteMediaProfileInvalid":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileInvalid";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileInvalid";
        responseStatusExp = "HTTP/1.1 400 Bad Request";        
        break;*/

    /*case "ConflictDiscreteMediaProfileNotValidForRightsToken":
        errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileNotValidForRightsToken";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileNotValidForRightsToken";
        responseStatusExp = "HTTP/1.1 409 Conflict";           
        break;*/

    /*case "NotFoundDiscreteMediaProfileDoesNotExist":
		errorIDExp = "urn:dece:errorid:org:dece:DiscreteMediaProfileDoesNotExist";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#DiscreteMediaProfileDoesNotExist";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;*/

    case "NotFoundPurchaseProfileNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:PurchaseProfileNotFound";
        errorReasonExp = "The purchase profile was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#PurchaseProfileNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    /*case "ForbiddenUserPrivlegeAccessRestricted":
        errorIDExp = "urn:dece:errorid:org:dece:UserPrivlegeAccessRestricted";
        errorReasonExp = "";    
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#UserPrivlegeAccessRestricted";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;*/

    case "ForbiddenContentIDNotActive":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotActive";
        errorReasonExp = "The content is not active.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotActive"; 
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;

    case "NotFoundContentIDNotFound":
        errorIDExp = "urn:dece:errorid:org:dece:ContentIDNotFound";
        errorReasonExp = "The content ID was not found.";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#ContentIDNotFound";
        responseStatusExp = "HTTP/1.1 404 Not Found";           
        break;

    /*case "ForbiddenUnratedContentBlocked":
    	   log.info "UNRATED"
        errorIDExp = "urn:dece:errorid:org:dece:Policy:UnratedContentBlocked";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:UnratedContentBlocked";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;*/

    /*case "ForbiddenRatingPolicyExists":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:RatingPolicyExists";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:RatingPolicyExists";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;*/

    /*case "ForbiddenAdultContentNotAllowed":
        errorIDExp = "urn:dece:errorid:org:dece:Policy:AdultContentNotAllowed";
        errorReasonExp = "";
        errorLinkExp   = "https://" + hostError + ":" + port + "/rest/$major/$minor/error/en/ErrorList.html#Policy:AdultContentNotAllowed";
        responseStatusExp = "HTTP/1.1 403 Forbidden";           
        break;*/
	                          
}

boolean iFailed = false;
log.info "Out from the Switch Case Block"
try
{
	log.info "responseStatusExp-->"+responseStatusExp;
	log.info "responseStatusAct-->"+responseStatusAct;
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	log.info "connectionStatusExp-->"+connectionStatusExp;
	log.info "connectionStatusAct-->"+connectionStatusAct;
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	log.info "contentTypeExp-->"+contentTypeExp;
	log.info "contentTypeAct-->"+contentTypeAct;
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

if(errorResponse == "ForbiddenMethodNotAllowed")
{
	if(HTTPMethod != "OPTIONS" && HTTPMethod != "HEAD")
	{
		try
		{
			assert errorBodyExp == resXML.trim();
		}
		catch(Throwable e)
		{
			log.info e;		
			log.info errorBodyExp;
			log.info resXML;
			iFailed = true;
		}
	}
}

if (myXML != null) 
{	
    if(errorResponse != "ForbiddenNodeNotActive" && errorResponse != "BadRequestDiscreteMediaStateNotValid" && HTTPMethod != "OPTIONS")
    {
         // Verify response sizes...
         assert myXML.Error.size() == 1;
         assert myXML.Error.Reason.size() == 1;
         assert myXML.Error.OriginalRequest.size() == 1;
         assert myXML.Error.ErrorLink.size() == 1;
    
         errorIDAct = myXML.Error.@ErrorID.toString();
         log.info "In IF Condition errorIDAct="+errorIDAct;
         errorReasonAct = myXML.Error.Reason.toString();
          log.info "In IF Condition errorReasonAct="+errorReasonAct;
         errorLinkAct = myXML.Error.ErrorLink.toString();
          log.info "In IF Condition errorLinkAct="+errorLinkAct;
         orgRequestAct = myXML.Error.OriginalRequest.toString().replace("%3A", ":");
          log.info "In IF Condition orgRequestAct="+orgRequestAct;
    }
    /*else if(errorResponse == "BadRequestRightsTokenIDNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[1].@ErrorID.toString();
         errorReasonAct = myXML.Error[1].Reason.toString();
         errorLinkAct = myXML.Error[1].ErrorLink.toString();
         orgRequestAct = myXML.Error[1].OriginalRequest.toString().replace("%3A", ":");
    }*/ 
    else if(errorResponse == "BadRequestDiscreteMediaStateNotValid")
    {
        // Verify response sizes...
         assert myXML.Error.size() == 2;
         assert myXML.Error.Reason.size() == 2;
         assert myXML.Error.OriginalRequest.size() == 2;
         assert myXML.Error.ErrorLink.size() == 2;
    
         errorIDAct = myXML.Error[0].@ErrorID.toString();
         errorReasonAct = myXML.Error[0].Reason.toString();
         errorLinkAct = myXML.Error[0].ErrorLink.toString();
         orgRequestAct = myXML.Error[0].OriginalRequest.toString().replace("%3A", ":");
    } 
    if(errorResponse != "ForbiddenNodeNotActive" && HTTPMethod != "OPTIONS")
    {                              
     	// ErrorId
    		try
     	{
     		log.info "errorIDAct-->"+errorIDAct;
     		log.info "errorIDExp-->"+errorIDExp;
     		assert errorIDAct == errorIDExp;
   	  	}
   		catch(Throwable e)
		{
			log.info e;		
			log.info errorIDExp;
			log.info errorIDAct;
			iFailed = true;
		} 
	          
     	if(errorResponse != "NotFoundNotFound")
     	{
     		// ErrorReason
	     	try
	     	{
	     		assert errorReasonAct == errorReasonExp;
			}
	     	catch(Throwable e)
			{
				log.info e;		
				log.info errorReasonExp;
				log.info errorReasonAct;
				iFailed = true;
			}
     	}
	
     	// ErrorLink
     	try
     	{
     		//assert errorLinkAct == errorLinkExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info errorLinkExp;
			log.info errorLinkAct;
			iFailed = true;
		}
		// OriginalRequest
		try
     	{
     		//assert orgRequestAct == orgRequestExp;
     	}
     	catch(Throwable e)
		{
			log.info e;		
			log.info orgRequestExp;
			log.info orgRequestAct;
			iFailed = true;
		}		
    }	
} 



assert iFailed == false;

log.info 'Woohoo!';

]]></script></con:config></con:testStep><con:properties><con:property><con:name>ResponseXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece">
   <Error ErrorID="urn:dece:error:MalformedRequest">
      <Reason Language="en-us">405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.</Reason>
      <OriginalRequest>urn:dece:type:null</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:059F115C893654ECE05305991F0A30AE</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ResponseStatus</con:name><con:value>HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>ConnectionStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>ContentType</con:name><con:value>text/xml</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestAuthorizedFulfillmentMethodNotValid</con:value></con:property><con:property><con:name>HTTPMethod</con:name><con:value>PUT</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:059F11AF4AEE6014E05307991F0A4B5C</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>059F11AF4AEE6014E05307991F0A4B5C</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdatePut with Duplicate AuthorizedFulfillmentMethods" searchProperties="true" id="9542d336-abc2-4b2d-9d84-71b3373da465"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="11092153-57fe-477c-b587-55b7c2e0ba22"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" id="f4e82535-31d5-4b77-934c-018e10217e56"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdatePut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <!--<AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>-->
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="68fcef2b-dbfa-4387-9ea8-f3d8bd956338"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "PUT");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="5b2653d0-3698-4007-bbc3-7a4c22df404f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="2c597154-d1df-4c34-af83-c07d1d827eb1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error Codes</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00029_DiscreteMediaRightCreate_ERRC_400_BadRequest_DuplicateAuthorizedFulfillmentMethodsNotAllowed</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59F616CE251E2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59F616CE251E2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDuplicateAuthorizedFulfillmentMethodsNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59EE1F4A92515D7E0401F0A079933F5</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59EE1F4A92515D7E0401F0A079933F5</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdatePut with Invalid AuthorizedFulfillmentMethod" searchProperties="true" id="c0a459a7-a3ea-4d7d-9567-3aba3aa96080"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="5e8bff25-247e-4c84-8457-8b5679f91054"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" id="d191b423-0fca-47af-9e84-1471fbe02119"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdatePut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>${#Project#NodeUserId}</RequestingUserID>
   <RightsTokenID>${#TestCase#RightsTokenId}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discreteemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <!--<AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>-->
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="57179402-5d06-48c0-974c-cedb4b7b39ff"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePut - DiscreteMediaRightUpdatePut').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "PUT");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="d766037d-cd24-4484-869a-1109893440cb"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="661c0baa-3053-49a3-a4ac-290d7bf27c0d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Error Codes_P1_TestCases_mi</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00021_DiscreteMediaRightDelete_ERRC_400_BadRequest_AuthorizedFulfillmentMethodNotValid</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>059F115C893654ECE05305991F0A30AE</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:059F115C893654ECE05305991F0A30AE</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestAuthorizedFulfillmentMethodNotValid</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:059F11AF4AEE6014E05307991F0A4B5C</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:nsm</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>059F11AF4AEE6014E05307991F0A4B5C</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DISCRETE_MEDIA_TOKEN Table for DELETE" searchProperties="true" id="08e336f5-a4d9-4a8c-bb17-c33ccc17f0c1"><con:settings/><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN Table for DELETE" id="75c4bb9c-0843-4f1e-9abe-5fa8ddca1507" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
String userOid = testProject.getPropertyValue("UserOid");
String nodeOid = testProject.getPropertyValue("NodeOid");
String leaseType = testProject.getPropertyValue("LeaseType");
String leaseStatus = "deleted";//testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");
String closedBy = testCase.getPropertyValue("ClosedBy");

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(dmt.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmt.ACCOUNT_OID)),
to_char(rawtohex(dmt.USER_OID)),
to_char(rawtohex(dmt.CREATED_BY)),
to_char(dmt.STATE),
to_char(dmt.STATUS),
to_char(dmt.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmt.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmt.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID,
to_char(rawtohex(dmt.CLOSED_BY)),
to_char(dmt.CLOSED_DATE, 'yyyy-mm-dd hh:mi:ss') UPDATED_DATE
from 
DISCRETE_MEDIA_TOKEN dmt  
where 
dmt.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmt.ACCOUNT_OID = hextoraw('$accountOid')
and
dmt.STATE = 'available'""";
	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	RIGHTS_TOKEN_OID = it[0];
	ACCOUNT_OID = it[1];
	USER_OID = it[2];
	CREATED_BY = it[3];
	TYPE = it[4];
	STATUS = it[5];
	EXPIRATION_DATE = it[6];
	CREATED_DATE = it[7];
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
	CLOSED_BY = it[9];
	CLOSED_DATE = it[10];
}

try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert CLOSED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CLOSED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

try
{
	assert null == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info USER_OID;	
	iFailed = true;
}

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	//assert closedBy == CLOSED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CLOSED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>ALID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>AccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsLockerOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeUserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseAccount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D6E599E11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00062_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_Case_Insensitive</con:value></con:property><con:property><con:name>ClosedBy</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE" searchProperties="true" id="b0d30375-7a52-4b13-b386-2ad6ab2d1a6e"><con:settings/><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE" id="b46a75f3-62bb-4ad8-968d-3fe964fe00f7" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
def userOid = context.expand( '${#Project#UserOid}' )
//String userOid = "$userOid";//testProject.getPropertyValue("UserOid");
log.info userOid
//String nodeOid = "3232";//testProject.getPropertyValue("NodeOid");
def nodeOid = context.expand( '${#Project#NodeOid}' )

String leaseType = testProject.getPropertyValue("LeaseType");
String leaseStatus = "deleted";//testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(dmth.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmth.ACCOUNT_OID)),
to_char(rawtohex(dmth.USER_OID)),
to_char(rawtohex(dmth.CREATED_BY)),
to_char(dmth.STATE),
to_char(dmth.STATUS),
to_char(dmth.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmth.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmth.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID
from 
DISCRETE_MEDIA_TOKEN_HISTORY dmth  
where 
dmth.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmth.ACCOUNT_OID = hextoraw('$accountOid')
and
dmth.STATUS = 'deleted'""";

log.info sqlStr
	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	RIGHTS_TOKEN_OID = it[0];
	ACCOUNT_OID = it[1];
	USER_OID = it[2];
	CREATED_BY = it[3];
	TYPE = it[4];
	STATUS = it[5];
	EXPIRATION_DATE = it[6];
	CREATED_DATE = it[7];
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
}

log.info "RIGHTS_TOKEN_OID=="+RIGHTS_TOKEN_OID
log.info "ACCOUNT_OID=="+ACCOUNT_OID;
log.info "STATUS=="+STATUS;


try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

try
{
	assert null == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info USER_OID;	
	iFailed = true;
}

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>ALID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>CID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">3232</con:value></con:property><con:property><con:name>AccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsLockerOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeAccountOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeUserOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseTime</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseAccount</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PurchaseInfoPurchaseUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D6E599E11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00062_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_Case_Insensitive</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate PURCHASE_PROFILE Table for DELETE" searchProperties="true" id="3eee4394-31da-48fb-95aa-f3db509eac46"><con:settings/><con:testStep type="groovy" name="Validate PURCHASE_PROFILE Table for DELETE" id="f3023300-db95-4bfb-87a3-5c8b04452509" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

testProject.setPropertyValue("DiscreteMediaRightsRemainingHD", "0");
testProject.setPropertyValue("DiscreteMediaRightsRemainingSD", "0");
testProject.setPropertyValue("DiscreteMediaRightsRemainingPD", "0");

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testSuite.getPropertyValue("ExpectedCount");
Integer recordCountAct = 0;
String purchasedMediaProfileHD = testProject.getPropertyValue("PurchasedMediaProfileHD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfileSD = testProject.getPropertyValue("PurchasedMediaProfileSD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfilePD = testProject.getPropertyValue("PurchasedMediaProfilePD").split("urn:dece:type:mediaprofile:")[1];
String discreteMediaRightsRemainingHD = testProject.getPropertyValue("DiscreteMediaRightsRemainingHD");
String discreteMediaRightsRemainingSD = testProject.getPropertyValue("DiscreteMediaRightsRemainingSD");
String discreteMediaRightsRemainingPD = testProject.getPropertyValue("DiscreteMediaRightsRemainingPD");
String purchaseProfileCanDownLoad = testCase.getPropertyValue("PurchaseProfileCanDownLoad");
String purchaseProfileCanStream = testCase.getPropertyValue("PurchaseProfileCanStream");

def discreteMediaRightsRemaining = null;

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(RIGHTS_TOKEN_OID)),
to_char(DOWNLOAD),
to_char(STREAM),
to_char(DISCRETE_MEDIA_RIGHTS_REMAIN),
to_char(PURCHASED_CONTENT_PROFILE),
to_char(rawtohex(UPDATED_DATE))
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid')
order by
PURCHASED_CONTENT_PROFILE""";
	
sql.eachRow(sqlStr){
	recordCountAct = recordCountAct + 1;
	RIGHTS_TOKEN_OID = it[0];
	DOWNLOAD = it[1];
	STREAM = it[2];
	DISCRETE_MEDIA_RIGHTS_REMAIN = it[3];
	PURCHASED_CONTENT_PROFILE = it[4];
	UPDATED_DATE = it[5];

	try
	{
		assert UPDATED_DATE != null;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info "Expected not NULL";
		log.info UPDATED_DATE;	
		iFailed = true;
	}
	
	try
	{
		assert rightsTokenOid == RIGHTS_TOKEN_OID;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info rightsTokenOid;
		log.info RIGHTS_TOKEN_OID;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanDownLoad == DOWNLOAD;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanDownLoad;
		log.info DOWNLOAD;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanStream == STREAM;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanStream;
		log.info STREAM;	
		iFailed = true;
	}

	if(recordCountExp == '1')
	{
		purchasedMediaProfile = purchasedMediaProfilePD;
		discreteMediaRightsRemaining = discreteMediaRightsRemainingPD;	
	}
	else if(recordCountExp == '2')
	{
		if(recordCountAct == 1)
		{
			purchasedMediaProfile = purchasedMediaProfileHD;	
			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;		
		}
		else if(recordCountAct == 2)
		{
			purchasedMediaProfile = purchasedMediaProfileSD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;			
		}
	}
	else if(recordCountExp == '3')
	{ 
		if(recordCountAct == 1)
		{
			purchasedMediaProfile = purchasedMediaProfileHD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;				
		}
		else if(recordCountAct == 2)
		{
			purchasedMediaProfile = purchasedMediaProfilePD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingPD;	
		}
		else if(recordCountAct == 3)
		{
			purchasedMediaProfile = purchasedMediaProfileSD;
			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;
		}
	}
	if(DISCRETE_MEDIA_RIGHTS_REMAIN == null)
	{
		DISCRETE_MEDIA_RIGHTS_REMAIN = '0';
	}

	try
	{
		assert discreteMediaRightsRemaining == DISCRETE_MEDIA_RIGHTS_REMAIN;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info discreteMediaRightsRemaining;
		log.info DISCRETE_MEDIA_RIGHTS_REMAIN;		
		iFailed = true;
	}	

	try
	{
		assert purchasedMediaProfile == PURCHASED_CONTENT_PROFILE;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchasedMediaProfile;
		log.info PURCHASED_CONTENT_PROFILE;	
		iFailed = true;
	}
}
try
{
	assert recordCountExp == recordCountAct.toString();
}
catch(Throwable e)
{
	log.info e;
	log.info recordCountExp;
	log.info recordCountAct;	
	iFailed = true;
}
def contentProfile = testCase.getPropertyValue("ContentProfile").split(":")[4];

sqlStr = """select 
to_char(rawtohex(PURCHASE_PROFILE_OID))
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid')
and
PURCHASED_CONTENT_PROFILE = '$contentProfile'""";

def purchaseProfileOid;
	
sql.eachRow(sqlStr){
	purchaseProfileOid = it[0];
}

testCase.setPropertyValue("PurchaseProfileOid", purchaseProfileOid);

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));

assert iFailed == false;

sql.close();

testProject.setPropertyValue("DiscreteMediaRightsRemainingHD", "1");
testProject.setPropertyValue("DiscreteMediaRightsRemainingSD", "0");
testProject.setPropertyValue("DiscreteMediaRightsRemainingPD", "0");

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>ExpectedCount</con:name><con:value>3</con:value></con:property><con:property><con:name>PurchaseProfileCanStream</con:name><con:value>Y</con:value></con:property><con:property><con:name>PurchaseProfileCanDownload</con:name><con:value>Y</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00062_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_Case_Insensitive</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C102D6CFA0511A4E05307991F0A9529</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE" searchProperties="true" id="ff65f4ca-2606-4878-b5d4-c5ed831e7f3b"><con:settings/><con:testStep type="groovy" name="Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE" id="c05b71d4-6420-48a2-9337-c446e2a94ba2" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testCase.getPropertyValue("ExpectedCount");
String purchaseProfileOid = testCase.getPropertyValue("PurchaseProfileOid");
Integer recordCountAct = 0;

boolean iFailed = false;

sqlStr = """select 
count(*)
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID = hextoraw('$purchaseProfileOid')"""
	
sql.eachRow(sqlStr){
	recordCountAct = it[0];
}
	try
	{
		assert recordCountExp == recordCountAct.toString();
	}
	catch(Throwable e)
	{
		log.info e;
		log.info recordCountExp;
		log.info recordCountAct;	
		iFailed = true;
	}

	assert iFailed == false;

def fmExp = new Object[2];
fmExp[0] = null;
fmExp[1] = null;

def fmAct = new Object[2];

sqlStr = """select 
AUTHORIZED_FULFILLMENT_METHOD
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID = hextoraw('$purchaseProfileOid')
order by
AUTHORIZED_FULFILLMENT_METHOD"""

Integer i = 0;
	
sql.eachRow(sqlStr){
	fmAct[i] = it[0];	
	i = i + 1;	
}

assert fmExp == fmAct;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>ExpectedCount</con:name><con:value>0</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P1_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00062_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_Case_Insensitive</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C102D6CFA0511A4E05307991F0A9529</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdateGet" searchProperties="true" id="94f031a2-b0f7-4c07-af5d-34d56a0d9409"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="6c6762e0-db37-4b3d-9de9-e802614be7fc"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet" id="31ac8dfc-2cd8-4785-a8d9-763dc4b34bcf"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdateGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="0b2d0d08-725e-47d9-bd4c-0f944361dc74"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateGet - DiscreteMediaRightUpdateGet').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "GET");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="eeab3493-1211-44c6-98eb-34e7761e0886"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="e57885c5-a62b-4d17-9b89-240f53dac628"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00003_DiscreteMediaRightCreate_METH_Invocation_with_method_GET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59F616CE2EDE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59F616CE2EDE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59F616CE2FBE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59F616CE2FBE2EDE0401F0A05993F9B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdatePost" searchProperties="true" id="b6a6f372-2fb9-4988-b831-9dc6f9369208"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="b70497f3-67ad-4f07-a9a0-632ac2448059"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost" id="29ede110-e3f8-4e99-804b-9a494927a7fb"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="56103cbc-e695-4ba2-b015-5e832ca5d4e8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdatePost - DiscreteMediaRightUpdatePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="01ca4b3d-51c9-40f5-b36b-c673505510d7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="3cd37bc6-3d7d-47ad-808d-a8efbb188768"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00004_DiscreteMediaRightCreate_METH_Invocation_with_method_POST</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59F616CE2FFE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59F616CE2FFE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59F616CE30DE2EDE0401F0A05993F9B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T03:59:10</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59F616CE30DE2EDE0401F0A05993F9B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdateDelete" searchProperties="true" id="f15b4b65-9db6-42e3-9e11-1ed8a786de51"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="51e84b05-7172-439e-895a-27e19d837681"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete" id="2be94f09-c52d-40fb-b483-7e6ad07b20a3"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdateDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="bd322a5e-2de4-42cc-bee0-3211ba3dcab2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateDelete - DiscreteMediaRightUpdateDelete').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "DELETE");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="8fd6dc9d-bda1-44d1-aec4-3a0280c0c922"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="eb4fadbb-a0d5-40fc-a777-fc481cb9c205"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00005_DiscreteMediaRightCreate_METH_Invocation_with_method_DELETE</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59B68D8D151B95DE0401F0A05995674</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59B68D8D151B95DE0401F0A05995674</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59B68D8D15FB95DE0401F0A05995674</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:00:41</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59B68D8D15FB95DE0401F0A05995674</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdateOptions" searchProperties="true" id="557e437d-acb4-490f-bda4-55f25ebeeee1"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="74eb9c8d-ad72-4152-ba8f-699198ec8f10"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions" id="004d581b-146c-454b-b862-80fd2ab70809"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdateOptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="70408627-292a-410b-991e-e27865b64873"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateOptions - DiscreteMediaRightUpdateOptions').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}

valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
//valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
//valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "OPTIONS");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="d865f8b9-a0af-4c51-935a-1a3575510d08"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="2cb3cc92-c546-482a-89fa-4febca1baba7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00006_DiscreteMediaRightCreate_METH_Invocation_with_method_OPTIONS</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59B68D8D164B95DE0401F0A05995674</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59B68D8D164B95DE0401F0A05995674</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59B68D8D172B95DE0401F0A05995674</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:01:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59B68D8D172B95DE0401F0A05995674</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightUpdateHead" searchProperties="true" id="bdbf2c3f-04c4-4c68-93cc-3afe95479fee"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="8aa6e579-4d7a-411b-a6d1-2211c27f6d6e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead" id="d7f4c620-0e46-41a1-8462-ae4e034d9c9b"><con:settings/><con:config service="DiscreteMediaRightUpdate" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightUpdateHead" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightUpdate" id="a882ef3d-1adb-4756-87a5-053414e3ce5c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightUpdate');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightUpdateHead - DiscreteMediaRightUpdateHead').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "HEAD");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="0c3f1fd1-cf14-40fb-88c5-34adfbd639f6"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="03a69c0f-378f-4e14-b425-cdc305224af7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00007_DiscreteMediaRightCreate_METH_Invocation_with_method_HEAD</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A59B68D8D175B95DE0401F0A05995674</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A59B68D8D175B95DE0401F0A05995674</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A59B68D8D183B95DE0401F0A05995674</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:03:22</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A59B68D8D183B95DE0401F0A05995674</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightConsumePost" searchProperties="true" id="ea61e1ef-c088-4022-8222-e4dbb86681e1"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="942fc542-ded4-4c61-8bab-332b0d5d636e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost" id="d9d0228d-4d62-4f1f-9c7f-b0a8e3619775"><con:settings/><con:config service="DiscreteMediaRightConsume" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/{ContentProfile}/DiscreteMediaRight/{DiscreteMediaProfile}/Consume" methodName="DiscreteMediaRightConsumePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost" mediaType="application/xml" postQueryString="false" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightConsume" id="42cb0aaf-a175-443c-af04-126604f2bb8d"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	responseStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost').httpRequest.response.responseHeaders["#status#"][0]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connectionStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost').httpRequest.response.responseHeaders["Connection"][0];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentTypeAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightConsumePost - DiscreteMediaRightConsumePost').httpRequest.response.responseHeaders["Content-Type"][0];	
}
catch(Throwable e)
{
	log.info e;
}

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

def hostError = "qa.q.uvuu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

switch (errorResponse) 
{
	case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "NotFoundDiscreteMediaRightNotFound":        
        responseStatusExp = "HTTP/1.1 404 Not Found";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "BadRequestDiscreteMediaRightAlreadyConsumedOrLeased":
        responseStatusExp = "HTTP/1.1 400 Bad Request";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

assert iFailed == false;

log.info 'Woohoo!';
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="4425595c-cd12-4b71-b5e7-005246ddcd2c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="23e5aaf8-6dd2-40d4-b942-f4d62edce8dd"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">End To End</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00074_DMRCreate_DMRConsume_DMRDelete</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A54E5831EA1BDFDBE0401F0A0799675B</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A54E5831EA1BDFDBE0401F0A0799675B</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A54E5831E987DFDBE0401F0A0799675B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A54E5831E987DFDBE0401F0A0799675B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightLeaseRenewPut" searchProperties="true" id="0e254ad2-5afb-438c-9f43-17119d4f796d"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="07d9b7e7-6dc5-4aa9-8ea1-d9f5a51aba70"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut" id="f7e24eb9-ebd9-4bf1-9d27-0369724978b0"><con:settings/><con:config service="DiscreteMediaRightLeaseRenew" resourcePath="/rest/$major/$minor/Account/{NodeAccountId}/RightsToken/DiscreteMediaRight/{DiscreteMediaTokenId}/Lease/Renew" methodName="DiscreteMediaRightLeaseRenewPut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="3232_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeAccountId" value="${#Project#NodeAccountId}"/>
  <con:entry key="DiscreteMediaTokenId" value="${#TestCase#DiscreteMediaTokenId}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightLeaseRenew" id="714c0e6c-91c3-498f-adf4-183d028512b4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	responseStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut').httpRequest.response.responseHeaders["#status#"][0]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connectionStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut').httpRequest.response.responseHeaders["Connection"][0];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentTypeAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightLeaseRenewPut - DiscreteMediaRightLeaseRenewPut').httpRequest.response.responseHeaders["Content-Type"][0];	
}
catch(Throwable e)
{
	log.info e;
}

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

def hostError = "qa.q.uvuu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

switch (errorResponse) 
{
	case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "NotFoundDiscreteMediaRightNotFound":        
        responseStatusExp = "HTTP/1.1 404 Not Found";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "BadRequestDiscreteMediaRightAlreadyConsumedOrLeased":
        responseStatusExp = "HTTP/1.1 400 Bad Request";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

assert iFailed == false;

log.info 'Woohoo!';
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="aaca08c6-26ea-49e9-bcb8-c4b8dcb894fc"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="e4bc179b-6923-42d0-9666-80896b3a56b2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">End To End</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00074_DMRCreate_DMRLeaseCreate_DMRLeaseRenew_DMRUpdate</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A54EECA4EB7E5FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A54EECA4EB7E5FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A54EECA4EB8C5FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A54E5831E9EDDFDBE0401F0A0799675B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightGetGet" searchProperties="true" id="beab9290-2711-41ce-ae93-3b9a40a0b923"><con:settings/><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightGet" id="2793c433-24da-4ecf-8b13-28fca2113a65"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightGetGet - DiscreteMediaRightGetGet').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	responseStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightGetGet - DiscreteMediaRightGetGet').httpRequest.response.responseHeaders["#status#"][0]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connectionStatusAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightGetGet - DiscreteMediaRightGetGet').httpRequest.response.responseHeaders["Connection"][0];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentTypeAct = testRunner.testCase.getTestStepByName('DiscreteMediaRightGetGet - DiscreteMediaRightGetGet').httpRequest.response.responseHeaders["Content-Type"][0];	
}
catch(Throwable e)
{
	log.info e;
}

def host = testProject.getPropertyValue("targetHost");
def port = testProject.getPropertyValue("targetPort");
def accountId = testProject.getPropertyValue("NodeAccountId");
def rightsTokenId = testCase.getPropertyValue("RightsTokenId");
def contentProfile = testCase.getPropertyValue("ContentProfile");
def discreteMediaProfile = testCase.getPropertyValue("DiscreteMediaProfile");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

def hostError = "qa.q.uvuu.com";

String errorIDExp = null;
String errorReasonExp = null;
String errorLinkExp = null;
String orgRequestExp = null;
String responseStatusExp = null;
String connectionStatusExp = null;
String contentTypeExp = null;
String errorBodyExp = null;

switch (errorResponse) 
{
	case "OK":        
        responseStatusExp = "HTTP/1.1 200 OK";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "NotFoundDiscreteMediaRightNotFound":        
        responseStatusExp = "HTTP/1.1 404 Not Found";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;

     case "BadRequestDiscreteMediaRightAlreadyConsumedOrLeased":
        responseStatusExp = "HTTP/1.1 400 Bad Request";          
        contentTypeExp = "application/xml";
        connectionStatusExp = "Keep-Alive";
        break;
}

boolean iFailed = false;

try
{
	assert responseStatusExp == responseStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info responseStatusExp;
	log.info responseStatusAct;
	iFailed = true;
}

try
{
	//assert connectionStatusExp == connectionStatusAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info connectionStatusExp;
	log.info connectionStatusAct;
	iFailed = true;
}

try
{
	//assert contentTypeExp == contentTypeAct;
}
catch(Throwable e)
{
	log.info e;		
	log.info contentTypeExp;
	log.info contentTypeAct;
	iFailed = true;
}

assert iFailed == false;

log.info 'Woohoo!';
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">End To End</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00074_DMRCreate_DMRUpdate_DMRDelete_DMRGet</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>A54EECA4EBC35FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:A54EECA4EBC35FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:A54EECA4EBD15FB0E0401F0A0799203C</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>A54EECA4EBD15FB0E0401F0A0799203C</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteGet" searchProperties="true" id="2acc5009-991e-4f74-bfca-2aa4eef8d4a5"><con:settings/><con:testStep type="groovy" name="Set pem" id="ad2559dd-9018-4423-897f-79f6c8aebd5e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet" id="b11a2251-8c48-4852-9663-a924e5f39b57"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet" mediaType="application/xml" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="05b1c009-086d-49fc-b0ac-c822eeaf6aaa"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteGet - DiscreteMediaRightDeleteGet').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "GET");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00005_DiscreteMediaRightDelete_METH_Invocation_with_method_GET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36D0F5CC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36D0F5CC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36E7E50C5010E05307991F0AA0BB</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:00:41</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36E7E50C5010E05307991F0AA0BB</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ad2559dd-9018-4423-897f-79f6c8aebd5e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeletePost" searchProperties="true" id="b5686899-dcce-43f6-9277-d7df5ea0f147"><con:settings/><con:testStep type="groovy" name="Set pem" id="ed188aec-c115-4a2a-b2b8-18dd4190d0f5"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost" id="671e9930-055d-429a-b11a-122ba1c2a480"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeletePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="354c9b91-baee-48b7-b3ca-236b1461036c"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePost - DiscreteMediaRightDeletePost').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "POST");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00004_DiscreteMediaRightDelete_METH_Invocation_with_method_POST</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36D88C5A5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36D88C5A5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D0F2E6500BE05307991F0A35BF</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T03:59:10</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D0F2E6500BE05307991F0A35BF</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ed188aec-c115-4a2a-b2b8-18dd4190d0f5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeletePut" searchProperties="true" id="4cbf30c0-3541-43ed-ac94-4a59d3890edd"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="31e8df29-91e1-4656-9cbe-1e5e4055e901"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="8b9e5630-5d3e-4275-83c2-eb9aef4ee2f9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut" id="0e2ea58e-bbc5-4de7-b2ff-06718ba37d2b"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeletePut" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 405 Method Not Allowed")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="86c62d13-cd48-4b7b-ba5c-ff7b6603f0f1" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeletePut - DiscreteMediaRightDeletePut').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
//valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "PUT");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="7da06cae-2df0-4769-a99d-fe38ffdf102f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="6af91b11-f54c-40f0-800a-333c671b645f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00003_DiscreteMediaRightDelete_METH_Invocation_with_method_PUT</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NodeRole</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36E7E1F85010E05307991F0AA0BB</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36E7E1F85010E05307991F0AA0BB</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D88C4B5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D88C4B5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>8b9e5630-5d3e-4275-83c2-eb9aef4ee2f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteOptions" searchProperties="true" id="44010d63-a9b2-42b1-baff-181327665dc5"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="cc26d5f1-402b-4804-9d3a-9ac1ae656647"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="ba17887f-e526-4a0b-9569-b2dc99457dca"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions" id="8729b105-f03f-42b1-9954-d6a85e1c696c"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteOptions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="474ccb8b-8885-42db-8a3f-302e887e0e3b"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteOptions - DiscreteMediaRightDeleteOptions').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}

valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
//valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "OPTIONS");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="4248e51e-51d2-4919-8072-d2a412089287"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="e959d9b8-b2b0-4afc-b77f-c14d00bca5f4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00006_DiscreteMediaRightDelete_METH_Invocation_with_method_OPTIONS</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36F381E65018E05307991F0A3FB0</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36F381E65018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D0F5EC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:01:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D0F5EC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ba17887f-e526-4a0b-9569-b2dc99457dca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteHead" searchProperties="true" id="bc9ab7fc-0ba5-442e-992b-ddb4cc36982b"><con:settings/><con:testStep type="groovy" name="Call Validations only for Valid Test Cases" disabled="true" id="e2746f6b-f9fd-43f1-af48-a74f765f7aec"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep1 = testCase.getTestStepByName("Call Verify Content Location and Get DiscreteMediaTokenOid");
def errorResponse = testCase.getPropertyValue("ErrorResponse");

if(errorResponse != "Created")
{
	testStep1.setDisabled(true);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="0e68bc37-1492-4175-ad0a-cef002ac6879"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead" id="37205a55-2d3b-45df-bcac-c64ba0772c15"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteHead" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete" id="19267467-4fc8-4fb2-bd83-b8caaa2bdbae"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteHead - DiscreteMediaRightDeleteHead').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "HEAD");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get DiscreteMediaTokenOid" disabled="true" id="1dc7e796-fbd3-4bf5-a0eb-f68d372b014e"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testSuite.getTestCaseByName("Verify Content Location and Get DiscreteMediaTokenOid");
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run( null, false);

assert "$runnerCommonTC.status" != "FAILED";

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 

callingTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
callingTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Enable Test Steps" disabled="true" id="11ca490a-1775-4ce3-a4a2-3e0302ea86d8"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testProject.getTestSuiteByName("CommonSteps").getTestCaseByName('Enable Test Steps');
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestSuiteName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Authentication_P2_TestCases</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TC_DECE_00007_DiscreteMediaRightDelete_METH_Invocation_with_method_HEAD</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36F384F45018E05307991F0A3FB0</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36F384F45018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D011025009E05307991F0A0B6A</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:03:22</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D011025009E05307991F0A0B6A</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>0e68bc37-1492-4175-ad0a-cef002ac6879</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate_FUNC_RTL_For_Multiple_DMR" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ab530a76-9dac-471d-b8d8-5627e1ac2374"><con:description>Create the RightsTokenCreate API transaction. Verify that the transactionis a fully populated rights token.  Ensure all required field is included in the create request. Send the RightsTokenCreate API transaction. Verify that the token was created successfully and that it contains the ID for the created rights token. Response should pass back a RightsTokenID.</con:description><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Project Property Values"><con:settings/><con:config><script>import groovy.sql.Sql;
import dbUtils.dbUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

sqlStrCountCID = """select count(*) from
md_basic
where
content_id = 'urn:dece:cid:org:200002'""";
sql.eachRow(sqlStrCountCID){
	countCID = it[0];
};
if(countCID == 0)
{
sqlStrCID = """insert into 
md_basic (
BASIC_OID,
CONTENT_ID,
STATUS,
RELEASE_YEAR,
WORK_TYPE,
CREATED_DATE,
CREATED_BY,
run_length,
NORMALIZED_CONTENT_ID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'active',
'01-JAN-01',
'Album',
sysdate,
'29',
'36930600000',
'urn:dece:cid:org:200002'
)""";

sql.execute(sqlStrCID);
}

sqlStrCountALID = """select count(*) from
asset_map_lp
where
alid = 'urn:dece:alid:org:200002'""";

sql.eachRow(sqlStrCountALID){
	countALID = it[0];
}

if(countALID == 0)
{
sqlStrALID = """insert into 
asset_map_lp (
MAP_LP_OID,
CID,
ALID,
STATUS,
CREATED_DATE,
CONTENT_PROFILE,
ASSET_STREAM_ALLOWED,
NORMALIZED_ALID,
NORMALIZED_CID
)
values
(
'200002',
'urn:dece:cid:org:200002',
'urn:dece:alid:org:200002',
'active',
sysdate,
'hd',
'Y',
'urn:dece:alid:org:200002',
'urn:dece:cid:org:200002')""";

sql.execute(sqlStrALID);
}
def ALID;
ALID = 'urn:dece:alid:org:200002';
def CID;
CID = 'urn:dece:cid:org:200002';
def soldAsCID;
soldAsCID = 'urn:dece:cid:org:200002';

sqlStrBIDCount = """select
count(bundle_id)
from
bundle
where
bundle_id = 'urn:dece:bid:200002'""";

Integer countBID; 
sql.eachRow(sqlStrBIDCount) {
	countBID = it[0];
}

if(countBID == 0)
{
sqlStrBID = """insert into 
bundle (
STATUS,
CREATED_DATE,
BUNDLE_ID,
BUNDLE_OID,
CREATED_BY,
NORMALIZED_BUNDLE_ID
)
values
(
'active',
sysdate,
'urn:dece:bid:200002',
'200002',
'29',
'urn:dece:bid:200002')""";

sql.execute(sqlStrBID);
}

def soldAsBundleId = 'urn:dece:bid:200002';

sqlStrBOID = """select
bundle_oid
from
bundle
where
bundle_id = '$soldAsBundleId'"""

def BOID;
sql.eachRow(sqlStrBOID) {
	BOID = it[0];
}

testProject.setPropertyValue("ALID", ALID);
testProject.setPropertyValue("CID", CID);
testProject.setPropertyValue("SoldAsDisplayName", "Avatar");
testProject.setPropertyValue("SoldAsDisplayNameLanguage", "en-US");
testProject.setPropertyValue("SoldAsCID", soldAsCID);
testProject.setPropertyValue("SoldAsBundleId", soldAsBundleId);
testProject.setPropertyValue("SoldAsBundleOid", BOID.toString());
testProject.setPropertyValue("PurchasedMediaProfile", "urn:dece:type:mediaprofile:pd");

testProject.setPropertyValue("PurchasedMediaProfileHD", "urn:dece:type:mediaprofile:hd");
testProject.setPropertyValue("PurchasedMediaProfileSD", "urn:dece:type:mediaprofile:sd");
testProject.setPropertyValue("PurchasedMediaProfilePD", "urn:dece:type:mediaprofile:pd");

def v2 = context.expand( '${#Project#versionMinor}' )

 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){
 testProject.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
 testProject.setPropertyValue("DiscreteMediaProfileInURL", "urn:dece:type:discretemediaformat:bluray:packaged");
 }
 else
 {
  testProject.setPropertyValue("ContentProfile", "urn%3Adece%3Atype%3Amediaprofile%3Ahd");
  testProject.setPropertyValue("DiscreteMediaProfileInURL", "urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged");
 }

testProject.setPropertyValue("DiscreteMediaProfile", "urn:dece:type:discretemediaformat:bluray:packaged");

testProject.setPropertyValue("DiscreteMediaProfileHD", "urn:dece:type:discretemediaformat:bluray:packaged");
testProject.setPropertyValue("DiscreteMediaProfileSD", "urn:dece:type:discretemediaformat:dvd:cssrecordable");
testProject.setPropertyValue("DiscreteMediaProfilePD", "urn:dece:type:discretemediaformat:securedigital");

testProject.setPropertyValue("PurchaseProfileBurnsLeft", "1");

testProject.setPropertyValue("PurchaseProfileBurnsLeftHD", "1");
testProject.setPropertyValue("PurchaseProfileBurnsLeftSD", "0");
testProject.setPropertyValue("PurchaseProfileBurnsLeftPD", "0");

testProject.setPropertyValue("PurchaseProfileCanDownLoad", "true");
testProject.setPropertyValue("PurchaseProfileCanStream", "true");
testProject.setPropertyValue("LicenseAcqBaseLoc", "ns3.google.com");
testProject.setPropertyValue("FulfillmentWebLoc1Location", "https://dl.bestbuy.com/wl1");
testProject.setPropertyValue("FulfillmentWebLoc1Preference", "1");
testProject.setPropertyValue("FulfillmentManifestLoc1Location",  "https://dl.bestbuy.com/ml1");
testProject.setPropertyValue("FulfillmentManifestLoc1Preference", "1");
testProject.setPropertyValue("PurchaseInfoRetailerID", "urn:dece:org:org:dece:"+testProject.getPropertyValue("nodeid"));
def retailerTransactionId = (int)(Math.random() * 1000000);
testProject.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testCase.setPropertyValue("RetailerTransactionId", retailerTransactionId.toString());
testProject.setPropertyValue("PurchaseInfoPurchaseAccount", "urn:dece:accountid:org:dece:" + testProject.getPropertyValue("NodeAccountOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseUser", "urn:dece:userid:org:dece:" + testProject.getPropertyValue("NodeUserOid"));
testProject.setPropertyValue("PurchaseInfoPurchaseTime", "2010-11-29T08:44:01Z");

// DELETE

sqlStr = """delete from md_basic_rating_set where basic_oid = (select basic_oid from md_basic where content_id = '$CID')""";
sql.execute(sqlStr);

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));

//INSERT

def contentRatingOid = testCase.getPropertyValue("contentRatingOid");
log.info contentRatingOid
def pkValue = dataUtils.getNextPKVal('md_basic_rating_set', 'RATING_SET_OID');
dataUtils.dbConnClose();
sqlStr = """insert into
md_basic_rating_set
(RATING_SET_OID,
BASIC_OID,
CREATED_DATE,
CONTENT_RATING_OID)
values
($pkValue,
(select basic_oid from md_basic where content_id = '$CID'),
sysdate,
$contentRatingOid)"""
sql.execute(sqlStr);

log.info 'Woohoo!';</script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("RightsTokenCreatePost - RightsTokenCreatePost");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="RightsTokenCreatePost - RightsTokenCreatePost"><con:settings/><con:config service="RightsTokenCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken" methodName="RightsTokenCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RightsTokenCreatePost - RightsTokenCreatePost" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:encoding/><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" ALID="${#Project#ALID}" ContentID="${#Project#CID}" xmlns:ns1="http://www.w3.org/2001/04/xmlenc#" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="${#Project#coordinatorSchema}" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ns4:SoldAs>
      <ns4:DisplayName Language="${#Project#SoldAsDisplayNameLanguage}">${#Project#SoldAsDisplayName}</ns4:DisplayName>
      <ns4:ContentID>${#Project#SoldAsCID}</ns4:ContentID>
   </ns4:SoldAs>
   <ns4:RightsProfiles>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileHD}">
         <!--<ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileHD}">${#Project#PurchaseProfileBurnsLeftHD}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
      <ns4:PurchaseProfile MediaProfile="${#Project#PurchasedMediaProfileSD}">
         <!--<ns4:DiscreteMediaRightsRemaining FulfillmentMethod="${#Project#DiscreteMediaProfileSD}">${#Project#PurchaseProfileBurnsLeftSD}</ns4:DiscreteMediaRightsRemaining>-->
         <ns4:CanDownload>${#Project#PurchaseProfileCanDownLoad}</ns4:CanDownload>
         <ns4:CanStream>${#Project#PurchaseProfileCanStream}</ns4:CanStream>
      </ns4:PurchaseProfile>
     </ns4:RightsProfiles>   
   <ns4:LicenseAcqBaseLoc>${#Project#LicenseAcqBaseLoc}</ns4:LicenseAcqBaseLoc>
   <ns4:FulfillmentWebLoc MediaProfile="${#Project#PurchasedMediaProfileHD}" xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentWebLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentWebLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentWebLoc>
   <ns4:FulfillmentManifestLoc xsi:type="ns4:ResourceLocation-type">
      <ns4:Location>${#Project#FulfillmentManifestLoc1Location}</ns4:Location>
      <ns4:Preference>${#Project#FulfillmentManifestLoc1Preference}</ns4:Preference>
   </ns4:FulfillmentManifestLoc>
  <ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type"> 	
		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		 
		<ns4:Preference>3</ns4:Preference> 	
  </ns4:StreamWebLoc> 
	<ns4:StreamWebLoc MediaProfile="urn:dece:type:mediaprofile:sd" xsi:type="ns4:ResourceLocation-type"> 	
		<ns4:Location>https://dl.bestbuy.com/p/streaminglink</ns4:Location> 		 
		<ns4:Preference>3</ns4:Preference> 	
	</ns4:StreamWebLoc> 
   <ns4:PurchaseInfo>
      <ns4:NodeID>${#Project#PurchaseInfoRetailerID}</ns4:NodeID>
      <ns4:RetailerTransaction>${#Project#RetailerTransactionId}</ns4:RetailerTransaction>
      <ns4:PurchaseAccount>${#Project#PurchaseInfoPurchaseAccount}</ns4:PurchaseAccount>
      <ns4:PurchaseUser>${#Project#PurchaseInfoPurchaseUser}</ns4:PurchaseUser>
      <ns4:PurchaseTime>${#Project#PurchaseInfoPurchaseTime}</ns4:PurchaseTime>
   </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Call Verify Content Location and Get RightsTokenOid"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def getRTOidTC = testSuite.getTestCaseByName("Verify Content Location and Get RightsTokenOid");
getRTOidTC.setPropertyValue("CallingTestCase", testCase.name);
def runnerGetRTOidTC = getRTOidTC.run( null, false);

testSuite.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
testSuite.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("RightsTokenOid", getRTOidTC.getPropertyValue("RightsTokenOid"));
callingTC.setPropertyValue("RightsTokenId", getRTOidTC.getPropertyValue("RightsTokenId"));
assert "$runnerGetRTOidTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>4369</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>071CF54FE5462242E05307991F0A8FC2</con:value></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>585663</con:value></con:property><con:property><con:name>ContentRatingOid</con:name><con:value>2</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:071CF54FE5462242E05307991F0A8FC2</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00002_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId  and Creation of DiscreteMediaRights</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d8694c41-2a8f-4311-a280-fff1553b3835</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DMR Count" searchProperties="true" id="15a19e3a-f405-4a85-8fe8-0ebd40f7bce6"><con:settings/><con:testStep type="groovy" name="Validate DMR Count for single RT"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

boolean iFailed = false;
String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String DMRCountExp = testCase.getPropertyValue("DMRCount");

sqlStr="""Select 
count(rawtohex(DISCRETE_MEDIA_TOKEN_OID))
from
DISCRETE_MEDIA_TOKEN
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid') and ACCOUNT_OID= hextoraw('$accountOid')""";

log.info "QUERY :"+ sqlStr;

sql.eachRow(sqlStr){
	DMRCountAct = it[0];
}
log.info "DMRCOUNTACT :"+DMRCountAct;
log.info "DMRCountExpected:" + DMRCountExp;
try
{
	assert DMRCountExp == DMRCountAct.toString();
}
catch(Throwable e)
{
	log.info e;
	log.info "DMRCountExpected:" + DMRCountExp;
	log.info "DMRCountActual:" + DMRCountAct;	
	iFailed = true;
	
}
assert iFailed == false;</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00002_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId  and Creation of DiscreteMediaRights</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT</con:value></con:property><con:property><con:name>DMRCount</con:name><con:value>4</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify Discrete_Media_Rights_Remaining" searchProperties="true" id="2f9799e8-b6c6-49b5-afba-79749d0a105a"><con:settings/><con:testStep type="groovy" name="Verify DMR_Remaining"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

boolean iFailed = false;
def rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
def discreteMediaRightsRemainingExp = testCase.getPropertyValue("discreteMediaRightsRemainingExp");


//sqlStr1 = """Select Count(DISCRETE_MEDIA_TOKEN_OID)
//from
//DISCRETE_MEDIA_TOKEN 
//where 
//RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid') and state ='available'""";
//
//sql.eachRow(sqlStr1){
//	discreteMediaRightsRemainingExp = it[0];
//}
//log.info "DiscreteMediaRightsRemainingExp:" + discreteMediaRightsRemainingExp;

sqlStr = """select 
SUM(DISCRETE_MEDIA_RIGHTS_REMAIN)
from 
purchase_profile
where rights_token_oid = hextoraw('$rightsTokenOid') and DISCRETE_MEDIA_RIGHTS_REMAIN !=0 """;

sql.eachRow(sqlStr){
	discreteMediaRightsRemainingAct = it[0];
}

log.info "discreteMediaRightsRemainingAct:" + discreteMediaRightsRemainingAct.toString();	

try
{
	assert discreteMediaRightsRemainingExp == discreteMediaRightsRemainingAct.toString();
}
catch(Throwable e)
{
	log.info e;
	log.info "DiscreteMediaRightsRemainingExp:" + discreteMediaRightsRemainingExp;
	log.info "discreteMediaRightsRemainingAct:" + discreteMediaRightsRemainingAct;
	iFailed = true;	
	
}
assert iFailed == false;
sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00002_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId  and Creation of DiscreteMediaRights</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT</con:value></con:property><con:property><con:name>discreteMediaRightsRemainingExp</con:name><con:value>3</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate DB for Discrete_Media_Token, Discrete_Media_Token_History, Purchase_Profile and Pruchased_Fulfillment_Method Tables" searchProperties="true" id="29d88397-8d06-4d26-8663-816d35f1b3c5"><con:settings/><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN Table" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
String userOid = testProject.getPropertyValue("UserOid");
String nodeOid = testProject.getPropertyValue("nodeid");
String leaseType = testSuite.getPropertyValue("LeaseType");
String leaseStatus = testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");

boolean iFailed = false;

sqlStr = """select count(*) from DISCRETE_MEDIA_TOKEN dmt
where 
dmt.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')""";

sql.eachRow(sqlStr){
	actualCountDMT = it[0];
}

try
{
	assert actualCountDMT.toString() == testProject.getPropertyValue("PurchaseProfileBurnsLeft");
}
catch(Throwable e)
{
	log.info e;
	log.info testProject.getPropertyValue("PurchaseProfileBurnsLeft");
	log.info actualCountDMT;	
	iFailed = true;
}

sqlStr = """select 
to_char(rawtohex(dmt.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmt.ACCOUNT_OID)),
to_char(rawtohex(dmt.USER_OID)),
to_char(rawtohex(dmt.CREATED_BY)),
to_char(dmt.STATE),
to_char(dmt.STATUS),
to_char(dmt.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmt.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmt.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID
from 
DISCRETE_MEDIA_TOKEN dmt  
where 
dmt.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmt.ACCOUNT_OID = hextoraw('$accountOid')
and
dmt.STATE = 'available'""";
log.info sqlStr	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	log.info "recordCount=="+recordCount;
	RIGHTS_TOKEN_OID = it[0];
	log.info "RIGHTS_TOKEN_OID=="+RIGHTS_TOKEN_OID;
	ACCOUNT_OID = it[1];
	log.info "ACCOUNT_OID=="+ACCOUNT_OID;
	USER_OID = it[2];
	log.info "USER_OID=="+USER_OID;
	CREATED_BY = it[3];
	log.info "CREATED_BY=="+CREATED_BY;
	TYPE = it[4];
	log.info "TYPE=="+TYPE;
	STATUS = it[5];
	log.info "STATUS=="+STATUS;
	EXPIRATION_DATE = it[6];
	log.info "EXPIRATION_DATE=="+EXPIRATION_DATE;
	CREATED_DATE = it[7];
	log.info "CREATED_DATE=="+CREATED_DATE;
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
	log.info "PURCHASED_FULFILLMENT_MTHD_OID=="+PURCHASED_FULFILLMENT_MTHD_OID;
}


try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

/*try
{
	assert userOid == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info userOid;
	log.info USER_OID;	
	iFailed = true;
}*/

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:testStep type="groovy" name="Validate DISCRETE_MEDIA_TOKEN_HISTORY Table" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
Integer recordCount = 0;
String userOid = testProject.getPropertyValue("UserOid");
String nodeOid = testProject.getPropertyValue("NodeOid");
String leaseType = testSuite.getPropertyValue("LeaseType");
String leaseStatus = testProject.getPropertyValue("LeaseStatus");
String leaseExpirationDate = testProject.getPropertyValue("LeaseExpirationDate");

boolean iFailed = false;

sqlStr = """select count(*) from DISCRETE_MEDIA_TOKEN_HISTORY dmth
where 
dmth.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')""";

sql.eachRow(sqlStr){
	actualCountDMT = it[0];
}

try
{
	assert actualCountDMT.toString() == testProject.getPropertyValue("PurchaseProfileBurnsLeft");
}
catch(Throwable e)
{
	log.info e;
	log.info testProject.getPropertyValue("PurchaseProfileBurnsLeft");
	log.info actualCountDMT;	
	iFailed = true;
}

sqlStr = """select 
to_char(rawtohex(dmth.RIGHTS_TOKEN_OID)),
to_char(rawtohex(dmth.ACCOUNT_OID)),
to_char(rawtohex(dmth.USER_OID)),
to_char(rawtohex(dmth.CREATED_BY)),
to_char(dmth.STATE),
to_char(dmth.STATUS),
to_char(dmth.EXPIRATION_DATE, 'yyyy-mm-dd hh:mi:ss') EXPIRATION_DATE,
to_char(dmth.CREATED_DATE, 'yyyy-mm-dd hh:mi:ss') CREATED_DATE,
to_char(rawtohex(dmth.PURCHASED_FULFILLMENT_MTHD_OID)) PURCHASED_FULFILLMENT_MTHD_OID
from 
DISCRETE_MEDIA_TOKEN_HISTORY dmth  
where 
dmth.DISCRETE_MEDIA_TOKEN_OID = hextoraw('$discreteMediaTokenOid')
and 
dmth.ACCOUNT_OID = '$accountOid'
and
dmth.STATE = 'available'""";
	
sql.eachRow(sqlStr){	
	recordCount = recordCount + 1;
	RIGHTS_TOKEN_OID = it[0];
	ACCOUNT_OID = it[1];
	USER_OID = it[2];
	CREATED_BY = it[3];
	TYPE = it[4];
	STATUS = it[5];
	EXPIRATION_DATE = it[6];
	CREATED_DATE = it[7];
	PURCHASED_FULFILLMENT_MTHD_OID = it[8];
}

try
{
	assert CREATED_DATE != null;
}
catch(Throwable e)
{
	log.info e;
	log.info "Expected not NULL";
	log.info CREATED_DATE;	
	iFailed = true;
}

try
{
	assert recordCount == 1;
}
catch(Throwable e)
{
	log.info e;
	log.info "1";
	log.info recordCount;	
	iFailed = true;
}

try
{
	assert rightsTokenOid == RIGHTS_TOKEN_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info rightsTokenOid;
	log.info RIGHTS_TOKEN_OID;	
	iFailed = true;
}

try
{
	assert accountOid == ACCOUNT_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info accountOid;
	log.info ACCOUNT_OID;	
	iFailed = true;
}

/*try
{
	assert userOid == USER_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info userOid;
	log.info USER_OID;	
	iFailed = true;
}*/

try
{
	//assert nodeOid == CREATED_BY;
}
catch(Throwable e)
{
	log.info e;
	log.info nodeOid;
	log.info CREATED_BY;	
	iFailed = true;
}

try
{
	assert leaseType == TYPE;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseType;
	log.info TYPE;	
	iFailed = true;
}

try
{
	assert leaseStatus == STATUS;
}
catch(Throwable e)
{
	log.info e;
	log.info leaseStatus;
	log.info STATUS;	
	iFailed = true;
}

try
{
	assert null == EXPIRATION_DATE;
}
catch(Throwable e)
{
	log.info e;
	log.info null;//leaseExpirationDate;
	log.info EXPIRATION_DATE;	
	iFailed = true;
}

try
{
	assert null == PURCHASED_FULFILLMENT_MTHD_OID;
}
catch(Throwable e)
{
	log.info e;
	log.info null;
	log.info PURCHASED_FULFILLMENT_MTHD_OID;	
	iFailed = true;
}

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:testStep type="groovy" name="Validate PURCHASE_PROFILE Table" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testCase.getPropertyValue("ExpectedCountForPurchaseProfile");
Integer recordCountAct = 0;
String purchasedMediaProfileHD = testProject.getPropertyValue("PurchasedMediaProfileHD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfileSD = testProject.getPropertyValue("PurchasedMediaProfileSD").split("urn:dece:type:mediaprofile:")[1];
String purchasedMediaProfilePD = testProject.getPropertyValue("PurchasedMediaProfilePD").split("urn:dece:type:mediaprofile:")[1];
String discreteMediaRightsRemainingHD = testProject.getPropertyValue("DiscreteMediaRightsRemainingHD");
String discreteMediaRightsRemainingSD = testProject.getPropertyValue("DiscreteMediaRightsRemainingSD");
String discreteMediaRightsRemainingPD = testProject.getPropertyValue("DiscreteMediaRightsRemainingPD");
String purchaseProfileCanDownLoad = testCase.getPropertyValue("PurchaseProfileCanDownLoad");
String purchaseProfileCanStream = testCase.getPropertyValue("PurchaseProfileCanStream");

def discreteMediaRightsRemaining = testCase.getPropertyValue("discreteMediaRightsRemainingExp");
def purchasedMediaProfile = testCase.getPropertyValue("ContentProfile").split("urn:dece:type:mediaprofile:")[1];

boolean iFailed = false;

sqlStr = """select 
to_char(rawtohex(RIGHTS_TOKEN_OID)),
to_char(DOWNLOAD),
to_char(STREAM),
to_char(DISCRETE_MEDIA_RIGHTS_REMAIN),
to_char(PURCHASED_CONTENT_PROFILE)
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid') and 
PURCHASED_CONTENT_PROFILE ='$purchasedMediaProfile'
order by
PURCHASED_CONTENT_PROFILE""";

log.info "SQL :"+sqlStr;
sql.eachRow(sqlStr){
	recordCountAct = recordCountAct + 1;
	RIGHTS_TOKEN_OID = it[0];
	DOWNLOAD = it[1];
	STREAM = it[2];
	DISCRETE_MEDIA_RIGHTS_REMAIN = it[3];
	PURCHASED_CONTENT_PROFILE = it[4];
	try
	{
		assert rightsTokenOid == RIGHTS_TOKEN_OID;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info rightsTokenOid;
		log.info RIGHTS_TOKEN_OID;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanDownLoad == DOWNLOAD;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanDownLoad;
		log.info DOWNLOAD;	
		iFailed = true;
	}

	try
	{
		assert purchaseProfileCanStream == STREAM;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchaseProfileCanStream;
		log.info STREAM;	
		iFailed = true;
	}

//	if(recordCountExp == '1')
//	{
//		purchasedMediaProfile = purchasedMediaProfileHD;
//		discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;	
//	}
//	else if(recordCountExp == '2')
//	{
//		if(recordCountAct == 1)
//		{
//			purchasedMediaProfile = purchasedMediaProfileHD;	
//			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;		
//		}
//		else if(recordCountAct == 2)
//		{
//			purchasedMediaProfile = purchasedMediaProfileSD;
//			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;			
//		}
//	}
//	else if(recordCountExp == '3')
//	{ 
//		if(recordCountAct == 1)
//		{
//			purchasedMediaProfile = purchasedMediaProfileHD;
//			discreteMediaRightsRemaining = discreteMediaRightsRemainingHD;				
//		}
//		else if(recordCountAct == 2)
//		{
//			purchasedMediaProfile = purchasedMediaProfilePD;
//			discreteMediaRightsRemaining = discreteMediaRightsRemainingPD;	
//		}
//		else if(recordCountAct == 3)
//		{
//			purchasedMediaProfile = purchasedMediaProfileSD;
//			discreteMediaRightsRemaining = discreteMediaRightsRemainingSD;
//		}
//	}
	if(DISCRETE_MEDIA_RIGHTS_REMAIN == null)
	{
		DISCRETE_MEDIA_RIGHTS_REMAIN = '0';
	}

	try
	{
		assert discreteMediaRightsRemaining == DISCRETE_MEDIA_RIGHTS_REMAIN;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info discreteMediaRightsRemaining;
		log.info DISCRETE_MEDIA_RIGHTS_REMAIN;		
		iFailed = true;
	}	

	try
	{
		assert purchasedMediaProfile == PURCHASED_CONTENT_PROFILE;
	}
	catch(Throwable e)
	{
		log.info e;
		log.info purchasedMediaProfile;
		log.info PURCHASED_CONTENT_PROFILE;	
		iFailed = true;
	}
}
try
{
	assert recordCountExp == recordCountAct.toString();
}
catch(Throwable e)
{
	log.info e;
	log.info recordCountExp;
	log.info recordCountAct;	
	iFailed = true;
}
def contentProfile = testCase.getPropertyValue("ContentProfile").split(":")[4];

sqlStr = """select 
to_char(rawtohex(PURCHASE_PROFILE_OID))
from 
PURCHASE_PROFILE
where 
RIGHTS_TOKEN_OID = hextoraw('$rightsTokenOid')
and
PURCHASED_CONTENT_PROFILE = '$contentProfile'""";

def purchaseProfileOid;
	
sql.eachRow(sqlStr){
	purchaseProfileOid = it[0];
}

testCase.setPropertyValue("PurchaseProfileOid", purchaseProfileOid);

def callingTC = testRunner.testCase.testSuite.project.getTestSuiteByName(testCase.getPropertyValue("CallingTestSuiteName")).getTestCaseByName(testCase.getPropertyValue("CallingTestCaseName")); 
callingTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));

assert iFailed == false;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:testStep type="groovy" name="Validate PURCHASED_FULFILLMENT_METHOD Table" disabled="true"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

String accountOid = testProject.getPropertyValue("AccountOid");
String rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
String recordCountExp = testCase.getPropertyValue("ExpectedCountForPurchaseFulfillmentMethod");
String purchaseProfileOid = testCase.getPropertyValue("PurchaseProfileOid");
Integer recordCountAct = 0;

boolean iFailed = false;

sqlStr = """select 
count(*)
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID = hextoraw('$purchaseProfileOid')"""
	
sql.eachRow(sqlStr){
	recordCountAct = it[0];
}
	try
	{
		assert recordCountExp == recordCountAct.toString();
	}
	catch(Throwable e)
	{
		log.info e;
		log.info recordCountExp;
		log.info recordCountAct;	
		iFailed = true;
	}

	assert iFailed == false;
//
//def fmExp = new Object[2];
//fmExp[0] = "bluray:packaged";
//fmExp[1] = "dvd:packaged";
////fmExp[2] = "dvd:cssrecordable";
////fmExp[3] = "securedigital";
//
//def fmAct = new Object[4];

sqlStr = """select 
AUTHORIZED_FULFILLMENT_METHOD
from 
PURCHASED_FULFILLMENT_METHOD
where 
PURCHASE_PROFILE_OID =hextoraw( '$purchaseProfileOid')
order by
AUTHORIZED_FULFILLMENT_METHOD"""

//Integer i = 0;
//	
//sql.eachRow(sqlStr){
//	fmAct[i] = it[0];	
//	i = i + 1;	
//}
//
//assert fmExp == fmAct;

sql.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC09F16DD3A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C0FC09F16E33A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>PurchaseProfileCanStream</con:name><con:value>Y</con:value></con:property><con:property><con:name>PurchaseProfileCanDownload</con:name><con:value>Y</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseProfile</con:name><con:value>1</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseFulfillmentMethod</con:name><con:value>8</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC08393313A85E05305991F0A6155</con:value></con:property><con:property><con:name>discreteMediaRightsRemainingExp</con:name><con:value>2</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT</con:value></con:property><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00001_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightGet" searchProperties="true" id="73b3791a-e596-415a-849a-1a4e23395dec"><con:settings/><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMRGet");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRGet"><con:settings/><con:config service="DiscreteMediaRightGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightGetGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRGet" mediaType="application/xml" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DMRGet').httpRequest.response.getResponseContent();
	
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DMRGet').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DMRGet').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DMRGet').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
/*valErrTC.setPropertyValue("ResponseStatus", status);
valErrTC.setPropertyValue("ConnectionStatus", connection);
valErrTC.setPropertyValue("ContentType", contentType);*/
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "GET");
valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08AE0D43A79E05305991F0AD621</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DiscreteMediaRightDeleteDelete" searchProperties="true" id="4fa480fb-fa0f-4f6d-ac1f-a92b75d2398b"><con:settings/><con:testStep type="groovy" name="Set PEM File"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMRDelete"><con:settings/><con:config service="DiscreteMediaRightDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight/{DiscreteMediaTokenId}" methodName="DiscreteMediaRightDeleteDelete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMRDelete" mediaType="application/xml" id="84e7e3ff-feb6-425e-9233-3f8abbe59132"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#Project#NodeUserSAMLAssertion}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate Error Codes for DiscreteMediaRightDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def valErrTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Validate Error Codes for DiscreteMediaRightDelete');

def resXML = null;
try
{
	resXML = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.getResponseContent();
}
catch (Throwable e)
{
	log.info e;		
}

def status = "";
try
{
	status = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["#status#"]; 
}
catch(Throwable e)
{
	log.info e;
}

def connection = "";
try
{
	connection = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Connection"];
}
catch(Throwable e)
{
	log.info e;
}

def contentType = "";
try
{
	contentType = testRunner.testCase.getTestStepByName('DiscreteMediaRightDeleteDelete - DiscreteMediaRightDeleteDelete').httpRequest.response.responseHeaders["Content-Type"];
}
catch(Throwable e)
{
	log.info e;
}
valErrTC.setPropertyValue("ResponseXML", resXML);
valErrTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
valErrTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
valErrTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
valErrTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaProfile"));
valErrTC.setPropertyValue("ResponseStatus", status[0]);
valErrTC.setPropertyValue("ConnectionStatus", connection[0]);
valErrTC.setPropertyValue("ContentType", contentType[0]);
valErrTC.setPropertyValue("HTTPMethod", "DELETE");

valErrTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
valErrTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));

def runnerValErrTC = valErrTC.run(null, false);
assert "$runnerValErrTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>CallingTestCaseName</con:name><con:value>TC_DECE_00001_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId</con:value></con:property><con:property><con:name>CallingTestSuiteName</con:name><con:value>RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:082E72D83F2E5C7EE0530F991F0A783F</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>082E72D83F2E5C7EE0530F991F0A783F</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\DEV/ISC_RET_concat.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:082E6BBFF4AB5664E0530F991F0AFF0A</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>082E6BBFF4AB5664E0530F991F0AFF0A</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>ExpectedCount</con:name><con:value>2</con:value></con:property><con:property><con:name>LeaseType</con:name><con:value>available</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup" searchProperties="true" id="868c89b1-a35f-4b2c-a50a-2df5e20c6ea4"><con:settings/><con:testStep type="groovy" name="GET ALL FLAKY TESTS" id="addb0644-6537-4841-8d8c-4691388decc9" disabled="true"><con:settings/><con:config><script>
//TestCase
def testCase  = testRunner.getTestCase();
def microService = context.expand( '${#Project#microService}' ).toString();
ArrayList&lt;String> Suit_lst=new ArrayList&lt;String>();
//Get Arguments
 
def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {
//log.info suiteName.name;
Suit_lst.add(suiteName.name);
  
}
def projectName =project.name;


ArrayList&lt;String> Tstep=new ArrayList&lt;String>();

def f = new File("C:\\flaky\\$projectName"+".csv");
f.append("\r\n TestSuite Name "+","+"Flaky TestCase Name"+","+"Comments");

//TC_DECE_10277_MetadataBasicCreate_FUNC_CTP_Invocation_with_method_POST_CID_ISTC_Format_Passing_Two_Unencoded_Colon_Negative_flaky
for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i &lt;= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                def tstSuite=testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite)
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
               
				if(targetTestCase.name.endsWith("_flaky") || targetTestCase.name.endsWith("_FLAKY"))
				{   
			       log.info "##################  $tstSuite.name  #####################";
				  log.info targetTestCase.name
//				  targetTestCase.setDisabled(true)

				  f.append("\r\n"+tstSuite.name+","+targetTestCase.name+"");
				}
                      
                
    } 
}                                                                                             </script></con:config></con:testStep><con:testStep type="groovy" name="Disable Flaky Test" id="2980cb03-719d-4990-a792-e741b9b57ca3"><con:settings/><con:config><script>///**** Flaky project level 'Flaky_Disabled' variable on basis of which flaky testcase will be diabled or not

def testCase  = testRunner.getTestCase();


def Flaky_Disabled  = context.expand( '${#Project#Flaky_Disabled}' ).toString();
log.info "Flaky_Disabled : $Flaky_Disabled"
ArrayList&lt;String> Suit_lst=new ArrayList&lt;String>();

def project = context.testCase.testSuite.project;

for (suiteName in project.testSuiteList) {

Suit_lst.add(suiteName.name);
  
}
def projectName =project.name;


ArrayList&lt;String> Tstep=new ArrayList&lt;String>();
def count=1;

for (String suit : Suit_lst)
{  def testSuite = suit;
     def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
     def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

   for(i = 0; i &lt;= TCCount - 1; i++)
     {                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                def tstSuite=testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite)
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
               
                                                                if(targetTestCase.name.toLowerCase().contains("_flaky") || targetTestCase.name.endsWith("_MIGRATED"))
                {   
                                                       log.info "##################  $tstSuite.name  #####################";
                                                                  log.info targetTestCase.name

                                                                  if(Flaky_Disabled=='true' || Flaky_Disabled=='True' || Flaky_Disabled=='TRUE')
                                                                   { targetTestCase.setDisabled(true);
                                                                   }
                      else
                      {
                                targetTestCase.setDisabled(false);
                                }
                                                                  

                                                                  count++;
                                                                }
                      
                
    } 
}                                                                                             
</script></con:config></con:testStep><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}



log.info "updated_project_properties from properties file";

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "V2: "+tP.getPropertyValue("V2");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
tP.setPropertyValue("SchemaNameSpace",schema);

log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>addb0644-6537-4841-8d8c-4691388decc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2980cb03-719d-4990-a792-e741b9b57ca3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Disable_TestSuite_Depending_On_Version" searchProperties="true" id="4fbf6aae-2005-458f-bd61-5f3fd341d282"><con:settings/><con:testStep type="groovy" name="Disable_TestSuite"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TCCount = testSuite.getTestCaseCount();
def TSuite1 = testProject.getTestSuiteByName("RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT");

def v2 = context.expand( '${#Project#versionMinor}' )
def eNV =  context.expand( '${#Project#ENV}' )

if(eNV=="QALP3" && v2=="11"|| eNV=="QALP3LBSPC" && v2=="11" ||eNV=="QALP3LBS" && v2=="11" || eNV=="QALP1" && v2=="11"
|| eNV=="QALP2" && v2=="11"  )
{
     TSuite1.setDisabled(true);
 }
if(eNV=="QALP3" && v2=="07"|| eNV=="QALP3LBSPC" && v2=="07" ||eNV=="QALP3LBS" && v2=="07")
{
    TSuite1.setDisabled(true);
}
if(eNV=="QALP3" && v2=="02"|| eNV=="QALP3LBSPC" && v2=="02" ||eNV=="QALP3LBS" && v2=="02" )
{
      TSuite1.setDisabled(true);
}
 if(eNV=="QALP1" && v2=="02" )
{
     TSuite1.setDisabled(false);
}
if(eNV=="QALP2" && v2=="02" ){
	 TSuite1.setDisabled(true);
}



 ]]></script></con:config></con:testStep><con:testStep type="groovy" name="DisableTestStep" disabled="true"><con:settings/><con:config><script>
//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "RTL_CS_P0_TestCases"; 
def stepName  = "Call Update Role for a Node";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{                                              
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                testStepList  = targetTestCase.getTestStepList();
                testStepCount = targetTestCase.getTestStepCount();
//                if(targetTestCase.isDisabled() == false)
//                {
                                for(j = 0; j &lt;= testStepCount - 1; j++)
                                {
                                                try
                                                {
                                                                if (testStepList[j].name == stepName) {
                                                                                log.info "Removing Step " + testStepList[j].name;
                                                                                targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
                                                                                targetTestCase.removeTestStep(targetTestStep);
                                                                }
                                                                
                                                                //stepScript = testStepList[j].getScript();
                                                                //stepScript = stepScript.replace(oldString, newString);
                                                                //targetTestStep.setScript(stepScript);                  
                                                }
                                                catch(Throwable e)
                                                {
                                                                log.info "ERROR:" + e;
                                                }              
                                }
//                }
}                                                                                              
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Disable_DBvalidation_Depending_on_microservice" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Disable_TestSuite"><con:settings/><con:config><script>Disable_DBvalidation_Depending_on_microservice

Disable_TestSuite

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def TCCount = testSuite.getTestCaseCount();
def TSuite = testProject.getTestSuiteByName("CommonSteps");
def TStep1 = TSuite.getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table").getTestStepByName("Validate DISCRETE_MEDIA_TOKEN Table");
def TStep2 = TSuite.getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table").getTestStepByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
def TStep3 = TSuite.getTestCaseByName("Validate PURCHASE_PROFILE Table").getTestStepByName("Validate PURCHASE_PROFILE Table");
def TStep4 = TSuite.getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table").getTestStepByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
def TStep5 = TSuite.getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE").getTestStepByName("Validate DISCRETE_MEDIA_TOKEN Table");
def TStep6 = TSuite.getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE").getTestStepByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
def TStep7 = TSuite.getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE").getTestStepByName("Validate PURCHASE_PROFILE Table");
def TStep8 = TSuite.getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE").getTestStepByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
def microService =  context.expand( '${#Project#microService}' )

if(microService=="ON")
{
     TStep1.setDisabled(true);
     TStep2.setDisabled(true);
     TStep3.setDisabled(true);
     TStep4.setDisabled(true);    
     TStep5.setDisabled(true);
     TStep6.setDisabled(true);
     TStep7.setDisabled(true);
     TStep8.setDisabled(true); 
}

else
{
     TStep1.setDisabled(false);
     TStep2.setDisabled(false);
     TStep3.setDisabled(false);
     TStep4.setDisabled(false);     
     TStep5.setDisabled(false);
     TStep6.setDisabled(false);
     TStep7.setDisabled(false);
     TStep8.setDisabled(false);
}
 </script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="E2E"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account_Create_First_User_Create_STS_Policies" searchProperties="true" id="8edc1e62-c26b-48ce-b12b-ee6c8a3e8fb8"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Account Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("AccountCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="Feed data for First User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "userget_firstuser"+new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tP.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call First User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("FullUser1Create API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for First User">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

//tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("SAML",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("SAML-FullUser1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("SAML",context.expand( '${#TestCase#SAML}')); 
tP.setPropertyValue("UUID",context.expand( '${#TestCase#assertionUUID}'));
tP.setPropertyValue("E2E_UUID_FAU1",context.expand( '${#TestCase#assertionUUID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FAU1",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tP.setPropertyValue("NodeAccountId",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
//tP.setPropertyValue("NODE_USER_ID_FAU1",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FAU1",context.expand( '${#TestCase#NODE_USER_ID}'));
//tP.setPropertyValue("NodeAccountId",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_FAU1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_FAU1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_FAU1"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_FAU1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20150417_122717</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>SurName</con:name><con:value>userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>13E6DD9F1A76797AE05307991F0A593A</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-04-21</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_a14312d6-757c-422e-a33d-2ec86f27e9b8</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_a14312d6-757c-422e-a33d-2ec86f27e9b8</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZZc+I4EP4rlOdxyvjAXK5AlcGwIZuDwYRh92VKyG1QYsvGkjnm169kwAFyLJM8udTu4+u7rxiKQtN2GIOUk5iWNlFImZ1TW0qWUjtGjDCbogiYzbHtOXe3tlnWbXQQUUoDt6X8QoZVMUy/ptardaxapgkqqlR81QTcqAVmHZqzhmBlLIMBZRxR3lJM3aiquqUa9bFes6uWXa2V9Wr9X6U0gZQJ3YKlrCt7UBvWUhacJ7amrdfr8rpSjtO5Zuq6oU3vbj28gAgp7audR7mhtL3nx2UfMIQhLuM40q60E54rn9kemVPEsxT2tvz3bOma3tQEj8/I/JtSyII/oEGcP7uIxpRgFJLfSMbnDvgi9ktOOI9TwhfRu04YulSswgar2LDoN0U7hXahohOEKUMqWyBjr2sEAaRAMZQeR4OW8u2yrOWi4xRRFsRpxE6ff4YH6ArCOAFfZQe39tAuV/hGpNpXgO0BxWHGyAruZbEmCAPbZxPw5apKwxQCsrklTBTohkl02jG8s+cuGi6ZA+OfSdBRcnZKJijMoG3Vv+v/butGkhjr++Xj5BovR+7T9wnjTisHcMycE4rU7p5nRVkU0U6iYzxi9jt66kxn953ZtslShmudB/d5ct9Y3Y2t9eR3Mo2D4Mdw4N/cJ88/h871ajuajxIt7s9uPF1/jJ3hP9e965+TLLiGyJvW0XNzbA1/aoMoWNfNAE+zm/7DX8/+iCW65vYaPfZk0d5jf1YfNGrj7qTL9aen9d83P8akQTvedroY335/nN7U8LLpEo46wZos57hVuHOE/5R26Hkvmz0B5oenLIOBW+qLLCH+8TCTFOKrQc5qJ3L4MA6UK20pJWeHnYlxR3xb5HD3Niq9mus2+4YjWqdZd3p6taLXm02jrzvVZsU5DJkdijOI3ZgGRNqSI3dXNh8DxJHNgPqQqqs4E5OOKR9odBFHpQEdiSaIKYNxLMbzMqvSWrAJM54mVI+NdGtyGvgzpXQf8wf6kDoBh/R0JDdPRvIIMEkIyLkty5qJumZchGKJVhkPjfIKlSlkYrKncsjaptWoaoxESQgSqBbFfhZCOVkkeWA0tvuaKsIsp45647zZ3nXr/N8hAoLHJ5KBSV86ILIIb+wW6+DIuw4b5rHDB/VO5hPZVyKcPCV4h+T010uVyPIoSsTpdnte1zvALrj/QPqzwt2Hh09KureON/yK7K+u98v4rILPm/6a4duvIhfV+0Xx15LaBwWondd+YchfkSOzhytN7HuxIdqHzl0io7wsZ6tVljerZVW0VKjXZDdouql5gDOxw7bj+BmoVmjRLjoYCuBnxgv6KcSML6jHEYdIDJdS/rzgQvSAyQtxIIbi5tLz88SkCB2HDX+L1g3FdSsRf3gAYxtLPkEeis86Tv2XjL2h68iO8FMciJzQuXzJY2H7Tl3gWKglYs3F6bHytxS8ZfyUWAS5wMJFQc0yDu//Kcn91VIQxnFG+cBVcsLxTs1x8m0C9gvTKzX52i7uePL/h7xK8hLAIK5/RnL98hyzZQvQ+dFe3hs9X83djqUbVl+vuv1Ovpqru9Vs1CovPXqCrv2K/JpyFKfzGm//Bw==</con:value></con:property><con:property><con:name>SAML_USER_FAU1</con:name><con:value>SAML2 Assertion=nVZbd6o6EH7fv4JFH/fCgEItrOpaeOuhtTd19+JLVwxR00LAJHjprz8JFqvW9rjPEyvDZOabmS9fcs5hHJU9n3PMBEmoFrRq+guumNBFbtUwy9WqYdujM8O14Mio2FXbHldCp2ybuhZwnuGAcgGpqOll06oYpmtUzIHpeLblOXbJqZ4Ode0BMy5DS5eS3LWMI8q9PG1Nzxj1EsgJ9yiMMfcE8vr+ddeTnh4sMOn18zXKPCGrT4VIPQBQKcQIRxEqoSQG52DH5zzkXp9MKBQZwx85Q17TP/YuFovSolJK2ASUTdMEpgukT8jJ5ESv/yo24zCg42S9bkKaUIJgRN6hAnWNxTQJNT+aJIyIafxNaAtYpgpt4CUykGXTEx18JsjRHRlpByTj0OBTaBXBeniMGaYIa396QU0/OW6C670DBikfJyzme+u/g4TpHEdJikODF5UV6I6PeKBd9XOMvICiKONkjm8UTVKIMNfuGB6TZZdwSb6Qa/n4tSUvGIbR34zkHGzjlLDBgc60yARz8X/mtT2rdZQHGGW4ftV4W5mdy/tgcEHu+dkNcJunbmc2nneSWg5h23kNajPqj/U+UTe8+tg06TSAP2s8gDe/21m8Pk/TwfvwrBJ0G82lH92h9ti67I9GJkGCMvtiyMukYZ+6z7d8tbodNGdd63H+yvC8yS77v4a9Ff/nZuK2huh0hubLe9e8stl0dHM9FWBEw+XVBL/FrNd+8JFzmTr2RfL0Orls0rPeYEh6qQX6iVO5+PMes+dfb+9D7IipMKe/Z4nVyB4Xfu2zpu0ado2FHPSz0StGolgqagQtrSPnBcXP0qIsJDTGuauXKn3iAlOh19UuJSteJsWHhJ4c5nrdrp5WWu2yYzkdx7Lcatu0Tatj+qbjuvIw+YX+rFHsQWwmdExULqWwa/78DBDFHsc0xMyYJxmaYq7/ELEFBdQC2pMHI6EcDxKp4I/P7/wS33fTuxH0l9fuaLVo3T2tfpcyGXVMJGN07SYRt/SW+WOB2a5+n+3odw8jkhKsRF4xnUuqcyGbMoPzTERWaQ5LFGfyGmBKib2yfeYATuI0wgoyiJMwi3ApnaZ5iwBff8sGRDy39tqDl6DfzE/ht0Xu/yv6IX1Cohy4qqeB5UzxgcvILor5tmjL2i66CO9nIVGHTTZXMHlEciS7vz45o8iyIYyqqtl/sQrcG/ejt3/dCX4ABfb7sUkUzslW2uJWlReFlJJ6MdEZLM1K2Xye5TOsKplkMjywgFkFfYwyqXWrQfKGKdiEAEddMxvUe5k39l18mZjSvoACx5JxWr484o3Rx1y9MQLJ7uWxD5idlLJvAi/FIVszkk8RhfjH1wrykPKT5jv5WSQs/BzXgVhbeWSd8mEhCJ2olbpUVt+QAiUyLJEqmLDt4IcCHEq+a9w0eYNFSDaNMoG//6MpeavpEKEkoyJo6blhW3JznGKVYu/T6UuYXNY/7ukl//aefrru9qX4xVDf+JL/djZITheE5S5Ociw1fSmfnDI5nWxJ/AfAwyrftn9S+d1K6l/MXy1bPd0/D/V/AQ==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FAU1</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU1</con:name><con:value>13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>accountdisplayname</con:name><con:value>accname_20131001_060029</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Standard_User_Create_STS_Policies" searchProperties="true" id="73b5f7ff-6d56-43a0-97c6-6031d11a433c"><con:settings/><con:testStep type="groovy" name="Feed data for Standard User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "userget_firstuser"+new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tP.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Standard User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("StandardUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for SAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

//tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tP.setPropertyValue("SAML-StandardUser1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("SAML",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("E2E_UUID_SAU1",context.expand( '${#TestCase#assertionUUID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_SAU",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID_SAU",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_SAU"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_SAU"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_SAU"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_SAU"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20130924_034036</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>SurName</con:name><con:value>userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>13E6E4781B630E94E05305991F0A168E</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-10-05</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d1238c63-c102-49fe-9e7a-302e7dc4c093</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_d1238c63-c102-49fe-9e7a-302e7dc4c093</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZZc9o6FP4rjPvYMV7ZPIEZAqSXCQSCSZrmpSNkYSu1JUeSgeTXVzLgYLJcmjx5dHyW7+znjIMktr0u54gJTEllk8SEezm1rWWMeBRwzD0CEsQ9AT2/Ox55dtX0wF5Eqwz7be13YNlOE9YdHVqmrbutJdJbqAF0x7RRI4AuNFuOZOU8Q0PCBSCirdmmVdNNV7cac7Pu1WqeVa/WG+69VrlFjEvdkqVqajtQG97WIiFSzzDW63V17VQpCw3bNC3jbjzyYYQSoHXOth7lhlhnxw+rAYIojmEV0sQ4M0o8ZwH3fBwSIDKGdraC92yZhtkyJE/AcfhNK2RRMCRLmj97gFCCIYjxM1DxGSMR0aDSjUPKsIiSd52wTKVYRxsoY+iSb5pRhnaiohJCxoHOI2DtdM3QEjFEIKrczIZt7dtpWctF5wwQvqQs4eXnv+FBZIVimqJA53u3dtBOV/hGpDpnCHpDAuOM4xW6UsWaAoj4LpsInq6qMmVoiTcjzGWBbrhCZxzCO3puo9HHIeLiMwk6SM5WyS2IM9Sp367HgTV4QNAkf0Z3jcWisYj5zUY61s4BHDLnhCK12+dRURZFtJXgzuOvu2fUtP2630r973OWxf783idj6i7Gg58/myBoTmp3dPX88N/VzSYQTxgkflSrz35YjJ1HmfHreX2xEC1BUNq4fvi+oKPU+M5600tqhuOrYH3tppfJ7X34GLIonl3WoudpcOGusiXrjm6SdO78MaYPEXF+ilbYuJpNJtmPa9+9d0X94cd0sJxb93xzSZdhu3DnAH+Ztu95P1vIgIn9U5XBsF+5kFkC4uNhpig40Jc5q5eq4cMFIkLrKCk1O7xMjjsceDKH27flDOoDt9G0zuu2OWi5A7PmmLVWy7owu1a9OdgPmS2KI4g9SpZY2VIjd1s2HwOEiccRCRDTVzSTk45rH2jsAwEqQzKTTUAJR3MqxzPaNBbcrVsJwdlT85mFafTgBBuhVa6omJAJ6y4FYuWR3CqN5BmCOMVIzW1V1lzWNRcyFI9glYnYqq5AlaBMTnamhqxnu82awXGSxkgBNRIaZDGqplGaB8bg26+tA8hz6mwwz5vtXbeO/+0jIHkCrBi48uUcySyiN3aLuXfkXYct+9DhvfpuFmDVVzKcgmG4RVL+9VIlqjyKEun2egO/5+9hF9z/IP1Z4d5k8knJ/qjrT78i+7vn/7Y+q+Dzpr9mePRV5LJ6vyj+WtL4oACN49ovDAUrfGB2f6XJfS83RGffuY/Aqj5Ws9Uqy5vVdR2DSfWG6gbDtA0fwUzusKc5/YOIUWgxTjoYCuBHxgt6GWImIuILIFAih0slf55wIfqIqwtxKIfi5tTzs2RShk6gjXiL1ovldasQf3gAQw8qPkmeys+asuAlY2/oOrAj/ZQHosAkVC91LDy9UxeQSrVYrjnKDpW/peAt42ViEeQCi5AFtcgEev9PRe2vtgYgpBkRw76WEw53ao5TPKXIe2F6pSZf28Udj///kNdxXgIQyeuf41y/Osc81QIkPNjLO6PHq7l37pqWe2HW+hfn5dXsvPRoCV3nFfk15SBOxzXe+Qs=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E71D3C4DD15700D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER_SAU</con:name><con:value>SAML2 Assertion=nVZbc9o8EH3vr/A4jx1jycFcPIEZsCF1C20DuTUvGUWWQYktgyQD4ddXMjEBcvno9+TRerV7dvfoSGcCpYnjdYQgXNKMGWHQMu/rmDhNWIsshElsVWGtYTXiRtUCsB5Dt/4AIUCmEQqRk5AJiZhsmQ6ApxZoWqfgEjQ9F3rArdQa4M40rgkXKrRyqQDTWKUJE16RtmXmnHkZElR4DKVEeBJ7485w4ClPD5WYzPbZBmWRkLenUs4828aViGCSJLiCs9Q+s/d8ziLhjemEIZlz8pIzEi3zZe9yuawsTysZn9gOAMAGTVv5RIJOTsz2l3IziUIWZ5u1j1jGKEYJXSMNakjkNIuMTjLJOJXT9IPQ0IZAh7bIClsYVtmJab8mKNAdGWkPJBfIElMEy2AjEhNOGCbG1ShsmSfHTXCz95IjJuKMp+Jg/W+QCFuQJJuRyBJlZSW64yO+0672GcFeyHCSC7ogPzVNZqooYfzmJKarARWKfJEwivEbK1EyjOB/GcmZvYtTwbbf6UxAJ0TI/zOv3VltolyjJCftmA9nj490JNc8OnX69cfBbN2/66mZha0Cwq7zBtR21C/rQ6JuefWy6YZUR9/zh+XgwWk0AO/dxJejNXQa42se3d7d/Lxz5/OnQRxAAXuP33Cj4+Db8GvUjOdPyz/N7vNF8xxO4I/ewunxL0/B9yCtTiQIemsEx+OLwcC56g7YyEW04yxG34bTb2wO/6RPz7a8CsXp0MZ+Zxiva4u4H9mTq/p137+ZrMG02/hyfsPzP+ffXQDnsB8+LezGReu1pt0a9o2lHIzzh0eCZbnU1AgDo6/mheTn0qItNLLiwtWbaX0SkjBptvUuLStersSHRp4a5mbdq9dOu7DWcf0g8P1GtweqAPZBB9SbTdjt+6X+bFAcQPQzFlOdSyvshj+fA8SpJwiLCLcWWY6nRJifRAyQREbIRupgZEyQy0wp+G9BrDROhbib+7X5r6+3cFT78QjnlVxFjalijGn8zOQv9ot3Ykn4nn5DZ0+/RwTTGSVa5DXThaK6kKopc7TIZQIrC1RhJFfXANdK7DnVhmsLms4SoiHbaRblCanMprOiRbbYfB0lTaKwjnqX9+HYL07hh0Ue/iv7oXwiqh2ErqdL1EzJm8sIeG5ZzMdFu7tFl+E7eUT1YVPNlZziDZL9X6+c0WTZEkZX5Y/vYYl763709rc77U9A2Yf92CaKFnQnbXmrqotCSUm7nOgcVRQ5Fou8mGFdyyRX4W1og7o9JjhXWvd8mT0RZm9D2EddM1vUB5m39n18uZyysUSSpIpxRrE84o0xJkK/MULF7tWxD5i9lKpvkqzkezY/UU8RjfjT1wr2sPZT5t/qs8x49Dqud2Lt5FF1qoeFpGyiV/pSef6AFDhTYalSwYzvBn8vwHvJ943bJm+xSMWmh1ySj/8YWt5aJsI4y5kMA7Mw7EpugVM+z4j36vQmTCHrL/f0Snx4T98OB2Mlfikyt770v50tWtAFE7VL0AJLy1ypJ6dKziY7Ev8C8FDl/W4dBAGodd36q8q7zabruGDbwL1K2m/Mby07PT08D+2/</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_SAU</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID_SAU</con:name><con:value>13E6E4781B620E94E05305991F0A168E</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4869ad2c-252d-4bfc-a2d0-ed3091cdfe86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Basic_User_Create_STS_Policies" searchProperties="true" id="260047e5-f527-4983-bf27-5e27562b205e"><con:settings/><con:testStep type="groovy" name="Feed data for Basic User Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "userget_firstuser"+new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tP.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Basic User Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("BasicUserCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for BAU">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

//tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tP.setPropertyValue("SAML-BasicUser1",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("SAML",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("E2E_UUID_BAU1",context.expand( '${#TestCase#assertionUUID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_BAU",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID_BAU",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU1 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_BAU"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_BAU"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC 1 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_BAU"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_BAU"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20130924_034036</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>SurName</con:name><con:value>userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>13E6DD9F1AF3797AE05307991F0A593A</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1994-09-29</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_1b56c8c1-2977-455a-a20d-6e39ea58c929</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_1b56c8c1-2977-455a-a20d-6e39ea58c929</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZZc6JKFP4rFvN4C1kEDVS0ikCccWIWxSSTeZlqm6N2Ao2hG7dfP92oRM1yneSJ6sNZvrOfU4aS2HQ9xiDjJKWVRRJT5hbUppJn1E0RI8ylKAHmcuyG3mXXNau6i7YiSqUTNJU/xtCu4xNsqKbTaKiWbSMVmXqk1qHmALJPsGM6gpWxHDqUcUR5UzF1w1Z1SzUaA73u2rZbM6qOdfJbqdxBxoRuwVLVlQ2oBWsqE86nrqbN5/PqvFZNs7Fm6rqh/brshngCCVJap2uPCkNZa8OPqxFgiGNcxWminWp7PKcRc0MypojnGWxsRe/Z0jXd0QRPxMj4m1LKQtSho7R4+oimlGAUkxWS8bkEPkmjiheP04zwSfKuE4YuFauwwCo2LPpN0fahHaloD2HGkMomyNjo6sMIMqAYKrf9TlP5dlzWCtFBhigbpVnC9p//hgfoDOJ0CpHKtm5toB2v8I1ItU4Bux2K45yRGVzJYp0iDGyTTcDHq6rcZDAiiy5hokAXTKLTduEdPNfRCMgYGP9MgnaSs1Zyh+IcWrftm58/H6g37Jnd0fd+MPR7w1lIzLk1bhYAdpkLQpna9fOgKMsiWkucNZ6Wg4vHGX96fOj6Px5gwh3bH+k1dDH73g/RGN9Qz8tXg7sstCcXv37cD/msH14Nrp6CxcPy+8/MX/Lx3Y+A2fSmG5/dPv837l/zPL+uP61SOu9ddi78K6Rr+Lb3m941elb/YRxc3HvOXLulq4eoO9EsyIfL3jxpXNZ6t/3H+e+hswL7kS4GXf3X40mqt++Bry6bpTs7+Pdp254P8+EjYL59yjLoBJW2yBLiHw8zSSGROipY3akcPowD5UpLSsnZ4eZi3JHIFTlcv43aeT0InLbhtc2G0/DOdbumNxzHaOue7dS87ZBZoziA6Kd0RKQtOXLXZfMxQJy4DGgEmTpLczHpmPKBxgBxVOnQvmiClDIYpHI8m7ZlGDRbTPkqqafpakKeyTgxQalcpfyaXmfeiEO2P5OdvZncB0ymBOTglnXNRGEzLmLxjGY5j43qDFUp5GK0Z3LKuqZ1YmuMJNMYJFItSaM8hup0Mi0io7H111QRZgW1fz4ouu1dvw7/bUMgeCIiGZj05QxEGuGN5WJuHXnXYcPcdXir3ssjIhtLxJNnBK+R7P96KRNZH2WNeL5/HvrhFnbJ/Q/SnxX2r68/KRl0vfDmK7J//PCP8VkFnzf9NcPdryIX1ftF8deS2gcFqB3WfmkompEds9szTSx8sSJa2859Rkb1uZrPZnnRrJZV0zKhXpPdoOmmFgLOxRJbDtInoFqpRTvqYiiBHxgv6fsQcz6hIUccEjFcKsXziBMxBCZPxI6Yiotj7889kyJ0HBb8LZofi/NWIv7wAsYulnyCfCM+8zSLXjL2hq4dO8JPcSFyQsfyJa+F5Tt1gVOhlog9l2a7yt9S8JbxfWIZ5BILFwU1zDm8/6ciF1hTQRinOeWdQCkIu0u1wMmXU3BfmF6pKfZ2eciT/7/kVVKUABYLSvAX+uU95soWoOOdxbwxerib/TNLN6y2bgfts2I32+vdbNRrLz26h671ivyashOnwxpv/QU=</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E71D3C4DD15700D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>SAML_USER_BAU</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4jxljG38QewIzgKEhl7QNJm3pS0fIa1BjZMeSgeTXX8nEDpCPS++TR+vV7tndoyNdMrRKmn6XMcg5SakyCtrqbzv23LmLXG3uOIZmt1xbm0eupyEbua4T2ZblGqoyYqyAEWUcUd5Wm4ZpaYanWcbUaPmm7RtGw3CdX6ryHXImQguXhti1XSWU+WXatlrk1E8RI8ynaAXM59gPuzdjX3j6qMKkdi53KMuEeWfJeebrOm5EgCFJcAOnK/1SP/C5jJgfkgVFvMjhOWfE2urz3s1m09hYjTRf6E3DMHTD04VPxMjiTO18qjZDNKJxulv3EU0pwSghT0iCugG+TCOlmyzSnPDl6p3Qpm4aMrQGW6xh06Znqv6SoER3YqQDkDlDGlsiswo2gRhyoBiUu8morZ6dNsHd3mmOKIvTfMWO1n8HCegakjSDSGNVZRW60yO+0a7OJWB/RHFSMLKGL5ImGcLAlG85xGQ7JkyQL2JKOX5lyyqGAf6bkVzq+zgFbP2NzgRkAYz/n3ntz2oX5TtKCugEm2vL8pZ3G8gfQhjj4Gtxw627mcdn7RLCvvMOVD3q5/UxUWtePW+atuJZtMhCYhGUQ7ae/SE/+us/9qqwjALFMzuIl5ZAG4ezpuFe5fpTkExnzfMrDxlNEn2eTm9v71uj6IfJ7z/9tG8ukvU//W2wcPvZ6NevdBE5P/Lzx/n3eMrnw+n4+vPkKrPOUW/reDAriH0+H7Q4eQxCjzi3m/EgTW+vYpclk0/JteXwp+wzm48fvrjnw4f7bvulpv0aDo2VHITF/A9gXi0lNUaBMhTzQvxjaZEWEmlx6epnUp8YB8rVjtwlZcUvhPiQyBfD3K0HLdfq99yh5/aaPafVGxi2YQ6NruF4ntN0jEp/diiOIPZTGhOZSyrsjj8fA8QrnwGNINfWaYGXwNQPIgaII2VEJ+JgpJTBNBUKHiZdt+uMs7XnLoqnJzAmydMt/ek2ChE1JoIxqvIl5V/p17wbc8gP9Ns0DvR7AphkBKTIS6YzQXXGRVMe0LrgidlYowaFQlwDuVRiv2lfODojqywBCVlfpVGRQCNbZmWLdLb7NjWEWWmdDKa/R2G/PIXvFnn8r+qH8ImIdGCynh6ImcKry8jynaqY94u29ouuwneLiMjDJprLc4J3SA5/vXBGkqUmjKyqH/42K9y1+8nbX+/UPwClH/ejThStyV7a6lYVF4WQkk410QfUeGgU63VRzrAlZTIX4XVTN1p6CLgQWvc4Te+B6nUI/aRrpkZ9lLm2H+Ir+JKGHHFYCcYp5fKEN0YITL4xRoLd21MfMAcpRd84bPlbtn4iniIS8YevFexj6SfM38Rnk+bRy7jeiLWXR9QpHhac0IVcyUvl8R1S4FSEJUIF03w/+FsB3kp+aKybXGPhgk3zgsP7fxQpb20VYZwWlI8CtTTsS26Jkz9m4L84vQpTyvrzPb1l797TP2/GoRC/FVJrX/Lfzhop6YJB7GKkxNJWt+LJKZLTxZ7EPwN8pfKDwLsYXjSHw/6gVvmW55m9oFs38KCSzivza8teT4/PQ+df</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_BAU</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID_BAU</con:name><con:value>13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Full_User2_Create_STS_Policies" searchProperties="true" id="daed361b-c9e9-4b0e-91c9-4c7b1fddd89e"><con:settings/><con:testStep type="groovy" name="Feed data for Full User2 Create"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def uname= "userget_firstuser"+new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("ResponseTypeUserCreate","SUCCESS");
tC.setPropertyValue("userType","ADULT");
tC.setPropertyValue("Privilege","full");
tC.setPropertyValue("GivenName",uname);
tC.setPropertyValue("SurName",uname);
tC.setPropertyValue("UserName",uname);
tP.setPropertyValue("UserName",uname);

tC.setPropertyValue("PrimaryEmail",tP.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("DisplayImageURL",tP.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",tP.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",tP.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",tP.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",tP.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",tP.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",tP.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",tP.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",tP.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("Language1",tP.getPropertyValue("Language1"));
tC.setPropertyValue("MeetsAgeOfMajority",tP.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",tP.getPropertyValue("urnUser"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",tP.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",tP.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",tP.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",tP.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",tP.getPropertyValue("ResourceStatus"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Full User Create 2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("FullUser2Create API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS API for FAU2">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

//tS.setPropertyValue("audience",callTS.getPropertyValue("audience"));

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS_API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;



tP.setPropertyValue("SAML-FullUser2",context.expand( '${#TestCase#SAML}'));
tC.setPropertyValue("SAML",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("E2E_UUID_FAU2",context.expand( '${#TestCase#assertionUUID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FAU2",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",context.expand( '${#TestCase#NODE_ACCOUNT_ID_FULL}'));
tC.setPropertyValue("NODE_USER_ID_FAU2",context.expand( '${#TestCase#NODE_USER_ID}'));
tC.setPropertyValue("NODE_USER_ID_FULL1",context.expand( '${#TestCase#NODE_USER_ID_FULL}'));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Call Policy Create - TOU1 1 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateTOU_API")

myTC.setPropertyValue("nodeid",tC.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_FAU2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_FAU2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call Policy Create - MUC 1 1 1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("PolicyCreateMUC_API")

myTC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("NODE_USER_ID_REQ_ENTITY",tC.getPropertyValue("NODE_USER_ID_FAU2"));
myTC.setPropertyValue("NODE_USER_ID_CREATED_BY",tC.getPropertyValue("NODE_USER_ID_FAU2"));
myTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
myTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL1"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20130924_034036</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>ResponseTypeUserCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>userType</con:name><con:value>ADULT</con:value></con:property><con:property><con:name>Privilege</con:name><con:value>full</con:value></con:property><con:property><con:name>GivenName</con:name><con:value>userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>SurName</con:name><con:value>userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value>13E6CCF206AC70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value>1996-04-21</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fab8a272-b60a-44a3-ada2-73cb3506f042</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_fab8a272-b60a-44a3-ada2-73cb3506f042</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVbZcuI6EP0VynlMGcsrwRWocmwy4wlkgzBJXlJCFqCMLYMls8zXX8mAA4TkMsmTS+1eTreOuvucwSQ2XI8xnHGS0soiiSlzC2lDyTPqppAR5lKYYOZy5Ha9Tts1qsCFGxOlEgYN5WUIB2fQqBnqwAFQtSxoqjCChloz0cC0gTMEliFUGctxSBmHlDcUA+i2CixVr/WA49q2azlVs157Vip9nDHhW6hUgbIGtWANZcz5xNW0+XxenZvVNBtpBgC69thpd9EYJ1Bpnq8yKgJlzbU+qkYY4ThGVZQm2rm2o3MeMbdLRhTyPMPrWNFHsYAG6prQiRgZnSilLY5COkyLow9pSgmCMfkLZX06mI/TqOLFozQjfJx8mIQOpGMVL5CKdIueKNoutCMd7SDMGFTZGOprX/d4iDNMEa483IcN5eS4WytMexmkbJhmCds9/hseTGc4Tic4UtkmrTW04x0eqFTzHCM3pCjOGZnha0nWCUSYrW8To+NdVW4zPCSLNmGCoAsm0Wnb8PaOq2oEZIQZ/8oFbV3OykkfxjluksulBfwOfVoMAv/uib9qEMGrq8HT7VOjALCtXAjKq10d90hZkmhl8fNM6+PpLFo8Bt5NPut543lc/9GfGr9mF2bIxiTk+HfNvzKXke/Qv/7NcvQYnI5ay974qk0e5qcMRtrPQTBetvwgeLZbmQfzWURf6/oDhf27Vr/7YHR+JFdm0KkJQ5Pkd86j40Fw99qOAbAzCrwsvK0Hjh2eORP79Jf/On1uZ067k3R+J8O74fPp9fJ+Sh4aZTpb+HdlmzffzQevGPHNUdIgDCqX4pYg/7yZSQmJ1GGh6k5k82EcU640pZXsHW4u2h2JXHGHq7NuthzfvzSA413UgO+3gG0Cu17XL4FX95yzTZNZodiD6Kd0SGQs2XJXtPkcIEpchmmEM3WW5qLTMeUTjwHksBLSe/EIUspwLxXtWV/QeV0fOYjYS6QPR5nD4j8Ty3bmSuU65Tf0JvOGHGe7Tbm+05TvMSITgmXnlsRmgtmMi2JM4SznsV6dwSrFuejtmWyzrmGd2RojySTGEqqWpFEe4+pkPClKo7HV11AhYoX0vtUrntuHie3/29RA6EREKjCZywUW94gPTBdzk8iHCevGdsIb914eEfmyREF5RtAKye6vN55IgpQk8QQvun53A7vU/gfrrxr7NzdftAzaXvf2O7YvfvdF/6qDr4f+XuD2d5EL9n7T/L2l9gkBtX3ul4GiGdkKu9nTxMQXM6K5eblTqFen1Xw2y4vHalmmlgn3mnwNGjC0Lka5mGLLXvoHU630oh21MpTA94KX8l2IOR/TLoccJ6K5VIrjETtiFzO5I4aiLS6OXUB3QorScbzgh2R+LPZbifjTFRi5SOoJ8a34zNMseruxA7624og8xYrICR3Jk1wXlh/wAqXCLRGDLs22nR9ycCj4rrAscomFC0INco4//lORE6yhQITSnPIwUArB9lQtcPLlBLtvSu/cFIO73OTJ/6/yKikogLDY/xkp/MuFzJVPgI62JvM66LvhfGEB3boEdnB5sT2cdcd8e6M76JrvxO8lW3Xa53jzPw==</con:value></con:property><con:property><con:name>SAML_USER1</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID1</con:name><con:value>E71D3C4DD15700D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FAU2</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU2</con:name><con:value>13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fcf8c68a-683f-4af1-a418-a1f5b5384672</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>03943527-847a-44f0-b73d-d2fad4b59708</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0c103a15-a364-4f18-b7ce-fb035223d68a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e6ea8959-c4f0-4f1c-95fc-32fa117a7bca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>53aa8488-3ed5-4102-a539-344b534c55e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>db4d0f7f-a067-4b2f-9cf7-625b1b493f19</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88e56319-5f02-4645-9b71-642ab080fda8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>67200c2d-bef7-4dad-b3b8-50326a533129</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c7eebc88-5d13-4ec1-bbfa-1c46c9ff6bff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>98691a52-212f-4ea8-a57e-1d7f76f36c48</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>993be89d-0c7a-4f1d-9fa2-28c7ce77ee5d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c2c3525e-10ed-4830-81eb-999f78352e69</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07a35292-2f12-4d2a-a92a-a0b65bdbc9ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c3f50659-e8c6-48c9-9915-d543e76d0ea4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a977d015-a310-447c-9587-4c159dd48726</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4b72bff5-92d5-40ca-8d39-1b4e8f07bec5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreate API" searchProperties="true" disabled="true" id="5554a113-b3fd-401f-b7b5-6fd89fd65693"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Set Environment Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def env = context.expand( '${#Project#ENV}' )
log.info 'Env == '+env

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tP.setPropertyValue("TOUUrl","qa.c.uvvu.com");
}
else
{
	tP.setPropertyValue("TOUUrl","qa.uvvu.com");
}

if (env == 'QALP1')
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7001");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7001");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7001");
tP.setPropertyValue("Batch_HostName","https://qa.b.uvvu.com:7001");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7001");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7001");
tP.setPropertyValue("targetPortq","7001");
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7001");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA1_APP/lp1db_23@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("DBUsername","DEQA1_APP");
tP.setPropertyValue("DBPassword","lp1db_23");
}
else if (env == "QALP2")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7002");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7002");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7002");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7002");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7002");
tP.setPropertyValue("targetPortq","7002");
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7002");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7002");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEQA2/dece2010@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com");
tP.setPropertyValue("DBUsername","deqa2");
tP.setPropertyValue("DBPassword","dece2010");
}
else if (env == "QALP3")
{
tP.setPropertyValue("Device_HostName","https://qa.d.uvvu.com:7003");
tP.setPropertyValue("nodeIdRTL","RET");
tP.setPropertyValue("nodeIdRTLCS","RET_CS_1");
tP.setPropertyValue("nodeIdDSP","DSP");
tP.setPropertyValue("nodeIdDSPCS","DSP_CS_1");
tP.setPropertyValue("nodeIdAccportal","ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ACCESCS");
tP.setPropertyValue("nodeIdDLASP","DLASP");
tP.setPropertyValue("nodeIdDLASPCS","DLASP_CS_1");
tP.setPropertyValue("nodeIdLLASP","LLASP");
tP.setPropertyValue("nodeIdLLASPCS","LLASP_CS_1");
tP.setPropertyValue("nodeIdDEV","DEV");
tP.setPropertyValue("nodeIdDEVCS","DEV_CS_1");
tP.setPropertyValue("nodeIdportal","iscportal1");
tP.setPropertyValue("nodeIdportalCS","iscportalcs1");
tP.setPropertyValue("nodeIdDECE","DECE");
tP.setPropertyValue("nodeIdDECECS","dece:cs");
tP.setPropertyValue("nodeIdCoo","COO");
tP.setPropertyValue("nodeIdCoordCS","coord:cs");
tP.setPropertyValue("Provision_HostName","https://qa.p.uvvu.com:7003");
tP.setPropertyValue("Query_HostName","https://qa.q.uvvu.com:7003");
tP.setPropertyValue("targerHostd","qa.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","qa.d.uvvu.com:7003");
tP.setPropertyValue("targetHost","qa.p.uvvu.com");
tP.setPropertyValue("targetHostq","qa.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","7003");
tP.setPropertyValue("targetPortq","7003");
tP.setPropertyValue("targetSystem","LP3");
tP.setPropertyValue("targetURL","qa.p.uvvu.com:7003");
tP.setPropertyValue("targetUrlSHost","qa.s.uvvu.com:7003");
}
else if (env == "DEV")
{
tP.setPropertyValue("Device_HostName","https://lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("nodeIdRTL","ISC_RET");
tP.setPropertyValue("nodeIdRTLCS","ISC_RETCS");
tP.setPropertyValue("nodeIdDSP","ISC_DSP");
tP.setPropertyValue("nodeIdDSPCS","ISC_DSPCS");
tP.setPropertyValue("nodeIdAccportal","ISC_ACCESS");
tP.setPropertyValue("nodeIdAccportalCS","ISC_ACCESSCS");
tP.setPropertyValue("nodeIdDLASP","ISC_DLASP");
tP.setPropertyValue("nodeIdDLASPCS","ISC_DLASPCS");
tP.setPropertyValue("nodeIdLLASP","ISC_LLASP");
tP.setPropertyValue("nodeIdLLASPCS","ISC_LLASPCS");
tP.setPropertyValue("nodeIdDEV","ISC_DEVICE");
tP.setPropertyValue("nodeIdDEVCS","ISC_DEVICECS");
tP.setPropertyValue("nodeIdportal","ISC_PORTAL");
tP.setPropertyValue("nodeIdportalCS","ISC_PORTALCS");
tP.setPropertyValue("nodeIdDECE","ISC_DECE");
tP.setPropertyValue("nodeIdDECECS","ISC_DECECS");
tP.setPropertyValue("nodeIdCoo","ISC_COO");
tP.setPropertyValue("nodeIdCoordCS","ISC_COOCS");
tP.setPropertyValue("Provision_HostName","https://lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("Query_HostName","https://lp2.dev.q.uvvu.com:8443");
tP.setPropertyValue("targerHostd","lp2.dev.d.uvvu.com");
tP.setPropertyValue("targetDeviceDomain","lp2.dev.d.uvvu.com:8443");
tP.setPropertyValue("targetHost","lp2.dev.p.uvvu.com");
tP.setPropertyValue("targetHostq","lp2.dev.q.uvvu.com");
tP.setPropertyValue("targetHostb","qa.b.uvvu.com");
tP.setPropertyValue("targetPort","8443");
tP.setPropertyValue("targetPortq","8443");
tP.setPropertyValue("targetSystem","DEV");
tP.setPropertyValue("targetURL","lp2.dev.p.uvvu.com:8443");
tP.setPropertyValue("targetUrlSHost","lp2.dev.s.uvvu.com:8443");
tP.setPropertyValue("JDBCConnStr","jdbc:oracle:thin:DEVDECESR5/DEVDECESR5@10.31.153.15:2115/decdev1.neustar.com");
tP.setPropertyValue("DBUsername","DEVDECESR5");
tP.setPropertyValue("DBPassword","DEVDECESR5");
}





</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("accountname",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);

tC.setPropertyValue("ResponseType","SUCCESS");

tP.setPropertyValue("Request_XML",tP.getPropertyValue("Request_XML_Buffer"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);
def callTS = tP.getTestSuiteByName(callTSname);

//tP.setPropertyValue("Country",callTS.getPropertyValue("Country"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));

def b = tC.getPropertyValue("nodeid");

log.info b;</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def policy_TOU = context.expand( '${#Project#Policy_TOU}' )
def dBHost = context.expand( '${#Project#targetsystem}' )
String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )
def targetPort = context.expand( '${#Project#targetPort}' )
def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
            consent_version            
            from
            CONSENT
            where
            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
            and
            COUNTRY = '""" + country + """'
            order by
            consent_version desc)
            where rownum &lt; 2"""; 

                                                
   log.info sql;   
   results = a.SelectFromDB(sql,dBHost);
assert results.length() > 0;
log.info "results" + results;

def myXML = new XmlSlurper().parseText(results);   
log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
def consent_Version = context.expand( '${#TestCase#Consent_Version}' )
testProject.setPropertyValue("policy_TOU",'https://'+ tOUUrl + ':' + targetPort + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');


</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set coordinatorSchema" disabled="true"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


log.info "V2: "+tP.getPropertyValue("V2");
if(tP.getPropertyValue("V2") == "06")
{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2012/12/coordinator");
	tP.setPropertyValue("SchemaNameSpace","http://www.decellc.org/schema/2012/12/coordinator");	
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2012/12/coordinator";
}
else if(tP.getPropertyValue("V2") == "07")
{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/06/coordinator");
	tP.setPropertyValue("SchemaNameSpace","http://www.decellc.org/schema/2013/06/coordinator");
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2013/06/coordinator";
}
else if(tP.getPropertyValue("V2") == "11")
{
	tP.setPropertyValue("coordinatorSchema","http://www.decellc.org/schema/2013/10/coordinator");
	tP.setPropertyValue("SchemaNameSpace","http://www.decellc.org/schema/2013/10/coordinator");
	log.info "Setting the coordinatorSchema value at project level: http://www.decellc.org/schema/2013/10/coordinator";
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#Country}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);

</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
////this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
      assert context.expand( '${#TestCase#httpLocation}') != null;

      //def a = context.expand( '${#TestCase#httpLocation}');
      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

	// Below code is added to get the shard details i.e., for Active-Active
      def hostAddress = b.getHost();
      log.info " hostAddress....     " + hostAddress;   
      String clusterNumber = context.expand( '${#Project#clusterNumber}' );
log.info " Cluster is : "+ clusterNumber; 
if(clusterNumber == "1")
      {
     	 if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
      	{
      		tP.setPropertyValue("targetSystem","LP3ST");
      		tP.setPropertyValue("DBIdentifier","LP3ST");
      		tP.setPropertyValue("JDBCConnStr",'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqlp.neustar.com');
      	}
      	else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
      	{
      		tP.setPropertyValue("targetSystem","LP3CH");
      		tP.setPropertyValue("DBIdentifier","LP3CH");
      		tP.setPropertyValue("JDBCConnStr",'jdbc:oracle:thin:@chdeqp-clu1-scan.nc.neustar.com:2115/chdecqlp.neustar.com');
      	}
      }else {
      	if (hostAddress == "lp3.qa-web-vip2-s01.uvvu.com")
      	{
      		tP.setPropertyValue("targetSystem","LP3ST");
      		tP.setPropertyValue("DBIdentifier","LP3ST");
      		tP.setPropertyValue("JDBCConnStr",'jdbc:oracle:thin:@stdeqp-clu2-scan.va.neustar.com:2115/stdecqlp.neustar.com');
      	}
      	else if (hostAddress == "lp3.qa-web-vip2-s02.uvvu.com")
      	{
      		tP.setPropertyValue("targetSystem","LP3CH");
      		tP.setPropertyValue("DBIdentifier","LP3CH");
      		tP.setPropertyValue("JDBCConnStr",'jdbc:oracle:thin:@chdeqp-clu2-scan.nc.neustar.com:2115/chdecqlp.neustar.com');
      	}
      	
      }

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
                 
          int lastColon = urlStr.lastIndexOf(':');
	     int lastSlash = urlStr.lastIndexOf('/');
	     accountid     = urlStr.substring(lastColon + 1);
	     def node_Account = urlStr.substring(lastSlash + 1);

          tP.setPropertyValue("NODE_ACCOUNT_ID",accountid);
                    
          tP.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);                        
          tP.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);                                                   
          
      } else {
            assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
            int lastColon = urlStr.lastIndexOf('%3A');
            int lastSlash = urlStr.lastIndexOf('/');
            accountid     = urlStr.substring(lastColon + 3);
            def node_Account = urlStr.substring(lastSlash + 1);

            tP.setPropertyValue("NODE_ACCOUNT_ID",accountid);
            
            tP.setPropertyValue("NODE_ACCOUNT_ID_FULL",node_Account);
		  tP.setPropertyValue("NODE_ACCOUNT_ID_FULL1",node_Account);
      }

} else {
      	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("accountname",tC.getPropertyValue("accountname"));
callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
</script></con:config></con:testStep><con:properties><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>accountname</con:name><con:value>accname_20150417_122717</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:E71D3C4DD15700D0E0401F0A05995914</con:value></con:property><con:property><con:name>Consent_Version</con:name><con:value>20121024</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dbd205af-6a2e-447d-a1c5-eb49c82ff6e4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>64613dd6-4244-4f8a-8186-0d4745fa0115</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUser1Create API" searchProperties="true" disabled="true" id="1a6cd2bc-39b9-4228-a81e-4c3a3a9814cd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
         //log.info "User oid ++++++++"userid;
         tP.setPropertyValue("NODE_USER_OID_FAU1",userid);
	    //log.info "User Id ++++++++"node_User;
         tP.setPropertyValue("NODE_USER_ID_FAU1",node_User);
         tC.setPropertyValue("NODE_USER_ID_FAU1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tP.setPropertyValue("NODE_USER_OID_FAU1",userid);

        tP.setPropertyValue("NODE_USER_ID_FAU1",node_User);
         tC.setPropertyValue("NODE_USER_ID_FAU1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                 tP.setPropertyValue("E2E_AccountOID_FAU1", a);
		                 tP.setPropertyValue("E2E_UserOID_FAU1", u);	                
		                 
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1996-04-21</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Account_Create_First_User_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122720</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>13E6DD9F1A76797AE05307991F0A593A</con:value></con:property><con:property><con:name>account_oid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-04-21</con:value></con:property><con:property><con:name>NODE_USER_OID_FAU1</con:name><con:value>E763DE25166B1197E0401F0A0599524A</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU1</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FullUser2Create API" searchProperties="true" disabled="true" id="a2e324fe-913a-4222-a028-fcda9ad4f79f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tP.setPropertyValue("NODE_USER_OID_FAU2",userid);

        tP.setPropertyValue("NODE_USER_ID_FAU2",node_User);

        // tC.setPropertyValue("NODE_USER_ID_FAU2",node_User);
         //tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tP.setPropertyValue("NODE_USER_OID_FAU2",userid);

        tP.setPropertyValue("NODE_USER_ID_FAU2",node_User);

        //tC.setPropertyValue("NODE_USER_ID_FAU2",node_User);
         //tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                 tP.setPropertyValue("E2E_AccountOID_FAU2", a);
		                 tP.setPropertyValue("E2E_UserOID_FAU2", u);	
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FAU2"));
//callTC.setPropertyValue("NODE_USER_ID_FULL2",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1996-04-21</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Full_User2_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>13E6CCF206AC70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1996-04-21</con:value></con:property><con:property><con:name>NODE_USER_OID_FAU2</con:name><con:value>E7E57BE9EF394CB1E0401F0A05996FDA</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU2</con:name><con:value>urn:dece:userid:org:dece:E7E57BE9EF394CB1E0401F0A05996FDA</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StandardUserCreate API" searchProperties="true" disabled="true" id="da9db13f-5d75-4da3-8a44-93180806d664"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:standard" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tP.setPropertyValue("NODE_USER_OID_SAU",userid);

         tP.setPropertyValue("NODE_USER_ID_SAU",node_User);
        // tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tP.setPropertyValue("NODE_USER_OID_SAU",userid);

        tP.setPropertyValue("NODE_USER_ID_SAU",node_User);
         //tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                 tP.setPropertyValue("E2E_AccountOID_SAU1", a);
		                 tP.setPropertyValue("E2E_UserOID_SAU1", u);	
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-10-05</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Standard_User_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122742</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>13E6E4781B630E94E05305991F0A168E</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-10-05</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicUserCreate API" searchProperties="true" disabled="true" id="4194bedb-f5a6-4d05-99a6-767e927d095a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("userType",null);
tC.setPropertyValue("Privilege",null);
tC.setPropertyValue("UserName",null);
tC.setPropertyValue("GivenName",null);
tC.setPropertyValue("SurName",null);
tC.setPropertyValue("PrimaryEmail",null);
tC.setPropertyValue("Language1",null);
tC.setPropertyValue("DisplayImageURL",null);
tC.setPropertyValue("AlternateEmail",null);
tC.setPropertyValue("PostalAddress",null);
tC.setPropertyValue("PostalCode",null);
tC.setPropertyValue("Locality",null);
tC.setPropertyValue("StateOrProvince",null);
tC.setPropertyValue("Country",null);
tC.setPropertyValue("TelephoneNumber",null);
tC.setPropertyValue("MobileTelephoneNumber",null);
tC.setPropertyValue("MeetsAgeOfMajority",null);
tC.setPropertyValue("DateOfBirth",null);
tC.setPropertyValue("urnUser",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("QuestionID1",null);
tC.setPropertyValue("QuestionResponse1",null);
tC.setPropertyValue("QuestionID2",null);
tC.setPropertyValue("QuestionResponse2",null);
tC.setPropertyValue("ResourceStatus",null);

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("user_oid1",null);
tC.setPropertyValue("account_oid",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("ResponseType",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("ResponseType",callTC.getPropertyValue("ResponseTypeUserCreate"));

tC.setPropertyValue("Privilege",callTC.getPropertyValue("Privilege"));
tC.setPropertyValue("UserName",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("userType",callTC.getPropertyValue("userType"));
tC.setPropertyValue("GivenName",callTC.getPropertyValue("GivenName"));
tC.setPropertyValue("SurName",callTC.getPropertyValue("SurName"));
tC.setPropertyValue("PrimaryEmail",callTC.getPropertyValue("PrimaryEmail"));
tC.setPropertyValue("Language1",callTC.getPropertyValue("Language1"));
tC.setPropertyValue("DisplayImageURL",callTC.getPropertyValue("DisplayImageURL"));
tC.setPropertyValue("AlternateEmail",callTC.getPropertyValue("AlternateEmail"));
tC.setPropertyValue("PostalAddress",callTC.getPropertyValue("PostalAddress"));
tC.setPropertyValue("PostalCode",callTC.getPropertyValue("PostalCode"));
tC.setPropertyValue("Locality",callTC.getPropertyValue("Locality"));
tC.setPropertyValue("StateOrProvince",callTC.getPropertyValue("StateOrProvince"));
tC.setPropertyValue("Country",callTC.getPropertyValue("Country"));
tC.setPropertyValue("TelephoneNumber",callTC.getPropertyValue("TelephoneNumber"));
tC.setPropertyValue("MobileTelephoneNumber",callTC.getPropertyValue("MobileTelephoneNumber"));
tC.setPropertyValue("MeetsAgeOfMajority",callTC.getPropertyValue("MeetsAgeOfMajority"));
tC.setPropertyValue("urnUser",callTC.getPropertyValue("urnUser"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("QuestionID1",callTC.getPropertyValue("QuestionID1"));
tC.setPropertyValue("QuestionResponse1",callTC.getPropertyValue("QuestionResponse1"));
tC.setPropertyValue("QuestionID2",callTC.getPropertyValue("QuestionID2"));
tC.setPropertyValue("QuestionResponse2",callTC.getPropertyValue("QuestionResponse2"));
tC.setPropertyValue("ResourceStatus",callTC.getPropertyValue("ResourceStatus"));

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("NODE_ACCOUNT_ID", callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL", callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("user_oid1",callTC.getPropertyValue("user_oid"));
tC.setPropertyValue("account_oid",callTC.getPropertyValue("account_oid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Setting constants based on Geo Profile" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/* Setting constants based on Geo Profile*/

if(tP.getPropertyValue("Country")=="US")
{
  tP.setPropertyValue("GeoProfile","US");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="CA")
{
  tP.setPropertyValue("GeoProfile","CA");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","13");
  tP.setPropertyValue("CHILD_MAX_AGE","12");
}
else
if(tP.getPropertyValue("Country")=="GB")
{
  tP.setPropertyValue("GeoProfile","GB");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AU")
{
  tP.setPropertyValue("GeoProfile","AU");          
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="NZ")
{
  tP.setPropertyValue("GeoProfile","NZ");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="IE")
{
  tP.setPropertyValue("GeoProfile","IE");             
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
else
if(tP.getPropertyValue("Country")=="AT")
{
  tP.setPropertyValue("GeoProfile","AT");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
else
if(tP.getPropertyValue("Country")=="DE")
{
  tP.setPropertyValue("GeoProfile","DE");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","14");
  tP.setPropertyValue("CHILD_MAX_AGE","13");
}
  else
if(tP.getPropertyValue("Country")=="CH")
{
  tP.setPropertyValue("GeoProfile","CH");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("YOUTH_MIN_AGE","16");
  tP.setPropertyValue("CHILD_MAX_AGE","15");
}
  else
if(tP.getPropertyValue("Country")=="FR")
{
  tP.setPropertyValue("GeoProfile","FR");           
  tP.setPropertyValue("ADULT_MIN_AGE","18");
  tP.setPropertyValue("CHILD_MAX_AGE","17");
}

	def userType = tC.getPropertyValue("userType")
	log.info "userType: "+userType;
	
	switch(userType){
	
	case "ADULT":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("ADULT_MIN_AGE").toInteger()+1)*365);
	log.info "Adult DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTH":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("YOUTH_MIN_AGE").toInteger()+1)*365);
	log.info "YOUTH DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "CHILD":
	
	Date dob = (new Date());
	dob = dob - ((tP.getPropertyValue("CHILD_MAX_AGE").toInteger()-1)*365);
	log.info "CHILD DateOfBirth: "+dob.format('yyyy-MM-dd');
	tC.setPropertyValue("DateOfBirth",dob.format('yyyy-MM-dd'));
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTPlus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "AdultPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "ADULTMinus":
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHPlus":
		
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, -1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHPlus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob);
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "YOUTHMinus":
   	
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, +1);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHMinus DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("CHILD_DOB_XML",dob.format('yyyy-MM-dd')); 
	break;

	case "ADULTToday":
	 
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear = today.get(Calendar.YEAR) - tP.getPropertyValue("ADULT_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "ADULTToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("ADULT_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	case "YOUTHToday":

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Calendar today = Calendar.getInstance();
	int curYear1 = today.get(Calendar.YEAR)- tP.getPropertyValue("YOUTH_MIN_AGE").toInteger();
	int curMonth = today.get(Calendar.MONTH);
	int curDay = today.get(Calendar.DAY_OF_MONTH);

	if(curDay==29){
		curDay==28
		}

	Date now = new Date(curYear1-1900,curMonth,curDay);  
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(now);  
	calendar.add(Calendar.DAY_OF_YEAR, 0);
	def dob = sdf.format(calendar.getTime());
	log.info "YOUTHToday DateOfBirth: "+dob;
	tC.setPropertyValue("DateOfBirth",dob); 
	tC.setPropertyValue("YOUTH_DOB_XML",dob.format('yyyy-MM-dd'));
	break;

	default:
	log.info "userType is not matched!!"
	break;

	}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="Users" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:basic" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>uvtc_user</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>testing@uvvutesting.biz</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>testing1@uvvutesting.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
	</ContactInfo>
        <!--Languages>
		<Language primary="true">en-GB</Language>	
	</Languages-->
       <!-- <DateOfBirth> depricated </DateOfBirth> -->
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password> 
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#Project#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 			
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
def primaryEmail = context.expand( '${#TestCase#PrimaryEmail}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/

if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
		errorReason = "The supplied country code is invalid.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
		expectHTTPconnection = "close";
	break;

	case "NULL_COUNTRY":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
		errorReason = "The country code cannot be null.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
		expectHTTPconnection = "close";
	break;
	
	case "API_NOT_AUTH":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
		errorReason = "API call not authorized";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserNotActive";
		errorReason = "User is not active";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
		errorReason = "Requesting User ID Not Specified";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
		expectHTTPconnection = "close";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
		errorReason = "First User must be 18 years or older";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
		errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
	     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorReason = "The first user in a household account must be a full-access user.";
		errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;

	case "INVALID_PASSWORD":
	     expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		errorReason = "The password is not valid.";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPasswordNotValid";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPasswordNotValid";
		expectHTTPconnection = "close";
	break;

	case "INVALID_PRIMARY_EMAIL":
		expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountUserPrimaryEmailNotValid";
		errorReason = "The primary email address is not valid. - " + primaryEmail;
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountUserPrimaryEmailNotValid";
		expectHTTPconnection = "close";
	break;
	
}

tC.setPropertyValue("expectHTTPstatus",expectHTTPstatus);


// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
/*
if (XMLbodynull) {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
} else {
	//assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}
*/
//Location Header

if (httpLocationHeader) {
	 assert context.expand( '${#TestCase#httpLocation}') != null;

      def a = context.expand( '${#TestCase#httpLocation}');
      def b = a.toURL();
      def urlStr = b.getPath();

      if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode")){
                                
         assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
         
         int lastColon = urlStr.lastIndexOf(':');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 1);
         def node_User = urlStr.substring(lastSlash + 1);
                                           
         tP.setPropertyValue("NODE_USER_OID_BAU",userid);

         tP.setPropertyValue("NODE_USER_ID_BAU",node_User);
        // tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
      } else {

         assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
         int lastColon = urlStr.lastIndexOf('%3A');
         int lastSlash = urlStr.lastIndexOf('/');
         userid     = urlStr.substring(lastColon + 3);
         def node_User = urlStr.substring(lastSlash + 1);
                                
         tP.setPropertyValue("NODE_USER_OID_BAU",userid);

        tP.setPropertyValue("NODE_USER_ID_BAU",node_User);
         //tC.setPropertyValue("NODE_USER_ID_FULL1",node_User);
       }
      }
                                

else {
                                
       	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//Content-Type
//assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		log.info errorLink;
		log.info myXML.Error.ErrorLink.toString()
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Account_OID_and_User_OID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def dbUser;

def expectHTTPstatus = tC.getPropertyValue("expectHTTPstatus");

if (expectHTTPstatus == "HTTP/1.1 201 Created")
     {  	
  		def dBHost = context.expand( '${#Project#targetsystem}' )
		
		try          {
		                dbUser = new dbUtils.dbUser(log,dBHost);
		                }
		catch(Throwable e) {
		                log.info "ERROR - dbUtils.dbUser - $e";
		                assert 1 == 2;
		                }
		finally {
		         try {
		                 String u = dbUser.userGetUserOID(tC.getPropertyValue("UserName"));
		                 String a = dbUser.userGetAccountOIDbyUsername(tC.getPropertyValue("UserName"))
		
		                 assert u.length() > 0;
		                 assert a.length() > 0;
		                 
		                 tC.setPropertyValue("user_oid", u);
		                 tC.setPropertyValue("account_oid", a);
		                 tP.setPropertyValue("E2E_AccountOID_BAU1", a);
		                 tP.setPropertyValue("E2E_UserOID_BAU1", u);	
		                }
		          catch(Throwable e) {
		                 log.info "ERROR - dbUtils.userGetUserOID - $e";
		                 assert 1 == 2;                     
		     		     }
				}
     }
     else
     {
     	log.info ("Can not retreive User_OID for a negative scenario");
     }
     

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the Username and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL1"));
callTC.setPropertyValue("UserName",tC.getPropertyValue("UserName"));
callTC.setPropertyValue("user_oid1",tC.getPropertyValue("user_oid"));
callTC.setPropertyValue("account_oid",tC.getPropertyValue("account_oid"));
callTC.setPropertyValue("DateOfBirth",tC.getPropertyValue("DateOfBirth"));</script></con:config></con:testStep><con:properties><con:property><con:name>AlternateEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>CLG_NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>${#Project#coordinatorSchema}</con:value></con:property><con:property><con:name>Country</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">US</con:value></con:property><con:property><con:name>DateOfBirth</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1994-09-29</con:value></con:property><con:property><con:name>DisplayImageURL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>FirstFullUsername</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>GivenName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>Language1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Locality</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MeetsAgeOfMajority</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>MobileTelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:E71D3C4DD16B00D0E0401F0A05995914</con:value></con:property><con:property><con:name>password</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Password1</con:value></con:property><con:property><con:name>PostalAddress</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PostalCode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PrimaryEmail</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">testing@uvvutesting.biz</con:value></con:property><con:property><con:name>PrimaryEmailConfirmationEndpoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>Privilege</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">full</con:value></con:property><con:property><con:name>QuestionID</con:name><con:value>1200</con:value></con:property><con:property><con:name>QuestionID1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionID2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse</con:name><con:value>myname</con:value></con:property><con:property><con:name>QuestionResponse1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QuestionResponse2</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResourceStatus</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>StateOrProvince</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>SurName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>TelephoneNumber</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>Basic_User_Create_STS_Policies</con:value></con:property><con:property><con:name>urnUser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>UserName</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">userget_firstuser20150417_122757</con:value></con:property><con:property><con:name>userType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">ADULT</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>user_oid</con:name><con:value>13E6DD9F1AF3797AE05307991F0A593A</con:value></con:property><con:property><con:name>account_oid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>user_oid1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectHTTPstatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ADULT_DOB_XML</con:name><con:value>1994-09-29</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6afcd2ee-d125-48d3-86d9-0b8f90dcad31</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS_API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true" id="95aeda91-33f3-48ca-abe6-4fd1856b5569">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("audience",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);

tC.setPropertyValue("expectErrType","SUCCESS");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def callTS = tP.getTestSuiteByName(callTSname);

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("UserName"));
tC.setPropertyValue("password",tP.getPropertyValue("password"));

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
	tP.setPropertyValue("audience","urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdRTLCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportal")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdAccportalCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdLLASPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSP")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdDSPCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoo")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCoordCS")+";urn:dece:org:org:dece:"+tP.getPropertyValue("nodeIdCON")+";")
	
}
else
{
	tC.setPropertyValue("tokentype",URLEncoder.encode(tP.getPropertyValue("urntokenType_userpassword"), "UTF-8"));
	tP.setPropertyValue("audience","urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdRTLCS")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdAccportal")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdAccportalCS")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdDLASP")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdDLASPCS")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdLLASPCS")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdDSP")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdDSPCS")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdCoo")+";urn%3Adece%3Aorg%3Aorg%3Adece%3Acoord%3Acs;"+"urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdCON")+";urn%3Adece%3Aorg%3Aorg%3Adece%3A"+tP.getPropertyValue("nodeIdCONCS")+";")
	
}

	</script></con:config>
      </con:testStep>
      
      
      
      
      <con:testStep type="groovy" name="Establish pem">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - STS");
RestTestRequestStep testStep1 = testCase.getTestStepByName("GET - STS");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);

</script></con:config>
      </con:testStep>
      
      <con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange" methodName="STSCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="${#Project#coordinatorSchema}">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="audience" value="${#Project#audience}"/>
  <con:entry key="tokentype" value="${#TestCase#tokentype}"/>
</con:parameters></con:restRequest></con:config></con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");

tP.setPropertyValue("targetURL","qa.p.uvvu.com:7001");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

/*
 *if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
  
	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
*/</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract ERROR table information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectErrType[" + tC.getPropertyValue("expectErrType") + "]";

switch (tC.getPropertyValue("expectErrType")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = true;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection
log.info "doConnectionClose=="+doConnectionClose;
if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
log.info "doContentLocaton=="+doContentLocaton;
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "Path=="+b.getPath();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	//assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
	}
}</script></con:config>
      </con:testStep>
      
      
      
      
      
      
      
      
      
      
      <con:testStep type="groovy" name="Return the assertion information to the Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionUUID1",null);
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionUUID1",tC.getPropertyValue("assertionUUID"));</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="GET - STS"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STSGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STS" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="assertionUUID" value="${#TestCase#assertionUUID}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('GET - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("V1");
String minor = tP.getPropertyValue("V2");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
log.info  "startAssert: "+startAssert;

if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("SAML",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
						
			//tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			//tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			if (tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
			{
                    tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
				tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
        	     } 
        	     else 
        	     {
				tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(accountId.toString()));
				tC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(userId.toString()));        	     	
		     }
	} 
	else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//def url           = tP.getPropertyValue("targetURL");
//def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 200 OK";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
//assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}
/*
//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
*/	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/dece/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.saml2:Assertion.size() == 1;
		assert myXML.ds:Signature.size()    == 1;
		assert myXML.ds:SignedInfo.size()   == 1;
		assert myXML.ds:DigestValue.size()  == 1;
		assert myXML.ds:SignatureValue.size()  == 1;
		assert myXML.ds:X509Certificate.size() == 1;
		assert myXML.saml2:NameID.size()    == 1;
		assert myXML.saml2:AudienceRestriction.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
		assert myXML.saml2:AssertionURIRef.size() == 1;
/*
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
		*/
	} else {
		return false;
	}
}



</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
import java.lang.*;

import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");


String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);

byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);
// finally, URL encode it
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);


</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

String acctID = tC.getPropertyValue("NODE_ACCOUNT_ID");
String userID = tC.getPropertyValue("NODE_USER_ID");

//tP.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));

if (acctID != null &amp;&amp; acctID.length() > 0) {
	
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID1",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
	//callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL1",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionAccountId","ERROR");
}
if (userID != null &amp;&amp; userID.length() > 0) {
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));	
	//callTC.setPropertyValue("NODE_USER_ID1",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//tP.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	//callTC.setPropertyValue("NODE_USER_ID_FULL1",tC.getPropertyValue("NODE_USER_ID_FULL"));
} else {
	callTC.setPropertyValue("assertionUserId","ERROR");
}</script></con:config>
      </con:testStep><con:properties>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>Full_User2_Create_STS_Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>E2E</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>audience</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>assertionUUIDprior</con:name><con:value>_732606f9-3702-470e-9ecf-2bbb514a18ba</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fab8a272-b60a-44a3-ada2-73cb3506f042</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_fab8a272-b60a-44a3-ada2-73cb3506f042" IssueInstant="2015-04-17T06:55:46.397Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_fab8a272-b60a-44a3-ada2-73cb3506f042"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>iFy40CMnYxbDCQYtj/acaKKbYPY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>H8/VeqvdxXDAOuvTAhwl9GVq2JvB3IshiIteW7CK3ydC6nzCOygXD+gEyThKLiUw+sad/HbDhyECDDZ5ErAauvdnj91UnaVQEVSU2MGmK3DM7D+g3iuQ6X6Aa0QjLl005rn0ArIP9D65I86p5+JCjqZLr6LMmMWmfQfZ+NyRqiU=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_1xnw91g6ci5yc1fgr6slkp456w" NotOnOrAfter="2015-04-17T09:55:46.397Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-04-17T06:55:36.397Z" NotOnOrAfter="2015-04-17T12:55:46.397Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:ACCESCS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:ACCESS</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:COO</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:DSP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET_CS_1</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa1.q.uvvu.com:443/rest/2015/02/SecurityToken/Assertion/_fab8a272-b60a-44a3-ada2-73cb3506f042</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-04-17T06:55:46.397Z" SessionIndex="_fab8a272-b60a-44a3-ada2-73cb3506f042"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>username1</con:name><con:value>firstuser20130726_035156</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVbZcuI6EP0VynlMGcsrwRWocmwy4wlkgzBJXlJCFqCMLYMls8zXX8mAA4TkMsmTS+1eTreOuvucwSQ2XI8xnHGS0soiiSlzC2lDyTPqppAR5lKYYOZy5Ha9Tts1qsCFGxOlEgYN5WUIB2fQqBnqwAFQtSxoqjCChloz0cC0gTMEliFUGctxSBmHlDcUA+i2CixVr/WA49q2azlVs157Vip9nDHhW6hUgbIGtWANZcz5xNW0+XxenZvVNBtpBgC69thpd9EYJ1Bpnq8yKgJlzbU+qkYY4ThGVZQm2rm2o3MeMbdLRhTyPMPrWNFHsYAG6prQiRgZnSilLY5COkyLow9pSgmCMfkLZX06mI/TqOLFozQjfJx8mIQOpGMVL5CKdIueKNoutCMd7SDMGFTZGOprX/d4iDNMEa483IcN5eS4WytMexmkbJhmCds9/hseTGc4Tic4UtkmrTW04x0eqFTzHCM3pCjOGZnha0nWCUSYrW8To+NdVW4zPCSLNmGCoAsm0Wnb8PaOq2oEZIQZ/8oFbV3OykkfxjluksulBfwOfVoMAv/uib9qEMGrq8HT7VOjALCtXAjKq10d90hZkmhl8fNM6+PpLFo8Bt5NPut543lc/9GfGr9mF2bIxiTk+HfNvzKXke/Qv/7NcvQYnI5ay974qk0e5qcMRtrPQTBetvwgeLZbmQfzWURf6/oDhf27Vr/7YHR+JFdm0KkJQ5Pkd86j40Fw99qOAbAzCrwsvK0Hjh2eORP79Jf/On1uZ067k3R+J8O74fPp9fJ+Sh4aZTpb+HdlmzffzQevGPHNUdIgDCqX4pYg/7yZSQmJ1GGh6k5k82EcU640pZXsHW4u2h2JXHGHq7NuthzfvzSA413UgO+3gG0Cu17XL4FX95yzTZNZodiD6Kd0SGQs2XJXtPkcIEpchmmEM3WW5qLTMeUTjwHksBLSe/EIUspwLxXtWV/QeV0fOYjYS6QPR5nD4j8Ty3bmSuU65Tf0JvOGHGe7Tbm+05TvMSITgmXnlsRmgtmMi2JM4SznsV6dwSrFuejtmWyzrmGd2RojySTGEqqWpFEe4+pkPClKo7HV11AhYoX0vtUrntuHie3/29RA6EREKjCZywUW94gPTBdzk8iHCevGdsIb914eEfmyREF5RtAKye6vN55IgpQk8QQvun53A7vU/gfrrxr7NzdftAzaXvf2O7YvfvdF/6qDr4f+XuD2d5EL9n7T/L2l9gkBtX3ul4GiGdkKu9nTxMQXM6K5eblTqFen1Xw2y4vHalmmlgn3mnwNGjC0Lka5mGLLXvoHU630oh21MpTA94KX8l2IOR/TLoccJ6K5VIrjETtiFzO5I4aiLS6OXUB3QorScbzgh2R+LPZbifjTFRi5SOoJ8a34zNMseruxA7624og8xYrICR3Jk1wXlh/wAqXCLRGDLs22nR9ycCj4rrAscomFC0INco4//lORE6yhQITSnPIwUArB9lQtcPLlBLtvSu/cFIO73OTJ/6/yKikogLDY/xkp/MuFzJVPgI62JvM66LvhfGEB3boEdnB5sT2cdcd8e6M76JrvxO8lW3Xa53jzPw==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2015-04-17T06:55:36.397Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2015-04-17T12:55:46.397Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2015-04-17T06:55:36.397Z</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_fab8a272-b60a-44a3-ada2-73cb3506f042</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>555384c9-6fa2-448b-a38e-713264e945f2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" disabled="true" id="c34932b0-300b-479b-ae13-c62b7794e48f"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#Project#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;

</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Set Pem" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>DiscreteMediaRightDeleteDelete07</con:value></con:property><con:property><con:name>sName</con:name><con:value>CommonSteps</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateTOU_API" searchProperties="true" disabled="true" id="d7b3f813-cf69-43bd-94a8-1acc8660642e"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Set_TOU_Policy_Resource" id="04463f8e-5ac3-4aa2-a66c-7495386f3473"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#Country}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )

def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("policy_TOU",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("policy_TOU");

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("Policy_Create_TOU");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_TOU"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_TOU" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
    <dece:Resource>${#Project#Policy_TOU}</dece:Resource>
    <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:${#Project#nodeIdCoo}</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_TOU');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVbZcuI6EP0VynlMGcsrwRWocmwy4wlkgzBJXlJCFqCMLYMls8zXX8mAA4TkMsmTS+1eTreOuvucwSQ2XI8xnHGS0soiiSlzC2lDyTPqppAR5lKYYOZy5Ha9Tts1qsCFGxOlEgYN5WUIB2fQqBnqwAFQtSxoqjCChloz0cC0gTMEliFUGctxSBmHlDcUA+i2CixVr/WA49q2azlVs157Vip9nDHhW6hUgbIGtWANZcz5xNW0+XxenZvVNBtpBgC69thpd9EYJ1Bpnq8yKgJlzbU+qkYY4ThGVZQm2rm2o3MeMbdLRhTyPMPrWNFHsYAG6prQiRgZnSilLY5COkyLow9pSgmCMfkLZX06mI/TqOLFozQjfJx8mIQOpGMVL5CKdIueKNoutCMd7SDMGFTZGOprX/d4iDNMEa483IcN5eS4WytMexmkbJhmCds9/hseTGc4Tic4UtkmrTW04x0eqFTzHCM3pCjOGZnha0nWCUSYrW8To+NdVW4zPCSLNmGCoAsm0Wnb8PaOq2oEZIQZ/8oFbV3OykkfxjluksulBfwOfVoMAv/uib9qEMGrq8HT7VOjALCtXAjKq10d90hZkmhl8fNM6+PpLFo8Bt5NPut543lc/9GfGr9mF2bIxiTk+HfNvzKXke/Qv/7NcvQYnI5ay974qk0e5qcMRtrPQTBetvwgeLZbmQfzWURf6/oDhf27Vr/7YHR+JFdm0KkJQ5Pkd86j40Fw99qOAbAzCrwsvK0Hjh2eORP79Jf/On1uZ067k3R+J8O74fPp9fJ+Sh4aZTpb+HdlmzffzQevGPHNUdIgDCqX4pYg/7yZSQmJ1GGh6k5k82EcU640pZXsHW4u2h2JXHGHq7NuthzfvzSA413UgO+3gG0Cu17XL4FX95yzTZNZodiD6Kd0SGQs2XJXtPkcIEpchmmEM3WW5qLTMeUTjwHksBLSe/EIUspwLxXtWV/QeV0fOYjYS6QPR5nD4j8Ty3bmSuU65Tf0JvOGHGe7Tbm+05TvMSITgmXnlsRmgtmMi2JM4SznsV6dwSrFuejtmWyzrmGd2RojySTGEqqWpFEe4+pkPClKo7HV11AhYoX0vtUrntuHie3/29RA6EREKjCZywUW94gPTBdzk8iHCevGdsIb914eEfmyREF5RtAKye6vN55IgpQk8QQvun53A7vU/gfrrxr7NzdftAzaXvf2O7YvfvdF/6qDr4f+XuD2d5EL9n7T/L2l9gkBtX3ul4GiGdkKu9nTxMQXM6K5eblTqFen1Xw2y4vHalmmlgn3mnwNGjC0Lka5mGLLXvoHU630oh21MpTA94KX8l2IOR/TLoccJ6K5VIrjETtiFzO5I4aiLS6OXUB3QorScbzgh2R+LPZbifjTFRi5SOoJ8a34zNMseruxA7624og8xYrICR3Jk1wXlh/wAqXCLRGDLs22nR9ycCj4rrAscomFC0INco4//lORE6yhQITSnPIwUArB9lQtcPLlBLtvSu/cFIO73OTJ/6/yKikogLDY/xkp/MuFzJVPgI62JvM66LvhfGEB3boEdnB5sT2cdcd8e6M76JrvxO8lW3Xa53jzPw==</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value>13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value>13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateMUC_API" searchProperties="true" disabled="true" id="b2b2c4bc-74ef-4095-bb49-ab4a5f481ca1"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("Policy_Create_MUC");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="Policy_Create_MUC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Policy_Create_MUC" mediaType="application/xml" postQueryString="false" accept="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:${#Project#nodeIdCoo}</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODE_USER_ID_FAU1}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('Policy_Create_MUC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVbZcuI6EP0VynlMGcsrwRWocmwy4wlkgzBJXlJCFqCMLYMls8zXX8mAA4TkMsmTS+1eTreOuvucwSQ2XI8xnHGS0soiiSlzC2lDyTPqppAR5lKYYOZy5Ha9Tts1qsCFGxOlEgYN5WUIB2fQqBnqwAFQtSxoqjCChloz0cC0gTMEliFUGctxSBmHlDcUA+i2CixVr/WA49q2azlVs157Vip9nDHhW6hUgbIGtWANZcz5xNW0+XxenZvVNBtpBgC69thpd9EYJ1Bpnq8yKgJlzbU+qkYY4ThGVZQm2rm2o3MeMbdLRhTyPMPrWNFHsYAG6prQiRgZnSilLY5COkyLow9pSgmCMfkLZX06mI/TqOLFozQjfJx8mIQOpGMVL5CKdIueKNoutCMd7SDMGFTZGOprX/d4iDNMEa483IcN5eS4WytMexmkbJhmCds9/hseTGc4Tic4UtkmrTW04x0eqFTzHCM3pCjOGZnha0nWCUSYrW8To+NdVW4zPCSLNmGCoAsm0Wnb8PaOq2oEZIQZ/8oFbV3OykkfxjluksulBfwOfVoMAv/uib9qEMGrq8HT7VOjALCtXAjKq10d90hZkmhl8fNM6+PpLFo8Bt5NPut543lc/9GfGr9mF2bIxiTk+HfNvzKXke/Qv/7NcvQYnI5ay974qk0e5qcMRtrPQTBetvwgeLZbmQfzWURf6/oDhf27Vr/7YHR+JFdm0KkJQ5Pkd86j40Fw99qOAbAzCrwsvK0Hjh2eORP79Jf/On1uZ067k3R+J8O74fPp9fJ+Sh4aZTpb+HdlmzffzQevGPHNUdIgDCqX4pYg/7yZSQmJ1GGh6k5k82EcU640pZXsHW4u2h2JXHGHq7NuthzfvzSA413UgO+3gG0Cu17XL4FX95yzTZNZodiD6Kd0SGQs2XJXtPkcIEpchmmEM3WW5qLTMeUTjwHksBLSe/EIUspwLxXtWV/QeV0fOYjYS6QPR5nD4j8Ty3bmSuU65Tf0JvOGHGe7Tbm+05TvMSITgmXnlsRmgtmMi2JM4SznsV6dwSrFuejtmWyzrmGd2RojySTGEqqWpFEe4+pkPClKo7HV11AhYoX0vtUrntuHie3/29RA6EREKjCZywUW94gPTBdzk8iHCevGdsIb914eEfmyREF5RtAKye6vN55IgpQk8QQvun53A7vU/gfrrxr7NzdftAzaXvf2O7YvfvdF/6qDr4f+XuD2d5EL9n7T/L2l9gkBtX3ul4GiGdkKu9nTxMQXM6K5eblTqFen1Xw2y4vHalmmlgn3mnwNGjC0Lka5mGLLXvoHU630oh21MpTA94KX8l2IOR/TLoccJ6K5VIrjETtiFzO5I4aiLS6OXUB3QorScbzgh2R+LPZbifjTFRi5SOoJ8a34zNMseruxA7624og8xYrICR3Jk1wXlh/wAqXCLRGDLs22nR9ycCj4rrAscomFC0INco4//lORE6yhQITSnPIwUArB9lQtcPLlBLtvSu/cFIO73OTJ/6/yKikogLDY/xkp/MuFzJVPgI62JvM66LvhfGEB3boEdnB5sT2cdcd8e6M76JrvxO8lW3Xa53jzPw==</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">20</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa1.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631/User/urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A/Policy/urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\ALL_CODES\Git\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID1</con:name><con:value>E4E99389111664AEE0401F0A07990AF6</con:value></con:property><con:property><con:name>NODE_USER_ID_REQ_ENTITY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID_CREATED_BY</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreateULC_API" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpLocation",null);

tC.setPropertyValue("expectErrType","SUCCESS");

if( tP.getPropertyValue("V2") != tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("Policy_Class","urn:dece:type:policy:UserLinkConsent");
}
else
{
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );
keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreate_ULC");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreate_ULC"><con:settings/><con:config service="Policy_Create" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="Policy_Create_User" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreate_ULC" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dece:Policy>
    <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
    <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_REQ_ENTITY}</dece:Resource>
    <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#nodeid}</dece:RequestingEntity>
    <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
    <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID_CREATED_BY}">
        <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
    </dece:ResourceStatus>
  </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#Project#NODE_USER_ID_FAU1}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#Project#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep  = tC.getTestStepByName('PolicyCreate_ULC');

String expXML = null;
String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                             log.info "V2: "+tP.getPropertyValue("V2");
			if (tP.getPropertyValue("V2")=="06" || tP.getPropertyValue("V2")=="07"){
			contentLocation = URLDecoder.decode(value[0], "UTF-8");
			}else{
				contentLocation = value[0];
			}
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String orgRequest = url + "/dece/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 201 Created";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (errorRespType == "" || errorRespType == null) {
	errorRespType = "SUCCESS";
}
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
                case "SUCCESS":
                                expectHTTPstatus = "HTTP/1.1 201 Created";
                break;
}
                
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;</script></con:config>
      </con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00005_UserUpdate_FUNC_NonCS_Full_Update_UserName_Others</con:value></con:property><con:property><con:name>sName</con:name><con:value>User_Update_Access_NonCS</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E26A4604E0EC0139E0401F0A05990BBB</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/$major/$minor/Account/urn:dece:accountid:org:dece:E26A4604E0EC0139E0401F0A05990BBB/User/urn:dece:userid:org:dece:E26A4604E1520139E0401F0A05990BBB/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE1B04F1ACAC275C1E0401F0A079905C0</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE1B04F1ACAA475C1E0401F0A079905C0</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:/DECE/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE26A4604E1520139E0401F0A05990BBB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE26A4604E0EC0139E0401F0A05990BBB</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bd6efb96-bbf3-4226-9917-48245caf20c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>43c5dbf9-3574-4373-9d3f-f1b49a7247c5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:${#Project#nodeIdCoo};urn:dece:org:org:dece:${#Project#nodeIdLLASP};urn:dece:org:org:dece:${#Project#nodeIdDLASP};urn:dece:org:org:dece:${#Project#nodeIdDSP};urn:dece:org:org:dece:${#Project#nodeIdCoordCS};urn:dece:org:org:dece:${#Project#nodeIdportal};urn:dece:org:org:dece:${#Project#nodeIdLLASPCS};urn:dece:org:org:dece:${#Project#nodeIdDLASPCS};urn:dece:org:org:dece:${#Project#nodeIdDSPCS};urn:dece:org:org:dece:${#Project#nodeIdDEV};urn:dece:org:org:dece:${#Project#nodeIdCON};urn:dece:org:org:dece:${#Project#nodeIdCONCS};urn:dece:org:org:dece:${#Project#nodeIdDECE};urn:dece:org:org:dece:${#Project#nodeIdDECECS};urn:dece:org:org:dece:${#Project#nodeIdportalCS};urn:dece:org:org:dece:${#Project#nodeIdAccportal};urn:dece:org:org:dece:${#Project#nodeIdAccportalCS};urn:dece:org:org:dece:${#Project#nodeIdDEVCS};</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_P0_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/Sprint 3.4.2/DMRDelete/P0</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_DiscreteMediaRightDelete_FUNC_by_Basic_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="82563fe9-720b-48ec-8d7b-a524eda1274c"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_BAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09F085C3A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC09F085C3A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C0FC08384743A85E05305991F0A6155</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92357</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC083846F3A85E05305991F0A6155</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC083846F3A85E05305991F0A6155</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ecf484dd-b406-4686-9f4c-d6f019ee147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_DiscreteMediaRightDelete_FUNC_by_Standard_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="be5bdbb9-bc2f-4241-bc30-31a9ff743147"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_SAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92358</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0F78AC271A2C46E05305991F0AE19B</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0F78AC271A2C46E05305991F0AE19B</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0F78CAC5052C56E05305991F0AC4EA</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0F78CAC5052C56E05305991F0AC4EA</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0C0F78AC271F2C46E05305991F0AE19B</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f0906b0f-7b0b-4f00-bfd9-53f1bc06f3af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_DiscreteMediaRightDelete_FUNC_by_Full_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="259533f3-f08c-4398-9dd3-bd4f4b84f4ea"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0F78B397712C60E05305991F0A6E18</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0F78B397712C60E05305991F0A6E18</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92359</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C0F78B397762C60E05305991F0A6E18</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC08384883A85E05305991F0A6155</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08384883A85E05305991F0A6155</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>712be91a-5ab2-43c8-958c-5549559fe0b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_P0_Deletion_with_Multiple_DMR_Creation_For_Single_RT"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/Sprint 3.4.2/DMRCreate/P0</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="37f15393-d5a2-46c6-a7d7-c4d4d6a9aac8"><con:description/><con:settings/><con:testStep type="groovy" name="Set Node Role to Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate for Multiple DMR creation for single RT"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_For_Multiple_DMR');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid -1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId1",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid1",testCase.getPropertyValue("DiscreteMediaTokenOid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DB for Discrete_Media and Discrete_Media_Purchase tables-1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DB for Discrete_Media_Token, Discrete_Media_Token_History, Purchase_Profile and Pruchased_Fulfillment_Method Tables");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ExpectedCountForPurchaseProfile", "1");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCountForPurchaseFulfillmentMethod","4");
commonTC.setPropertyValue("discreteMediaRightsRemainingExp", "1");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse","Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid -2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId2",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid2",testCase.getPropertyValue("DiscreteMediaTokenOid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DB for Discrete_Media and Discrete_Media_Purchase tables-2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DB for Discrete_Media_Token, Discrete_Media_Token_History, Purchase_Profile and Pruchased_Fulfillment_Method Tables");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ExpectedCountForPurchaseProfile", "1");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCountForPurchaseFulfillmentMethod", "8");
commonTC.setPropertyValue("discreteMediaRightsRemainingExp", "2");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid-3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId3",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid3",testCase.getPropertyValue("DiscreteMediaTokenOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete" id="064e6c8f-ae28-4da6-86df-96929d6a6a46"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;

commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "OK");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid3"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId3"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify DMR Remaining"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Verify Discrete_Media_Rights_Remaining");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("discreteMediaRightsRemainingExp", "2");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DMR Count"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DMR Count");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("DMRCount", testCase.getPropertyValue("DMRCount"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC09F16DD3A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC09F16DD3A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92075</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C0FC09F16E33A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseProfile</con:name><con:value>3</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseFulfillmentMethod</con:name><con:value>4</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>DMRCount</con:name><con:value>3</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid3</con:name><con:value>0C0FC09E2EE23A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid2</con:name><con:value>0C0FC08393313A85E05305991F0A6155</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid1</con:name><con:value>0C0FC09E2EC33A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC09E2EE23A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenId3</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09E2EE23A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenId2</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08393313A85E05305991F0A6155</con:value></con:property><con:property><con:name>DiscreteMediaTokenId1</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09E2EC33A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09E2EE23A81E05305991F0A1E45</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>discreteMediaRightsRemainingExp</con:name><con:value/></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fe8591ad-5083-486f-8428-be211f9b5982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d536f72b-6629-4a2c-b802-2d3628d22f5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1938d22-3257-4e4c-9207-94af48c4d126</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7840c603-ded5-4306-bda0-f7b5f196121c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8365337-8279-4369-9ac3-b07eb75db930</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>064e6c8f-ae28-4da6-86df-96929d6a6a46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_Mutiple DiscreteMediaRights creation for a Single RightsTokenId and Deletion of one DiscreteMediaRightsTokenId  and Creation of DiscreteMediaRights" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d81d2010-fa52-48d6-9f3e-2017b0ff8db6"><con:description/><con:settings/><con:testStep type="groovy" name="Set Node Role to Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate for Multiple DMR creation for single RT"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_For_Multiple_DMR');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid -1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId1",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid1",testCase.getPropertyValue("DiscreteMediaTokenOid"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid -2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId2",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid2",testCase.getPropertyValue("DiscreteMediaTokenOid"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Save the DiscreteMediaTokenId and DiscreteMediaTokenOid-3"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DiscreteMediaTokenId3",testCase.getPropertyValue("DiscreteMediaTokenId"));
testCase.setPropertyValue("DiscreteMediaTokenOid3",testCase.getPropertyValue("DiscreteMediaTokenOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete" id="0ee11026-c419-444d-a24a-537709a298b0"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "OK");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid3"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId3"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet 1"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId3"));

commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ErrorResponse", "ForbiddenDiscreteMediaRightNotActive");


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost-4"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightGet 2"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightGet');

commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Verify DMR Remaining"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Verify Discrete_Media_Rights_Remaining");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("discreteMediaRightsRemainingExp", "3");


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DMR Count"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DMR Count");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("DMRCount", testCase.getPropertyValue("DMRCount"));


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>discreteMediaRightsRemainingExp</con:name><con:value/></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08AE0D43A79E05305991F0AD621</con:value></con:property><con:property><con:name>DiscreteMediaTokenId1</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09F17033A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>DiscreteMediaTokenId2</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08B3B433A77E05305991F0A88ED</con:value></con:property><con:property><con:name>DiscreteMediaTokenId3</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08AE0CB3A79E05305991F0AD621</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC08AE0D43A79E05305991F0AD621</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid1</con:name><con:value>0C0FC09F17033A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid2</con:name><con:value>0C0FC08B3B433A77E05305991F0A88ED</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid3</con:name><con:value>0C0FC08AE0CB3A79E05305991F0AD621</con:value></con:property><con:property><con:name>DMRCount</con:name><con:value>4</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseFulfillmentMethod</con:name><con:value>4</con:value></con:property><con:property><con:name>ExpectedCountForPurchaseProfile</con:name><con:value>3</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0365EEA5D1FB0DE3E05305991F0AA1C8</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92075</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08AE0B63A79E05305991F0AD621</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fe8591ad-5083-486f-8428-be211f9b5982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d536f72b-6629-4a2c-b802-2d3628d22f5b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f1938d22-3257-4e4c-9207-94af48c4d126</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7840c603-ded5-4306-bda0-f7b5f196121c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8365337-8279-4369-9ac3-b07eb75db930</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68eb7689-24b9-4998-8a08-03f6a75dfda6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b657cc35-89d3-4123-b46d-a96123c046af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>92b12c5f-5c7a-4636-9b99-b4e37f11cdca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8af0a497-16bb-47b1-b52e-815efdf1ddbd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f55498fe-e103-4472-b649-bd915a8bb7c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94939be3-9763-4ff0-af39-add5cefe7b33</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0ee11026-c419-444d-a24a-537709a298b0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_P1_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/Sprint 3.4.2/DMRDelete/P1</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_DiscreteMediaRightDelete_FUNC_with_Active_Account_Pending_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d23906e4-32b3-4a2f-9b1d-8cd502fbc8cf"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set User to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'pending'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92353</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08393933A85E05305991F0A6155</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC08393933A85E05305991F0A6155</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUserNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC08AE1023A79E05305991F0AD621</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08AE1023A79E05305991F0AD621</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>24d690ef-3459-472c-aed7-8afd0fff637f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_DiscreteMediaRightDelete_FUNC_with_Pending_Account_Pending_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="48988f85-0c86-4da8-b402-fd4b5202c383"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account and User to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'pending'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'pending'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account and User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )

def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
//def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'active'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92355</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC083939F3A85E05305991F0A6155</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC083939F3A85E05305991F0A6155</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC08393AD3A85E05305991F0A6155</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC08393AD3A85E05305991F0A6155</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c87a9f10-4f8e-4cc5-ba0a-17527229cd3e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00062_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_Case_Insensitive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="593752ab-7cea-437f-a5e4-88091d741704"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="3f0fb369-bb57-403d-bfb2-7382d8daafa3"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>//def testCase  = testRunner.getTestCase();
//def testSuite = testCase.getTestSuite();
//def testProject = testSuite.getProject();
//
//testProject.setPropertyValue("UUID", testCase.getPropertyValue("RequestorUUID"));


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Randomize String Case - Account ID, User ID ,RT ID, DMR ID"><con:settings/><con:config><script>import generalUtils.generalUtils;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def nodeAccountOid = testProject.getPropertyValue("NodeAccountId").split(":")[5].toString();
String nodeAccountId = "urN:DEce:AcCounTid:orG:dece:" + nodeAccountOid ;
log.info "Node Account ID :"+nodeAccountId;


def nodeOid = testCase.getPropertyValue("NodeId").split(":")[5].toString();
String nodeId = "urN:dece:oRg:oRG:deCe:"+nodeOid;
log.info nodeId;


def rightsTokenOid = testCase.getPropertyValue("RightsTokenOid").toString();
String rightsTokenId = "urn:dece:RigThSTokeNiD:org:dece:"+rightsTokenOid;
log.info "Rights Token ID :"+rightsTokenId;

def discreteMediaTokenOid = testCase.getPropertyValue("DiscreteMediaTokenOid").toString();
String discreteMediaTokenId = "urn:dece:dIscRetEMeDiaToKENid:org:dece:"+discreteMediaTokenOid;
log.info "Discrete Media Token ID :"+ discreteMediaTokenId;

a = "urn:dece:";
x = "uSeRId:org:dece:";
y = testProject.getPropertyValue("NodeUserId").split(":")[5].toString();
String nodeUserId = a + x + y;
log.info nodeUserId;

testProject.setPropertyValue("NodeAccountId", nodeAccountId);
testProject.setPropertyValue("NodeUserId", nodeUserId);
//testCase.setPropertyValuelue("State", state);
testCase.setPropertyValue("RightsTokenId", rightsTokenId);
testCase.setPropertyValue("DiscreteMediaTokenId", discreteMediaTokenId);
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CreatorUUID</con:name><con:value>${=project.properties["E2E_UUID_FAU1"].value}</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:dIscRetEMeDiaToKENid:org:dece:0C102D6E599E11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D6E599E11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C102D6CFA0511A4E05307991F0A9529</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92391</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>${=project.properties["E2E_UUID_FAU2"].value}</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:RigThSTokeNiD:org:dece:0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6CFA0011A4E05307991F0A9529</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>be3e1df6-e93b-4080-bc20-882e8af6327a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f0fb369-bb57-403d-bfb2-7382d8daafa3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00152_DiscreteMediaRightDelete_FUNC_with_Active_Account_Blocked:TOU_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b0b347ed-d41f-4b3f-8a67-8874336c6b26"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set User to Blocked:TOU"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'blocked:tou'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92353</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C0FC08AE1223A79E05305991F0AD621</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C0FC08AE1223A79E05305991F0AD621</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUserNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C0FC09F17833A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C0FC09F17833A7DE05305991F0A61AF</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_P2_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/Sprint 3.4.2/DMRDelete/P2</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_DiscreteMediaRightDelete_FUNC_with_Pending_Account_Active_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2182f702-3875-4f8f-99ac-42a8985aa21f"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'pending'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'active'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92354</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6E5C6D11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D6E5C6D11EAE05307991F0A4A78</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D7CF0C31142E05307991F0AE747</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D7CF0C31142E05307991F0AE747</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_DiscreteMediaRightDelete_FUNC_with_Unmatched_AccountId_in_Input_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c7c55b5a-9b40-4381-b31c-e219676622fd"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="40d1fea7-e88a-4ec3-b8c0-304e78c33d99"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonExisting NodeAccountId" id="b3e67fa2-0d54-416c-8936-a64e7280e5e7"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Store the original node account oid and node account id.
def nodeAccountOid = testProject.getPropertyValue("NodeAccountOid");
testCase.setPropertyValue("NodeAccountOid",nodeAccountOid);

def nodeAccountID = "urn:dece:accountid:org:dece:"+nodeAccountOid;
testCase.setPropertyValue("NodeAccountId",nodeAccountID);

log.info "Original Node Account ID :"+nodeAccountID;

//Set invalid Node Account ID.
testProject.setPropertyValue("NodeAccountId","urn:dece:accountdi:ogr:dece:"+nodeAccountOid );


</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonMatching NodeAccountId 1" id="7963c5ee-1159-4d08-8155-1f17c83a1f6f" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def nodeAccountId = context.expand( '${#Project#NodeAccountId}' )

testCase.setPropertyValue("temp",nodeAccountId);


testProject.setPropertyValue("NodeAccountId", "urn%3Adece%3Aaccountid%3Aorg%3Adece%3A3823101007");

</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonMatching NodeAccountId" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testProject.setPropertyValue("NodeAccountId", "urn:dece:accountid:org:dece:3823101007");
testProject.setPropertyValue("NodeAccountId", "urn%3Adece%3Aaccountid%3Aorg%3Adece%3A3823101007");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset NodeAccountId" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("NodeAccountId", "urn:dece:accountid:org:dece:3823101");</script></con:config></con:testStep><con:testStep type="groovy" name="Reset NodeAccountId 1" disabled="true" id="352d4620-bd46-422f-a51e-2d5ffac4a5bf"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def temp = context.expand( '${#TestCase#temp}' )


testProject.setPropertyValue("NodeAccountId", temp);

</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Reset NodeAccountId to original one at Project Level.
testProject.setPropertyValue("NodeAccountId", testCase.getPropertyValue("NodeAccountId"));</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92356</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D7294EB112BE05307991F0A43FB</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D7294EB112BE05307991F0A43FB</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountIdUnmatched</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D8ED88610F8E05307991F0A4316</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D8ED88610F8E05307991F0A4316</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>temp</con:name><con:value>urn:dece:accountid:org:dece:E93E4B0835969DC0E0401F0A05995AC5</con:value></con:property><con:property><con:name>NodeAccountOid</con:name><con:value>0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>7963c5ee-1159-4d08-8155-1f17c83a1f6f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00057_DiscreteMediaRightDelete_FUNC_with_Leased_State_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8d4fd1a7-55df-420a-926b-83c1df1e8dc5"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D6ECF851230E05307991F0AC2E7</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D6ECF851230E05307991F0AC2E7</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDiscreteMediaRightAlreadyConsumedOrLeased</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C102D6E379B11CBE05307991F0A6F7E</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92386</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D6E379511CBE05307991F0A6F7E</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D6E379511CBE05307991F0A6F7E</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00058_DiscreteMediaRightDelete_FUNC_with_Fulfilled_State_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8926b2a3-8b91-4172-8903-941cc2a616a3"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseConsumePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseConsumePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92387</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D7CF0EC1142E05307991F0AE747</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D7CF0EC1142E05307991F0AE747</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDiscreteMediaRightAlreadyConsumedOrLeased</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D72950C112BE05307991F0A43FB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D72950C112BE05307991F0A43FB</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C102D7CF0F21142E05307991F0AE747</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00059_DiscreteMediaRightDelete_FUNC_after_DMRLeaseRelease" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e927f170-b122-4809-b199-72787bdac39f"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost" id="15fadb2b-1b16-4c15-94cf-962bafbb8515"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseReleasePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseReleasePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92388</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D8ED8B310F8E05307991F0A4316</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D8ED8B310F8E05307991F0A4316</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D8ED8C110F8E05307991F0A4316</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D8ED8C110F8E05307991F0A4316</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C102D8ED8B910F8E05307991F0A4316</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>15fadb2b-1b16-4c15-94cf-962bafbb8515</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00061_DiscreteMediaRightDelete_FUNC_after_DMRDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="67633894-6fb0-43c0-87bf-f6c3f51acc67"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode")){


	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
//commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92390</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C102D7CABFC1267E05307991F0A385F</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C102D7CABFC1267E05307991F0A385F</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C102D6BB09E117EE05307991F0AE3AC</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C102D6BB09E117EE05307991F0AE3AC</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C102D7CAC021267E05307991F0A385F</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_CS_P0_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/106.2.6/DMRDelete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00028_DiscreteMediaRightDelete_FUNC_by_Basic_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="13d31fb1-7f33-40bb-b683-a5b5e28469be"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_BAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92357</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0824CE7CD59316BCE0530F991F0ACC8D</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0824CE7CD59316BCE0530F991F0ACC8D</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0824CE97EF6E16B6E0530F991F0AB957</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0824CE97EF6E16B6E0530F991F0AB957</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0824CE7CD59816BCE0530F991F0ACC8D</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ecf484dd-b406-4686-9f4c-d6f019ee147f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00029_DiscreteMediaRightDelete_FUNC_by_Standard_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fd4a5f46-6440-405b-8b4e-04ce4fa21b47"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_SAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92358</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:03F8097988EA4AE6E05305991F0A8469</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>03F8097988EA4AE6E05305991F0A8469</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>03F809A326CD4E32E05305991F0AE8D4</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:03F809A326CD4E32E05305991F0AE8D4</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>03F8097988ED4AE6E05305991F0A8469</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f0906b0f-7b0b-4f00-bfd9-53f1bc06f3af</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00030_DiscreteMediaRightDelete_FUNC_by_Full_Access_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b792f6bb-5176-443f-bfc0-befa71099515"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92359</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:03F7FFE017B84765E05307991F0A4726</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>03F7FFE017B84765E05307991F0A4726</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>03F80242253C50D7E05307991F0A815D</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:03F80242253C50D7E05307991F0A815D</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>03F7FFE017BB4765E05307991F0A4726</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>712be91a-5ab2-43c8-958c-5549559fe0b6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_CS_P1_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/Sprint 3.4/DMRDelete/RTL_CS</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00024_DiscreteMediaRightDelete_FUNC_with_Active_Account_Pending_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d0f3350e-a847-470a-bbe8-510edd8480fe"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set User to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'pending'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92353</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C109B9A1D541F08E05307991F0AF9BC</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C109B9A1D541F08E05307991F0AF9BC</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUserNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C109C5AD1781ED4E05307991F0A6063</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C109C5AD1781ED4E05307991F0A6063</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>24d690ef-3459-472c-aed7-8afd0fff637f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00026_DiscreteMediaRightDelete_FUNC_with_Pending_Account_Pending_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="4e6083cc-effb-4ce5-949e-a26a3964308c"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account and User to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'pending'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'pending'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account and User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);


def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'active'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92355</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C109C2E26AC65BFE05305991F0A3D28</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C109C2E26AC65BFE05305991F0A3D28</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C109C301C4665DFE05305991F0A2A3A</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C109C301C4665DFE05305991F0A2A3A</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c87a9f10-4f8e-4cc5-ba0a-17527229cd3e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00152_DiscreteMediaRightDelete_FUNC_with_Active_Account_Blocked:TOU_User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="00f90be1-8937-4be3-91c7-4b8243f675a9"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set User to Blocked:TOU"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'blocked:tou'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("UserOid");
sqlStr = """update account_user
set status = 'active'
where
user_oid = hextoraw('$userOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92353</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C109C81C3351EF3E05307991F0A3523</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C109C81C3351EF3E05307991F0A3523</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUserNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C109C81C3431EF3E05307991F0A3523</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C109C81C3431EF3E05307991F0A3523</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00060_DiscreteMediaRightDelete_FUNC_after_DMRLeaseRelease_and_DMRDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="34c22ad5-17a0-40e4-b314-88837a5ecd9b"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="441cc3f3-2415-49da-836d-1ebdd8fb12f9"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseReleasePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseReleasePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92389</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B23BC2A52C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B23BC2A52C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B6ADDF1C3E65E05305991F0A8961</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6ADDF1C3E65E05305991F0A8961</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C10B23BC2AB2C7FE05305991F0A45E4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>441cc3f3-2415-49da-836d-1ebdd8fb12f9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="RTL_CS_P2_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">C:\Users\aravind.racharla\Desktop\12F\Reports_28thJune2012\DMR_Reports\DMR_Delete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00025_DiscreteMediaRightDelete_FUNC_with_Pending_Account_Active_User_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5e4337c5-2302-4f69-a842-9798f2ba9d8a"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account to Pending"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'pending'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def accountOid = testProject.getPropertyValue("AccountOid");
sqlStr = """update account
set status = 'active'
where
account_oid = hextoraw('$accountOid')""" ;
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92354</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B68200733E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B68200733E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B673C33B3E5BE05305991F0AF700</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B673C33B3E5BE05305991F0AF700</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5335255A0525BD6E0401F0A05996C15</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00027_DiscreteMediaRightDelete_FUNC_with_Unmatched_AccountId_in_Input_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="414965ac-9129-4915-8ad7-13f88c2269c6"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="4c2a1902-4224-416b-ac3e-6e3f81df250c"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost" id="37c62c8d-ec53-49de-a41b-d6eda2795bb9"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonMatching NodeAccountId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeAccountId", testProject.getPropertyValue("NodeAccountId"));

def nodeAccountOid = testProject.getPropertyValue("NodeAccountOid");
def nodeAccountId = "urn:dece:accountdi:org:dece:"+nodeAccountOid;

testProject.setPropertyValue("NodeAccountId",nodeAccountId);

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset NodeAccountId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("NodeAccountId", testCase.getPropertyValue("NodeAccountId"));</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B23E34FF2C9EE05305991F0A17CE</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B23E34FF2C9EE05305991F0A17CE</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountIdUnmatched</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>NodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:0C0FC08AD17E3A79E05305991F0AD621</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92356</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B6D2C65A774CE05307991F0A2178</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B6D2C65A774CE05307991F0A2178</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>4c2a1902-4224-416b-ac3e-6e3f81df250c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37c62c8d-ec53-49de-a41b-d6eda2795bb9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00057_DiscreteMediaRightDelete_FUNC_with_Leased_State_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1ecaca1b-42f4-48c4-b890-2b3f274c88d5"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92386</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B6D2C665774CE05307991F0A2178</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B6D2C665774CE05307991F0A2178</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDiscreteMediaRightAlreadyConsumedOrLeased</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C10B6D2C66B774CE05307991F0A2178</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B6AA20FC774EE05307991F0A0613</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6AA20FC774EE05307991F0A0613</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00058_DiscreteMediaRightDelete_FUNC_with_Fulfilled_State_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="603b13e6-b739-4c43-90f3-efc125dbe6cd"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="07085ca8-8cd9-4acb-8ed6-618f6a8bdb14"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaProfile", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseConsumePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseConsumePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "OK");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92387</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B23BC2B32C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDiscreteMediaRightAlreadyConsumedOrLeased</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B6AEBAF53E61E05305991F0AE572</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B6AEBAF53E61E05305991F0AE572</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C10B23BC2B92C7FE05305991F0A45E4</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>07085ca8-8cd9-4acb-8ed6-618f6a8bdb14</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00059_DiscreteMediaRightDelete_FUNC_after_DMRLeaseRelease_Negative_UV_1886" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c8962a4d-f301-4d34-bae1-3535776b8082" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightLeaseReleasePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightLeaseReleasePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", "ForbiddenDiscreteMediaRightAvailableForLease");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92388</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:072B6E0DBB6B2340E05305991F0AA506</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>072B6E0DBB6B2340E05305991F0AA506</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>072B7FA182E24FA9E05305991F0A3891</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:072B7FA182E24FA9E05305991F0A3891</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>072B6E0DBB712340E05305991F0AA506</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00061_DiscreteMediaRightDelete_FUNC_after_DMRDelete" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9e24bfb5-d539-4e09-a671-a25ed23a2f92"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92390</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0C10B682007E3E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0C10B682007E3E5FE05305991F0AEE98</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0C10B23BC2C22C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0C10B23BC2C22C7FE05305991F0A45E4</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>0C10B68200843E5FE05305991F0AEE98</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00054_DiscreteMediaRightDelete_FUNC_with_Unmatched_Requestor_Retailer_with_LockerViewAll_Consent_and_RatingPolicy_Policy_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("ContentRatingOid", "4");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def usernameFAU1 = context.expand( '${#Project#usernameFAU1}' )


tC.setPropertyValue("username",usernameFAU1);
tC.setPropertyValue("password","Password1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="CoreIdentityInformation"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Core Identity Information Extraction_unmatched_requestor")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

def nodeaccountid = context.expand( '${#TestCase#nodeaccountid}' )
tP.setPropertyValue("NodeAccountId",URLEncoder.encode("urn:dece:accountid:org:dece:"+nodeaccountid,"UTF-8"));
log.info nodeaccountid
def nodeuserid = context.expand( '${#TestCase#nodeuserid}' )
log.info nodeuserid;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Update Role for a Node-RET"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
def nodeRole = "urn:dece:role:retailer";
commonTC.setPropertyValue("NodeRole", nodeRole);
log.info "ROLE is retailer"


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

testCase.setPropertyValue("NodeOid", commonTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("NodeRole", nodeRole);
testProject.setPropertyValue("Node_OID", commonTC.getPropertyValue("NodeOid"));

testProject.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("DiscreteMediaTokenCreatedBy", commonTC.getPropertyValue("NodeOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem 1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("NodeOid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="9a582aaa-90ba-45d0-84ff-ccb42751a8a1" mediaType="application/xml" postQueryString="false" sslKeystore="3232.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NodeOid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#nodeuserid}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#Project#Encoded_NodeAcc_Id}${#TestCase#nodeaccountid}"/>
  <con:entry key="POLICYCLASS" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="USER" value="${#Project#Encoded_NodeUser_Id}${#TestCase#nodeuserid}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet-PolicyDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create Rating Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnRating = context.expand( '${#Project#urnRating}' )
def userRating = context.expand( '${#TestCase#UserRating}' )
def policyResource = "$urnRating"+userRating.toLowerCase();
log.info policyResource

tC.setPropertyValue("policyResource",policyResource);
tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));




def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMR-Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMR-Delete"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMR-Delete" mediaType="application/xml" postQueryString="false" accept="application/xml" id="20463ac5-4dee-49d3-99a9-5174720beb9e" sslKeystore="3232.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#RightsTokenOid}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:assertion type="XPath Match" name="Match content of [Reason]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/ns1:Reason[1]/text()</path><content>The user does not have permission to access this content because of its rating.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="2-PolicyGet-PolicyDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Resetting ISC Node Value"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def iSCnode = context.expand( '${#Project#ISCnode}' )

if(iSCnode == "yes"){
	testProject.setPropertyValue("ISCnode", "no");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
log.info iSCnode1
	

}
else
{
	testProject.setPropertyValue("ISCnode", "yes");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
	log.info iSCnode1
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>DD21DFC705F83460E0401F0A059919D4</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assert2</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_ce4805ab-f19a-41d3-b28a-f37b5f727c8f</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>DD21F9A626ADB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_ce4805ab-f19a-41d3-b28a-f37b5f727c8f</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CreatorUUID</con:name><con:value>_dac83dc6-d886-44f0-a3ec-e760be3b7226</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3ADD2409EA3CDB73DCE0401F0A059926D3</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>DD2409EA3CDB73DCE0401F0A059926D3</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRatingPolicyExists</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/3232.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>DD21F9A626ADB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>300, 301, 302, 303, 304</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:pg-13</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5364CABA9968B8AE0401F0A07996641</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92098</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>c09e74cf-a653-457b-9708-d0a675535771</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3ADD2409EA3CCC73DCE0401F0A059926D3</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>DD2409EA3CCC73DCE0401F0A059926D3</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>user_create_20130520_12319</con:value></con:property><con:property><con:name>useroid</con:name><con:value>283DFAAC60D4ACB7189ACA97D0B4FE3A</con:value></con:property><con:property><con:name>UserRating</con:name><con:value>US:MPAA:PG-13</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b01ca5c2-f977-4882-a680-d0f1636290d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>345f73d4-79f7-42b3-b91c-94f458b3a899</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afb7f83c-5070-46ae-a3a4-06b8c66e4d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e3e5224-f4eb-4bf9-bbc5-eaf0566d9000</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee8b6846-e824-42ce-8d30-a04f3d0a00cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537af29-2e82-4888-ba26-2c4b3fc91a39</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2aa4bdf-e382-4132-8e8e-5ac8077de63a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f043fda9-4a81-4e5d-a214-67f3714351b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>823e5b47-cfb0-448f-a1c1-11d5720be040</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8fff597-7b47-4c7e-a4da-84988cf77fc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>66c4466d-3702-4288-9d7e-1277d6643c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0905e9ef-ec3c-4473-ab4d-2d288c391bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0b68da9-1ee5-4dea-b989-e83afbf8ee95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00053_DiscreteMediaRightDelete_FUNC_with_Unmatched_Requestor_Retailer_with_LockerViewAll_Consent_and_BlockUnrated_Policy_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("ContentRatingOid", "4");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def usernameFAU1 = context.expand( '${#Project#usernameFAU1}' )


tC.setPropertyValue("username",usernameFAU1);
tC.setPropertyValue("password","Password1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="CoreIdentityInformation"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Core Identity Information Extraction_unmatched_requestor")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

def nodeaccountid = context.expand( '${#TestCase#nodeaccountid}' )
tP.setPropertyValue("NodeAccountId",URLEncoder.encode("urn:dece:accountid:org:dece:"+nodeaccountid,"UTF-8"));
log.info nodeaccountid
def nodeuserid = context.expand( '${#TestCase#nodeuserid}' )
log.info nodeuserid;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Update Role for a Node-RET"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
def nodeRole = "urn:dece:role:retailer";
commonTC.setPropertyValue("NodeRole", nodeRole);
log.info "ROLE is retailer"


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

testCase.setPropertyValue("NodeOid", commonTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("NodeRole", nodeRole);
testProject.setPropertyValue("Node_OID", commonTC.getPropertyValue("NodeOid"));

testProject.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("DiscreteMediaTokenCreatedBy", commonTC.getPropertyValue("NodeOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem 1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("NodeOid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="9a582aaa-90ba-45d0-84ff-ccb42751a8a1" mediaType="application/xml" postQueryString="false" sslKeystore="3232.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NodeOid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#nodeuserid}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#Project#Encoded_NodeAcc_Id}${#TestCase#nodeaccountid}"/>
  <con:entry key="POLICYCLASS" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="USER" value="${#Project#Encoded_NodeUser_Id}${#TestCase#nodeuserid}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet-PolicyDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="CreateBlockUnratedContentPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def blockUnratedContent = context.expand( '${#Project#BlockUnratedContent}' )


tC.setPropertyValue("policyClass",blockUnratedContent);

tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="Create Rating Policy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnRating = context.expand( '${#Project#urnRating}' )
def userRating = context.expand( '${#TestCase#UserRating}' )
def policyResource = "$urnRating"+userRating.toLowerCase();
log.info policyResource

tC.setPropertyValue("policyResource",policyResource);
tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));




def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMR-Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMR-Delete"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMR-Delete" mediaType="application/xml" postQueryString="false" accept="application/xml" id="20463ac5-4dee-49d3-99a9-5174720beb9e" sslKeystore="3232.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#RightsTokenOid}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:assertion type="XPath Match" name="Match content of [@ErrorID]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/@ErrorID</path><content>urn:dece:errorid:org:dece:Policy:UnratedContentBlocked</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [Reason]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/ns1:Reason[1]/text()</path><content>The user does not have permission to access this content because it is unrated.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="2-PolicyGet-PolicyDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Resetting ISC Node Value"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def iSCnode = context.expand( '${#Project#ISCnode}' )

if(iSCnode == "yes"){
	testProject.setPropertyValue("ISCnode", "no");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
log.info iSCnode1
	

}
else
{
	testProject.setPropertyValue("ISCnode", "yes");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
	log.info iSCnode1
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>DD21DFC705F83460E0401F0A059919D4</con:value></con:property><con:property><con:name>assert</con:name><con:value>nVdbc6pKE333V1juR8twUbxVkqrhKioqiNeXr3AYEUVQBgT99WfAaDQ72Wef7yFlppnuWd29aNa8YmvvsW2AMQojN/CLqvhW+p+N1nQN1pkKbdlWpYZWXGXVQqhS5ep2E66ZKs2wpaKKcYxUH0eWH72VWJqpVmiuwtIm3WrXWu1q66XerC1LxSkKMQlNtrzQpWK693zczo99K8Wh3w4s7OK2b+0RbkewPQZav012tq0bptL76xVlfmD4vomiQ5ui4IuNIPI8+AKDPfVKPe15tXF77Dq+FcUh+jjTxm+lD98kSV6S6ksQOhRL0zRFtyiyx8au86v0Xrg5I1v118F1LVh+4LvQ8tyLlYHSULQJ7CLwnCB0o83+h9AMxdBZ6ApKYQUyNf9Xifo8IEf3l5GeQIbYquCNxdyCGWiNQuRDVJwY6lvp19918OprhpaP10G4x1/W/w0S8k/ICw7IruBbZjd0fx/xm3K9vyLYVn3oxdg9oUFGk4MFES6OQrR2076LCflsXMzbX0zxjWEI/peWvFKPOAls6pvKiK6DcPT/9OuxV9coU8uL0TutlacrU0wczp0ONLPXGPppedBaXzz8lkN43HwFdW/1x/orUe+8+nA6NgCYmssBB7v9MkftbJppofPlbK4vR6TQnGjNdWnOnHf7PrVSxNWyN2/AqbkIZgJXM5EQKfR4EZidExSkwoDq7LSdZUJMV/kVbSbi4pDY5anQ6UnzbVcK7PLKWAfNsiAtT02554m8YZvUcBit9/2lWG7tkjCSV2kiLOIC1RzyegP5K4k+D7RAPK+Dt8+cHnPI8uqhc55k9v+co1uiFVn3hZBNijV5PSP0rqmqGF8EAZzHDkhUHjjkbwsGvLM7bnau0kpoHui6DESB97ZSXwM7BTATid9ownSqpcIFdHlnMCWOZgF4S14zpERMFuJU1ztSsjFtZXpeKV68vEgDDeDcWdhokiFNRcOUNA0EV1uqiSsl3WpjLVH1hVggAUQpPVxspRUhJXUhq3LamGMXYy5ezqfELp/7+8FpZUqeJmiKMD4qY3VVFXWpC4zFDLJyTHwv/f0hKCwm/INT94C2AMkJTc4EF83cJZo5YQeiYeU289mmqUpX03Ei6HlWSkFKutPJ5bMWAq8J9l5KJROMrrWApiAP6OW8i60Z52sGSEQnd+5JiT28AdF0OikI11r1pcSQjMlA1gw1kUBuE6XEwyt2sFkpmxOs6mnXBNvHxgi6NJN98tw3TvDMHQuWIoPVfsrAqrGBLuda8yBxls1E1BfdXrBUSZgB0CWe1wEBRIMsNVJ/HvT5KTc8uC3WRf21HOzRJixoTNDbnS4p3XSrQ2c0mHHietcYKe6oatkbSvUgu63ugKoiu8dsdMs2FpQh+u6lPuxN5sgNF5dowOlM3W1yBWMWT+Zi4DXsznwx6ZXTBdTN4Wg8mY0uaTo4bpsXL+oM+U447mqiMxwgNMKwTNGWzJtNkRMWnS3h09qgEVcAjsYDoGwdR3IJgfnO9krCjqFJhLxAExJFmAnKGChKWVJ5UdfX8oYZQWUaT5iBpkq2R8p0XswNr7AUeJF0irZmy8OClemlCew8mF6TZEefcOXuHC31gWdOI5AcpmufYWjloHfWWuJALWOArSZjnrxFfCFWwcQaHrp02pvWaeao21533AKTajpmd+lw4yzPO2e5I01ZPLw6CxN4U/OBYyqh2Kygm5Khgeb1fUs1dVI1PLhPD6s9TEWT9Cx3DkxeMmSdnqSiCHpXGzYBm+LFRdpqgpT7F0CqWYQWp9V8gxf+wB2aUkxIGz/QZbti6X/lWEaxwjPHjgLQwVeOSVeOSWB9LKtNkcFcXTjgWeLwinTUG9N+t3Wg9Xl/V+DLMuVErlcb+s3E7JVnzDlpbLb6bNZSxY1Q9teLTXUV8bR1gTrq7hqKa+xEv17zzlpf07mJS3lneouOCe4XBirjS9XoIlOtMC7z+6W7v1yqNXayH43jkzqxepg5b1bHWSvZjjp1igqVM3dpLE+6PA/g4vod+Tok78brGKUeB+zTBL5pr3G82iIY3ZbZd1gVizL5OFrRn3VcZnHtyjrf2j5kYhBHyI9K75lXpuHaMVF6rt0mX87rWhRZRm6BOlsHMl9t1iS6RjMyDehGq0Uo3LqJvSuKLxCFwF+72VmZnL1+rP8MEO7bGPk2CiunIIYbhEt/iJjVq6j6BlEhgY+RGRC5DDiJo2W+xUpSXaZF0GhmMJu1lsDU6Fq1WSoOgmjoD0OwjlD4JJUZ9kkqGwi6BxdlejoTFZioChyRkhytUxx5zMvJevFRTBR3mIneNltrchR29wcPZYCpfWDHHno5bA55gSh8/WUrFsS5tcpW2Vzt/Jjf12e3UpA9tpttwFkyPCLtRN+IfvaWyc8Zc48Z38KD2HYzUUPqGoUuvCJ5fvRJl4wnd65kKd0w37d+NTyFpb5mdD/JPrnwzvj7nYhIaiK63m8NOVovx5f4dIrzFjQyQRmS8BRD0XVqjGBMVOHZDHbIp+4hqL8S5HfUX06+25/xxdHGH0fkbd4TwhTz5V/cxsYIZ7cxlRA+/dur3tORpG4RSqPvbIJHLm0Z4j/e62AbZvuIeUR+kiC0P9v1TayHc0ie2fhyfSdbZfL7/AMrYEDCumSEBeFj8O8CfHf4s/Fe5DuWiLBpFUfo5yfFbDa9lSwIg9iPVLGUGx7nZY4zOh9Q+3PTb2FyAfxxo0nxjzeaudYfk8m1t0r3ve6/b664OV0gIl7YzbG8lVJyOSeH+87DfP4A+MOIFv80op8zef/N/LvloaZf34f3fwA=</con:value></con:property><con:property><con:name>assert2</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_def04c61-0ada-4eb5-b9ee-356d8cf13012</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>DD21F9A626ADB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_def04c61-0ada-4eb5-b9ee-356d8cf13012</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CreatorUUID</con:name><con:value>_dac83dc6-d886-44f0-a3ec-e760be3b7226</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3ADD243FA827A1DB18E0401F0A05990C53</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>DD243FA827A1DB18E0401F0A05990C53</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUnratedContentBlocked</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/3232.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>DD21F9A626ADB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>300, 301, 302, 303, 304</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:pg-13</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5364CABA9968B8AE0401F0A07996641</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92098</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>c09e74cf-a653-457b-9708-d0a675535771</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3ADD243FA82792DB18E0401F0A05990C53</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>DD243FA82792DB18E0401F0A05990C53</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>user_create_20130520_12319</con:value></con:property><con:property><con:name>useroid</con:name><con:value>283DFAAC60D4ACB7189ACA97D0B4FE3A</con:value></con:property><con:property><con:name>UserRating</con:name><con:value>US:MPAA:PG-13</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b01ca5c2-f977-4882-a680-d0f1636290d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>345f73d4-79f7-42b3-b91c-94f458b3a899</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afb7f83c-5070-46ae-a3a4-06b8c66e4d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e3e5224-f4eb-4bf9-bbc5-eaf0566d9000</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee8b6846-e824-42ce-8d30-a04f3d0a00cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537af29-2e82-4888-ba26-2c4b3fc91a39</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2aa4bdf-e382-4132-8e8e-5ac8077de63a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f043fda9-4a81-4e5d-a214-67f3714351b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>823e5b47-cfb0-448f-a1c1-11d5720be040</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8fff597-7b47-4c7e-a4da-84988cf77fc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>66c4466d-3702-4288-9d7e-1277d6643c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0905e9ef-ec3c-4473-ab4d-2d288c391bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0b68da9-1ee5-4dea-b989-e83afbf8ee95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e61ec19e-2fb0-4507-a879-adf74265cb2a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00031_DiscreteMediaRightDelete_FUNC_with_Unmatched_Requestor_Retailer_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("ContentRatingOid", "4");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Set IS_ADULT" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Set IS_ADULT');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("IsAdult", "Y");
commonTC.setPropertyValue("BasicOid", "200002");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def usernameFAU1 = context.expand( '${#Project#usernameFAU1}' )


tC.setPropertyValue("username",usernameFAU1);
tC.setPropertyValue("password","Password1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="CoreIdentityInformation"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Core Identity Information Extraction_unmatched_requestor")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

def nodeaccountid = context.expand( '${#TestCase#nodeaccountid}' )
tP.setPropertyValue("NodeAccountId",URLEncoder.encode("urn:dece:accountid:org:dece:"+nodeaccountid,"UTF-8"));
log.info nodeaccountid
def nodeuserid = context.expand( '${#TestCase#nodeuserid}' )
log.info nodeuserid;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Update Role for a Node-RET" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
def nodeRole = "urn:dece:role:retailer";
commonTC.setPropertyValue("NodeRole", nodeRole);
log.info "ROLE is retailer"


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

testCase.setPropertyValue("NodeOid", commonTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("NodeRole", nodeRole);
testProject.setPropertyValue("Node_OID", commonTC.getPropertyValue("NodeOid"));

testProject.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("DiscreteMediaTokenCreatedBy", commonTC.getPropertyValue("NodeOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem 1" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("NodeOid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="9a582aaa-90ba-45d0-84ff-ccb42751a8a1" mediaType="application/xml" postQueryString="false" sslKeystore="3232.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NodeOid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#nodeuserid}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#Project#Encoded_NodeAcc_Id}${#TestCase#nodeaccountid}"/>
  <con:entry key="POLICYCLASS" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="USER" value="${#Project#Encoded_NodeUser_Id}${#TestCase#nodeuserid}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet-PolicyDelete" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create Rating Policy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnRating = context.expand( '${#Project#urnRating}' )
def userRating = context.expand( '${#TestCase#UserRating}' )
def policyResource = "$urnRating"+userRating.toLowerCase();
log.info policyResource

tC.setPropertyValue("policyResource",policyResource);
tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));




def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="CreateAllowAdultPolicy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def allowAdult = context.expand( '${#Project#AllowAdult}' )



tC.setPropertyValue("policyClass",allowAdult);
tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - General Policy Establishment")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMR-Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMR-Delete"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMR-Delete" mediaType="application/xml" postQueryString="false" accept="application/xml" id="20463ac5-4dee-49d3-99a9-5174720beb9e" sslKeystore="3232.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#RightsTokenOid}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:assertion type="XPath Match" name="Match content of [@ErrorID]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/@ErrorID</path><content>urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [@Language]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/ns1:Reason[1]/@Language</path><content>en</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Match content of [Reason]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/ns1:Reason[1]/text()</path><content>The maximum number of discrete media rights allowed has been exceeded.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="2-PolicyGet-PolicyDelete" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Resetting ISC Node Value"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def iSCnode = context.expand( '${#Project#ISCnode}' )

if(iSCnode == "yes"){
	testProject.setPropertyValue("ISCnode", "no");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
log.info iSCnode1
	

}
else
{
	testProject.setPropertyValue("ISCnode", "yes");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
	log.info iSCnode1
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Reset IS_ADULT" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Set IS_ADULT');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("IsAdult", "N");
commonTC.setPropertyValue("BasicOid", "200002");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>DD249CEDD4999747E0401F0A05993217</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assert2</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_b3d3d1a1-b234-4f83-97bb-c3f5eb712315</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>DD21F9A626ADB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_b3d3d1a1-b234-4f83-97bb-c3f5eb712315</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CreatorUUID</con:name><con:value>_dac83dc6-d886-44f0-a3ec-e760be3b7226</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3ADD24AB0751390FC4E0401F0A07993D6C</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>DD24AB0751390FC4E0401F0A07993D6C</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>Created</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/3232.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>DD249BC234B12BACE0401F0A05993219</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>DD249BC234B32BACE0401F0A05993219</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>300, 301, 302, 303, 304</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:pg-13</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5364CABA9968B8AE0401F0A07996641</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92098</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>c09e74cf-a653-457b-9708-d0a675535771</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3ADD24AB07512A0FC4E0401F0A07993D6C</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>DD24AB07512A0FC4E0401F0A07993D6C</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>user_create_20130520_034559</con:value></con:property><con:property><con:name>useroid</con:name><con:value>17974DAD9C9236DDE5C462EF75FB7682</con:value></con:property><con:property><con:name>UserRating</con:name><con:value>US:MPAA:PG-13</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b01ca5c2-f977-4882-a680-d0f1636290d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>345f73d4-79f7-42b3-b91c-94f458b3a899</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afb7f83c-5070-46ae-a3a4-06b8c66e4d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e3e5224-f4eb-4bf9-bbc5-eaf0566d9000</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee8b6846-e824-42ce-8d30-a04f3d0a00cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537af29-2e82-4888-ba26-2c4b3fc91a39</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2aa4bdf-e382-4132-8e8e-5ac8077de63a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f043fda9-4a81-4e5d-a214-67f3714351b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>823e5b47-cfb0-448f-a1c1-11d5720be040</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8fff597-7b47-4c7e-a4da-84988cf77fc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>66c4466d-3702-4288-9d7e-1277d6643c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0905e9ef-ec3c-4473-ab4d-2d288c391bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0b68da9-1ee5-4dea-b989-e83afbf8ee95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ebe13cee-6970-40cb-80bb-747c2db89595</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>94984c04-75c8-4957-b6d7-73f9172bf026</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00032_DiscreteMediaRightDelete_FUNC_with_Matched_Requestor_Retailer_CS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("ContentRatingOid", "4");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Create"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tP.setPropertyValue("QC_ResultExportLevel", "off")

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
def usernameFAU1 = context.expand( '${#Project#usernameFAU1}' )


tC.setPropertyValue("username",usernameFAU1);
tC.setPropertyValue("password","Password1");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS Get"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Generic STS GET")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;



</script></con:config></con:testStep><con:testStep type="groovy" name="CoreIdentityInformation"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("Core Identity Information Extraction_unmatched_requestor")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

def nodeaccountid = context.expand( '${#TestCase#nodeaccountid}' )
tP.setPropertyValue("NodeAccountId",URLEncoder.encode("urn:dece:accountid:org:dece:"+nodeaccountid,"UTF-8"));
log.info nodeaccountid
def nodeuserid = context.expand( '${#TestCase#nodeuserid}' )
log.info nodeuserid;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call Update Role for a Node-RET"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
def nodeRole = "urn:dece:role:retailer";
commonTC.setPropertyValue("NodeRole", nodeRole);
log.info "ROLE is retailer"


def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

testCase.setPropertyValue("NodeOid", commonTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("NodeRole", nodeRole);
testProject.setPropertyValue("Node_OID", commonTC.getPropertyValue("NodeOid"));

testProject.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));

testCase.setPropertyValue("DiscreteMediaTokenCreatedBy", commonTC.getPropertyValue("NodeOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem 1" disabled="true"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("NodeOid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("PolicyCreateSinglePolicyPost_ManageUserConsent");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ManageUserConsent" disabled="true"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ManageUserConsent" id="9a582aaa-90ba-45d0-84ff-ccb42751a8a1" mediaType="application/xml" postQueryString="false" sslKeystore="3232.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${Coordinator_Schema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#TestCase#NodeOid}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#nodeuserid}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="ACCT" value="${#Project#Encoded_NodeAcc_Id}${#TestCase#nodeaccountid}"/>
  <con:entry key="POLICYCLASS" value="${#Project#Encoded_PolicyClass}ManageUserConsent"/>
  <con:entry key="USER" value="${#Project#Encoded_NodeUser_Id}${#TestCase#nodeuserid}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet-PolicyDelete" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Create Rating Policy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def urnRating = context.expand( '${#Project#urnRating}' )
def userRating = context.expand( '${#TestCase#UserRating}' )
def policyResource = "$urnRating"+userRating.toLowerCase();
log.info policyResource

tC.setPropertyValue("policyResource",policyResource);
tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("nodeuserid"));

//tC.setPropertyValue("nodeid",tP.getPropertyValue("nodeid"));

tC.setPropertyValue("policyCreator",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));


tC.setPropertyValue("assert",tC.getPropertyValue("assert"));




def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Establish Parental Control Rating")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
</script></con:config></con:testStep><con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DMR-Delete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DMR-Delete"><con:settings/><con:config service="DiscreteMediaRightCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/RightsToken/{RightsTokenId}/DiscreteMediaRight" methodName="DiscreteMediaRightCreatePost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DMR-Delete" mediaType="application/xml" postQueryString="false" accept="application/xml" id="20463ac5-4dee-49d3-99a9-5174720beb9e" sslKeystore="3232.pem"><con:settings><con:setting id="RecordRequestRepresentations">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<DiscreteMediaToken State="${#TestCase#State}" xmlns="${#Project#SchemaNameSpace}" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <RequestingUserID>urn:dece:userid:org:dece:${#TestCase#nodeuserid}</RequestingUserID>
   <RightsTokenID>urn:dece:rightstokenid:org:dece:${#TestCase#RightsTokenOid}</RightsTokenID>
   <DiscreteMediaFulfillmentMethod>${#TestCase#DiscreteMediaFulfillmentMethod}</DiscreteMediaFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:bluray:packaged</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:securedigital</AuthorizedFulfillmentMethod>
   <AuthorizedFulfillmentMethod>urn:dece:type:discretemediaformat:dvd:cssrecordable</AuthorizedFulfillmentMethod>
   <MediaProfile>${#TestCase#ContentProfile}</MediaProfile>
   <LeaseExpiration>${#TestCase#LeaseExpiration}</LeaseExpiration>
</DiscreteMediaToken>]]></con:request><con:assertion type="XPath Match" name="Match content of [Reason]"><con:configuration><path>declare namespace ns1='http://www.decellc.org/schema/2012/12/coordinator';
//ns1:ErrorList[1]/ns1:Error[1]/ns1:Reason[1]/text()</path><content>The user does not have permission to access this content because of its rating.</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="2-PolicyGet-PolicyDelete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("nodeid",tP.getPropertyValue("Node_OID"));
tC.setPropertyValue("assertionUserIdFULL1",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionUserIdFULL2",tC.getPropertyValue("nodeuserid"));
tC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("nodeaccountid"));
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",tC.getPropertyValue("assert"));


def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Policy - Remove all Parental Control Policies")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";

</script></con:config></con:testStep><con:testStep type="groovy" name="Resetting ISC Node Value"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def iSCnode = context.expand( '${#Project#ISCnode}' )

if(iSCnode == "yes"){
	testProject.setPropertyValue("ISCnode", "no");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
log.info iSCnode1
	

}
else
{
	testProject.setPropertyValue("ISCnode", "yes");
	def iSCnode1 = context.expand( '${#Project#ISCnode}' )
	log.info iSCnode1
}

</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value>DD249CEDD4999747E0401F0A05993217</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assert2</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_fc67f1b8-4e17-44a0-8380-ce93369a8682</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>DD249BC234B12BACE0401F0A05993219</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>DD249BC234B32BACE0401F0A05993219</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>DD249BC234B32BACE0401F0A05993219</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_fc67f1b8-4e17-44a0-8380-ce93369a8682</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>CreatorUUID</con:name><con:value>_dac83dc6-d886-44f0-a3ec-e760be3b7226</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3ADD24CE71F28F8E1AE0401F0A05991733</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>DD24CE71F28F8E1AE0401F0A05991733</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/certs/3232.pem</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>DD249BC234B12BACE0401F0A05993219</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>DD249BC234B32BACE0401F0A05993219</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>PolicyClassesToBeDeleted</con:name><con:value>300, 301, 302, 303, 304</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>DD21F9A626AFB384E0401F0A07994EF9</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:us:mpaa:pg-13</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>A5364CABA9968B8AE0401F0A07996641</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92098</con:value></con:property><con:property><con:name>RequestorUUID</con:name><con:value>c09e74cf-a653-457b-9708-d0a675535771</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3ADD24CE71F2808E1AE0401F0A05991733</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>DD24CE71F2808E1AE0401F0A05991733</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn%3Adece%3Atype%3Atokentype%3Ausernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>user_create_20130520_034559</con:value></con:property><con:property><con:name>useroid</con:name><con:value>17974DAD9C9236DDE5C462EF75FB7682</con:value></con:property><con:property><con:name>UserRating</con:name><con:value>US:MPAA:PG-13</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b01ca5c2-f977-4882-a680-d0f1636290d9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>345f73d4-79f7-42b3-b91c-94f458b3a899</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afb7f83c-5070-46ae-a3a4-06b8c66e4d86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3e3e5224-f4eb-4bf9-bbc5-eaf0566d9000</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ee8b6846-e824-42ce-8d30-a04f3d0a00cf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3537af29-2e82-4888-ba26-2c4b3fc91a39</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d2aa4bdf-e382-4132-8e8e-5ac8077de63a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f043fda9-4a81-4e5d-a214-67f3714351b3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>823e5b47-cfb0-448f-a1c1-11d5720be040</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f8fff597-7b47-4c7e-a4da-84988cf77fc9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>66c4466d-3702-4288-9d7e-1277d6643c8f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0905e9ef-ec3c-4473-ab4d-2d288c391bf5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a0b68da9-1ee5-4dea-b989-e83afbf8ee95</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTLCS</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Authentication_P0_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">/opt/dece/Reports/R3/106.2.6/DMRDelete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_1_DiscreteMediaRightDelete_PERM_Access_Control_Rights_RET_Positive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="a586b00b-ae3c-42c8-9d42-b6d83b279349"><con:description/><con:settings/><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters" id="fa413082-a9c6-4b35-8acb-529063a0efef"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92331</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>03F7B7AE50317490E05305991F0AD87F</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>03F7B768692F0F08E05307991F0A0FF2</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:03F7B768692F0F08E05307991F0A0FF2</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value>03F7B7AE50347490E05305991F0AD87F</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:03F7B7AE50317490E05305991F0AD87F</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fa413082-a9c6-4b35-8acb-529063a0efef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_2_DiscreteMediaRightDelete_PERM_Access_Control_Rights_RETCS_Positive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5bf6d743-e8bd-4510-aa65-7749e543e450"><con:description/><con:settings/><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "4");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

commonTC.setPropertyValue("ClosedBy", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN_HISTORY Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASE_PROFILE Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASE_PROFILE Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("ExpectedCount", "3");
commonTC.setPropertyValue("PurchaseProfileCanStream", "Y");
commonTC.setPropertyValue("PurchaseProfileCanDownload", "Y");
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:hd");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate PURCHASED_FULFILLMENT_METHOD Table for DELETE");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("PurchaseProfileOid", testCase.getPropertyValue("PurchaseProfileOid"));
commonTC.setPropertyValue("ExpectedCount", "0");

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92331</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTLCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:03F7B81343350F73E05307991F0A0EB6</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>03F7B81343350F73E05307991F0A0EB6</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>OK</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer:customersupport</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:30:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>03F7B81AE0BF0F7DE05307991F0A62BF</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:03F7B81AE0BF0F7DE05307991F0A62BF</con:value></con:property><con:property><con:name>PurchaseProfileOid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">03F7B81343380F73E05307991F0A0EB6</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>fa413082-a9c6-4b35-8acb-529063a0efef</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Authentication_P1_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">D:\Execution_Report_R2_Builds\Build_1_0_1_3_B\DMR_Delete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_3_DiscreteMediaRightDelete_PERM_Access_Control_Rights_DSP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="772c5127-fe71-4fc3-9802-5e505cafb197"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer" id="16e43efc-9099-48ff-ae91-8f871235293b"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to DSP" id="d048dd11-cca6-4072-a665-328a9bed542e"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B30C25637891E05305991F0AFFE9</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B30C25637891E05305991F0AFFE9</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdDSP</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B03AC34F48CCE05307991F0A1EC7</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B03AC34F48CCE05307991F0A1EC7</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d048dd11-cca6-4072-a665-328a9bed542e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_4_DiscreteMediaRightDelete_PERM_Access_Control_Rights_DSPCS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="bdc903f3-f909-48d3-a730-9286ccb2f4f9"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to DSP_CS" id="c30e54da-0689-479a-b115-c7f4f7d135c2"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdDSPCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B03B505B48C4E05307991F0A9E7D</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B03B505B48C4E05307991F0A9E7D</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B0439EB248C8E05307991F0A64F8</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B0439EB248C8E05307991F0A64F8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c30e54da-0689-479a-b115-c7f4f7d135c2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_5_DiscreteMediaRightDelete_PERM_Access_Control_Rights_COO_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="5df0f97f-7b87-4728-8316-eb31a0b74ae0"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to COO" id="25b7eb11-6348-4d85-975c-114d9979efc1"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdCoo</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B30C29EF7891E05305991F0AFFE9</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B30C29EF7891E05305991F0AFFE9</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B043A34048C8E05307991F0A64F8</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B043A34048C8E05307991F0A64F8</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>25b7eb11-6348-4d85-975c-114d9979efc1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_6_DiscreteMediaRightDelete_PERM_Access_Control_Rights_COOCS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0c1017a3-50f2-429b-9e4b-3682c30803fd"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to COORD CS" id="7699afc0-65bb-4d22-bd6a-596ec4926afb"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User" id="11b4599a-233b-455e-a9f1-612efcbd8140"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Store the SAML and Account Information" id="2187dd41-d38e-4782-bfdc-54b8f99285ea"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("StoreSAML-FullUser2",tP.getPropertyValue("SAML-FullUser2"));
tC.setPropertyValue("StoreNodeUserSAMLAssertion",tP.getPropertyValue("NodeUserSAMLAssertion"));
tC.setPropertyValue("StoreNodeAccountId",tP.getPropertyValue("NodeAccountId"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS" id="305a15fa-517a-4e60-b3a5-633429762f85"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tS.getPropertyValue("sName");

def callTS = tP.getTestSuiteByName(callTSname);

def myTC = tP.getTestSuiteByName("E2E").getTestCaseByName("STS_API")
tC.setPropertyValue("UserName",tP.getPropertyValue("Username"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("SAML-FullUser2",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("NodeUserSAMLAssertion",context.expand( '${#TestCase#SAML}'));
tP.setPropertyValue("NodeAccountId",context.expand( '${#TestCase#NODE_ACCOUNT_ID}'));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Restore SAML and Account Information"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("SAML-FullUser2",tC.getPropertyValue("StoreSAML-FullUser2"));
tP.setPropertyValue("NodeUserSAMLAssertion",tC.getPropertyValue("StoreNodeUserSAMLAssertion"));
tP.setPropertyValue("NodeAccountId",tC.getPropertyValue("StoreNodeAccountId"));</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdCoordCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B30C2E787891E05305991F0AFFE9</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B30C2E787891E05305991F0AFFE9</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B30F1DF148CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B30F1DF148CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>StoreSAML-FullUser2</con:name><con:value>SAML2 Assertion=pVZbc+I6DP4rTPZxJ+RCuGUKMxDoli69HNLlwL7suI4S3CZOiJ1A+fXHDiUFejls+5SxIn36JMuSzhiKQtPuMQYpJzGtrKOQMruQdpQspXaMGGE2RREwm2Pb7V2NbbOq22hnolRGg47yx0PNtm+2fRVZRkO19BpWURPVVa/t+9DWrXq7pQtVxjIYUcYR5R3F1A1LNUxVN+6Mml1r2TWjajQav5XKFFImsIVKVVhtSa1ZR1lwntiatlqtqqtaNU4DzdR1Q5tdjV28gAgp3bNtRIWjtPusj6seYAhDXMVxpJ1pBzpnHrNdElDEsxSefXnv+dI1va0JHY+R4JtS2oI3on5cHB1EY0owCskGyfxcAV/EXqUXBnFK+CJ6NwhDl8AqrLGKDYt+U7RDaicCHTBMGVLZAhnPWBPwIQWKofJrMuoo3067tcL0LkWU+XEascPj3/EBmkMYJ+CpbBfWM7XTAd/IVPcMsD2iOMwYyeFaFmuCMLDn2wR8OlTlNgWfrMeEiQJdM8lO26d3dNxmY0ACYPwzF7R3OVuQKQoz6GbeEAXzqT9hm++LaDFZTC7ry9nFquGNOgWBfeVCUF7t9nhUlGURbS1S/cf8AYj5uFzn1L+YXfT9afwruNU8w90ET0F7ublsjK4G/ccfs8GGWfdh4qxatdTbJJN8/e9yubzqWefon9yZ9+HXxnloLofzZKWP6+6P2ZJw+D19al7ly8m901jNyHheDxqmc+Gbd7Wfq82tllzOlxu3F5uzqQnmIL+s9RHNZvqw9TNY6gadj79PV9f1696t1SnD2eN/KNu9eTe7fwDMd0dZBqNB5VzcEuIfNzMpIZ7qF6p2IpsP40C50pVWsnfYmWh3xLPFHW7Petts9Wv6cNDsW1bLGQ71ek1vttvGud6rDUxn12S2LI4oOjH1ifQlW+62bD4miCObAfUgVfM4E52OKR8gDhBHlRGdiEcQUwZ3sWjPhpdlLW5Z6zgIV1Hrsc0ytKEN9qBUrmN+Q2/Sns8hPezJjYOePAFMEgKyccu6ZqKwGRe5WKI846FRzVGVQiZaeyq7rG1arbrGSJSEIJlqUexlIVSTRVJkRmPbr6kizArpZHhXvLZ34zr+t0uB0PGIVGAylj6Ia4Q3hou5C+T9gNv7Ae/ge5lH5MMS+eQpwVsmh79eykTWR1kjPccZuo67o11q/4X1Z42dm5tPWg7GPff2K7Z/HPeP8VmAz7v+muPxV5mL6v2i+WtL7YMC1I5rv3Tk5WTP7W5NEwNfjIju7uUm1WU1y/OseKpNOQlTgS7Gk1HXdFNzAWdihj3dxY9AtRJEO2lhKHkf+S7lhwwzvqAuRxwi0VsqxfGEDdEFJjfEkWiK61PXzwOXInMc1vwtmROK7VYy/nABxjaWekJ8Kz6rOPVeLuwNrD0/Ik6xIHJCA3mSy8LTO2WBYwFLxJiL033wtwDecn4oLJNccuGinu4zDu//qcj51VEQxnFG+WigFIL9mVrw5E8J2C9Kr2CKsV3u8eT/F3mVFCWAQWz/jBT4ch2z5Qugwd5cfnb6ajTrNatt6v1mq3VejOb6djSbDadRJuWAXfeV+LVkL0/HNd79Dw==</con:value></con:property><con:property><con:name>StoreNodeUserSAMLAssertion</con:name><con:value>SAML2 Assertion=pVZbc+I6DP4rTPZxJ+RCuGUKMxDoli69HNLlwL7suI4S3CZOiJ1A+fXHDiUFejls+5SxIn36JMuSzhiKQtPuMQYpJzGtrKOQMruQdpQspXaMGGE2RREwm2Pb7V2NbbOq22hnolRGg47yx0PNtm+2fRVZRkO19BpWURPVVa/t+9DWrXq7pQtVxjIYUcYR5R3F1A1LNUxVN+6Mml1r2TWjajQav5XKFFImsIVKVVhtSa1ZR1lwntiatlqtqqtaNU4DzdR1Q5tdjV28gAgp3bNtRIWjtPusj6seYAhDXMVxpJ1pBzpnHrNdElDEsxSefXnv+dI1va0JHY+R4JtS2oI3on5cHB1EY0owCskGyfxcAV/EXqUXBnFK+CJ6NwhDl8AqrLGKDYt+U7RDaicCHTBMGVLZAhnPWBPwIQWKofJrMuoo3067tcL0LkWU+XEascPj3/EBmkMYJ+CpbBfWM7XTAd/IVPcMsD2iOMwYyeFaFmuCMLDn2wR8OlTlNgWfrMeEiQJdM8lO26d3dNxmY0ACYPwzF7R3OVuQKQoz6GbeEAXzqT9hm++LaDFZTC7ry9nFquGNOgWBfeVCUF7t9nhUlGURbS1S/cf8AYj5uFzn1L+YXfT9afwruNU8w90ET0F7ublsjK4G/ccfs8GGWfdh4qxatdTbJJN8/e9yubzqWefon9yZ9+HXxnloLofzZKWP6+6P2ZJw+D19al7ly8m901jNyHheDxqmc+Gbd7Wfq82tllzOlxu3F5uzqQnmIL+s9RHNZvqw9TNY6gadj79PV9f1696t1SnD2eN/KNu9eTe7fwDMd0dZBqNB5VzcEuIfNzMpIZ7qF6p2IpsP40C50pVWsnfYmWh3xLPFHW7Petts9Wv6cNDsW1bLGQ71ek1vttvGud6rDUxn12S2LI4oOjH1ifQlW+62bD4miCObAfUgVfM4E52OKR8gDhBHlRGdiEcQUwZ3sWjPhpdlLW5Z6zgIV1Hrsc0ytKEN9qBUrmN+Q2/Sns8hPezJjYOePAFMEgKyccu6ZqKwGRe5WKI846FRzVGVQiZaeyq7rG1arbrGSJSEIJlqUexlIVSTRVJkRmPbr6kizArpZHhXvLZ34zr+t0uB0PGIVGAylj6Ia4Q3hou5C+T9gNv7Ae/ge5lH5MMS+eQpwVsmh79eykTWR1kjPccZuo67o11q/4X1Z42dm5tPWg7GPff2K7Z/HPeP8VmAz7v+muPxV5mL6v2i+WtL7YMC1I5rv3Tk5WTP7W5NEwNfjIju7uUm1WU1y/OseKpNOQlTgS7Gk1HXdFNzAWdihj3dxY9AtRJEO2lhKHkf+S7lhwwzvqAuRxwi0VsqxfGEDdEFJjfEkWiK61PXzwOXInMc1vwtmROK7VYy/nABxjaWekJ8Kz6rOPVeLuwNrD0/Ik6xIHJCA3mSy8LTO2WBYwFLxJiL033wtwDecn4oLJNccuGinu4zDu//qcj51VEQxnFG+WigFIL9mVrw5E8J2C9Kr2CKsV3u8eT/F3mVFCWAQWz/jBT4ch2z5Qugwd5cfnb6ajTrNatt6v1mq3VejOb6djSbDadRJuWAXfeV+LVkL0/HNd79Dw==</con:value></con:property><con:property><con:name>StoreNodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:0928B034920B788FE05305991F0A26C6</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20141201_070933</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_d4c8813f-a298-46e8-aa9e-138eb1448ec3</con:value></con:property><con:property><con:name>assertionUUID1</con:name><con:value>_d4c8813f-a298-46e8-aa9e-138eb1448ec3</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd+42K5AFQGSYRMIA2QmmZctRW5Agy05lmxIvn4lAx5MSJbdJ5fare7T3UdHuuIoCm2/wzkkgjBa2UQh5X5ubWlpQn2GOOE+RRFwX2B/2hne+3bV9NF+i1YZ9Fra30ENu67lzHVke65ea4CrI+SBbjkuvFi1mgvYka6cpzCgXCAqWpptWjXdsnXTmlmOX7f9mlutOc4vrfIDEi5jS5eqqe1AbXhLWwoR+4axXq+ra6fKkoVhm6ZlPA3vp3gJEdLaV9uK8kRJe+ePqwFgCENcxSwyroySz1XA/SlZUCTSBHa5gs9ymYbpGdIn4GRxoRV7IRjQOcuXXUQZJRiF5B2p/gxBLFlQ6YQLlhCxjD4twjJVYB02WMdWjV5oRhnamYFKCBOOdL5E1i7WBOaQAMVQeZwMWtrFeVPLt84SRPmcJREvL/8bHqAZhCyGQOf7snbQzg94olPtK8D+gOIw5SSDkSJrjDDw3TQBnx+qMk5gTjb3hEuCbrhCZxzCO1puu9EjC+Di/wzoYDjbID9QmEJ7M2aX1r1T5zOzm1p3g/lrCKtna+WKx1YO4NA5NxSj3S6PSFmQaLvj+m56Y8+DKXpJE9GMo3e333mPm4vm5e+bZD4yOk/dsLl+jzPWJOmQepvEmbyvHu7ZcLX4/vPn92b3xfD6/YbV4Pcrq//wtBx3H03zeWpP6m/LJ+/5L1bP7NsZvp1YT64XjER91ETD265Ru2X2cLbA1phMZiPyfuOuyA98Oc46jw+jy/EDQY/Du80vt/nNQdFj55vbKso5wF+27c/8NH35DVjsl4oGg17lRk4Jia/FTFlIoM9zVz9W4sMFUKG11S6lHX4q5Y4Evpzhdm16tnvtmP1e89quud1+36w7ZtPzrBuz4/Ts7l5ktiiOIHYZnROVS0nuljZfA8SRz4EGkOgZS6XSce2LiD0kUGVAJ/IQMMphxqQ8W07oea+rDLJ1BNYLRY3MjesEzTdaZcTEA31IOnMBSVmUGyVRngAmMQGl3IrYXDKbC9mMV5SlIrSqGapSSKW2J0pmfdmWusFJFIegoBoRC9IQqvEyzltj8O3X1hHmuRUzlgQ+3p65T6s7/rdvhPQJiHLgqqBrkMOEE1eMs6/mQ9X1k1fRPnwnDYg6XrKrIiF4i6T86w9ZFEsKpuzL2uMu3I8NpdDGcVVFtiAjuOB8cXNLQZcS0N4PJq6+VtMsS/NJNJXSJTK6oco0TNuYAk6lRr3N2AqoUQQxzroQCtxHuQt7GWEqlnQqkIBIUqeSL894AUyBqxfAQJJ+c+7zopRSdk7ARpyydUP5elGIv3zgYB8rP2key89aDvHPwE7EOsgj65QPAEHoQq3UZfD2FTeIlDGWHAY/FeBU8rKxaHKBRUg+vaQCPv9TUfrU0hDGLKVi0NNyw6Fm5jjFWwz+H6cPYXJZLt5p5N8fajrJKYBBvu44yeOr69ZXJ4AuDnR3l/SD9JpOzbNNr+m6N7n01rfSaze6jaIpJXTtD+aPloM+HXO8/Q8=</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0928B0349209788FE05305991F0A26C6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0928B0349209788FE05305991F0A26C6</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0928B30ED7B248CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0928B30ED7B248CEE05307991F0A3D2C</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7699afc0-65bb-4d22-bd6a-596ec4926afb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>11b4599a-233b-455e-a9f1-612efcbd8140</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2187dd41-d38e-4782-bfdc-54b8f99285ea</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>305a15fa-517a-4e60-b3a5-633429762f85</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fbd31ec1-1122-4215-bcac-22a6a477a910</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_9_DiscreteMediaRightDelete_PERM_Access_Control_Rights_ACCESS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="08001766-3979-499b-bf00-04f45629f516"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to ACCESS" id="fbd31ec1-1122-4215-bcac-22a6a477a910"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdAccportal</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B30F219748CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B30F219748CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B04368F67893E05305991F0AE3AC</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B04368F67893E05305991F0AE3AC</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cd55483a-0e97-49e2-a20a-36db65e5e45c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_10_DiscreteMediaRightDelete_PERM_Access_Control_Rights_ACCESSCS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="29cac42b-7256-418e-b60b-4f131fcc6869"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to ACCESS_CS" id="cd55483a-0e97-49e2-a20a-36db65e5e45c"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdAccportalCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B034D533788FE05305991F0A26C6</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B034D533788FE05305991F0A26C6</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B03AC1C248CAE05307991F0A3D6D</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B03AC1C248CAE05307991F0A3D6D</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2cdb14c9-ea18-4ee5-8a7d-15ca1d788277</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_11_DiscreteMediaRightDelete_PERM_Access_Control_Rights_DLASP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="ea158538-c6d8-4ccb-bb1b-aec5c7786d0c"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to DLASP" id="2cdb14c9-ea18-4ee5-8a7d-15ca1d788277"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdDLASP</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B30F263848CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B30F263848CEE05307991F0A3D2C</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B03470F948C2E05307991F0A9564</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B03470F948C2E05307991F0A9564</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>820d8042-c4ba-491c-a104-dda6d37c20d6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_12_DiscreteMediaRightDelete_PERM_Access_Control_Rights_DLASPCS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="83968b3a-f526-4b71-a179-331e0c7d8e81"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to DLASP_CS" id="820d8042-c4ba-491c-a104-dda6d37c20d6"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdDLASPCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B03ADAE848CCE05307991F0A1EC7</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B03ADAE848CCE05307991F0A1EC7</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B03470FF48C2E05307991F0A9564</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B03470FF48C2E05307991F0A9564</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>865299e5-31ac-4603-9820-967be8d926d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_14_DiscreteMediaRightDelete_PERM_Access_Control_Rights_LLASPCS_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0020d1c4-3787-41b5-8e64-4da25c4c712d"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Update Node Role to LLASP_CS" id="865299e5-31ac-4603-9820-967be8d926d0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tC.getPropertyValue("nodeid")));

log.info tP.getPropertyValue("nodeid");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdLLASPCS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>0928B30E30D648C6E05307991F0AF685</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:0928B30E30D648C6E05307991F0AF685</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>0928B034710548C2E05307991F0A9564</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:0928B034710548C2E05307991F0A9564</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_13_DiscreteMediaRightDelete_PERM_Access_Control_Rights_LLASP_Negative" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92330</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdLLASP</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>E58A381CF51BBE7DE0401F0A07996552</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRoleInvalid</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>16e43efc-9099-48ff-ae91-8f871235293b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Authentication_P2_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">D:\Execution_Report_R2_Builds\Build_1_0_1_3_B\DMR_Delete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_DiscreteMediaRightDelete_METH_Invocation_with_method_PUT" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="48266b53-b41e-4a44-a193-96a25ce0b694"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeletePut"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeletePut');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D88C4B5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D88C4B5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T02:56:31</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92332</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36E7E1F85010E05307991F0AA0BB</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36E7E1F85010E05307991F0AA0BB</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_DiscreteMediaRightDelete_METH_Invocation_with_method_POST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="9898d67c-4046-4040-a38c-628b90a9c636"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeletePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeletePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D0F2E6500BE05307991F0A35BF</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D0F2E6500BE05307991F0A35BF</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T03:59:10</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92333</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36D88C5A5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36D88C5A5014E05307991F0ACA2F</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_DiscreteMediaRightDelete_METH_Invocation_with_method_GET" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="72ffd34d-1a6f-423f-8eb4-4c566590a400"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteGet"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteGet');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "OK");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92334</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36D0F5CC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36D0F5CC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:00:41</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36E7E50C5010E05307991F0AA0BB</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36E7E50C5010E05307991F0AA0BB</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_DiscreteMediaRightDelete_METH_Invocation_with_method_OPTIONS" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="6ecd3041-7c88-4340-9b9e-c98ca28e3f8b"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteOptions"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteOptions');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92335</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36F381E65018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36F381E65018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:01:57</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D0F5EC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D0F5EC500BE05307991F0A35BF</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_DiscreteMediaRightDelete_METH_Invocation_with_method_HEAD" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="b4fef322-2904-4f85-83cd-1fe7e1e5d7b7"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteHead"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteHead');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "OK");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92336</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF36F384F45018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF36F384F45018E05307991F0A3FB0</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenMethodNotAllowed</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-04T04:03:22</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF36D011025009E05307991F0A0B6A</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF36D011025009E05307991F0A0B6A</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Error Codes_P2_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">D:\Execution_Report_R2_Builds\Build_1_0_1_3_B\DMR_Delete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_DiscreteMediaRightDelete_ERRC_403_Forbidden_AccountNotActive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fc28498f-ffe9-452a-ab74-f1353228dca0"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User" id="e1a25824-716c-4f41-a49a-cf9146b360d0"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set AccountOid status to anything but Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

//def accountOid = testProject.getPropertyValue("AccountOid");
def accountOid = testProject.getPropertyValue("E2E_AccountOID_FAU2");
sqlStr = """update account set status = 'deleted' where account_oid = hextoraw('$accountOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

//def accountOid = testProject.getPropertyValue("AccountOid");
def accountOid = testProject.getPropertyValue("E2E_AccountOID_FAU2");
sqlStr = """update account set status = 'active' where account_oid = hextoraw('$accountOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92338</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:05AE1CF4DE47122FE05305991F0AAEA8</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>05AE1CF4DE47122FE05305991F0AAEA8</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>05AE20228D761697E05305991F0AD1A6</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:05AE20228D761697E05305991F0AD1A6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>e1a25824-716c-4f41-a49a-cf9146b360d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_DiscreteMediaRightDelete_ERRC_403_Forbidden_UserNotActive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="347032a4-6059-4a71-85af-89b371f3cae9"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User" id="c1848984-a609-4fe6-8213-8198a4d1281f"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set UserOid status to anything but Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("E2E_UserOID_FAU2");
sqlStr = """update account_user set status = 'deleted' where user_oid = hextoraw('$userOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset User to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userOid = testProject.getPropertyValue("E2E_UserOID_FAU2");
sqlStr = """update account_user set status = 'active' where user_oid = hextoraw('$userOid')""";
sql.executeUpdate(sqlStr);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92343</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:05AEAD9C20B874ADE05307991F0A0090</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>05AEAD9C20B874ADE05307991F0A0090</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenUserNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>05AEADDB19C7774BE05307991F0A2362</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:05AEADDB19C7774BE05307991F0A2362</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>c1848984-a609-4fe6-8213-8198a4d1281f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_DiscreteMediaRightDelete_ERRC_404_NotFound_UserNotFound" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="f5d2b8f9-44d7-4198-84d2-183658697dcf"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User" id="237270b0-49f9-4f9c-a8dd-ed6e31801c02"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set UserOid to a value not belonging to this account"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def nodeUserOid = testProject.getPropertyValue("NODE_USER_OID_FAU2");
def accountOid = testProject.getPropertyValue("E2E_AccountOID_FAU2");

Integer countUser;
sqlStr = """select count(*) from account_user where privilege = 'full' and status = 'active'""";
sql.eachRow(sqlStr){
	countUser = it[0];	
};
log.info "Count of User :"+countUser;


def random = new Random();
Integer randomInt = random.nextInt(countUser - 1 + 1) + 1;
log.info "Random Number generated : "+randomInt;
sqlStr = """select user_oid from (select user_oid, rownum numRow from account_user where account_oid not in (hextoraw($accountOid)) and status = 'active') a where a.numRow = $randomInt""";
def userOid;
sql.eachRow(sqlStr){
	userOid = it[0];	
};
log.info "User Oid :"+userOid;

sqlStr = """update node_user set user_oid = $userOid where node_user_id = hextoraw('$nodeUserOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset to a Valid User for this Account"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def nodeUserOid = testProject.getPropertyValue("NODE_USER_OID_FAU2");
def userOid = testProject.getPropertyValue("E2E_UserOID_FAU2");
sqlStr = """update node_user set user_oid = $userOid where node_user_id = hextoraw('$nodeUserOid')""";
sql.executeUpdate(sqlStr);</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92344</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:05AF019EF15C6540E05305991F0AF77E</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>05AF019EF15C6540E05305991F0AF77E</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>NotFoundUserNotFound</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>05AECC3356AC3B61E05305991F0AEC31</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:05AECC3356AC3B61E05305991F0AEC31</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>237270b0-49f9-4f9c-a8dd-ed6e31801c02</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_DiscreteMediaRightDelete_ERRC_403_Forbidden_AccountIdUnmatched" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="03272137-e73c-41d1-a226-57cb397690bc"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="f9a306a8-802b-4333-b916-9f7c2cd818bb"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonExisting NodeAccountId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Store the original node account oid and node account id.
def nodeAccountOid = testProject.getPropertyValue("NodeAccountOid");
testCase.setPropertyValue("NodeAccountOid",nodeAccountOid);

def nodeAccountID = "urn:dece:accountid:org:dece:"+nodeAccountOid;
testCase.setPropertyValue("NodeAccountId",nodeAccountID);

log.info "Original Node Account ID :"+nodeAccountID;

//Set invalid Node Account ID.
testProject.setPropertyValue("NodeAccountId","urn:dece:accountdi:ogr:dece:"+nodeAccountOid );


</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Account"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Reset NodeAccountId to original one at Project Level.
testProject.setPropertyValue("NodeAccountId", testCase.getPropertyValue("NodeAccountId"));</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92345</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:071E2470A9CC4874E05307991F0AA173</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>071E2470A9CC4874E05307991F0AA173</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountIdUnmatched</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>071E2AEBC07851ADE05305991F0A4468</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:071E2AEBC07851ADE05305991F0A4468</con:value></con:property><con:property><con:name>NodeAccountOid</con:name><con:value>071DEFD1CF685298E05307991F0A0B8E</con:value></con:property><con:property><con:name>NodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:071DEFD1CF685298E05307991F0A0B8E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_DiscreteMediaRightDelete_ERRC_404_NotFound_DiscreteMediaRightNotFound" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="db628acd-1918-417b-b56b-f71a6789d747"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set NonExisting DiscreteMediaTokenId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Store original DMR ID.
def discreteMediaTokenId = testCase.getPropertyValue("DiscreteMediaTokenId");
testCase.setPropertyValue("OriginalDiscreteMediaTokenId",discreteMediaTokenId);

//Set Invalid DMR ID.
def DiscreteMediaTokenId ="urn:dece:discretemediatokenid:org:dece:"+"08AC6772B03F7EA9E05305991F0A09D1";
testCase.setPropertyValue("DiscreteMediaTokenId",DiscreteMediaTokenId );
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Original DiscreteMediaTokenId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Restore Original DMR ID
testCase.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("OriginalDiscreteMediaTokenId"));</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AFAB3288537648E05305991F0A3FEB</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AFAB3288537648E05305991F0A3FEB</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>NotFoundDiscreteMediaRightNotFound</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>OriginalDiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AFAB3288537648E05305991F0A3FEB</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92351</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AFAF5E8C811207E05307991F0AAEF4</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AFAF5E8C811207E05307991F0AAEF4</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00023_DiscreteMediaRightDelete_ERRC_400_BadRequest_DiscreteMediaRight_URN_Invalid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="1e84ebc1-e0d1-4e1f-afdf-db75131d5a49" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Changing UUID for another User" id="9566c2b1-447b-42f2-a7a8-e8cb33bed245"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU2}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID" id="6c1270de-d19d-4ab2-8ce4-5cbb7260feff"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set Invalid DiscreteMediaTokenId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Store original DMR ID.
def discreteMediaTokenId = testCase.getPropertyValue("DiscreteMediaTokenId");
testCase.setPropertyValue("OriginalDiscreteMediaTokenId",discreteMediaTokenId);   

//Set Invalid DMR ID.
def discreteMediaTokenOid = testCase.getPropertyValue("discreteMediaTokenOid");
def invalidDiscreteMediaTokenId = "urn:dece:discretemediaatokenid:" + discreteMediaTokenOid;

testCase.setPropertyValue("DiscreteMediaTokenId",invalidDiscreteMediaTokenId);




</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Original DiscreteMediaTokenId"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//Restore Original DMR ID
testCase.setPropertyValue("DiscreteMediaTokenId",testCase.getPropertyValue("OriginalDiscreteMediaTokenId"));</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def uuid = context.expand( '${#Project#E2E_UUID_FAU1}' )
testProject.setPropertyValue("UUID", uuid);</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF69D1089A0E90E05307991F0AADEE</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>08AF69D1089A0E90E05307991F0AADEE</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>BadRequestDiscreteMediaRightIDNotValid</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>OriginalDiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:08AF69D1089A0E90E05307991F0AADEE</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92352</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:08AF686DBF4B79E6E05305991F0A373D</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>08AF686DBF4B79E6E05305991F0A373D</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6c1270de-d19d-4ab2-8ce4-5cbb7260feff</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9566c2b1-447b-42f2-a7a8-e8cb33bed245</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:portabledefinition:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Error Codes_P1_TestCases"><con:settings><con:setting id="GeneratableJUnitReport@Folder">D:\Execution_Report_R2_Builds\Build_1_0_1_3_B\DMR_Delete</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_DiscreteMediaRightDelete_ERRC_400_BadRequest_AccountIdInvalid_UV_135" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d528ebfb-9fdf-41a4-aee6-8d4c3669dfae"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Store Node Account Id and then Set it to Invalid Value"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Store the NodeAccountID at TestCase Level
def nodeAccountId = tP.getPropertyValue("NodeAccountId");
tC.setPropertyValue("NodeAccountId",nodeAccountId);

log.info " Actual Node Account ID : "+nodeAccountId;

//Modify the NodeAccountID and set it at Project Level
def temp_nodeAccountId = nodeAccountId +"123"; 
tP.setPropertyValue("NodeAccountId",temp_nodeAccountId);

log.info " Invalid Node Account ID : "+temp_nodeAccountId;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset Node for Node Account Id"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//Reset the actual Node ACcount Id at Project Level.
tP.setPropertyValue("NodeAccountId",tC.getPropertyValue("NodeAccountId"));</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92337</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:13E719A7D0743060E05307991F0A366F</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>13E719A7D0743060E05307991F0A366F</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenAccountIdUnmatched</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>13E6D8F93BFA795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:13E6D8F93BFA795AE05307991F0A9707</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeAccountOid</con:name><con:value>059A61F837425D6EE05307991F0AB7F0</con:value></con:property><con:property><con:name>NodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_DiscreteMediaRightDelete_ERRC_403_Forbidden_RightsTokenNotActive" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="93bfa96a-9754-4ee0-8bd1-538ce208060b"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("nodeid",tP.getPropertyValue(tS.getPropertyValue("nodeid")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Set RightsTokenOid status to anything but Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
sqlStr = """update rights_token set status_id = 'deleted' where rights_token_oid = hextoraw('$rightsTokenOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset RightsTokenOid status to Active"><con:settings/><con:config><script>import groovy.sql.Sql;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DBConn
def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def jDBCConnStr = context.expand( '${#Project#JDBCConnStr}' )
def jDBCDriver = context.expand( '${#Project#JDBCDriver}' )
def db = [url:jDBCConnStr, user: userName, password: passWord, driver:jDBCDriver];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def rightsTokenOid = testCase.getPropertyValue("RightsTokenOid");
sqlStr = """update rights_token set status_id = 'active' where rights_token_oid = hextoraw('$rightsTokenOid')""";
sql.executeUpdate(sqlStr);

sql.close();</script></con:config></con:testStep><con:properties><con:property><con:name>QC_Id</con:name><con:value>92340</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>urn:dece:org:org:dece:3232</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn:dece:rightstokenid:org:dece:071E4D9927422637E05307991F0A202E</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>071E4D9927422637E05307991F0A202E</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenRightsTokenNotActive</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>071E61CE751F5257E05307991F0A2645</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn:dece:discretemediatokenid:org:dece:071E61CE751F5257E05307991F0A2645</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_DiscreteMediaRightDelete_ERRC_403_Forbidden_DiscreteMediaRightOwnerMismatch_CrossOrg" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d3e77a04-2a2b-493e-932e-830463ae1bfa" disabled="true"><con:description/><con:settings/><con:testStep type="groovy" name="Update Node Role to that for Retailer"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
def nodeRole = testCase.getPropertyValue("NodeRole");
commonTC.setPropertyValue("NodeRole", nodeRole);




def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

testCase.setPropertyValue("NodeOid", commonTC.getPropertyValue("NodeOid"));
testCase.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));
testCase.setPropertyValue("NodeRole", nodeRole);
testProject.setPropertyValue("Node_OID", commonTC.getPropertyValue("NodeOid"));
testProject.setPropertyValue("Node_ID", commonTC.getPropertyValue("NodeId"));
testProject.setPropertyValue("NodeId", commonTC.getPropertyValue("NodeId"));


testCase.setPropertyValue("DiscreteMediaTokenCreatedBy", commonTC.getPropertyValue("NodeOid"));</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call RightsTokenCreate and get RightsTokenId and set other parameters"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('RightsTokenCreate_FUNC_RTL_With_HD_Content_Profile');
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

def runnerTC = commonTC.run(null, false);

assert "$runnerTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightCreatePost"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightCreatePost');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", testCase.getPropertyValue("ContentProfile"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", "Created");
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Validate DISCRETE_MEDIA_TOKEN Table"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Validate DISCRETE_MEDIA_TOKEN Table");
commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";
</script></con:config></con:testStep><con:testStep type="groovy" name="Update Credentials to those for a Retailer beloging to a different Organization" disabled="true"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("UUID", 'c09e74cf-a653-457b-9708-d0a675535771');
testCase.setPropertyValue("NodeOid", "1398");
testCase.setPropertyValue("NodeId", "urn:dece:org:org:dece:1398");

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Node Credential Table');
commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Update Role for a Node for DELETE"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Role for a Node');
commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call Extract and Store Account and User Info based on Assertion UUID for DELETE"><con:settings/><con:config><script>def extractStoreTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName("Extract and Store Account and User Info based on Assertion UUID");
def runnerExtractStoreTC = extractStoreTC.run(null, false);
assert "$runnerExtractStoreTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Call DiscreteMediaRightDeleteDelete"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete');

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));
commonTC.setPropertyValue("NodeId", testCase.getPropertyValue("NodeId"));
commonTC.setPropertyValue("NodeRole", testCase.getPropertyValue("NodeRole"));

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("ContentProfile", "urn:dece:type:mediaprofile:sd");
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";</script></con:config></con:testStep><con:testStep type="groovy" name="Reset UUID"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testProject.setPropertyValue("UUID", '_4556ec6b-ed33-4cda-948c-b8cd7e3b0d77');
testCase.setPropertyValue("NodeOid", "3232");
testCase.setPropertyValue("NodeId", "urn:dece:org:org:dece:3232");

def commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('Update Node Credential Table');
commonTC.setPropertyValue("NodeOid", testCase.getPropertyValue("NodeOid"));

def runnerCommonTC = commonTC.run(null, false);
assert "$runnerCommonTC.status" != "FAILED";

</script></con:config></con:testStep><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>DiscreteMediaFulfillmentMethod</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaTokenCreatedBy</con:name><con:value>3232</con:value></con:property><con:property><con:name>DiscreteMediaTokenId</con:name><con:value>urn%3Adece%3Adiscretemediatokenid%3Aorg%3Adece%3ADC437F094A0BFBFCE0401F0A05992069</con:value></con:property><con:property><con:name>DiscreteMediaTokenOid</con:name><con:value>DC437F094A0BFBFCE0401F0A05992069</con:value></con:property><con:property><con:name>ErrorResponse</con:name><con:value>ForbiddenDiscreteMediaRightOwnerMismatch</con:value></con:property><con:property><con:name>LeaseExpiration</con:name><con:value>2011-06-02T04:59:58</con:value></con:property><con:property><con:name>NodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>NodeOid</con:name><con:value>3232</con:value></con:property><con:property><con:name>NodeRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>92346</con:value></con:property><con:property><con:name>RightsTokenId</con:name><con:value>urn%3Adece%3Arightstokenid%3Aorg%3Adece%3ADC437F094A73FBFCE0401F0A05992069</con:value></con:property><con:property><con:name>RightsTokenOid</con:name><con:value>DC437F094A73FBFCE0401F0A05992069</con:value></con:property><con:property><con:name>State</con:name><con:value>urn:dece:type:state:discretemediaright:available</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:portabledefinition:pd</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>nodeIdRTL</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Cases Containing APIs" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

//switch (nodeId) {
//	case "221500":
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\910_concat.pem";
//	break;
//	case "221501":  // LLPCS
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\221501_concat.pem";
//	break;
//	case "441500":
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\912_concat.pem";
//	break;
//	case "221700":
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\914_concat.pem";
//	break;
//	case "1910":  // LLP Standalone
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
//	break;
//	case "1912":  // RTR Standalone
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1912.pem";
//	break;
//	case "666":
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\666_concat.pem";
//	break;
//	case "80080010":  // DLPCS
//	default:
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\80080010.pem";
//	break;
//}

switch (nodeId) {
	case "1910":  // LLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
	break;
	case "1914":  // DLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1914_concat.pem";
	break;
	case "221500":  // LLP
		keyStorePath = "C:\\certificates\\221500_concat.pem";
	break;
	case "221501":  // LLPCS
		keyStorePath = "C:\\certificates\\221501_concat.pem";
	break;
	case "221700":  // DLP
		keyStorePath = "C:\\certificates\\221700_concat.pem";
	break;
	case "221701":  // DLPCS
		keyStorePath = "C:\\certificates\\221701_concat.pem";
	break;
	case "441500":  // RTR
	default:
		keyStorePath = "C:\\certificates\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="STS - GET"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/{ASSERTION}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="912_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String orgRequest  = url + "/rest/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML."saml2:Assertion".size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>"><con:settings/><con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return extracted Properties back to calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">f9a79652-36ee-4f84-8ecc-ca19333e74a6</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>f9a79652-36ee-4f84-8ecc-ca19333e74a6</con:value></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4219</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=ISO-8859-1</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>0912441500</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="f9a79652-36ee-4f84-8ecc-ca19333e74a6" IssueInstant="2011-06-16T20:20:59.550Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#f9a79652-36ee-4f84-8ecc-ca19333e74a6">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>2MFqzu97w8kD7sHd/GoOSlGs4co=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Onno3aSuEtrMt0zzPIhVGu8HzPD8Vut2KVa8/h2x9P9YSJxrU3qBt15Al9Fjiz1Grbf0/gKrbyyT
J2rJqFaXfDPh3mnCHmiV43VFYKJhszLWIpDyWNLVzECPo+DZCef97jXN88wL/0fuCOqzXZPBY3bg
tvTFV2xLn+Uw2Z+aRSs=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="FFCFC5F1FD2A0834B0EB83D3233B6E81" NotOnOrAfter="2011-06-17T20:20:59.550Z" Recipient="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2011-06-16T20:20:49.550Z" NotOnOrAfter="2012-06-16T20:20:59.550Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:441500</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/0/SecurityToken/Assertion/f9a79652-36ee-4f84-8ecc-ca19333e74a6</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2011-06-16T20:20:59.550Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RightsTokenCreate API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","441500");
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("tokentype",tP.getPropertyValue("urntokenType_userpassword"));
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("rightstokenidFULL",null);
tC.setPropertyValue("cid",null);
tC.setPropertyValue("alid",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("cid",callTC.getPropertyValue("cid"));
tC.setPropertyValue("alid",callTC.getPropertyValue("alid"));

if (tC.getPropertyValue("cid") == "null" || tC.getPropertyValue("cid") == null) {
		tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
}
if (tC.getPropertyValue("alid") == "null" || tC.getPropertyValue("alid") == null) {
		tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Identity as RTR Consumer"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - RightsTokenCreate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - RightsTokenCreate"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/RightsToken" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - RightsTokenCreate" mediaType="application/xml" postQueryString="false" sslKeystore="441500_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}"/>
  &lt;con:entry key="Tester" value="${#Project#tester}"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<ns4:RightsTokenData xmlns:ns1="http://www.w3.org/2001/04/xmlenc#"  xmlns:ns2="http://www.movielabs.com/md"  xmlns:ns3="http://www.w3.org/2000/09/xmldsig#"  xmlns:ns4="${#Project#coordinatorSchema}"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/schemas/dece.xsd"   ALID="${#TestCase#alid}" ContentID="${#TestCase#cid}">
                <ns4:SoldAs>
                                <ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName>
                                <ns4:ContentID>${#TestCase#cid}</ns4:ContentID>
                </ns4:SoldAs>
                <ns4:RightsProfiles>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:hd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:sd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                                <ns4:PurchaseProfile MediaProfile="urn:dece:type:mediaprofile:pd">
                                                <ns4:CanDownload>true</ns4:CanDownload>
                                                <ns4:CanStream>true</ns4:CanStream>
                                </ns4:PurchaseProfile>
                </ns4:RightsProfiles>
                <ns4:LicenseAcqBaseLoc>ns3.google.com</ns4:LicenseAcqBaseLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentWebLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentWebLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location>
                                <ns4:Preference>3</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:FulfillmentManifestLoc MediaProfile="urn:dece:type:mediaprofile:hd" xsi:type="ns4:ResourceLocation-type">
                                <ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location>
                                <ns4:Preference>1</ns4:Preference>
                </ns4:FulfillmentManifestLoc>
                <ns4:PurchaseInfo>
                                <ns4:NodeID>urn:dece:org:org:dece:${#TestCase#nodeid}</ns4:NodeID>
                                <ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction>
                                <ns4:PurchaseAccount>${#TestCase#assertionAccountIdFULL}</ns4:PurchaseAccount>
                                <ns4:PurchaseUser>${#TestCase#assertionUserIdFULL}</ns4:PurchaseUser>
                                <ns4:PurchaseTime>2011-06-24T15:12:03.000</ns4:PurchaseTime>
                </ns4:PurchaseInfo>
</ns4:RightsTokenData>
]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ACCT" value="${#TestCase#assertionAccountIdFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract RightsToken Handle from API Result"><con:settings/><con:config><script>
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def targetHost = testProject.getPropertyValue("targetHost");
def nodeaccountId  = testCase.getPropertyValue("assertionAccountIdFULL");
def urnRightsToken = testProject.getPropertyValue("urnRightsToken");
def tStep  = testCase.getTestStepByName('POST - RightsTokenCreate');

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String rightsid = null;
String rightsidFULL = null;
String major = testProject.getPropertyValue("versionMajor");
String minor = testProject.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

def b = contentLocation.toURL();
def urlStr = b.getPath();

//Assert the hostname in the URL is correct
//assert b.getHost().matches(targetHost.toString());
//Assert the protocol is correct
//assert b.getProtocol().matches("https");
//Assert the URI is correct
assert b.getPath().matches("/rest/$major/$minor/Account/$nodeaccountId/RightsToken/$urnRightsToken[0-9, A-F]*");

int lastSlash = urlStr.lastIndexOf(':');
int lastEle = urlStr.lastIndexOf('/');

rightsid = urlStr.substring(lastSlash + 1);
rightsidFULL = urlStr.substring(lastEle + 1);

//this.log.info "lastSlash is " +lastSlash + "andstreamHandle is " + streamHandle ;

this.log.info "rightstokenid [$rightsid]";
this.log.info "rightsidFULL [$rightsidFULL]";
testCase.setPropertyValue("rightstokenid",rightsid);
testCase.setPropertyValue("rightstokenidFULL",rightsidFULL);



</script></con:config></con:testStep><con:testStep type="groovy" name="Return RightsToken to calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("rightstokenid",tC.getPropertyValue("rightstokenid"));
callTC.setPropertyValue("rightstokenidFULL",tC.getPropertyValue("rightstokenidFULL"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>2000</delay></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F1A1CC2F69345E0401F0A07990CC5</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_05bf8789-34a9-43ff-b430-0b26b776a941</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:CE0F1A1CC2F19345E0401F0A07990CC5</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F2321D3D05F41E0401F0A07991D0B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:CE0F2321D3D05F41E0401F0A07991D0B</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_05bf8789-34a9-43ff-b430-0b26b776a941</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>I:\deceAPI\certs\912_concat.pem</con:value></con:property><con:property><con:name>nodeaccountid</con:name><con:value>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</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>441500</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>dlp</con:value></con:property><con:property><con:name>nodeuserid</con:name><con:value>9B4E7893991CB1C5E0401F0A0599216F</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77320</con:value></con:property><con:property><con:name>rightslocker</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F1A1CC2FD9345E0401F0A07990CC5</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D0D02D5740AA3AF2E0401F0A079955E6</con:value></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:rightstokenid:org:dece:D0D02D5740AA3AF2E0401F0A079955E6</con:value></con:property><con:property><con:name>sName</con:name><con:value>Link LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>streamhandle</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_11304 - StreamCreate - LLPCS - &lt;RequestingUserID> does not match security token</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>transactionid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>streamcreatefau</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F2321D3D55F41E0401F0A07991D0B</con:value></con:property><con:property><con:name>rightslockerFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">CE0F1A1CC2FD9345E0401F0A07990CC5</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:CE0F2321D3D05F41E0401F0A07991D0B</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="f05a1b6b-e589-4860-8de6-de651017a9a0"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assert2",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL1",null);
tC.setPropertyValue("assertionUserIdFULL2",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyClassEncoded",callTC.getPropertyValue("policyClassEncoded"));
tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet I");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet I"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="GET-1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet I" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#assert2}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#policyClassEncoded}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet I');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def myXML;
def XMLbody = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");
def coordinatorSchema = context.expand( '${#Project#coordinatorSchema}' )

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	try {
		myXML = new XmlSlurper().parseText(XMLbody);
	}
	catch(Throwable e) {
		log.info "ERROR - XmlSlurper - $e";
		assert 1 == 2;
	}
	finally {
		xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
		log.info "xmlPolicyClass[$xmlPolicyClass]";
		log.info "tcPolicyClass[tcPolicyClass]";
	}
}

if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
	
	def PolicyID = context.expand( '${GET - PolicyGet I#ResponseAsXml#declare namespace ns1=\'${#Project#coordinatorSchema}\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
    //def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'http://www.decellc.org/schema/2012/12/coordinator\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
	log.info "================="+PolicyID
	tC.setPropertyValue("PolicyID",PolicyID);
} else if ( httpStatus == "HTTP/1.1 404 Not Found") {
	policyWasFound = "false";
} else {
	log.info "ERROR!";
	assert 1 == 2;
}




tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
callTC.setPropertyValue("PolicyID",tC.getPropertyValue("PolicyID"));
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))	
{
	callTC.setPropertyValue("PolicyIDEncoded",tC.getPropertyValue("PolicyID"));
}
else 
{
	callTC.setPropertyValue("PolicyIDEncoded",URLEncoder.encode(tC.getPropertyValue("PolicyID"),"UTF-8"));
}

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>SAML2 Assertion=pVZbU+JKEP4rVPbRCrkZAimhCoireFTQiOuel61h0gnjJjOYmQD6689MgCzg5bD6BNPpy9c933T3CUdZavtdziEXhNHaMksp90tpWyty6jPECfcpyoD7Avth9+rSt+umjzYmWm0QtLVfrfi44ZoO0hvgTfRjMwa91bSOdQs5tme5toMmrlTlvIAB5QJR0dZsUynYumndmS3fMX3Hq7sN71+tdg85l76lSt3U1qCWvK1NhZj5hrFYLOoLp87yxLBN0zIeri5DPIUMaZ2TVUZloLyz1sf1CDCkKa5jlhknxo7OScT9kCQUiSKHdazovVimYbYMqRNxknzTKluIBjRm5bGPKKMEo5S8IFWfKxBTFtW6acJyIqbZu0lYpnKswxLr2Dqm3zRjF9qBjnYQ5hzpfIqsta9biCEHiqE2vh20tW+H3VppepcjymOWZ3z3+Hd4gM4hZTOIdL5Jaw3tcIdvVKpzAtgfUJwWnMzhWpF1hjDw9W0CPtxVbZRDTJaXhEuCLrlCZ2zD2zuuqhGQBLj4zAVtXc7KyT1KC+g07oezVtwM+w3avZ9DHF7YL/e3R2cPhtkuAWwrl4LqalfHPVJWJFpZPC5Cu0HOH60edoMztvgZnrnn8JAcTbuT5ffJw9mwMWWzycKMvbB5NOlxIW6C6fjlx1PLTHoCFtmiNzR62eNFOCrGmI3x5ZWx9IrwBo0z+yUfPAbLm8ckjdHP8/PUePrnjt2I4OpiFMSOvbxGV97P0Ti5mAzHw9Yzp/a1dZYdNSYPNPNyRiwkMm8siuTHyMPtKp0t/LuyzZsPi8kjYLE5KhoMgtp3eUtIfNzMlIREelyq+jPVfLgAKrSOslK9wy9kuyORL+9wdTZbtus0Xcfsuq2G1eyemvK/22pZ382u07SdTZNZodiD2Gc0JiqWarkr2nwMEGc+BxpBrs9ZITsd1z7wGCCBagN6Kx8BoxzumGzP1hLy31HjxclTx8pfkugpinFhub+12jUTQzrMu7GAfKcnW/ZOT74FTGYEVONWvOaS2FzIWjyheSFSqz5HdQqFbO256rK+fdx0DU6yWQoKqZGxqEihPpvOysoYfPVr6wjzUnp7ele+tnfz2v+2KYHUiYhS4CqXHshrhDeGi71J5P2E3e2EN+67RUTUw5L1FDnBKyS7n/7QRPGj4ki33z8N++EGdqX9F9afNe4Ph5+0DC674egrtr/64S/rsw4+H/prgS+/ilyy94vmry2NDwho7HO/ChTNyVbYzZomB74cEZ3Ny53Vn+rFfF6UT9VTkzCX3uV4slzDtI0QcCFn2PMd+w3UqJwYBy0MFe692JV8F2EhpjQUSEAme0utPB6wIYbA1YY4kE1xeej6uRNSVk7AUrwl66dyu1WIP1yAsY+VnhSP5M+C5dGfC3vD11YcmadcEAWhiTqpZeH5HVpgJt0SOeZYvu38LQdvBd8VVkWusAjJp0kh4P0vNTW/2hrCmBVUDAKtFGzP1BKneJ6B/0fplZtybFd7PPn/RV4nJQUwyO2fk9K/Wsd89QJosjWX10Ffj+bGqRl4PdNqBOVo9lajOZDjuirKDrrOK/FryVad9jne+Q8=</con:value></con:property><con:property><con:name>assert2</con:name><con:value>SAML2 Assertion=pVdbc9o6EP4rjPvYMb5w9wRmXEwSp5CkgbRNXjqKvAYRW3Is2RB+/ZEMuEAuhyZPjNZ7+Xb1aXc54SiObMflHFJBGK0s44hyp5B2tSylDkOccIeiGLgjsDN2R0PHrpoO2ppoFd/ran+aQa3VNFsNPQRs6nWMQEcPrY6OIOw0QxNDC4NU5TwDn3KBqOhqtmnVdcvWTWtidpya6dTbVbPdudcqPyHl0rdUqZraBtSSd7WZEIljGIvForqoVVk6NWzTtIzfo+EYzyBGWu9knVERKO1t9HE1AAxRhKuYxcaJsadzEnBnTKYUiSyFTazgrVimYXYMqRNwMv2ilbYQ+DRkxbGPKKMEo4iskKrPCMSMBRU3mrKUiFn8ZhKWqRzrsMQ6tur0i2bsQzvS0R7ClCOdz5C18XUDIaRAMVRub/yu9uW4WytMJymiPGRpzPeP/4YHaA4RSyDQ+TatDbTjHb5Sqd4JYMenOMo4yeFSkTVBGPjmNgEf76pynUJIlkPCJUGXXKEzduEdHNfV8MgUuPjIBe1cztrJTxRl0Ot/HQTtMzqyOMsntzN8GUX1y+akCcO7bgFgV7kQlFe7Ph6QsiTR2uLXrzuvnixcbF0/T7FvNCZncGW06rXsBj890rPz74NlYp4tR2at4a1q9/YFWK0+PfezpuVdtk7vn36MhqtoMa0Zs+ZdmETn5uQut+d5yBpsMbnI2+PaPJrPo9tR/DglQ34PTe9hdXf15K+8eXz6+/fFV+Ps8tYNf4J/fzo9j5m1cv0LK75FNF+l1/SHNU/i1dDj3TKdHfz7su2bH2cPc8Bie1Q08L3KqbwlJN5vZkpCAj0sVJ1ENR8ugAqtp6xU73Ay2e5I4Mg7XJ/Njt2otS3Xa9qDplWzBmajZjY6HevUdF3P9rZNZo3iAGKf0ZCoWKrlrmnzPkAcOxxoAKmes0x2Oq6949FDAlV8eiMfAaMcJky25+nTI0pZe56ESWOeW+Ey7XTaC97UKpdMXNGr1A0FpHst2bL3WvINYJIQUH1b0ZpLXnMhS/GE8kxEVjVHVQqZ7OyparKOXW83DE7iJAIF1IhZkEVQTWZJURiDr39tHWFeSG8Gk+KxvZnW4bdtBaROQJQCV7l8A3mL8MpsqW0TeTvhxm7CW/duFhD1rmQ5RUrwGsn+p78sUfQoKeL2+4Nxf7yFXWr/g/VHjftXVx+09Ibu+Poztn/64z/WRx18PPTnAg8/i1yy95PmLy2NdwhoHHK/DBTkZCfsdkuT815OiN725SbVp2qW51nxVFtqEKbSu5xOVsMwbWMMOJMj7HnCHoEapRPjqH2hxH0Qu5TvI8zEjI4FEhDL3lIpjkcsiGPgakH0ZU9cHrt97oWUlROwFK/J+pFcbhXid/df7GClJ8XX8mfB0uDvhb3iayeOzFPuh4LQqTqpXeH5DVpgJt0SOeVYuuv8NQevBd8XlkUusQjJp4dMwNtfKmp8dTWEMcuo8D2tEOyO1AKneE7A+av0wk0xtcs1nvz/Hq+TggLqL4PUL/yrbcxRL4BOd8byJujLydwcmF7rm2k1vWIyt9aT2XMbnbIoe+h6L8QvJTt1OuR47z8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>urn:dece:userid:org:dece:092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">897</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0925381223A70188E05307991F0A3074</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77321</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<dece:ErrorList xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator" xmlns:md="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
   <dece:Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <dece:Reason Language="en">The policy was not found.</dece:Reason>
      <dece:OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59/User/urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</dece:OriginalRequest>
      <dece:ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</dece:ErrorLink>
   </dece:Error>
</dece:ErrorList>]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - STS");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

//switch (nodeId) {
//	case "221500":  // LLP
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\910_concat.pem";
//	break;
//	case "221700":  // DLP
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\914_concat.pem";
//	break;
//	case "441500":  // RTR
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\912_concat.pem";
//	break;
//	case "1910":  // LLP Standalone
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
//	break;
//	case "1912":  // RTR Standalone
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1912.pem";
//	break;
//	case "80080010":  // DLPCS
//	default:
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\80080010.pem";
//	break;
//}
switch (nodeId) {
	case "1910":  // LLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
	break;
	case "1914":  // DLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1914_concat.pem";
	break;
	case "221500":  // LLP
		keyStorePath = "C:\\certificates\\221500_concat.pem";
	break;
	case "221501":  // LLPCS
		keyStorePath = "C:\\certificates\\221501_concat.pem";
	break;
	case "221700":  // DLP
		keyStorePath = "C:\\certificates\\221700_concat.pem";
	break;
	case "221701":  // DLPCS
		keyStorePath = "C:\\certificates\\221701_concat.pem";
	break;
	case "441500":  // RTR
	default:
		keyStorePath = "C:\\certificates\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="delay" name="Delay 3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS"><con:settings/><con:config service="DECE StreamCreate API" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="80080010.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/201$major/$minor/coordinator">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('POST - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";

if (contentLength.toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String orgRequest  = url + "/dece/$major/$minor/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
log.info "ContentLength[" + tC.getPropertyValue("contentLength") + "]";
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	log.info "b[$b]";
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script></con:config></con:testStep><con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertAccountId</con:name><con:value>94B6AE0F85ADC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertPackaged</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertRaw</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertUserId</con:name><con:value>94B6AE0F85AFC20DE0401F0A0799081F</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLength</con:name><con:value>431</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>5440</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Authorization Information Extraction via STS</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/201$major/$minor/coordinator" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>
]]></con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy GET for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("returnXMLResult",null);
tC.setPropertyValue("XMLbody",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("returnXMLResult",callTC.getPropertyValue("returnXMLResult"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}
if (tC.getPropertyValue("returnXMLResult") == null || tC.getPropertyValue("returnXMLResult") == "") {
		tC.setPropertyValue("returnXMLResult","false");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - PolicyGet for Account");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - PolicyGet for Account"><con:settings/><con:config service="Coordinator APIs" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - PolicyGet for Account" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('GET - PolicyGet for Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));

if (tC.getPropertyValue("returnXMLResult") == "true") {
	callTC.setPropertyValue("policyGetXML",tC.getPropertyValue("XMLbody"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221500</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9E1BEFA25290915E0401F0A079935C4</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9E25FD41A10D76DE0401F0A07996532</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:EnableManageUserConsent</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:CE7270E3494E33BDE0401F0A05995AC3">
      <PolicyClass>urn:dece:type:policy:EnableManageUserConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:C9E25FD41A10D76DE0401F0A07996532</Resource>
      <RequestingEntity>urn:dece:org:org:dece:221500</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreatedBy="urn:dece:userid:org:dece:C9E25FD41A10D76DE0401F0A07996532" CreationDate="2012-11-14T09:49:44.000Z">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>962</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>false</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77322</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5f86035a-9a59-46e9-8f0d-8c9709a09980"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyClassEncoded",callTC.getPropertyValue("policyClassEncoded"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17","us:mpaa:nr","us:mpaa:m","us:mpaa:gp","us:mpaa:sma","us:mpaa:x"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-y7-fv","us:tvpg:tv-g","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
tvpgRatingsreasoncodesUS = ["us:tvpg:v","us:tvpg:s","us:tvpg:l","us:tvpg:d","us:tvpg:fv"];
fabUS = ["us:fab:c","us:fab:f","us:fab:pd","us:fab:pd-m","us:fab:em","us:fab:ao"];
fabreasoncodesUS = ["us:fab:violence","us:fab:frightening","us:fab:sexual","us:fab:mildlang","us:fab:stronglang","us:fab:substance","us:fab:intense","us:fab:bnudity","us:fab:fnudity","us:fab:explicit","us:fab:erotica"];
esrbgamesUS = ["us:esrb:ec","us:esrb:e","us:esrb:e10+","us:esrb:t","us:esrb:m","us:esrb:ao","us:esrb:rp"];
mpaattrailersUS = ["us:mpaat:gb","us:mpaat:rb"];
tvmovieRatingsGB = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18"];
chvrsRatingsCA = ["ca:chvrs:g","ca:chvrs:pg","ca:chvrs:14a","ca:chvrs:18a","ca:chvrs:r"];
cbscRatingsCA = ["ca:cbsc:c","ca:cbsc:c8","ca:cbsc:g","ca:cbsc:pg","ca:cbsc:14+","ca:cbsc:18+"];
filmtvifcoIE = ["ie:ifco:g","ie:ifco:pg","ie:ifco:12","ie:ifco:15","ie:ifco:18"];
filmtvncsAU = ["au:ncs:g","au:ncs:pg","au:ncs:m","au:ncs:ma15","au:ncs:r18"];
filmtvoflcNZ = ["nz:oflc:g","nz:oflc:pg","nz:oflc:m","nz:oflc:rp13","nz:oflc:r13","nz:oflc:r15","nz:oflc:rp16","nz:oflc:r16","nz:oflc:r18","nz:oflc:r"];
MocRatingFR = ["fr:moc:u","fr:moc:10","fr:moc:12","fr:moc:16","fr:moc:18"];
FSKRatingDE = ["de:fsk:0","de:fsk:6","de:fsk:12","de:fsk:16","de:fsk:18"];
FSKRatingAT = ["at:fsk:0","at:fsk:6","at:fsk:12","at:fsk:16","at:fsk:18"];
FSKRatingCH = ["ch:fsk:0","ch:fsk:6","ch:fsk:12","ch:fsk:16","ch:fsk:18"];
KijkwijzerRatingBE= ["be:kijkwijzer:al","be:kijkwijzer:6","be:kijkwijzer:9","be:kijkwijzer:12","be:kijkwijzer:16"];
MocRatingLU = ["lu:moc:u","lu:moc:10","lu:moc:12","lu:moc:16","lu:moc:18"];
FSKRatingLU= ["lu:fsk:0","lu:fsk:6","lu:fsk:12","lu:fsk:16","lu:fsk:18"];
KijkwijzerRatingNL= ["nl:kijkwijzer:al","nl:kijkwijzer:6","nl:kijkwijzer:9","nl:kijkwijzer:12","nl:kijkwijzer:16"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:g":
	case "${urnRating}us:mpaa:pg":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:nc-17":
	case "${urnRating}us:mpaa:nr":
	case "${urnRating}us:mpaa:m":
	case "${urnRating}us:mpaa:gp":
	case "${urnRating}us:mpaa:sma":
	case "${urnRating}us:mpaa:x":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-g":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}us:tvpg:v":
	case "${urnRating}us:tvpg:s":
	case "${urnRating}us:tvpg:l":
	case "${urnRating}us:tvpg:d":
	case "${urnRating}us:tvpg:fv":
		for (rating in tvpgRatingsreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:c":
	case "${urnRating}us:fab:f":
	case "${urnRating}us:fab:pd":
	case "${urnRating}us:fab:pd-m":
	case "${urnRating}us:fab:em":
	case "${urnRating}us:fab:ao":
        	for (rating in fabUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
        case "${urnRating}us:fab:violence":
	case "${urnRating}us:fab:frightening":
	case "${urnRating}us:fab:sexual":
	case "${urnRating}us:fab:mildlang":
	case "${urnRating}us:fab:stronglang":
        case "${urnRating}us:fab:substance":
	case "${urnRating}us:fab:intense":
	case "${urnRating}us:fab:bnudity":
	case "${urnRating}us:fab:fnudity":
	case "${urnRating}us:fab:explicit":
	case "${urnRating}us:fab:erotica":
		for (rating in fabreasoncodesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:esrb:ec":
	case "${urnRating}us:esrb:e":
	case "${urnRating}us:esrb:e10+":
	case "${urnRating}us:esrb:t":
	case "${urnRating}us:esrb:m":
	case "${urnRating}us:esrb:ao":
        case "${urnRating}us:esrb:rp":
        	for (rating in esrbgamesUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;

        case "${urnRating}us:mpaat:gb":
        case "${urnRating}us:mpaat:rb":
        	for (rating in mpaattrailersUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
   
     case "${urnRating}gb:bbfc:e":  
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

          
        case "${urnRating}ca:chvrs:g":
	case "${urnRating}ca:chvrs:pg":
	case "${urnRating}ca:chvrs:14a":
	case "${urnRating}ca:chvrs:18a":
	case "${urnRating}ca:chvrs:r": 
	
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

        case "${urnRating}ca:cbsc:e": 
        case "${urnRating}ca:cbsc:c":
	case "${urnRating}ca:cbsc:c8":
	case "${urnRating}ca:cbsc:g":
	case "${urnRating}ca:cbsc:pg":
	case "${urnRating}ca:cbsc:14+":
        case "${urnRating}ca:cbsc:18+":
      		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}ie:ifco:e": 
        case "${urnRating}ie:ifco:g":
	case "${urnRating}ie:ifco:pg":
	case "${urnRating}ie:ifco:12":
	case "${urnRating}ie:ifco:15":
	case "${urnRating}ie:ifco:18":
      		for (rating in filmtvifcoIE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        case "${urnRating}au:ncs:e": 
        case "${urnRating}au:ncs:g":
	case "${urnRating}au:ncs:pg":
	case "${urnRating}au:ncs:m":
	case "${urnRating}au:ncs:ma15":
	case "${urnRating}au:ncs:r18":
      		for (rating in filmtvncsAU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
        case "${urnRating}nz:oflc:e": 
        case "${urnRating}nz:oflc:g":
	case "${urnRating}nz:oflc:pg":
	case "${urnRating}nz:oflc:m":
	case "${urnRating}nz:oflc:rp13":
	case "${urnRating}nz:oflc:r13":
	case "${urnRating}nz:oflc:r15":
	case "${urnRating}nz:oflc:rp16":
        case "${urnRating}nz:oflc:r16": 
        case "${urnRating}nz:oflc:r18":
	case "${urnRating}nz:oflc:r":
	      		for (rating in filmtvoflcNZ) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
       	case "${urnRating}fr:moc:u":
		case "${urnRating}fr:moc:10":
		case "${urnRating}fr:moc:12":
		case "${urnRating}fr:moc:16":
		case "${urnRating}fr:moc:18":
		       for (rating in MocRatingFR) { 
                       rating = urnRating + rating;
                       this.log.info "rating[$rating] - resource[$resource]";
                       resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
                       if (rating == resource) {
                             log.info "Terminating Loop";
                             break;
                       }
		       }
		break;
		
		case "${urnRating}de:fsk:0":
		case "${urnRating}de:fsk:6":
		case "${urnRating}de:fsk:12":
		case "${urnRating}de:fsk:16":
		case "${urnRating}de:fsk:18":
		       for (rating in FSKRatingDE) { 
                       rating = urnRating + rating;
                       this.log.info "rating[$rating] - resource[$resource]";
                       resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
                       if (rating == resource) {
                             log.info "Terminating Loop";
                             break;
                       }
		       }
		 break; 

		case "${urnRating}at:fsk:0":
 		case "${urnRating}at:fsk:6":
 		case "${urnRating}at:fsk:12":
		case "${urnRating}at:fsk:16":
		case "${urnRating}at:fsk:18":
        for (rating in FSKRatingAT) { 
		   rating = urnRating + rating;
		   this.log.info "rating[$rating] - resource[$resource]";
		   resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
		   if (rating == resource) {
		    log.info "Terminating Loop";
		    break;
   }
  }
  break;

			  case "${urnRating}ch:fsk:0":
			 case "${urnRating}ch:fsk:6":
			 case "${urnRating}ch:fsk:12":
			 case "${urnRating}ch:fsk:16":
			 case "${urnRating}ch:fsk:18":
			        for (rating in FSKRatingCH) { 
			   rating = urnRating + rating;
			   this.log.info "rating[$rating] - resource[$resource]";
			   resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			   if (rating == resource) {
			    log.info "Terminating Loop";
			    break;
			   }
  }
  break;

  case "${urnRating}be:kijkwijzer:al":
	case "${urnRating}be:kijkwijzer:6":
	case "${urnRating}be:kijkwijzer:9":
	case "${urnRating}be:kijkwijzer:12":
	case "${urnRating}be:kijkwijzer:16":
      		for (rating in KijkwijzerRatingBE) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}lu:fsk:0":
	case "${urnRating}lu:fsk:6":
	case "${urnRating}lu:fsk:12":
	case "${urnRating}lu:fsk:16":
	case "${urnRating}lu:fsk:18":
      		for (rating in FSKRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}lu:moc:u":
	case "${urnRating}lu:moc:10":
	case "${urnRating}lu:moc:12":
	case "${urnRating}lu:moc:16":
	case "${urnRating}lu:moc:18":
      		for (rating in MocRatingLU) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;

		case "${urnRating}nl:kijkwijzer:al":
	case "${urnRating}nl:kijkwijzer:6":
	case "${urnRating}nl:kijkwijzer:9":
	case "${urnRating}nl:kijkwijzer:12":
	case "${urnRating}nl:kijkwijzer:16":
      		for (rating in KijkwijzerRatingNL) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
       
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";


testCase.setPropertyValue("policyResourceXML", resourceXml);]]></script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>-->
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#TestCase#policyClassEncoded}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("HOST");
def urnacct   = tP.getPropertyValue("urnaccount");

def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVZbU+JKEP4rVPbRCrkZAimhCoireFTQiOuel61h0gnjJjOYmQD6689MgCzg5bD6BNPpy9c933T3CUdZavtdziEXhNHaMksp90tpWyty6jPECfcpyoD7Avth9+rSt+umjzYmWm0QtLVfrfi44ZoO0hvgTfRjMwa91bSOdQs5tme5toMmrlTlvIAB5QJR0dZsUynYumndmS3fMX3Hq7sN71+tdg85l76lSt3U1qCWvK1NhZj5hrFYLOoLp87yxLBN0zIeri5DPIUMaZ2TVUZloLyz1sf1CDCkKa5jlhknxo7OScT9kCQUiSKHdazovVimYbYMqRNxknzTKluIBjRm5bGPKKMEo5S8IFWfKxBTFtW6acJyIqbZu0lYpnKswxLr2Dqm3zRjF9qBjnYQ5hzpfIqsta9biCEHiqE2vh20tW+H3VppepcjymOWZ3z3+Hd4gM4hZTOIdL5Jaw3tcIdvVKpzAtgfUJwWnMzhWpF1hjDw9W0CPtxVbZRDTJaXhEuCLrlCZ2zD2zuuqhGQBLj4zAVtXc7KyT1KC+g07oezVtwM+w3avZ9DHF7YL/e3R2cPhtkuAWwrl4LqalfHPVJWJFpZPC5Cu0HOH60edoMztvgZnrnn8JAcTbuT5ffJw9mwMWWzycKMvbB5NOlxIW6C6fjlx1PLTHoCFtmiNzR62eNFOCrGmI3x5ZWx9IrwBo0z+yUfPAbLm8ckjdHP8/PUePrnjt2I4OpiFMSOvbxGV97P0Ti5mAzHw9Yzp/a1dZYdNSYPNPNyRiwkMm8siuTHyMPtKp0t/LuyzZsPi8kjYLE5KhoMgtp3eUtIfNzMlIREelyq+jPVfLgAKrSOslK9wy9kuyORL+9wdTZbtus0Xcfsuq2G1eyemvK/22pZ382u07SdTZNZodiD2Gc0JiqWarkr2nwMEGc+BxpBrs9ZITsd1z7wGCCBagN6Kx8BoxzumGzP1hLy31HjxclTx8pfkugpinFhub+12jUTQzrMu7GAfKcnW/ZOT74FTGYEVONWvOaS2FzIWjyheSFSqz5HdQqFbO256rK+fdx0DU6yWQoKqZGxqEihPpvOysoYfPVr6wjzUnp7ele+tnfz2v+2KYHUiYhS4CqXHshrhDeGi71J5P2E3e2EN+67RUTUw5L1FDnBKyS7n/7QRPGj4ki33z8N++EGdqX9F9afNe4Ph5+0DC674egrtr/64S/rsw4+H/prgS+/ilyy94vmry2NDwho7HO/ChTNyVbYzZomB74cEZ3Ny53Vn+rFfF6UT9VTkzCX3uV4slzDtI0QcCFn2PMd+w3UqJwYBy0MFe692JV8F2EhpjQUSEAme0utPB6wIYbA1YY4kE1xeej6uRNSVk7AUrwl66dyu1WIP1yAsY+VnhSP5M+C5dGfC3vD11YcmadcEAWhiTqpZeH5HVpgJt0SOeZYvu38LQdvBd8VVkWusAjJp0kh4P0vNTW/2hrCmBVUDAKtFGzP1BKneJ6B/0fplZtybFd7PPn/RV4nJQUwyO2fk9K/Wsd89QJosjWX10Ffj+bGqRl4PdNqBOVo9lajOZDjuirKDrrOK/FryVad9jne+Q8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59/User/urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:de:fsk:6</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish Parental Control Rating</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:type:rating:de:fsk:0&lt;/dece:Resource>
&lt;dece:Resource>urn:dece:type:rating:de:fsk:6&lt;/dece:Resource>
</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>urn:dece:userid:org:dece:092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>assert2</con:name><con:value>SAML2 Assertion=pVdbc9o6EP4rjPvYMb5w9wRmXEwSp5CkgbRNXjqKvAYRW3Is2RB+/ZEMuEAuhyZPjNZ7+Xb1aXc54SiObMflHFJBGK0s44hyp5B2tSylDkOccIeiGLgjsDN2R0PHrpoO2ppoFd/ran+aQa3VNFsNPQRs6nWMQEcPrY6OIOw0QxNDC4NU5TwDn3KBqOhqtmnVdcvWTWtidpya6dTbVbPdudcqPyHl0rdUqZraBtSSd7WZEIljGIvForqoVVk6NWzTtIzfo+EYzyBGWu9knVERKO1t9HE1AAxRhKuYxcaJsadzEnBnTKYUiSyFTazgrVimYXYMqRNwMv2ilbYQ+DRkxbGPKKMEo4iskKrPCMSMBRU3mrKUiFn8ZhKWqRzrsMQ6tur0i2bsQzvS0R7ClCOdz5C18XUDIaRAMVRub/yu9uW4WytMJymiPGRpzPeP/4YHaA4RSyDQ+TatDbTjHb5Sqd4JYMenOMo4yeFSkTVBGPjmNgEf76pynUJIlkPCJUGXXKEzduEdHNfV8MgUuPjIBe1cztrJTxRl0Ot/HQTtMzqyOMsntzN8GUX1y+akCcO7bgFgV7kQlFe7Ph6QsiTR2uLXrzuvnixcbF0/T7FvNCZncGW06rXsBj890rPz74NlYp4tR2at4a1q9/YFWK0+PfezpuVdtk7vn36MhqtoMa0Zs+ZdmETn5uQut+d5yBpsMbnI2+PaPJrPo9tR/DglQ34PTe9hdXf15K+8eXz6+/fFV+Ps8tYNf4J/fzo9j5m1cv0LK75FNF+l1/SHNU/i1dDj3TKdHfz7su2bH2cPc8Bie1Q08L3KqbwlJN5vZkpCAj0sVJ1ENR8ugAqtp6xU73Ay2e5I4Mg7XJ/Njt2otS3Xa9qDplWzBmajZjY6HevUdF3P9rZNZo3iAGKf0ZCoWKrlrmnzPkAcOxxoAKmes0x2Oq6949FDAlV8eiMfAaMcJky25+nTI0pZe56ESWOeW+Ey7XTaC97UKpdMXNGr1A0FpHst2bL3WvINYJIQUH1b0ZpLXnMhS/GE8kxEVjVHVQqZ7OyparKOXW83DE7iJAIF1IhZkEVQTWZJURiDr39tHWFeSG8Gk+KxvZnW4bdtBaROQJQCV7l8A3mL8MpsqW0TeTvhxm7CW/duFhD1rmQ5RUrwGsn+p78sUfQoKeL2+4Nxf7yFXWr/g/VHjftXVx+09Ibu+Poztn/64z/WRx18PPTnAg8/i1yy95PmLy2NdwhoHHK/DBTkZCfsdkuT815OiN725SbVp2qW51nxVFtqEKbSu5xOVsMwbWMMOJMj7HnCHoEapRPjqH2hxH0Qu5TvI8zEjI4FEhDL3lIpjkcsiGPgakH0ZU9cHrt97oWUlROwFK/J+pFcbhXid/df7GClJ8XX8mfB0uDvhb3iayeOzFPuh4LQqTqpXeH5DVpgJt0SOeVYuuv8NQevBd8XlkUusQjJp4dMwNtfKmp8dTWEMcuo8D2tEOyO1AKneE7A+av0wk0xtcs1nvz/Hq+TggLqL4PUL/yrbcxRL4BOd8byJujLydwcmF7rm2k1vWIyt9aT2XMbnbIoe+h6L8QvJTt1OuR47z8=</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17", "US:MPAA:NR",
	"US:MPAA:M", "US:MPAA:GP", "US:MPAA:SMA","US:MPAA:X"];
*/
	
mmpaRatingsUS = ["US:MPAA:G", "US:MPAA:PG", "US:MPAA:PG-13","US:MPAA:R", "US:MPAA:NC-17"];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}US:MPAA:M":
	case "${urnRating}US:MPAA:NC-17":
	case "${urnRating}US:MPAA:R":
	case "${urnRating}US:MPAA:PG-13":
	case "${urnRating}US:MPAA:PG":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "&lt;dece:Resource>$rating&lt;/dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
	break;
	default:
		resourceXml = "&lt;dece:Resource>$resource&lt;/dece:Resource>";
	break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);


</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate Account");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate Account"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate Account" mediaType="application/xml" postQueryString="false" sslKeystore="221700_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:encoding/><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
      ${#TestCase#policyResourceXML}
      <!--<dece:Resource>${#TestCase#policyResource}</dece:Resource>-->
      <dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate Account');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9E7EEF12F676AE4E0401F0A05997BB6</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9E7F7B295BDC2E7E0401F0A05990FA5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>770</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221700</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:EnableManageUserConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:C9E7F7B295BDC2E7E0401F0A05990FA5</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:org:org:dece:221700</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:userid:org:dece:C9E7F7B295BDC2E7E0401F0A05990FA5</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Establish High-Level Policies for User/Account/Node</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:LatestTOUNotAccepted">
      <Reason Language="en">Latest TOU Policy is Not Accepted</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/$major/$minor/Account/urn:dece:accountid:org:dece:C9E7EEF12F676AE4E0401F0A05997BB6/Policy/urn:dece:type:policy:EnableManageUserConsent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#Policy:LatestTOUNotAccepted</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>policyResourceXML</con:name><con:value>&lt;dece:Resource>urn:dece:userid:org:dece:C9E7F7B295BDC2E7E0401F0A05990FA5&lt;/dece:Resource></con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77324</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for User" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="5be29315-6b0e-431f-ad43-00f4c223e15a"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded",callTC.getPropertyValue("policyClass"));
	tC.setPropertyValue("PolicyIDEncoded",callTC.getPropertyValue("PolicyID"));
}
else
{
	tC.setPropertyValue("policyClassEncoded",URLEncoder.encode(callTC.getPropertyValue("policyClass"),"UTF-8"));
	tC.setPropertyValue("PolicyIDEncoded",URLEncoder.encode(callTC.getPropertyValue("PolicyID"),"UTF-8"));
}
tC.setPropertyValue("PolicyID",callTC.getPropertyValue("PolicyID"));

tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("DELETE - PolicyDelete");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - PolicyDelete"><con:settings/><con:config service="Policies" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - PolicyDelete" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#assert}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="POLICYCLASS" value="${#TestCase#PolicyIDEncoded}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - Remove all Parental Control Policies</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value>SAML2 Assertion=pVZbU+JKEP4rVPbRCrkZAimhCoireFTQiOuel61h0gnjJjOYmQD6689MgCzg5bD6BNPpy9c933T3CUdZavtdziEXhNHaMksp90tpWyty6jPECfcpyoD7Avth9+rSt+umjzYmWm0QtLVfrfi44ZoO0hvgTfRjMwa91bSOdQs5tme5toMmrlTlvIAB5QJR0dZsUynYumndmS3fMX3Hq7sN71+tdg85l76lSt3U1qCWvK1NhZj5hrFYLOoLp87yxLBN0zIeri5DPIUMaZ2TVUZloLyz1sf1CDCkKa5jlhknxo7OScT9kCQUiSKHdazovVimYbYMqRNxknzTKluIBjRm5bGPKKMEo5S8IFWfKxBTFtW6acJyIqbZu0lYpnKswxLr2Dqm3zRjF9qBjnYQ5hzpfIqsta9biCEHiqE2vh20tW+H3VppepcjymOWZ3z3+Hd4gM4hZTOIdL5Jaw3tcIdvVKpzAtgfUJwWnMzhWpF1hjDw9W0CPtxVbZRDTJaXhEuCLrlCZ2zD2zuuqhGQBLj4zAVtXc7KyT1KC+g07oezVtwM+w3avZ9DHF7YL/e3R2cPhtkuAWwrl4LqalfHPVJWJFpZPC5Cu0HOH60edoMztvgZnrnn8JAcTbuT5ffJw9mwMWWzycKMvbB5NOlxIW6C6fjlx1PLTHoCFtmiNzR62eNFOCrGmI3x5ZWx9IrwBo0z+yUfPAbLm8ckjdHP8/PUePrnjt2I4OpiFMSOvbxGV97P0Ti5mAzHw9Yzp/a1dZYdNSYPNPNyRiwkMm8siuTHyMPtKp0t/LuyzZsPi8kjYLE5KhoMgtp3eUtIfNzMlIREelyq+jPVfLgAKrSOslK9wy9kuyORL+9wdTZbtus0Xcfsuq2G1eyemvK/22pZ382u07SdTZNZodiD2Gc0JiqWarkr2nwMEGc+BxpBrs9ZITsd1z7wGCCBagN6Kx8BoxzumGzP1hLy31HjxclTx8pfkugpinFhub+12jUTQzrMu7GAfKcnW/ZOT74FTGYEVONWvOaS2FzIWjyheSFSqz5HdQqFbO256rK+fdx0DU6yWQoKqZGxqEihPpvOysoYfPVr6wjzUnp7ele+tnfz2v+2KYHUiYhS4CqXHshrhDeGi71J5P2E3e2EN+67RUTUw5L1FDnBKyS7n/7QRPGj4ki33z8N++EGdqX9F9afNe4Ph5+0DC674egrtr/64S/rsw4+H/prgS+/ilyy94vmry2NDwho7HO/ChTNyVbYzZomB74cEZ3Ny53Vn+rFfF6UT9VTkzCX3uV4slzDtI0QcCFn2PMd+w3UqJwYBy0MFe692JV8F2EhpjQUSEAme0utPB6wIYbA1YY4kE1xeej6uRNSVk7AUrwl66dyu1WIP1yAsY+VnhSP5M+C5dGfC3vD11YcmadcEAWhiTqpZeH5HVpgJt0SOeZYvu38LQdvBd8VVkWusAjJp0kh4P0vNTW/2hrCmBVUDAKtFGzP1BKneJ6B/0fplZtybFd7PPn/RV4nJQUwyO2fk9K/Wsd89QJosjWX10Ffj+bGqRl4PdNqBOVo9lajOZDjuirKDrrOK/FryVad9jne+Q8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77325</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0925381223A70188E05307991F0A3074</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>urn:dece:userid:org:dece:092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>assert2</con:name><con:value>SAML2 Assertion=pVdbc9o6EP4rjPvYMb5w9wRmXEwSp5CkgbRNXjqKvAYRW3Is2RB+/ZEMuEAuhyZPjNZ7+Xb1aXc54SiObMflHFJBGK0s44hyp5B2tSylDkOccIeiGLgjsDN2R0PHrpoO2ppoFd/ran+aQa3VNFsNPQRs6nWMQEcPrY6OIOw0QxNDC4NU5TwDn3KBqOhqtmnVdcvWTWtidpya6dTbVbPdudcqPyHl0rdUqZraBtSSd7WZEIljGIvForqoVVk6NWzTtIzfo+EYzyBGWu9knVERKO1t9HE1AAxRhKuYxcaJsadzEnBnTKYUiSyFTazgrVimYXYMqRNwMv2ilbYQ+DRkxbGPKKMEo4iskKrPCMSMBRU3mrKUiFn8ZhKWqRzrsMQ6tur0i2bsQzvS0R7ClCOdz5C18XUDIaRAMVRub/yu9uW4WytMJymiPGRpzPeP/4YHaA4RSyDQ+TatDbTjHb5Sqd4JYMenOMo4yeFSkTVBGPjmNgEf76pynUJIlkPCJUGXXKEzduEdHNfV8MgUuPjIBe1cztrJTxRl0Ot/HQTtMzqyOMsntzN8GUX1y+akCcO7bgFgV7kQlFe7Ph6QsiTR2uLXrzuvnixcbF0/T7FvNCZncGW06rXsBj890rPz74NlYp4tR2at4a1q9/YFWK0+PfezpuVdtk7vn36MhqtoMa0Zs+ZdmETn5uQut+d5yBpsMbnI2+PaPJrPo9tR/DglQ34PTe9hdXf15K+8eXz6+/fFV+Ps8tYNf4J/fzo9j5m1cv0LK75FNF+l1/SHNU/i1dDj3TKdHfz7su2bH2cPc8Bie1Q08L3KqbwlJN5vZkpCAj0sVJ1ENR8ugAqtp6xU73Ay2e5I4Mg7XJ/Njt2otS3Xa9qDplWzBmajZjY6HevUdF3P9rZNZo3iAGKf0ZCoWKrlrmnzPkAcOxxoAKmes0x2Oq6949FDAlV8eiMfAaMcJky25+nTI0pZe56ESWOeW+Ey7XTaC97UKpdMXNGr1A0FpHst2bL3WvINYJIQUH1b0ZpLXnMhS/GE8kxEVjVHVQqZ7OyparKOXW83DE7iJAIF1IhZkEVQTWZJURiDr39tHWFeSG8Gk+KxvZnW4bdtBaROQJQCV7l8A3mL8MpsqW0TeTvhxm7CW/duFhD1rmQ5RUrwGsn+p78sUfQoKeL2+4Nxf7yFXWr/g/VHjftXVx+09Ibu+Poztn/64z/WRx18PPTnAg8/i1yy95PmLy2NdwhoHHK/DBTkZCfsdkuT815OiN725SbVp2qW51nxVFtqEKbSu5xOVsMwbWMMOJMj7HnCHoEapRPjqH2hxH0Qu5TvI8zEjI4FEhDL3lIpjkcsiGPgakH0ZU9cHrt97oWUlROwFK/J+pFcbhXid/df7GClJ8XX8mfB0uDvhb3iayeOzFPuh4LQqTqpXeH5DVpgJt0SOeVYuuv8NQevBd8XlkUusQjJp4dMwNtfKmp8dTWEMcuo8D2tEOyO1AKneE7A+av0wk0xtcs1nvz/Hq+TggLqL4PUL/yrbcxRL4BOd8byJujLydwcmF7rm2k1vWIyt9aT2XMbnbIoe+h6L8QvJTt1OuR47z8=</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn:dece:policyid:org:dece:0925381223A70188E05307991F0A3074</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>/opt/dece/GitRepo/uv-coordinator-api-regression/Certs/QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyDelete for Account" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("expectErrTypePolicyGet",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("expectErrTypePolicyGet",callTC.getPropertyValue("expectErrTypePolicyGet"));

if (tC.getPropertyValue("expectErrTypePolicyGet") == null || tC.getPropertyValue("expectErrTypePolicyGet") == "") {
		tC.setPropertyValue("expectErrTypePolicyGet","SUCCESS");
}</script></con:config></con:testStep><con:testStep type="groovy" name="pem set"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("DELETE - PolicyDelete");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

//switch (nodeId) {
//	case "10":  // Portal
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\10_concat.pem";
//	break;
//	case "1910":  // LLP standalone
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
//	break;
//	case "221500":  // LLP
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\910_concat.pem";
//	break;
//	case "221501":  // LLPCS
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\221501_concat.pem";
//	break;
//	case "221700":  // DLP
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\914_concat.pem";
//	break;
//	case "221701":  // DLPCS
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\221701_concat.pem";
//	break;
//	case "441500":  // RTR
//	default:
//		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\912_concat.pem";
//	break;
//}
switch (nodeId) {
	case "1910":  // LLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1910.pem";
	break;
	case "1914":  // DLP standalone
		keyStorePath = "C:\\Documents and Settings\\ashwin.tikle\\Desktop\\certs\\1914_concat.pem";
	break;
	case "221500":  // LLP
		keyStorePath = "C:\\certificates\\221500_concat.pem";
	break;
	case "221501":  // LLPCS
		keyStorePath = "C:\\certificates\\221501_concat.pem";
	break;
	case "221700":  // DLP
		keyStorePath = "C:\\certificates\\221700_concat.pem";
	break;
	case "221701":  // DLPCS
		keyStorePath = "C:\\certificates\\221701_concat.pem";
	break;
	case "441500":  // RTR
	default:
		keyStorePath = "C:\\certificates\\" + nodeId + "_concat.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - PolicyDelete');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process response body and headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody    = tC.getPropertyValue("XMLbody");
def httpStatus = tC.getPropertyValue("httpStatus");

String policyWasFound = "false";
String xmlPolicyClass = "";
String tcPolicyClass  = tC.getPropertyValue("policyClass");

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	xmlPolicyClass = myXML.Policy.PolicyClass.text();
}

		
if (httpStatus == "HTTP/1.1 200 OK" &amp;&amp; xmlPolicyClass == tcPolicyClass) {
	policyWasFound = "true";
}


tC.setPropertyValue("policyExists", policyWasFound);</script></con:config></con:testStep><con:testStep type="groovy" name="Return policyExists to calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("policyExists",tC.getPropertyValue("policyExists"));
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04600 - StreamCreate - DLPCS - Policy - Can create stream when ShareMediaHistory policy is absent</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221700</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">d8a2af59-94ce-4d58-a97b-8920da8cf22a</con:value></con:property><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ShareMediaHistory</con:value></con:property><con:property><con:name>expectErrTypePolicyGet</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77326</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PolicyCreate for Block unrated content" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="true" id="773f47a4-f0f0-462d-9b3b-1659105fa633"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
tC.setPropertyValue("policyAuthority","urn:dece:role:coordinator");
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("streamhandleFULL",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assert2",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL1",null);
tC.setPropertyValue("assertionUserIdFULL2",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyAuthority",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus",null);
tC.setPropertyValue("policyResourceXML",null);
tC.setPropertyValue("expectErrTypePolicyCreate",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract required Properties from calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));
tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyClassEncoded",callTC.getPropertyValue("policyClassEncoded"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyAuthority",callTC.getPropertyValue("policyAuthority"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyStatus",callTC.getPropertyValue("policyStatus"));
tC.setPropertyValue("expectErrTypePolicyCreate",callTC.getPropertyValue("expectErrTypePolicyCreate"));
tC.setPropertyValue("policyAuthority", "urn:dece:role:type:coordinator");

if (tC.getPropertyValue("expectErrTypePolicyCreate") == null || tC.getPropertyValue("expectErrTypePolicyCreate") == "") {
		tC.setPropertyValue("expectErrTypePolicyCreate","SUCCESS");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
		tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL1"));
}

switch (tC.getPropertyValue("policyClass")) {
	case "urn:dece:type:policy:EndUserLicenseAgreement":
		tC.setPropertyValue("policyResource","urn:dece:agreement:enduserlicenseagreement:10");
	break;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Policy &lt;dece:Resource> XML" disabled="true"><con:settings/><con:config><script><![CDATA[def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
/*
*  Complete rating set which doesn't appear to work
mmpaRatingsUS = ["us:mpaa:G", "us:mpaa:pg", "us:mpaa:pg-13","us:mpaa:r", "us:mpaa:nc-17", "us:mpaa:NR",
	"us:mpaa:m", "us:mpaa:GP", "us:mpaa:SMA","us:mpaa:X"];
*/
	
mmpaRatingsUS = ["us:mpaa:g","us:mpaa:pg","us:mpaa:pg-13","us:mpaa:r","us:mpaa:nc-17"];
chvrsRatingsCA = ["CA:chvrs:g","CA:chvrs:pg","CA:chvrs:14a","CA:chvrs:18a","CA:chvrs:r","CA:chvrs:e"];
tvpgRatingsUS = ["us:tvpg:tv-y","us:tvpg:tv-y7","us:tvpg:tv-y7-fv","us:tvpg:tv-pg","us:tvpg:tv-14","us:tvpg:tv-ma"];
cbscRatingsCA = ["CA:cbsc:c","CA:cbsc:c8","CA:cbsc:g","CA:cbsc:pg","CA:cbsc:14+","CA:cbsc:18+","CA:cbsc:e"];
tvmovieRatingsUK = ["gb:bbfc:u","gb:bbfc:pg","gb:bbfc:12","gb:bbfc:12a","gb:bbfc:15","gb:bbfc:18","gb:bbfc:r18",];
//tvmovieRatingsGB = ["gb:film & tv:bbfc:u","gb:film & tv:bbfc:pg","gb:film & tv:bbfc:12","gb:film & tv:bbfc:12a","gb:film & tv:bbfc:15","gb:film & tv:bbfc:18","gb:film & tv:bbfc:r18",];
tvmovieRatingsGB = ["gb:film & tv:bbfc:u","gb:film & tv:bbfc:pg","gb:film & tv:bbfc:12","gb:film & tv:bbfc:15","gb:film & tv:bbfc:18","gb:film & tv:bbfc:r18",];

String resourceXml = "";
String urnRating   = testProject.getPropertyValue("urnRating");

def resource = testCase.getPropertyValue("policyResource");

switch (resource) {
	case "${urnRating}us:mpaa:m":
	case "${urnRating}us:mpaa:nc-17":
	case "${urnRating}us:mpaa:r":
	case "${urnRating}us:mpaa:pg-13":
	case "${urnRating}us:mpaa:pg":
		for (rating in mmpaRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				break;
			}
		}
		break;
	case "${urnRating}us:tvpg:tv-y":
	case "${urnRating}us:tvpg:tv-y7":
	case "${urnRating}us:tvpg:tv-y7-fv":
	case "${urnRating}us:tvpg:tv-pg":
	case "${urnRating}us:tvpg:tv-14":
	case "${urnRating}us:tvpg:tv-ma":
		for (rating in tvpgRatingsUS) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
	case "${urnRating}gb:bbfc:u":
	case "${urnRating}gb:bbfc:pg":
	case "${urnRating}gb:bbfc:12":
	case "${urnRating}gb:bbfc:12a":
	case "${urnRating}gb:bbfc:15":
	case "${urnRating}gb:bbfc:18":
	case "${urnRating}gb:bbfc:r18":
		for (rating in tvmovieRatingsUK) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
     case "${urnRating}CA:chvrs:g":
	case "${urnRating}CA:chvrs:pg":
	case "${urnRating}CA:chvrs:14a":
	case "${urnRating}CA:chvrs:18a":
	case "${urnRating}CA:chvrs:r":
     case "${urnRating}CA:chvrs:e": 
		for (rating in chvrsRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
        
     case "${urnRating}CA:cbsc:c":
	case "${urnRating}CA:cbsc:c8":
	case "${urnRating}CA:cbsc:g":
	case "${urnRating}CA:cbsc:pg":
	case "${urnRating}CA:cbsc:14+":
        case "${urnRating}CA:cbsc:18+":
        case "${urnRating}CA:cbsc:e": 
		for (rating in cbscRatingsCA) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>$rating</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
     case "${urnRating}gb:film & tv:bbfc:u":
	case "${urnRating}gb:film & tv:bbfc:pg":
	case "${urnRating}gb:film & tv:bbfc:12":
	//case "${urnRating}gb:film & tv:bbfc:12a":
	case "${urnRating}gb:film & tv:bbfc:15":
	case "${urnRating}gb:film & tv:bbfc:18":
	case "${urnRating}gb:film & tv:bbfc:r18":
		for (rating in tvmovieRatingsGB) { 
			rating = urnRating + rating;
			this.log.info "rating[$rating] - resource[$resource]";
			resourceXml += "<dece:Resource>" + rating.replaceAll("&","&amp;") + "</dece:Resource>\n";
			if (rating == resource) {
				log.info "Terminating Loop";
				break;
			}
		}
		break;
   
	default:
		resourceXml = "<dece:Resource>$resource</dece:Resource>";
		break;
}

this.log.info "resource [$resource]";
this.log.info "resourceXml [$resourceXml]";

testCase.setPropertyValue("policyResourceXML", resourceXml);
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testProject.getPropertyValue("nodeid");
log.info "nodeid:"+nodeId;
testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("E2E").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());

def runnerTC = myTC.run( null , false );

//assert runnerTC.status == Status.FINISHED;

keyStorePath = testCase.getPropertyValue("keyStorePath");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - PolicyCreate");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - PolicyCreate"><con:settings/><con:config service="DECE Policy PolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/User/{USER}/Policy/{POLICYCLASS}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - PolicyCreate" mediaType="application/xml" postQueryString="false" sslKeystore="RET_CS_1_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#assert}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="${#Project#coordinatorSchema} dece.xsd" xmlns:dece="${#Project#coordinatorSchema}" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:md="http://www.movielabs.com/md" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <dece:Policy>
      <dece:PolicyClass>${#TestCase#policyClass}</dece:PolicyClass>
     
      <!--<dece:RequestingEntity>${#TestCase#policyRequestEntity}</dece:RequestingEntity>-->
      <dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#policyRequestEntity}</dece:RequestingEntity>
      <dece:PolicyAuthority>${#TestCase#policyAuthority}</dece:PolicyAuthority>
      <dece:ResourceStatus>
         <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#policyCreator}">
            <dece:Value>${#TestCase#policyStatus}</dece:Value>
         </dece:Current>
      </dece:ResourceStatus>
   </dece:Policy>
</dece:PolicyList>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="POLICYCLASS" value="${#TestCase#policyClassEncoded}"/>
  <con:entry key="USER" value="${#TestCase#assertionUserIdFULL2}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - PolicyCreate');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify the response headers and body"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("HOST");
def urnacct   = tP.getPropertyValue("urnaccount");

def acct      = tC.getPropertyValue("nodeaccountid");

def sh            = tC.getPropertyValue("streamhandleFULL");
def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = tC.getPropertyValue("expectErrTypePolicyCreate");
def XMLbody       = tC.getPropertyValue("XMLbody");

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String orgRequest = url + "/rest/$major/$minor/Account/$account/Stream/$sh";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml";

/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";
switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
	break;
}
	
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");
assert tC.getPropertyValue("httpStatus") == expectHTTPstatus;
</script></con:config></con:testStep><con:properties><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVZbc9o6EP4rjPuYMb5wMXgCM2DIOT4FkuKEpH3pCHkBJbbkWDKX/vpKBlwgl0OTJ4/We/l29Wl3LzmKI9vtcA6pIIyW1nFEuZtLW1qWUpchTrhLUQzcFdgNOsOBa5dNF+1NtJLfa2k/pzWnMqtirGNkNvVqWEU6mjZDveLUnKrVqEJj2pCqnGfgUy4QFS3NNq2qblm6Xbu1bLfiuGat3HTqP7TSBFIufUuVsqntQK15S1sIkbiGsVqtyqtKmaVzwzZNy3gYDgK8gBhp7cttRnmgtL3Tx+UQMEQRLmMWG5fGkc5lyN2AzCkSWQq7WOFbsUzDbBpSJ+Rk/kUrbCH06YzlRw9RRglGEfmFVH2GIBYsLHWiOUuJWMRvJmGZyrEOa1lDq0q/aMYxtDMdHSFMOdL5Alk7X2OYQQoUQ+lu7Le0L+fdWm56myLKZyyN+fHx7/AAXULEEgh1vk9rB+18h69Uqn0J2PUpjjJOljBSZE0QBr67TcDnuyrdpDAj6wHhkqBrrtAZh/BOjttq9MgcuPjIBR1cztbJBEUZtPuzRf9rNBp+v/sPPzsP/qb28I8Y3Qe98HsrB3ConAuKq90eT0hZkGhrgdCm4lyNHJSMQrgIxtHQdqKluHqKZt3rr8vJeDCuNI1omeENffIS6sBjfD8RYT+++bqaVm3SSRqwWlpmTJ82XfyjM61c3DbqfuWOZ8N6+is0q14jWfVno2/h3SMJ7wcXATPJQ1jxKxML0V9JdlO9n0TPmy70jeETvmuKZyHA//ex2bhn3y7IZOIj374bNFpFOgf4j2X7Nx9k00fAYn9UNPB7pSt5S0i838yUhIT6LFd1E9V8uAAqtLayUr3DzWS7I6Er73B7Nhudvud1r7pVs1Oze92+WauYTrNpXZkdq1ev75vMFsUJRI/RGVGxVMvd0uZ9gDh2OdAQUn3JMtnpuPaOxx4SqOTTsXwEjHK4ZbI9M3vK41VzVg/rpsNqocNiZPGnpVYaMXFNr9POTEB63JJrRy15DJgkBFTfVrTmktdcyFI8o2UmIqu8RGUKmezsqWqyrl1t1AxO4iQCBdSIWZhFUE4WSV4Yg2+/to4wz6Xj/m3+2N5M6/TfvgJSJyRKgatcuiBvEV7Mlrpb2yfydsKNw4T37jtZSNS7kuUUKcFbJMe//rBE0aOgSMfz+oEX7GEX2n9h/VFj7/r6g5a9QSe4+YztTy/4aX3UwcdDfy7w4LPIJXs/af7S0niHgMYp94tA4ZIchN1vaXLeywnR3r/cZ1R+LmfLZZa/VUdNwlS6l+PJqhmmbQSAMznDNrfsCahReDHOWhgK4CfBC/kxxEwsaCCQgFg2l1J+PGNDDICrDdGXTXF97vp5FFKWTsBavCbzIrndKsTvLsDYxUpPim/kZ8XS8M+NveLrII7MUy6IgtC5OqllYfMGLzCTbokccyw9dP6ag9eCHwuLIhdYhCTUNBPw9p+Sml8tDWHMMir8npYLDmdqjlNsEnD/KL1wk4/tYo8n/7/I6ySnAAa5/XOS+1frmKueAJ0fzOVd0Jej2euZZt2So7l5OJp7dbNbFOUIXfuF+KXkoE6nHG//Bg==</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:08AECCCD006152D9E05307991F0AD60B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectErrTypePolicyCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:08AECCCD006152D9E05307991F0AD60B/User/urn:dece:userid:org:dece:08AECCCD019252D9E05307991F0AD60B/Policy/urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>policyAuthority</con:name><con:value>urn:dece:role:type:coordinator</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">08AECCBFB40A52DBE05307991F0A1D66</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">08AECCCD019252D9E05307991F0AD60B</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:us:mpaa:x</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>Test Configuration/Setup</con:value></con:property><con:property><con:name>streamhandleFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Policy - General Policy Establishment</con:value></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResourceXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>QC_Id</con:name><con:value>77323</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:08AECCBFB40A52DBE05307991F0A1D66</con:value></con:property><con:property><con:name>assert2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVZbc6JKEP4rFvu4hVyEqFS0iqA5666JHjHZbF5S49DoJDAQZlDMrz8zeIkak+MmT9Q0ffm655vuPmcojkzHZQwyThJaKeKIMqeUtpQ8o06CGGEORTEwh2PHd6/6jlnVHbQxUSq9Tkt5CEwAK5zUVFQzDdVCeqg2dVxTaxCGGNsTXG/WhCpjOfQo44jylmLqhqUahmraY8N0anXHNqqGXb9XKreQMeFbqFR1ZQ2qYC1lxnnqaNpisaguatUkm2qmrhva3VXfxzOIkdI+X2VUBsraa31cDQBDFOEqTmLtXNvTOQ+Y45MpRTzPYB0reC+WrulNTegEjEy/KVtbCHo0TMqjh2hCCUYReUGyPlfAZ0lQcaNpkhE+i99NwtClYxUKrGLDot8UbR/aiY72EGYMqWyGjLWvEYSQAcVQuRn1Wsq3026tNB1niLIwyWK2f/w7PEDnECUpBCrbpLWGdrrDI5VqnwN2ehRHOSNzuJZkTREGtr5NwKe7qgwzCEnRJ0wQtGASnbYL7+C4qkaHTIHxz1zQzuWsnNyiKIc2CboXj9roxRoNx41hH5D9fRT9QKQYLFolgF3lUrC92tXxgJRbEq0snuLAvZs+ev7U6uazf2+f5z/5Y7RsRvTpKjzzF5YR/Zjee/Ooe3Nj3yxzbzZgkxD+WL4/u7t2m7MBTuD38OckS90XuiCD4Pd1NFn64UUWuvVu/fJlEF9fLWaNP1PfS7kVE1aQxj9BirjN2SO+ZzP7103DK5r58GyuvdxOLxF/TvPrX7djGtT9n0z/ft95KvrUam3T2cG/L9u8eT+fPALmm6OkQa9TuRS3hPjHzUxKSKCGpaqTyubDOFCutKWV7B1OLtodCRxxh6uz3nC7nud1dKNp2man2dXtml5vNo1L3e2c6RebJrNCcQDRS2hIZCzZcle0+Rggjh0GNIBMnSe56HRM+cBjB3FU6dGReAQJZTBORHu2noolY5SSSc1eLAITL2vNBSpelMp1wgd0kLkhh2y/Jdt7LXkEmKQEZN+WtGaC14yLUjyjec4jozpHVQq56OyZbLKOaTVsjZE4jUAC1eIkyCOoprO0LIzGVl9TRZiV0lF3XD62d9M6/LepgNAJiFRgMpcLELcIR2aLtUnk/YQbuwlv3Lt5QOS7EuXkGcErJPu/Xlki6bGliOt5Xd/zN7C32n9h/VljbzD4pGWn7/rDr9g+eP6D8VkHnw/9tcD9ryIX7P2i+VtL7QMCaofc3wYK5mQn7GZLE/NeTIj25uU+o+pzNZ/P8/Kt1uUkzIR7MZ4MW9NNzQecixm2HCdPQLWtF+2khWEL/CD4Vr4PMecz6nPEIRbNpVIeT9gQfWByQ+yJplicun7uhRSl41DwYzIvEtutRPzhAowdLPWEeCg+iyQLXm/siK+dOCJPsSByQqfyJJeF5Tu8wIlwS8SYS7Jd58ccHAu+L9wWeYuFC0JNcg7v/6nI+dVSEMZJTnmvo5SC3Zla4uTLFJxXpTduyrG93ePJ/y/yKikpgEFs/4yU/uU65sgnQKc7c3kd9Oho1s+Mj0bzPrr2G/FbyU6dDjne/g8=</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:08AECCCD019252D9E05307991F0AD60B</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\API_Projects\uv-coordinator-api-regression\Certs\QALP1/RET_CS_1_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Test Configuration/Setup" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authentication Contexts" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Extract Properties from calling test case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC;

tC.setPropertyValue("nodeid", null);
tC.setPropertyValue("username", null);

try {
	callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);

	tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
	tC.setPropertyValue("username",callTC.getPropertyValue("username"));
}
catch(Throwable e) {
	log.info "ERROR during getTestCaseByName - $e";
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Authentication Context"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
def dbAcct;

int lastColon;
String nodeID = tC.getPropertyValue("nodeid").toString();
String userID = tC.getPropertyValue("username").toString();
String rturn = tP.getPropertyValue("urnRightsLocker").toString();
String useroid = "";
String acctoid = "";
String uuid = "";
String assertionAccountIdFULL = "";
String assertionUserIdFULL = "";
String assertion = "";
String rightslocker;

assert nodeID.length() > 0;
assert userID.length() > 0;

try {
	def a = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
	useroid = a.userGetUserOID(userID);
	acctoid = a.userGetAccountOIDbyUsername(userID);
} 
catch (Throwable e) {
	log.info "ERROR during dbUtils.dbUser - $e";
}
/*
*  Null calling test cases current Properties
*/
callTC.setPropertyValue("assert",null);
callTC.setPropertyValue("assertId",null);
callTC.setPropertyValue("assertionUUID",null);
callTC.setPropertyValue("assertionAccountIdFULL",null);
callTC.setPropertyValue("assertionAccountId",null);
callTC.setPropertyValue("assertionUserIdFULL",null);
callTC.setPropertyValue("assertionUserId",null);
callTC.setPropertyValue("accountoid",null);
callTC.setPropertyValue("useroid",null);
callTC.setPropertyValue("rightslockerFULL",null);
callTC.setPropertyValue("rightslocker",null);

/*
*  LP2 security contexts
*/

if (tP.getPropertyValue("targetSystem").toString() == "LP1") {
	switch (nodeID) {
		case "221700":  // Dynamic lasp and his/her customer service node
		case "221701":
		if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
				uuid = "_526ae30b-f38b-416f-a6f9-22095ba20967";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E7EEF12F676AE4E0401F0A05997BB6";
				assertion="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";
				assertionUserIdFULL="urn:dece:userid:org:dece:C9E7F7B295BDC2E7E0401F0A05990FA5";
			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
				uuid = "_6fc4dd17-6c0f-45df-857e-93310644a1d7";
				assertion="pVfZcuq6En3nKyj2Y4p4ADNVkip5xIABD4wvt4wtD2BssGxs+Porm0BIdvY+Ofc+pIja3a3VrSVp6QWZ+4DuAYRgnPhRWJX519p/Wo7VtG2qXW9ZpFNvMrZT7zBtWO82GhTZajZNym7XqjJCKZRDlJhh8lqjSYquk9061TYopkc1e832M0W31rXqHMYIp8Yuz2Stmu+DEPXKaV9raRz2IhP5qBeae4h6idXTgTLqYc+eecNUe3u5oiwnjN+8JDn0CMJ6tqEFg8B6tqI98UJ88nmxUU/33dBM0hi+z2mj19p7bJZlz1njOYpdgiZJkiC7BPaxke/+qr1VbsHQlkMnuo45M4xC3zID/2IWoBSYeJFdBYEbxX7i7f+QmiIoskhdh7lVt6hm+KtGfExQovthpk8gY2TWkWdSt2QadGAMQwtWZ5r8Wvv1sxW8xhqxGSInivfoy/jfQYLhCQbRAdp1dKvshu7nGb9p19sLtHpyaAUp8k9wXNDkYFoQVacxdPx85CNMPhtVy+Wv5ujGMGj9myV5IR5xYtjEN53hfRei5H9Zr8e1umaZm0EK38TJDF0O/po1HKqdDSKKmpkD/2zPjqvXEsKj8xXUfanfx1+JeufVe9DAoTTxqdlo7bU+t7Bjzt+zk3bXYDPJYtJ82T+e/E6mILdtJxLU9U4f8ImTNPZ9ZzzMc82iGpG00y6yIxqV1GIFdCATemjZo9Z4yc18o/sUMhOGYxk/IzvGtN0a6+sD2/WkluOM3N12oUxsgdCmId9tpvN8QvPRcnOBZmW11Fv0uGmvRw1z3QkXttt5/ajpsYairiE8l0UW/y8ZssubiXkfcMVJ4eDtmcA3RZb59MJx4Ky7IJNZ4OK/LRiz7u7o7Xypm5EsUFUR8BwbbIWRAnYSoGYC6yncfK7k3AUMWHc8x4FGBQRrVtGEjM9W/FxV+0LmGbY0P2+kIF1fhLECUBnMeYqgCXNeMwRFAdHVliv8Rsq3iq5ksrriKzgBL+SHiy11EyjlvkXLjKIz9Epn0vVyju3iebQfnzaGECicInH6UdLlTYNXhQHQVguLFlMcexntD1FlNWMfggYHuAVQzEg8J7goxi5TjBk95jWztBmfbYosDRQVZZxaViVVhGwwn10+esGxCmfvhVwwwPTaC8vgxDG5Xg6QuWBCRQMZ75bBQyGzJzcgikpmFe7aq5GQaYI2G4uKJmcCKG28kAVoQ4+9jeSdrIaaDwywfVwYThUWYoi/h9rJOjPHiimJYLOfU1ZD8yyf8c1llLnrTsarq8EwWss4zRioAsuqAAMiQVEa7j8LRuycmRz8Lu3DkSNGe+jFFYWKhrvTJSc7fmPiTscLhnd27ankTxum7RFyYNHbxg7IMrSHlKeatrYiND70L63JcLaEfry6JGNGpVp+h6loi3S25KOgbfeXq9nwKV9ZqjGZ6rPF9JLn4+O2cwmS/oTtx/pA4d3JGMIpsp4I0hRZo8Mz3Kq/xXxyNBIyFeAqLADS1nUFHxOY7W+vJOxrioDJCxQuk7gFJ+lAkp4EmeVV1RE9ampJ83RGjRVZsAPcpvNqqQWVNcfyeKVIc7E+rGiRXBvALpOpTUF01RnzNFjCtToOjHkCssPcCSmKlA5q31Ey11IKBthyprN4F7GVVAYzc3IYkPlw3iKpo2oHA70LZo1cp3f5xHPX55273uFFWT1snZUBgrnxwDEZU2xRUQ1BU0Dnut9yRZ41tMDa54fN3sp5A69ZGRwZrKCJKjnLeR4MrzZkADpHq4uwVTihjK+AXDExLU6bpYdW4difGEKKSZs+0GW7ocl/5FhBscpnjh05oIKvHBOuHBOAc3ySOzyFmBZ3QIvMZSXhqLbno0H3QKrL0a7CPomEm/hBcxJ2MmP4tKDOWdvbqotFV+Y97il0Vl5jk7CkebFUONi1JV/b8WGrGZyVkaIyM58IzuQWHjM0qoxlKhQayUUkunH6xO7X/v5yaTTp2X6qpyd5Zg4RdfY2x0U32077LYKIpTNzaa9PqriMrPd75OsheTdej1Hi8YD9dALftJeebrbQSm7D4h6W+aqIL0cz+buOKyy+XXdK196hEIMogWFSeyuiCg3XS7HS8+0evjmvY64rdCiuKXYbHBAZjhTIJkmJJCCZbpdhWs2b2Lui+AKRi0LHL+Yq5Oz1sv47QGvfQzC0YVw/RanlQVT7S8aiX1U51LAKiUIEjQjLZaolkp1mg2cB1W4IHNdqdFs0zXYA2WTaPN2pVcdRMgknMXASGH+Wyp1PUlmDln/wYaGnC1GBsKpACW7J0TylSUA9n8znEKZYcceF6O3RzQ5DIH9/CGABmNhHdhrA54N3KBtEoOsvXTctVFppmmqTZKl3/ljh12+3ZmAf2y8cUFEOC/GCwm9kf+NWy281N759HtzSg9T2C1mDO5vEvnVF8vnTB2EKptzZci3qhvru/C+Cqf8nmP49mPhLScTXbt7nsk/+w8y31w8W9Fjyvd3ocDSfj8/p6ZSWBGgXcjbG6QmKIGlCh1aKNenZiHYwJO4piB89B+6ov8x8t3/GlyZeqCf4LNljulbL4Q/egjpExVtQxtst/+lD89OUuG8JzJPvbFyAn4wF4r++Kq2eVfhh8xT/ZFFsfyzXN7ke5sF1FoenH7rFqBD/5z/wwopwWh8foFH8mPy7BN9N/tl4b/IdS4LZtEkT+Ocv1eJkfK2ZlhWlYSLztdLweFqXOJPzAfY+nH5LU8rv9/dUjv74nloqIx2fm3uzdvf1/9m57pd0sSCOQn6J5bWWo16xV0L34XZ4B/jlgmgLgkjRYqvdAkLz8YJos2zr3sBPlbz9Zv7d8tDTr/vh7b8=";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E7EEF12F676AE4E0401F0A05997BB6";
				assertionUserIdFULL="urn:dece:userid:org:dece:C9E81C4F93CAF5C0E0401F0A05995564";
			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
				uuid = "_a9099f3c-82c2-4cb3-bc70-00040b1765f2";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E7EEF12F676AE4E0401F0A05997BB6";
				assertionUserIdFULL="urn:dece:userid:org:dece:C9E83EEB396D75E4E0401F0A0599208C";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "_7c5f1539-9b2e-45d1-bb7e-8b979b72d117";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {
//				uuid = "_b4044919-6af3-4e53-9536-841689b9c7e2";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C8037347D051C11E0401F0A07996251";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "_61be2c77-ae92-4243-a7a0-658cb7383305";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9CDFDA6C0B79F3ADE0401F0A05996EAE";
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;

			 case "221500":  // Linked lasp and his/her customer service node
                case "221501":
                if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
                       uuid = "_c668fd22-f1e9-4d24-91b0-1f314dbf28f0";
                       assertion="pVdZk6LMEn33VxjOo2GzKG4x3RHF2qiorC4vNxBKQBGUAkF//S1wdOyenvnmu/ehw64kM+tk1qmqU9+RfQjpIUAIJmkQR3WZf238x+l2+1uXpltbCg5aHZfutAbUhmxR2zbVcTdbur8lG3UZoQzKEUrtKH1t0CRFt8hBi+oZFD1kmCHZfWkz5LpRt2CCcGrs8oKjikMYoWE17WsjS6JhbKMADSP7ANEwdYY6UCZD7Dm075gab99vKKsJkzc/TY9DgnBeXOjAMHRenPhAfCc++Hx30VAPvMhOswT+mNNFr40fsXmev+TtlzjxCJokSYIcENjHRYH3rfFWuwdDV4628W3M2VEcBY4dBle7BKXA1I/dOgi9OAlS//Cb1BRBkWXqFiyclkN1om8N4ucEFbq/zPQBZILsFvJt6p5Mg1uYwMiBdVOTXxvf/m4Fb7FGYkdoGycH9Gn87yDB6AzD+AjdFrpXdkf39xm/aNfbd+gM5cgJMxSc4bSkydF2IKrPE7gNikmAMPlcVK+Wv16gO8Og82+W5DvxjBPDJr7oDB94EKX/y3o9r9Uti2WHGXxbtUHTMGRlymbUeXAmwrP1ri/nvHnJXysIz843UI+l/jH+TNQHr34ELem8mYhBql0XMlhBpDgO8t5NnxCAwR4nPcrpylZBLab0OJtN102rIxA2zONpSm14+pgQ14M5sEZWV1hKNdc9c87xYumUM5hMJqsD6hn2rtuFM9I8ifGC3hwkdtPcNdl4pucLvTPdhLvZge4X5Mwy08mynScRZ531nGBqE2qc9ifWzjhZc1r3x2Ynfv1Z03MNZV1jeKmKLP9fMuSAt1P7MeDKk2KLt2cK3xRZ5rMrx4GL7oFcZoGH/3Zgynr7k78PpEFOskBVRcBzbLgTJgrYS4AyBdZXOMtSCu4KRqw3tXCgUQPhmlU0IefzFW+p6ruQ+4YrWZeNFGbrqzBVAKqCOV8RNMHiNUNQFBDfbIXCb6Rip+hKLqsrvoYT8EJxvLrSIIVSETi0zCg6Q690JlsvLWwXL5PD9LwxhFDhFInTT5Iub9q8KoyAtlo4tJjh2OvkcIxrK5N9Chod4Q5AMSfxnOCqGPtcMUx6ymt2ZTM+2hRZGikqyjm1qkqqCfnIMq8/e8GxCucehEIwwPzWC8fgxCm5Xo6QvWAiRQM571XBYyF3Z3cgikrmNe7Wq4mQa4JmTkVFk3MBVDZeyEO0oaf+RvLPTlstRgbYPS8MpwoLMcLfI+3sXJhTzZZEsDlYlNPWfCdgAnsZ5966n/PqajSO1zJOMwWqwLIqwIBIUJaG+8+CCWsxs2MwoAM42YrxAfpJTaHi8f58Lch+0J558+mC4bf73lwK5m3b9Qk5dOhdew9kGbpjyldtV1sRGh8F1+5sbC5hkKyu6ZRRqW7QZ2raIjOXfBz23Pflyhw3i5WjGrO5bi7m16KYnnb9a5i+z9j3RB8pvDebQjhHTpMgbZE1+jzDrd53mE9bjYRMDXgKC4C08zwhwARm33c3Er5rioDJCxQul7gFJ+lAkpqCzPKquhV9au5IVmZSU0UW3BC36bJaamFtzbE8XinSXqyPK1ok1wZwq2RqRxA91WSaoyVcq9PQsFKQH61tRFGkdFTft0ruOUrJAFfOdRbvIraWycC0Z8cRWYytLkmdVDcc6QNgtgud3hcz31tf9t56jxdl9bR1VgYILeOJYzKm2KKmGoKmgP5tvxWKbLa10DkUx83BKXgDr1kVHBusoIkqaRY8D8Y3GzIAXaDVVdgpnFDF10Ch2JgW583SR6toGswMIcOkzZ7ostvQ5D9yrKRY7SPHThxQwWeOCTeOCWB7asp9nkJMlzuiRe6xknBSe9ZkNDiS6nKyr7FNkfDSIOzMon5ujJsL6pL3/J26WAxk3uea0XbltzcpS9pXR4WjfU8KtD0fdTvhRZkoKmMGRHghd/CUo0ltKlOR0E6vIjFIsiZ7WAeH67Xdoc3DXM/OsmmPEXXxN6fFIN/N37sEkUgX5tpbn1VxGTur2z3y+ZB8GG/HKPF8wH44ge/aS882O+ik92F5D8t8XcSXo53+WceVlsBtbSvX4bEUgyiFUdp4K6NKDTfMsNIL3CG+OW9jbiDQjMh3KECRfK/LC2SHpEQSkL3BoMu06bvYu6H4BJGLo21QzlXK2dtl/WeAzmGIYOTCpHWOM8eHqPGHjGW/6nKkYRUSRwgaMZbLDE9xVJ8UuD7fE0CP6ZAiR5Mdlu8wlAhAv1GfxuksmiVgm8Lko1RmPkhlDTrBMYClni5FBcKqAqW4JSf7nKUh9XK2XyKYYcWdlKJ3SHf6DIGCwzGEJWDiELtZCF+O/rFqEIFuv3TLdlBlpWmKIclK7/y2ws/f7s3APm5QOqCyHBbiBYW/yP7OkLnX8kvN7S+fB/f0IHODUtbgzqZJ4NyQfPz0kzAlUx5suRV1R/1w/hfB1P8TTP8aTPyhJOJzNx9zuefgaeb76wcLeiz53u50ONkvp5fsfM4qAvRKOZvg9ARFkDShQyfDmvRixHsYEY8UxF89Bx6oP838sH/El6V+pKf4LDlgutar4V+8BXWIyregjLdb8bcPzQ9T4r6lsEi/snEhfjKWiP/4qnSGTumHzXP8k8eJ+3O5vsj1NA+uszw8g8grR6X4v/yGF06M0wb4AI2T5+RfJfhq8o/GR5MfWFLMpk2Wwt9/qZcn42vDdpw4i1KZb1SG59O6wplejnD40+mXNJX8/vGeKtBv31NLZaLjc/NgNx6+wT87t4KKLg7EUSiosLw2CjQs90rkPd0OPwB+uiAoVhABzdADckAxzxdEm+E6jwZ+qOTtF/Ovlqeeft4Pb/8F";
                       
                       assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E1BEFA25290915E0401F0A079935C4";
                       assertionUserIdFULL="urn:dece:userid:org:dece:C9E25FD41A10D76DE0401F0A07996532";
                       //assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A99";  
                	
//                	uuid="_2e3f93ea-f54f-4541-9533-5de09656bf54";
//                       assertion="nVdZc6pKF333V1iex5RhEqdKUtUMIioqiDi8fIXQDMokg6C//jYYjcnJOTf3q0oq6c0eVu+9aFa/JLrvkX2QJDBO3TCoi9xr438kpKweBfWmRbesZotuEc0eTVFN2oR4r023d8jeqItJkkExSFI9SF8bJE6QTbzbJNoqgfcpqk+0nzud7rZR12CcoNTI5Rlv1AvfC5J+Vfa1kcVBP9QTN+kHug+Tfmr0F0Ca9JFnX79hary9XFFWBeM3J02jPoYZzyY0oOcZz0boYy/YJ58XM+kvXDvQ0yyG7zXN5LXxHpvn+XNOPYexjZE4jmN4D0M+ZuLavxpvtVswNMXACq9rVg/CwDV0z73oJSgJpk5o1oFnh7GbOv4fUhMYgZepm7AwmgbRCn41sI8CFbofZvoEMk70ZuLoxC2ZAi0Yw8CA9aUivjZ+/WyC11g11oPECmM/+bL+b5BgcIJeGEGzmdx2dkP384zftOvtBRp9MTC8LHFPcFrSJNINmNTnMbTcYuImiHxmUq/GXy+SG8Og8V9G8oI94kSwsW86w7k2TNL/Z16Ps7pm0XQvg2/nzorLT9HMH6aOdprNKMtZbDtjWdmB1wrCo/MV1H3U7+uvRL3z6j1o7JMkQ5+4yyrQxutZ7q1of2KRoU2zytSY6q1k1Ka6T/p0t+JiphsdaX97OlPZEJ46S/3oDr32Md5m1vIcUrVFd+9z+hbPtIU63M+92RNvYG2FnKikNJbtpacd7JQnTqEwisZdUZYvK+1srUfD9cWTggnGrLQgEceOjTFercOkMpWmBa10fX5oxTvHeP3Y0+Meyn2N4bnaZPn/msZ7nJ7q9wVbnhQWej1T+CaJIpddWBacFzbIRQbY6HcPpox9ODoHV+jlOANkeQA4lvH2/EQCBwEQS55xJFbTpIK9gBFjTzUUqNaAt2Ukhc+5fMNpsjzkc0c1Be28E7xse+GnEkiqYNaReIXXOEXlJQmEV1shcTuh2EsLKRflDVdDCTi+iC6m0EuhULgGKdLSgiY3CzrbrjVkH5wn/vS0U3lPYiWBXRyFhbijOJkfAWWzMshBhmIvEz8Ka5sl8xA0iuAewEGOo5rgIqmHXFKX5JRT9MqmfrZJojCS5CRn5WpXQo3PR9ry8tELlpFY0+cLXgXzay8MlR1M8e16lOgrOpAUkHN2FTzmc3N2AyLJeF5jr72a8LnCK8vpQFLEnAeVjeNzL9mRU2cnOCeDkouRCvaPg2FlfjUI0PNAORln+ljThQHY+RphUIpjuLSrr8Pc3nZzTt6MxuFWRGmmQOYZRgYIEA7KraH+M2DCaPQscnukCyfWIPShE9ckIhwfTpcC77rUzJ5PVzRnHTpzwZ1TuulgomeQe+oARBGaY8KRdVPZYAoXuJf2bLxcQzfeXNIpLRNtt0vXlFW2XHOh1zGH681y/FRsDFmdzRfL1fxSFNPjvnvx0uGMGcaLkcTZsymE88R4wnB9wKhdjmY3wz3ik6XgkK4BW2IAEPa2zbuIwMxwfyXhUJF4RF4gsbnArlhhAQThiRcZTpatgUPMDUHLlsRUEnnTQ206b9aKV9uyDIcmheurbbQhB/hWBWaVTG7xA1te0k+jNdzKU0/VUpBHmhUQBC5E8tCSctuQSgaYYr5g0FvE1DIRLPVZNMKLsdbGiaNseqNFDyypYkEeipljb88He3tAQ9k8vDobFXia+sAxEVFsVZNVXpFA9/q+FZK4pBTP8Ito5xsFp6KZVcGhyvDKQMaXBceB8dWWqIAsks2F30ssX8XXQCHpiBan3dpJNsHUnal8hkibPdBlvyPxf+VYSbHaZ44dWSCDrxzjrxzjgXV8ErsckdBtNkpWuc0I/FHuaJNRL8Ll9eRQY54GmJ26XmsWdHN1/LQiznnH2curVU/kHPYpsDYOtUsZXL8YMhwdOoKrHLig3fLO0kSS6aWLeWd8D495MqlNRSLgqfQywHpx9sT4W9e/XKgWufTni+wkLvVxQpyd3XHVy/fzYRvDYuFMXzrbkzxYh8bm+h35ekjejddjFHs8YD+dwDfttch2e2ikt2X5HRa5+gB9HPX07zqutLhm06pc+1EpBpMUBmnjrYwqNVw/Q0rPNfvoy3ld95g2DXodhu1xHM+SLI+3cGKAA5zu9Tqg07uJvSuKLxDZMLDcslYpZ68f678DNPz+DuoxjBt/yVT2qS4GClIfYZBANXxt8Bzb63Jch6UBN6B6gGt1mC6H0yT66bRYvlGfhuksmMXASmH8oJA7XxWyAg03cmEpo9+1RJKiRhz1U5Z6xPNJfw5ghnR2XErdPtnq0lUDMDPzIwM9QKdbHIVJ+hw5USVm/riNr89uO0Y+pls6JCVoBqJpwW80PX5D/NvOqG+1/y09yEy31CyofWnsGlcknx99sKGkwZ0KeI/Ab5jvrj8L7REE/Xso9hdE2Ndm3CuZJ/eh7u1mgsQ2kmPVhSRBQzvqz8fn7HTKqjF1SqkZo/QYgeEktoBGhvTiWQ0PMMDuKbAfSfU76i+V7/bP+LLUCRYpes99xKl6tfzBPW0Bk/KeJgYmLH56CfxUEvUthUX6nY310HWuRPzXG5/RN0o/ZJ6jP3kYmx/j+ibXQx20z/JgcwO7XJXC/PwHVhghSuuiwy2MH5N/l+C74p+N9ybfsaSITbsshX9+Ui9PrdeGbhhhFqQi16gMjydphTM9R7D/4fRbmkoav991iuSPd521NFkYDvT1xt3X/XfnplvRxYAoKnErLK+NAl3bUfHAfji53wF+OrwJvI1/vLOf8L79Zv7d8tC5r6x/+wc=";
//                       //assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//                       assertionAccountIdFULL="urn:dece:accountid:org:dece:910600";
//                       assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79";
//
////                       assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
////                       assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79";
//
//     //                  uuid = "_e88f056e-1995-4ca1-b67f-fdb26dcbb61c";
//       //                assertion="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";
////                                                                //uuid = "_cf87626d-39cc-4521-bdc0-7d967c886229";
////                                                                //assertion="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";
                       
                                               } else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
                                                                uuid = "_b812c5f2-04fa-463f-8bbd-d128596e9031";
                                                                assertion="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";
                                                                assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E1BEFA25290915E0401F0A079935C4";
                                                                assertionUserIdFULL="urn:dece:userid:org:dece:C9E25FD41BE5D76DE0401F0A07996532";
                                                } else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
                                                                uuid = "_3a1f6795-edc1-41a1-a1c8-478c43ef75ee";
                                                                assertion="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";
                                                                assertionAccountIdFULL="urn:dece:accountid:org:dece:C9E1BEFA25290915E0401F0A079935C4";
                                                                assertionUserIdFULL="urn:dece:userid:org:dece:C9E1BEFA295F0915E0401F0A079935C4";
//                                                } else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//                                                                uuid = "_d5fa0fab-02b7-4c2e-8f3e-be751e888a9f";
//                                                                assertion="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";
//                                                                assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//                                                                assertionUserIdFULL="urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89";
//                                                } else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {            
//                                                                uuid = "_4c98aa5a-d6a4-4a2d-b254-b8ed0e3f125e";
//                                                                assertion="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";
//                                                                assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//                                                                assertionUserIdFULL="urn:dece:userid:org:dece:9E101B8D6302F7B1E0401F0A05991B2A";
//                                                } else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//                                                                uuid = "_0bfd64d3-aaeb-4d61-9678-e42081e8ed6e";
//                                                                assertion="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";
//                                                                assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//                                                                assertionUserIdFULL="urn:dece:userid:org:dece:A7CF96020A3C1A69E0401F0A05996CA5";
                                                } else {
                                                                log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
                                                                assert 1 == 2;
                                                }
                                                break;


////			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
////				uuid = "a0d4c2f9-822f-46ed-ac24-d19f7a74222c";
////				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
////				assertion="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";
////				assertionUserIdFULL="urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA";
////				_dbcebee6-4b5f-46bc-ba19-4e5742dc25b5
//			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "_65251036-9b49-4391-9446-a93ab26d5f83";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertion="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";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "2d1d2bfa-79f5-4014-91fb-2ff971fe8efa";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "e6ebc1a4-032e-454a-a26c-a2eed56e9e34";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B66525BB290015BE0401F0A059942CA";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "96687fc0-db29-43f5-b59f-0a5a7940907c";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {
//				uuid = "f55923ec-8d11-40bc-a28c-804fd6ee71f6";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C8037347D051C11E0401F0A07996251";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "933749ce-9688-4a96-82d8-75f33cecf02a";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9CDFDA6C0B79F3ADE0401F0A05996EAE";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;
//          case "221701":
//		if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "_0eb6fd40-606e-4a79-b5c3-8f6cfabf9b93";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertion="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";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B66525BAF67015BE0401F0A059942CA";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "_81a99d6e-472a-433b-9173-6782e2296710";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B65694912BBFE26E0401F0A07996B66";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "_e5bf2d6d-89d8-4153-8711-465ce13f4c3f";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B66525BB290015BE0401F0A059942CA";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "_afd452da-6f5f-4c69-aee8-837e7039cfce";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C687F959B4B13ABE0401F0A059957EB";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {
//				uuid = "_089a6e14-06b8-4b6a-ab64-700b7dd3b23c";
//				assertion="nVfbkqLKEn33Kwzn0bC5iYgx3RHFRRoVFcTrywmEElAEpUDQr98Ftrb29MyefZ60kryszFwkWT+RtQ/oDkAIxokfhVVVeq39j2zzVgtSzQbZWrcbzXXLaljrVrPBkeSacxxmTTN2raoilEI1RIkVJq81mqToBsk1KM4kuQ7Fd+jmC81xq1p1BmOEXWOVF7JWzfdBiDpl2NdaGoedyEI+6oTWHqJOYncmQBt0sGbHumGqvf28oiwDxm9ekhw6BGG/ONCGQWC/2NGe+Ek86fx0UGfiu6GVpDH8iOmg19qHbZZlLxnzEsUuQZMkSZA8gXUc5Ls/am+VmzF01HATXc+iFUahb1uBf7EKUBpMvMipgsCNYj/x9r9xTREUWbhuwNxu2FQz/FEjPgOU6P7S0xPIGFkN5FnUzZkBNzCGoQ2rU0N9rf34uw5ebc3YCtEmivfoy/m/QYLhCQbRAToNdMvshu7vPX5Trref0O6ooR2kyD/BYUGTg2VDVB3HcOPnAx9h8jmoWra/mqMbw6D9X1ryk3jEiWET31RG8l2Ikv+nX4+9unqZWUEK3yYuIpIRo3CXXrSe15vmwlvMELT02fS1hPCofAV1b/XH+StR77z6MBrk/NDSdmDYnTIW2Zs290xUj9U0YEiDWYVKU4u1+qop1xU0b8+cfrN5TLsBny0yZjhh2v3VqL+bU9BdbTZSBYItf2TyM8ovgJ8nNnGanOzAeGfAPErbW0oLnKWw4QcGYMgtC4dwo2xpcx/vLCYAh1OTeOdayD2Rg3M4rLTa8XK9qDd9fgpcdXuqT+3Xz5wecyjy6sNzmWTxf8GSvGQl1v0gFpNig1/PBL5pqiqlF1EE54kLMlXAvgWwBUPB3R29na/wGSkAXe8CSRSCrTzQwE4B1FQWPE2czbRcvICe4A5n2NCsgGAlaIacSdlSmun6u5x5pqPMzmslSFcXeagBVBqLniYb8kwyTFnTQHSV5Zq0VvKtNtEyVV9KFexAkvPDxVH4BCq5b9Mqq01Yejlh09VihuXd82A/PK1NOdBETREnR2WirhlJl3vAWM5tupti28tgf4gqy6nwYNQ7wC2A3YzEMcFFM3eZZk7poWRYpcx8lmmq0tN0lIl6mZVSkbPebHr5rIUoaKKzl3PZBONrLWxT7A7J1aKHrDkbagbIJLc07suZM7oB0XQyq4jXWg3kzJCN6bCrGWomg1ImyVmA1vTQWyveyWb0vGeC7WNjRF2ed0P8PDRO9pk9ViylC9b7GWUzhmf7rG8tosxdtTNJX/b60UrFboZAlwVBBxgQCYrUcP0FMBBm7Ojg87QPB5tutIdeXNGoqL87XXKy7TMjdzycs9Jmx40Vf8xYjkeogU1vmR1QVej0KU+3HGNJGFLoX1qj/nQB/Xh5SYasTrX8Nlsx5ul0IUUB57wvltN+PV/aujkaT6bz8SXPh8dt+xIk7yPhPZ70NMkdDSEcI7tOkFZXMNsSKy7ft5hPG4OEbAW4mgCAsnVd2ccEFt63VxK+G5qMyQs0MVPEuahMgKLUZVWQdH3T9aixrczSKTXUVNkJcJnOy4URVFaiIOFOkdZ8dVjSXXJlAqd0pjflrqtP2XpvAVf6MDBnCcgOs01IUaRy0N83WubaWsEAR80mAn6LhEqqgqk1OvTIvD9rkdRRd4LehAdTJp/Qu3zkuavzzl3tcFOWD6/O0gTBzHzgmIopNq/opmxooH1933JNnTJGYO/zw3pv55KJe1YaR6YgG12dnOaSBPpXGTIBnaPlRd5qolzaV0CuWZgWp/XCQ8tw6I9MOcWkTR/osl3T5L9yrKBY5ZljRxHo4CvH5CvHZLA51tW2RCG2JR7QPHMFRT7q3GzQ4w+kvhjsKkK9S7iJHzRHYTsz+/U5dc44b6vP57wqeWI93Cw9Zp0IpHWxddjbcYpv7KSw1QzO2kDT2alPBGdyC48ZGlSGKhXKTHLpEnyc1oX9yt9fLkyTnu7Hk/SkTq0+os7e+jjns+34vUUQsXJmL9zqpHcXkb28fke+Dsm78DpGiccB+zSBb7vXJF1voZ3cjsV3WJWqXfxxtJI/73GFxHcam1K1cyiWQZTAMKm9FVbFDtdJ8abnOx385byeebFNMhzT5CSSpUSKkskmSXVJQHI836JZ6rbsXVF8gShG4cYvYhXr7PVj/WeA9r6zhlYM49ofPBV1qqqhgbePKETQjF5rQKI5scXzgKZatChxXY4mOa7NCkKbpJscW6sOo2QUjmKwSWD8sCG3v27IBrT9gw+LNfpjl0AJLsTROqVJQL+crJcQpnjPjotVt4N3OJpA/v4QwAIusY+cNIAvB+9QloVA11+6YdmolJI81Sx3nN9m9/XZrRBYx/ELBVTkIkDcRPjNqk/dEvklYebbK8HNPUgdv1hlcFWT2LevSJ4ffZKkYMedIUVKN8x31a+CJ7fE14zukZyTb995fr8J4UUar1rlZQPhhhytl+NLejqlny2IsXuCIvC/CbRTvAuezWgHQ+LugvirNfyO+kvku/wZX5p44STB7/Ae86VaHv/9DvZkjUuQwDz5TiYG+NZVBP/jxczu2IUeFo/xTxbFzmflv/H1EAdDLuaPH7rFqdifz79psB1htz6eQVH86Pw7B98Ffxbe63XHkmBirNME/v5JtRgurzXLtqM0TFSpVgoeB16JMzkfYOdT6Rc35Qb7cSXJ0W+vJAttMLE9uLdqd13/35Ubftl5G2Ir5JdYXms5vl3j4KH7MGA/AD7NWKHVYmlWAN0WS1KscJ+xLM83aRHcC/iUydsv4l8lDzX9Su23fwA=";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C8037347D051C11E0401F0A07996251";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "_bf4fc7e1-34f8-4614-a0bb-9f50d72e580e";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B66525BAF65015BE0401F0A059942CA";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9CDFDA6C0B79F3ADE0401F0A05996EAE";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;

//		case "221500":  // Linked lasp and his/her customer service node
//		case "221501":
//		if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//			    // uuid = "_688aab64-1e79-4787-a76f-3370fbec24be";
////				assertion="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";
//				uuid = "_105eaa8d-9cf5-4a73-add3-22bc3e6e7c9c";
//				assertion="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";
//                    assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "_3811cbd0-1664-4f37-8320-a0c8e16daa8f";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "_5e960aee-6a96-4ba0-be44-f0e4a3e2a7c1";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B76DB4774834457E0401F0A05992F99";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "_f67d6d17-308a-4881-bb57-eb8e91790ba1";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {	
//				uuid = "_887c776b-3f61-4ac4-bebb-33678fc4f905";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9E101B8D6302F7B1E0401F0A05991B2A";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "_ab770958-1d02-48e0-9215-8fef86c0d2bf";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7CF96020A3C1A69E0401F0A05996CA5";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;
////			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "07167646-6ba5-4ea6-b7be-6bb0b6b0a0a4";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "0a17e176-a563-485f-aa32-05dab065a69e";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "b1ed13c7-3219-4ef3-ab8c-d2ba512df03f";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B76DB4774834457E0401F0A05992F99";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "addabf28-99ed-4739-ba4e-09691aff4aa7";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {	
//				uuid = "3efee6a8-5517-443c-b7b0-1a5e5e586822";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9E101B8D6302F7B1E0401F0A05991B2A";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "b5aebae5-3293-4965-81b3-2bbdef552223";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7CF96020A3C1A69E0401F0A05996CA5";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;

//          case "221501":
//		if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "_688aab64-1e79-4787-a76f-3370fbec24be";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "_3811cbd0-1664-4f37-8320-a0c8e16daa8f";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B7969EE9EA1770CE0401F0A079930AA";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "_5e960aee-6a96-4ba0-be44-f0e4a3e2a7c1";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B76DB4774834457E0401F0A05992F99";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "_f67d6d17-308a-4881-bb57-eb8e91790ba1";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9DD0CB55ED027BCEE0401F0A07993B89";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {	
//				uuid = "_887c776b-3f61-4ac4-bebb-33678fc4f905";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9E101B8D6302F7B1E0401F0A05991B2A";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "_ab770958-1d02-48e0-9215-8fef86c0d2bf";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7CF96020A3C1A69E0401F0A05996CA5";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;
//		


		case "441500":  // Primary retailer node.
		     if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
				uuid = "_05bf8789-34a9-43ff-b430-0b26b776a941";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:CE0F1A1CC2F19345E0401F0A07990CC5";
				assertionUserIdFULL="urn:dece:userid:org:dece:CE0F2321D3D05F41E0401F0A07991D0B";
			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
				uuid = "_556749a8-10c2-4181-8220-2f21f596c31a";
				assertion="nVdbc6pKE333V1jux5ThonirJFXDVVRUEK8vXyEMF0VQBgT99WfAaNSdvU/O95Ay00z3rO5eNGvekLHz6Q5ACEaxFwZlmX+v/I9hGs1622hVKdKkq3WqRVVbNE1WaZumbKbdMGuUUSnLCCVQDlBsBPF7hSYpukpRVbKtU1SHYToM9Vqv06tKeQYjhEPjLa9kpZzt/AB1imPfK0kUdEIDeagTGDuIOrHZmQBl0ME7O8YVU+Xj7YKyODD6cON43yEI89WCJvR989UMd8Qb8bDnzUKdiecERpxE8PNMC71XPn3TNH1Na69h5BA0SZIE2SbwHgt5zq/KR+nqDC05sMPLmjOCMPBMw/fORg5KgbEbWmXgO2Hkxe7uD6EpgiLz0FWYmVWTqge/KsTXAQW6H0Z6ABkho4pcg7oG06ANIxiYsDzV5PfKr5918OKrR0aA7DDaoaf1f4MEgyP0wz20quia2RXdzyN+U66PN2h25MD0E+Qd4TCnyd4wISqPI2h72cBDmHwWKhftL2foyjBo/peWvBH3ODFs4pvK8J4DUfz/9Ou+V5coM8NP4EdDAjXLmSvbxgtPz/q2XduvXC5etUfL9wLC/eYLqFurP9fPRL3x6tOJb8QbXh8YjdEgOwSgQfOTceLwisnM1/xhtXUgZY/7TiIPj6tp7CpU12tOTpI0W5Go7zRMcbV1z6Et7YbjemnZJ87Zmd/3utOtJvEhHB0OzKBvjbu9YMDIC5qzDd2Oa40jarYb0olcBJlP2uTm3OLpcAPkwBOZhrDbb5huSdOg0uu9rJcsbyVesw1U8/0rp/sc8rz68FQkmf+/YMg2b8TGbcHlk8LGr2cMPxRZ5pMzx4HTxAGpzAIH/23AkHW2B3frSe2UZIGqioDnWH8jDBSwlQA1FVhX4WYzJePOoMc6wxl21EvAX7GKJqR8uuRnqtoVUle3pNlpLfnJ6iwMFYAKZ85VBE2Y8ZouKAoIL7ZM4ddStlEmSiqrS76EA/BCtj9bUjuGUuaZtMwoE4ZeTphktZhhu3ga7IbHtS74CqdI3OQgTeR1jVeFHtCWc5MWE+x7Huz2YWk5Ze+cenu4AVBMSXwmOCv6NlX0KT3kNaOw6Y82RZZ6iopSTi2ykkpC2ptNz1+14FiFs3ZCJuhgfKmFqXPikFwtesiYM4GigZR3Cue+kFqjKxBFJdMSd6nVQEg1QZsORUWTUwEUNl5IfbSmh+5aco9mTc16OtjcN4ZThbkY4OeBdjRPzKFkSCJY72aUWdNc02M8YxGmzqqV8uqy1w9XMg4zBKrAsirAgEiQp4brz4IBO2NGe69Ne3Bgi+EOulFJocL+9njOyJZXGznj4Zzh7W1zLHnjmmG5hOyb9Ka2BbIMrT7lqoalLQmND7xzY9SfLqAXLc/xkFGphtdiSto8mS740G9a3cVy2n/Jlqaqj8aT6Xx8zrLhYdM6+3F3xHajSU/hndEQwjEyXwjSEFm9xTPcsrvBfLI1EjIl4CgsANLGcQQPE5jtbi4k7GqKgMkLFC6VuDknTYAkvQgyy6uqLbrU2JRmyZQaKrJg+bhMp+VC80srjuVxp0hjvtovaZFc6cAqgql1QXTUKfPSW8CVOvT1WQzS/cwOKIqU9mrXVlLHVHIGWHI6YfFbxJYSGUyN0b5HZv1Zg6QOquX3Jm0wrWUTepuNXGd12jqrLW7K8u7VWerAn+l3HJMxxeYlVRc0BbQu71umyNOa5pu7bL/emRmv454VzqHOCpqoktOM50H/YkM6oDO0PAsbhRMK/xLIFAPT4rheuGgZDL2RLiSYtMkdXTZrmvxXjuUUKz1y7MABFTxzTLhwTAD24UVu8RRiGtwezVOHlYSD2pwNeu09qS4G2xL7IhJO7Pn1UdBK9f7LnDqlTXejzudtmXe5l8BeurV1zJLG2VRhb9uUPG3LB426f1IGispMPcI/kRt4SNGgNJSpQKjFZ5FoR8kLu1t5u/O5Vqenu/EkOcpTo4+ok7s+zNvpZtxtEEQknZhzc3VUxUVofn5HnofkzXgZo8T9gH2YwFftNUnWG2jG12X+HZb5sog/jkb8dx2XWzyrahdbO/tcDKIYBnHlI/fKNVwnwUrPszr4y3lZcwIptniWAwzJiQLTFsg6SYkkIJvtNsMB4Sr2LiieIHJhYHv5WbmcvXys/w7Q3HUQDCwYVY9hYroQVf4SMa9XWQ40rELCAEE9xHK5xjbFGmg1KLZJ1uqtOiO0SY5pc1SrJdA0Xa+Uh2E8CkYRsGMYPUrl+oNU1qDp7T2Y6+lcVCCsKlCMS3IwjknsU69H4zWACVbcUS56O3S9xRDI2+19mAMmdqGV+PB17+6LAhHo8ktXDRMV1nqdYkiy0Dt/zPD52bUYeI/l5RtQng4LcUPhN7K/fs3lt5xr314PruFBYnm5rMGVjSPPvCB5fPRFmJwpN7Zckrqivm1+NjwEJp5zup1lHT3zxvrbvQjLaiy8Pq5NORivh9fkeEyKNjRzURnh8ARFkDQxgWaCleFJD7cwIG4hiB+J8hvqp5Nv9kd8SewGkxi/0TtMmnKx/MGNbAJRfiOTMemzn173Ho7EdYthFn9n43x8ccsR//VuZ3bMfB82j/FPGkbWV7u+iXV3Ds4zH2Fe4OSrXIKf/sALM8RhPTzGwug++HcBvjv80Xgr8g1LjNm0TmL45yflfD69VwzTDJMglvlKYbifmQXO+LSHna9Nv4UpRPDnrSZDf7zVLJTBBE+vnVG57fX+fXPVK+hiQuyFvALLeyXDF3R8eODczehPgM9jmgIUx9Ei1a7hsXc3pkmOY24FfMjk4zfz75a7mj6/Dx//AA==";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:CE0F1A1CC2F19345E0401F0A07990CC5";
				assertionUserIdFULL="urn:dece:userid:org:dece:CE0F8DBCA50CFE59E0401F0A07995CAE";
			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
				uuid = "_3cce3aff-3c12-4619-9a61-1ee75d928857";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:CE0F1A1CC2F19345E0401F0A07990CC5";
				assertionUserIdFULL="urn:dece:userid:org:dece:CE0FA9BFE5F30C65E0401F0A07990DF9";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "_2fb391e8-77ce-4eeb-aefb-597941300598";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C687F959C4B13ABE0401F0A059957EB";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {
//				uuid = "_7d5aaa73-55ff-47ed-b496-f648d6cdedba";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7CBDAFAC3D09D4FE0401F0A05995C7C";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "_79c142f8-c331-4f22-a70e-40506eb81bf5";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9D1D45A45534E4E5E0401F0A059975E3";
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;	
//			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "49603255-a83a-4b60-9fda-9e0e8c49f662";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B4E7893991CB1C5E0401F0A0599216F";
//			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
//				uuid = "c0ebab51-e3a2-4bb9-992b-8cf531a0c4ee";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B6294BDB283209BE0401F0A07995359";
//			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
//				uuid = "3069c569-b149-4c99-96cb-64f4d6ce520a";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9B630FEB48949993E0401F0A05995D5F";
//			} else if (userID == tP.getPropertyValue("userFull2Org1Name").toString()) {
//				uuid = "9948d9a7-48ff-4b7a-967b-54967c3eba07";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9C687F959C4B13ABE0401F0A059957EB";
//			} else if (userID == tP.getPropertyValue("userStandard2Org1Name").toString()) {
//				uuid = "82cd1a22-09e4-4b8f-ae6c-0f4522697786";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7CBDAFAC3D09D4FE0401F0A05995C7C";
//			} else if (userID == tP.getPropertyValue("userBasic2Org1Name").toString()) {
//				uuid = "9214a2e6-40f2-4fc6-9674-3c9897286447";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:9B4E7893991AB1C5E0401F0A0599216F";
//				assertionUserIdFULL="urn:dece:userid:org:dece:9D1D45A45534E4E5E0401F0A059975E3";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;
//		case "5440":   // Node role nodeID
//			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
//				uuid = "23bb46c7-37b2-4f8e-93e6-9aca3f85fb39";
//				assertion="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";
//				assertionAccountIdFULL="urn:dece:accountid:org:dece:A7D3704DE2DBB149E0401F0A05992C66";
//				assertionUserIdFULL="urn:dece:userid:org:dece:A7D3704DE2DDB149E0401F0A05992C66";
//			} else {
//				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
//				assert 1 == 2;
//			}
//			break;
          case "5440":   // Node role nodeID
			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
				uuid = "_c582e669-9f85-463f-b216-4a766e439a0f";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:A7D3704DE2DBB149E0401F0A05992C66";
				assertionUserIdFULL="urn:dece:userid:org:dece:A7D3704DE2DDB149E0401F0A05992C66";
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		case "5480":   // Node role Portal
		case "5481":
			if (userID == tP.getPropertyValue("userFull1Org1Name").toString()) {
				uuid = "c94e52a8-a532-4450-afdc-959031e7feb5";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA";
				assertionUserIdFULL="urn:dece:userid:org:dece:A8A874EEB246D14EE0401F0A07990FBA";
			} else if (userID == tP.getPropertyValue("userStandard1Org1Name").toString()) {
				uuid = "8600b7d6-a9b4-4ecd-9426-f153ace57cce";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA";
				assertionUserIdFULL="urn:dece:userid:org:dece:A8A8758570162DA4E0401F0A05991AED";
			} else if (userID == tP.getPropertyValue("userBasic1Org1Name").toString()) {
				uuid = "3b7eac4f-7db3-48a6-8137-d4ae1c34744d";
				assertion="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";
				assertionAccountIdFULL="urn:dece:accountid:org:dece:A8A874EEB244D14EE0401F0A07990FBA";
				assertionUserIdFULL="urn:dece:userid:org:dece:A8A874EEB259D14EE0401F0A07990FBA";
			} else {
				log.info "ERROR - userID [$userID] supplied is not configured for nodeID[$nodeID]!";
				assert 1 == 2;
			}
			break;
		default:
			log.info "ERROR - NodeID supplied is not configured!";
			assert 1 == 2;
			break;
	}
}

/*
*  Get the account's rightslocker
*/
try {
	dbAcct = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));
}
catch(Throwable e) {
	log.info "ERROR - dbUtils.dbAccount - $e";
	assert 1 == 2;
}
finally {
	try {
		rightslocker = dbAcct.accountGetRightsLockerId(acctoid);

		log.info "rightslocker: $rightslocker";
	}
	catch(Throwable e) {
		log.info "ERROR - dbAcct.accountGetRightsLockerId - $e";
		assert 1 == 2;
	}
	finally {
		assert rightslocker.length() > 0;
     }
}
/*
*  If we are here then we lived.  Now we will populate all the other 
*  generic values everyone gets.
*/
callTC.setPropertyValue("accountoid",acctoid);
callTC.setPropertyValue("useroid",useroid)
callTC.setPropertyValue("assertId",uuid);
callTC.setPropertyValue("assertionUUID",uuid);
callTC.setPropertyValue("assertionAccountIdFULL",assertionAccountIdFULL);
callTC.setPropertyValue("assertionUserIdFULL",assertionUserIdFULL);
//callTC.setPropertyValue("policyCreator",assertionUserIdFULL);
callTC.setPropertyValue("assert",assertion);
callTC.setPropertyValue("rightslocker",rightslocker);
callTC.setPropertyValue("rightslockerFULL", rturn + rightslocker);

lastColon = assertionAccountIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionAccountId",assertionAccountIdFULL.substring(lastColon + 1));
lastColon = assertionUserIdFULL.lastIndexOf(':');
callTC.setPropertyValue("assertionUserId",assertionUserIdFULL.substring(lastColon + 1));
</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>RightsTokenCreate API</con:value></con:property><con:property><con:name>sName</con:name><con:value>Test Cases Containing APIs</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>441500</con:value></con:property><con:property><con:name>username</con:name><con:value>streamcreatefau</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77332</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Extract OID level User/Account Information"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status;

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

a = new dbUtils.dbUtils(log,tP.getPropertyValue("targetSystem").toString());


String nodeid = tC.getPropertyValue("nodeid").toString();
String uname = tC.getPropertyValue("username").toString();
String sys = tP.getPropertyValue("targetSystem");
String results = null;
String accountoid = null;
String useroid = null;
String nodeUser = null;
String nodeAccount = null;
String userRowId = null;
String acctRowId = null;
String sql = """select to_char(rawtohex(a.ACCOUNT_OID)) ACCOUNT_OID, to_char(rawtohex(a.USER_OID)) USER_OID, 
to_char(rawtohex(b.NODE_USER_ID)) NODE_USER_ID, to_char(rawtohex(c.NODE_ACCOUNT_ID)) NODE_ACCOUNT_ID, 
to_char(rawtohex(b.ROW_OID)) ROW_OID, to_char(rawtohex(c.ROW_OID)) ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = '$uname'
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = '$nodeid'""";

results = a.SelectFromDB(sql,sys);
log.info results;

/*
*  If zero length, no need to continue;
*/
assert results.length() > 0;

try {
	def myXML = new XmlSlurper().parseText(results);

	accountoid = myXML.ResultSet.Row[0].ACCOUNT_OID.text();
	useroid = myXML.ResultSet.Row[0].USER_OID.text();
	nodeUser = myXML.ResultSet.Row[0].NODE_USER_ID.text();
	nodeAccount = myXML.ResultSet.Row[0].NODE_ACCOUNT_ID.text();
	userRowId = myXML.ResultSet.Row[0].ROW_OID[0].text();
	acctRowId = myXML.ResultSet.Row[0].ROW_OID[1].text();
}
catch(Throwable e) {
	log.info e; 
	assert 1 == 2;
}
finally {
	log.info "accountoid[$accountoid]";
	log.info "useroid[$useroid]";
	log.info "nodeUser[$nodeUser]";
	log.info "nodeAccount[$nodeAccount]";
	log.info "userRowId[$userRowId]";
	log.info "acctRowId[$acctRowId]";

	tC.setPropertyValue("accountoid", accountoid);
	tC.setPropertyValue("useroid", useroid);
	tC.setPropertyValue("userrowid", userRowId);
	tC.setPropertyValue("accountrowid", acctRowId);
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract and Update current ACCOUNT_USER.CREATED_BY_NODE_ID"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUser;
def createdby;

tC.setPropertyValue("orginialCreatedBy", null);

try {
	dbUser = new dbUtils.dbUser(log,tP.getPropertyValue("targetSystem"));
}
catch (Throwable e) {
	log.info "ERROR - dbUtils.dbUser - $e";
	assert 1 == 2;
}
finally {
	try {
		createdby = dbUser.userGetCreatedByNode(tC.getPropertyValue("useroid").toString());
	}
	catch (Throwable e) {
		log.info "ERROR - dbUser.userGetCreatedByNode - $e";
		assert 1 == 2;
	}
	finally {
		if (createdby.length() == 0) {
			/*
			*  CREATE_BY_NODE_OID is null.  So we will react accordingly.
			*/
			createdby = "null";
		}
	}
}

tC.setPropertyValue("orginialCreatedBy", createdby);

/*
*  Update the user's CREATED_BY_NODE_OID for STS
*/

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish whether login is necessary for node/user combo"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node      = tC.getPropertyValue("nodeid");
String user      = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser       = node + "_" + user;
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid    = node + "_" + user + "_accountoid";
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";
String prop      = tC.getPropertyValue(propUser);
String asstuuid  = tC.getPropertyValue(propAssertUUID);
String assbinary = tC.getPropertyValue(propAssertion);
String assAccountId = tC.getPropertyValue(propAssertion);
String assUserId = tC.getPropertyValue(propassertionUserId);
String assAccountIdFULL = tC.getPropertyValue(propassertionAccountIdFULL);
String assUserIdFULL = tC.getPropertyValue(propassertionUserIdFULL);
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asstuuid[$asstuuid] - assbinary[$assbinary]";
this.log.info "propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID] - propUser[$propUser]";

if (prop == null) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	} else if (prop != tday) {
	tC.setPropertyValue("doSTS","true");
	tC.setPropertyValue(propUser,tday);
	tC.setPropertyValue(propAssertUUID,null);
	tC.setPropertyValue(propAssertion,null);
	tC.setPropertyValue(propAccountoid,null);
	tC.setPropertyValue(propUseroid,null);
	tC.setPropertyValue(propassertionAccountId,null);
	tC.setPropertyValue(propassertionUserId,null);
	tC.setPropertyValue(propassertionAccountIdFULL,null);
	tC.setPropertyValue(propassertionUserIdFULL,null);
	tC.setPropertyValue("nodeuserid",null);
} else {
	// Check the UUID property
	if (asstuuid == null || asstuuid == "") {
		log.info "assertionUUID is null/empty";
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	// Check the assertion binary property
	} else if (assbinary == null || assbinary == "") {
		tC.setPropertyValue("doSTS","true");
		tC.setPropertyValue(propAssertion,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAccountoid,null);
		tC.setPropertyValue(propUseroid,null);
		tC.setPropertyValue(propassertionAccountId,null);
		tC.setPropertyValue(propassertionUserId,null);
		tC.setPropertyValue(propassertionAccountIdFULL,null);
		tC.setPropertyValue(propassertionUserIdFULL,null);
	} else {
		int lastSlash = assUserIdFULL.lastIndexOf(':');
		
		tC.setPropertyValue("doSTS","false");
		tC.setPropertyValue("assertionUUID",asstuuid);
		tC.setPropertyValue("assert",assbinary);
		tC.setPropertyValue("accountoid",propAccountoid);
		tC.setPropertyValue("useroid", propUseroid);
		tC.setPropertyValue("assertionAccountId",assAccountId);
		tC.setPropertyValue("assertionUserId",assUserId);
		tC.setPropertyValue("assertionAccountIdFULL",assAccountIdFULL);
		tC.setPropertyValue("assertionUserIdFULL",assUserIdFULL);
		tC.setPropertyValue("nodeuserid",assUserIdFULL.substring(lastSlash + 1));
	}
}
log.info "doSTS is " + tC.getPropertyValue("doSTS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAssertion  = node + "_" + user + "_assertion";
String propAssertUUID = node + "_" + user + "_assertUUID";
String propUser = node + "_" + user;

log.info "propUser[$propUser] - propAssertion[$propAssertion] - propAssertUUID[$propAssertUUID]";

def doSTS = tC.getPropertyValue("doSTS");

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	if (runnerTC.status != Status.FINISHED) {
		tC.setPropertyValue(propUser,null);
		tC.setPropertyValue(propAssertUUID,null);
		tC.setPropertyValue(propAssertion,null);
	} 

	assert runnerTC.status == Status.FINISHED;
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def doSTS = tC.getPropertyValue("doSTS");

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propassertionAccountId = node + "_" + user + "_assertionAccountId";
String propassertionAccountIdFULL = node + "_" + user + "_assertionAccountIdFULL";
String propassertionUserId = node + "_" + user + "_assertionUserId";
String propassertionUserIdFULL = node + "_" + user + "_assertionUserIdFULL";

if (doSTS == "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
	
	tC.setPropertyValue(propassertionAccountId,tC.getPropertyValue("assertionAccountId"));
	tC.setPropertyValue(propassertionAccountIdFULL,tC.getPropertyValue("assertionAccountIdFULL"));
	tC.setPropertyValue(propassertionUserId,tC.getPropertyValue("assertionUserId"));
	tC.setPropertyValue(propassertionUserIdFULL,tC.getPropertyValue("assertionUserIdFULL"));
} 


</script></con:config></con:testStep><con:testStep type="groovy" name="Store assertionUID for the node/user"><con:settings/><con:config><script>def tC    = testRunner.getTestCase();
def tS    = tC.getTestSuite();
def tP    = tS.getProject();
def today = new Date();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String prop = tC.getPropertyValue(node + "_" + user);
String asst = tC.getPropertyValue(node + "_" + user + "_assertUUID");
String tday = String.format('%tY/%&lt;tm/%&lt;td',today);

this.log.info "Date[$tday] - prop[$prop] - asst[$asst]";

if (prop == tday) {
	tC.setPropertyValue(node + "_" + user + "_assertUUID", tC.getPropertyValue("assertionUUID"));
	tC.setPropertyValue(node + "_" + user + "_assertion", tC.getPropertyValue("assert"));
} else {
	tC.setPropertyValue(node + "_" + user,null)
	tC.setPropertyValue(node + "_" + user + "_assertUUID",null);
	tC.setPropertyValue(node + "_" + user + "_assertion",null);
}
</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid
</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uname</con:name><con:value>${#TestCase#username}</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>${#TestCase#nodeid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Extract and Store the ACCOUNT.ACCOUNT_OID lockerId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = tC.getPropertyValue("nodeid");
String user = tC.getPropertyValue("username");
String propAccountoid = node + "_" + user + "_accountoid";
String propUseroid = node + "_" + user + "_useroid";

tC.setPropertyValue(propAccountoid,tC.getPropertyValue("accountoid"));
tC.setPropertyValue(propUseroid,tC.getPropertyValue("useroid"));

a = new dbUtils.dbAccount(log,tP.getPropertyValue("targetSystem"));

def x = a.accountGetRightsLockerId(tC.getPropertyValue("accountoid"));

this.log.info "x[$x]";

tC.setPropertyValue("rightslocker",tP.getPropertyValue("urnLocker") + x);


</script></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String usernodeConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username");
String usernodeUUIDConcat = tC.getPropertyValue("nodeid") + "_" + tC.getPropertyValue("username") +	"_assertUUID";

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "assert":
			case "assertionAccountId":
			case "assertionAccountIdFULL":
			case "assertionUserId":
			case "assertionUserIdFULL":
			case "assertionUUID":
			case "cid":
			case "deceorgid":
			case "rightslocker":
			case "targetURL":
			case "useroid":
			case "accountoid":
			case "nodeaccountid":
			case "nodeuserid":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>Copy of TC_DECE_11005 - StreamCreate - DLP - STS-based Stream Create</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>221700</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value>0900</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>userrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountrowoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>orginalCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>userrowid</con:name><con:value>9B66525BAF68015BE0401F0A059942CA</con:value></con:property><con:property><con:name>accountrowid</con:name><con:value>9B66525BAF66015BE0401F0A059942CA</con:value></con:property><con:property><con:name>orginialCreatedBy</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS OLD" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Properties"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properities"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS GET"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>${#Project#JDBCDriver}</con:driver><con:connectionString>${#Project#JDBCConnStr}</con:connectionString><con:password/><con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid
</con:query><con:assertion type="XPath Match"><con:configuration><path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences></con:configuration></con:assertion><con:properties><con:property><con:name>uname</con:name><con:value>${#TestCase#username}</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>${#TestCase#nodeid}</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="LLP TestCase-Level Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false"><con:name>accountoid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath><con:targetType>accountoid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false"><con:name>useroid</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep><con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath><con:targetType>useroid</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Setup base node-level information based on calling Node type"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

//
//  Establish project-defined properties at the test case
//  level
//
tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Promote variables to calling TestCase"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "assertionAccountId":
			case "assertionUserId":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertId</con:name><con:value>62ca658e-fdc4-4e0d-b779-2ca17ef93275</con:value></con:property><con:property><con:name>assertionAccountId</con:name><con:value>9AAD6886B415B607E0401F0A0599673B</con:value></con:property><con:property><con:name>assertionUserId</con:name><con:value>9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeaccountid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9AAD6886B415B607E0401F0A0599673B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221700</con:value></con:property><con:property><con:name>nodetype</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeuserid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value>password</con:value></con:property><con:property><con:name>sName</con:name><con:value>Dynamic LASP Test Cases</con:value></con:property><con:property><con:name>synced</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7002</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_10506 - StreamCreate - FUNC - DLP - StreamRightsRentalExpired - RightsTokenID expired by one year</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgorg1full1</con:value></con:property><con:property><con:name>useroid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0600</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">62ca658e-fdc4-4e0d-b779-2ca17ef93275</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cid</con:name><con:value>urn:dece:cid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>alid</con:name><con:value>urn:dece:alid:file:AGAIN_PATS_CID_DONT_TOUCH_1.txt</con:value></con:property><con:property><con:name>deceorgid</con:name><con:value>urn:dece:org:org:dece:1</con:value></con:property><con:property><con:name>accountoid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0900</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9AAD6886B415B607E0401F0A0599673B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9AAD6886B417B607E0401F0A0599673B</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77336</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>221500</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:C9E25FD41A10D76DE0401F0A07996532</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:C9E1BEFA25290915E0401F0A079935C4</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04750 - StreamCreate - LLPCS - Policy - AllowAdult - US - MMPA - Can create stream that IS_ADULT = 'y' with policy</con:value></con:property><con:property><con:name>sName</con:name><con:value>Link LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:policy:UserDataUsageConsent</con:value></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">pVdZk6LMEn33VxjOo2GzKG4x3RHF2qiorC4vNxBKQBGUAkF//S1wdOyenvnmu/ehw64kM+tk1qmqU9+RfQjpIUAIJmkQR3WZf238x+l2+1uXpltbCg5aHZfutAbUhmxR2zbVcTdbur8lG3UZoQzKEUrtKH1t0CRFt8hBi+oZFD1kmCHZfWkz5LpRt2CCcGrs8oKjikMYoWE17WsjS6JhbKMADSP7ANEwdYY6UCZD7Dm075gab99vKKsJkzc/TY9DgnBeXOjAMHRenPhAfCc++Hx30VAPvMhOswT+mNNFr40fsXmev+TtlzjxCJokSYIcENjHRYH3rfFWuwdDV4628W3M2VEcBY4dBle7BKXA1I/dOgi9OAlS//Cb1BRBkWXqFiyclkN1om8N4ucEFbq/zPQBZILsFvJt6p5Mg1uYwMiBdVOTXxvf/m4Fb7FGYkdoGycH9Gn87yDB6AzD+AjdFrpXdkf39xm/aNfbd+gM5cgJMxSc4bSkydF2IKrPE7gNikmAMPlcVK+Wv16gO8Og82+W5DvxjBPDJr7oDB94EKX/y3o9r9Uti2WHGXxbtUHTMGRlymbUeXAmwrP1ri/nvHnJXysIz843UI+l/jH+TNQHr34ELem8mYhBql0XMlhBpDgO8t5NnxCAwR4nPcrpylZBLab0OJtN102rIxA2zONpSm14+pgQ14M5sEZWV1hKNdc9c87xYumUM5hMJqsD6hn2rtuFM9I8ifGC3hwkdtPcNdl4pucLvTPdhLvZge4X5Mwy08mynScRZ531nGBqE2qc9ifWzjhZc1r3x2Ynfv1Z03MNZV1jeKmKLP9fMuSAt1P7MeDKk2KLt2cK3xRZ5rMrx4GL7oFcZoGH/3Zgynr7k78PpEFOskBVRcBzbLgTJgrYS4AyBdZXOMtSCu4KRqw3tXCgUQPhmlU0IefzFW+p6ruQ+4YrWZeNFGbrqzBVAKqCOV8RNMHiNUNQFBDfbIXCb6Rip+hKLqsrvoYT8EJxvLrSIIVSETi0zCg6Q690JlsvLWwXL5PD9LwxhFDhFInTT5Iub9q8KoyAtlo4tJjh2OvkcIxrK5N9Chod4Q5AMSfxnOCqGPtcMUx6ymt2ZTM+2hRZGikqyjm1qkqqCfnIMq8/e8GxCucehEIwwPzWC8fgxCm5Xo6QvWAiRQM571XBYyF3Z3cgikrmNe7Wq4mQa4JmTkVFk3MBVDZeyEO0oaf+RvLPTlstRgbYPS8MpwoLMcLfI+3sXJhTzZZEsDlYlNPWfCdgAnsZ5966n/PqajSO1zJOMwWqwLIqwIBIUJaG+8+CCWsxs2MwoAM42YrxAfpJTaHi8f58Lch+0J558+mC4bf73lwK5m3b9Qk5dOhdew9kGbpjyldtV1sRGh8F1+5sbC5hkKyu6ZRRqW7QZ2raIjOXfBz23Pflyhw3i5WjGrO5bi7m16KYnnb9a5i+z9j3RB8pvDebQjhHTpMgbZE1+jzDrd53mE9bjYRMDXgKC4C08zwhwARm33c3Er5rioDJCxQul7gFJ+lAkpqCzPKquhV9au5IVmZSU0UW3BC36bJaamFtzbE8XinSXqyPK1ok1wZwq2RqRxA91WSaoyVcq9PQsFKQH61tRFGkdFTft0ruOUrJAFfOdRbvIraWycC0Z8cRWYytLkmdVDcc6QNgtgud3hcz31tf9t56jxdl9bR1VgYILeOJYzKm2KKmGoKmgP5tvxWKbLa10DkUx83BKXgDr1kVHBusoIkqaRY8D8Y3GzIAXaDVVdgpnFDF10Ch2JgW583SR6toGswMIcOkzZ7ostvQ5D9yrKRY7SPHThxQwWeOCTeOCWB7asp9nkJMlzuiRe6xknBSe9ZkNDiS6nKyr7FNkfDSIOzMon5ujJsL6pL3/J26WAxk3uea0XbltzcpS9pXR4WjfU8KtD0fdTvhRZkoKmMGRHghd/CUo0ltKlOR0E6vIjFIsiZ7WAeH67Xdoc3DXM/OsmmPEXXxN6fFIN/N37sEkUgX5tpbn1VxGTur2z3y+ZB8GG/HKPF8wH44ge/aS882O+ik92F5D8t8XcSXo53+WceVlsBtbSvX4bEUgyiFUdp4K6NKDTfMsNIL3CG+OW9jbiDQjMh3KECRfK/LC2SHpEQSkL3BoMu06bvYu6H4BJGLo21QzlXK2dtl/WeAzmGIYOTCpHWOM8eHqPGHjGW/6nKkYRUSRwgaMZbLDE9xVJ8UuD7fE0CP6ZAiR5Mdlu8wlAhAv1GfxuksmiVgm8Lko1RmPkhlDTrBMYClni5FBcKqAqW4JSf7nKUh9XK2XyKYYcWdlKJ3SHf6DIGCwzGEJWDiELtZCF+O/rFqEIFuv3TLdlBlpWmKIclK7/y2ws/f7s3APm5QOqCyHBbiBYW/yP7OkLnX8kvN7S+fB/f0IHODUtbgzqZJ4NyQfPz0kzAlUx5suRV1R/1w/hfB1P8TTP8aTPyhJOJzNx9zuefgaeb76wcLeiz53u50ONkvp5fsfM4qAvRKOZvg9ARFkDShQyfDmvRixHsYEY8UxF89Bx6oP838sH/El6V+pKf4LDlgutar4V+8BXWIyregjLdb8bcPzQ9T4r6lsEi/snEhfjKWiP/4qnSGTumHzXP8k8eJ+3O5vsj1NA+uszw8g8grR6X4v/yGF06M0wb4AI2T5+RfJfhq8o/GR5MfWFLMpk2Wwt9/qZcn42vDdpw4i1KZb1SG59O6wplejnD40+mXNJX8/vGeKtBv31NLZaLjc/NgNx6+wT87t4KKLg7EUSiosLw2CjQs90rkPd0OPwB+uiAoVhABzdADckAxzxdEm+E6jwZ+qOTtF/Ovlqeeft4Pb/8F</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:CE727449C10C6C57E0401F0A07994E6E</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish LockerViewAll" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass", "urn:dece:type:policy:LockerViewAllConsent");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));

if (tC.getPropertyValue("policyResource") == null || tC.getPropertyValue("policyResource") == "") {
	tC.setPropertyValue("policyResource","urn:dece:rightslockerid:org:dece:0900");
}
if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
}
if (tC.getPropertyValue("policyRequestEntity") == null || tC.getPropertyValue("policyRequestEntity") == "") {
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for LockerViewAll"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate LockerViewAll if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def exists = tC.getPropertyValue("policyExists");

if (exists != "true") {
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}
</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>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</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>221500</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:LockerViewAllConsent</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>policyResource</con:name><con:value>urn:dece:type:rating:US:MPAA:G</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>sName</con:name><con:value>Link LASP Customer Service Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04682 - StreamCreate - LLPCS - Policy - BlockUnratedContent - US - MMPA - PG-13 - Nonenforcement of Policy unrated/unknown content blocked</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77340</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish Parental Control Rating" searchProperties="true" id="1ef8016c-7164-4671-a864-757e0c703fee"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL1",null);
tC.setPropertyValue("assertionUserIdFULL2",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assert2",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass","urn:dece:type:policy:ParentalControl:RatingPolicy");
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL1");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:RatingPolicy");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:RatingPolicy","UTF-8"));
}

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
	def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:RatingPolicy");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:RatingPolicy","UTF-8"));
}

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy2" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVZbU+JKEP4rVPbRCrkZAimhCoireFTQiOuel61h0gnjJjOYmQD6689MgCzg5bD6BNPpy9c933T3CUdZavtdziEXhNHaMksp90tpWyty6jPECfcpyoD7Avth9+rSt+umjzYmWm0QtLVfrfi44ZoO0hvgTfRjMwa91bSOdQs5tme5toMmrlTlvIAB5QJR0dZsUynYumndmS3fMX3Hq7sN71+tdg85l76lSt3U1qCWvK1NhZj5hrFYLOoLp87yxLBN0zIeri5DPIUMaZ2TVUZloLyz1sf1CDCkKa5jlhknxo7OScT9kCQUiSKHdazovVimYbYMqRNxknzTKluIBjRm5bGPKKMEo5S8IFWfKxBTFtW6acJyIqbZu0lYpnKswxLr2Dqm3zRjF9qBjnYQ5hzpfIqsta9biCEHiqE2vh20tW+H3VppepcjymOWZ3z3+Hd4gM4hZTOIdL5Jaw3tcIdvVKpzAtgfUJwWnMzhWpF1hjDw9W0CPtxVbZRDTJaXhEuCLrlCZ2zD2zuuqhGQBLj4zAVtXc7KyT1KC+g07oezVtwM+w3avZ9DHF7YL/e3R2cPhtkuAWwrl4LqalfHPVJWJFpZPC5Cu0HOH60edoMztvgZnrnn8JAcTbuT5ffJw9mwMWWzycKMvbB5NOlxIW6C6fjlx1PLTHoCFtmiNzR62eNFOCrGmI3x5ZWx9IrwBo0z+yUfPAbLm8ckjdHP8/PUePrnjt2I4OpiFMSOvbxGV97P0Ti5mAzHw9Yzp/a1dZYdNSYPNPNyRiwkMm8siuTHyMPtKp0t/LuyzZsPi8kjYLE5KhoMgtp3eUtIfNzMlIREelyq+jPVfLgAKrSOslK9wy9kuyORL+9wdTZbtus0Xcfsuq2G1eyemvK/22pZ382u07SdTZNZodiD2Gc0JiqWarkr2nwMEGc+BxpBrs9ZITsd1z7wGCCBagN6Kx8BoxzumGzP1hLy31HjxclTx8pfkugpinFhub+12jUTQzrMu7GAfKcnW/ZOT74FTGYEVONWvOaS2FzIWjyheSFSqz5HdQqFbO256rK+fdx0DU6yWQoKqZGxqEihPpvOysoYfPVr6wjzUnp7ele+tnfz2v+2KYHUiYhS4CqXHshrhDeGi71J5P2E3e2EN+67RUTUw5L1FDnBKyS7n/7QRPGj4ki33z8N++EGdqX9F9afNe4Ph5+0DC674egrtr/64S/rsw4+H/prgS+/ilyy94vmry2NDwho7HO/ChTNyVbYzZomB74cEZ3Ny53Vn+rFfF6UT9VTkzCX3uV4slzDtI0QcCFn2PMd+w3UqJwYBy0MFe692JV8F2EhpjQUSEAme0utPB6wIYbA1YY4kE1xeej6uRNSVk7AUrwl66dyu1WIP1yAsY+VnhSP5M+C5dGfC3vD11YcmadcEAWhiTqpZeH5HVpgJt0SOeZYvu38LQdvBd8VVkWusAjJp0kh4P0vNTW/2hrCmBVUDAKtFGzP1BKneJ6B/0fplZtybFd7PPn/RV4nJQUwyO2fk9K/Wsd89QJosjWX10Ffj+bGqRl4PdNqBOVo9lajOZDjuirKDrrOK/FryVad9jne+Q8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>D0B7FECAB7D27EADE0401F0A07993BF2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<dece:ErrorList xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator" xmlns:md="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
   <dece:Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <dece:Reason Language="en">The policy was not found.</dece:Reason>
      <dece:OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59/User/urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D/Policy/urn:dece:type:policy:ParentalControl:RatingPolicy</dece:OriginalRequest>
      <dece:ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</dece:ErrorLink>
   </dece:Error>
</dece:ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:de:fsk:6</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Geo_NewCases_DMRDelete</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_002_DMRDelete_FUNC_RTL_POST_by_Full_Access_User_with_RatingPolicy_User_6_Content_6_Parental_Control_Policy_DE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77341</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0925387B7ADA018EE05307991F0AB413</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>urn:dece:userid:org:dece:092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>assert2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVdbc9o6EP4rjPvYMb5w9wRmXEwSp5CkgbRNXjqKvAYRW3Is2RB+/ZEMuEAuhyZPjNZ7+Xb1aXc54SiObMflHFJBGK0s44hyp5B2tSylDkOccIeiGLgjsDN2R0PHrpoO2ppoFd/ran+aQa3VNFsNPQRs6nWMQEcPrY6OIOw0QxNDC4NU5TwDn3KBqOhqtmnVdcvWTWtidpya6dTbVbPdudcqPyHl0rdUqZraBtSSd7WZEIljGIvForqoVVk6NWzTtIzfo+EYzyBGWu9knVERKO1t9HE1AAxRhKuYxcaJsadzEnBnTKYUiSyFTazgrVimYXYMqRNwMv2ilbYQ+DRkxbGPKKMEo4iskKrPCMSMBRU3mrKUiFn8ZhKWqRzrsMQ6tur0i2bsQzvS0R7ClCOdz5C18XUDIaRAMVRub/yu9uW4WytMJymiPGRpzPeP/4YHaA4RSyDQ+TatDbTjHb5Sqd4JYMenOMo4yeFSkTVBGPjmNgEf76pynUJIlkPCJUGXXKEzduEdHNfV8MgUuPjIBe1cztrJTxRl0Ot/HQTtMzqyOMsntzN8GUX1y+akCcO7bgFgV7kQlFe7Ph6QsiTR2uLXrzuvnixcbF0/T7FvNCZncGW06rXsBj890rPz74NlYp4tR2at4a1q9/YFWK0+PfezpuVdtk7vn36MhqtoMa0Zs+ZdmETn5uQut+d5yBpsMbnI2+PaPJrPo9tR/DglQ34PTe9hdXf15K+8eXz6+/fFV+Ps8tYNf4J/fzo9j5m1cv0LK75FNF+l1/SHNU/i1dDj3TKdHfz7su2bH2cPc8Bie1Q08L3KqbwlJN5vZkpCAj0sVJ1ENR8ugAqtp6xU73Ay2e5I4Mg7XJ/Njt2otS3Xa9qDplWzBmajZjY6HevUdF3P9rZNZo3iAGKf0ZCoWKrlrmnzPkAcOxxoAKmes0x2Oq6949FDAlV8eiMfAaMcJky25+nTI0pZe56ESWOeW+Ey7XTaC97UKpdMXNGr1A0FpHst2bL3WvINYJIQUH1b0ZpLXnMhS/GE8kxEVjVHVQqZ7OyparKOXW83DE7iJAIF1IhZkEVQTWZJURiDr39tHWFeSG8Gk+KxvZnW4bdtBaROQJQCV7l8A3mL8MpsqW0TeTvhxm7CW/duFhD1rmQ5RUrwGsn+p78sUfQoKeL2+4Nxf7yFXWr/g/VHjftXVx+09Ibu+Poztn/64z/WRx18PPTnAg8/i1yy95PmLy2NdwhoHHK/DBTkZCfsdkuT815OiN725SbVp2qW51nxVFtqEKbSu5xOVsMwbWMMOJMj7HnCHoEapRPjqH2hxH0Qu5TvI8zEjI4FEhDL3lIpjkcsiGPgakH0ZU9cHrt97oWUlROwFK/J+pFcbhXid/df7GClJ8XX8mfB0uDvhb3iayeOzFPuh4LQqTqpXeH5DVpgJt0SOeVYuuv8NQevBd8XlkUusQjJp4dMwNtfKmp8dTWEMcuo8D2tEOyO1AKneE7A+av0wk0xtcs1nvz/Hq+TggLqL4PUL/yrbcxRL4BOd8byJujLydwcmF7rm2k1vWIyt9aT2XMbnbIoe+h6L8QvJTt1OuR47z8=</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn:dece:policyid:org:dece:0925387B7ADA018EE05307991F0AB413</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:RatingPolicy</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Establish High-Level Policies for User/Account/Node1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL",callTC.getPropertyValue("assertionUserIdFULL"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserLinkConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserLinkConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserLinkConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableManageUserConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ManageUserConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for ManageUserConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ManageUserConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsentRequired" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsentRequired if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for EnableUserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for Account")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for EnableUserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:EnableUserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Account")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for UserDataUsageConsent" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for UserDataUsageConsent if necessary"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

if (tC.getPropertyValue("policyExists") == "false") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:UserDataUsageConsent");
	tC.setPropertyValue("policyRequestEntity",tP.getPropertyValue("urnNode") + tC.getPropertyValue("nodeid"));
	tC.setPropertyValue("policyResource",tC.getPropertyValue("assertionUserIdFULL"));
	tC.setPropertyValue("policyCreator",tC.getPropertyValue("assertionUserIdFULL"));
	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>221500</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:9B65A97BC9DDEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:9B65A97BC9DBEC2CE0401F0A05997A79</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_04650 - StreamCreate - LLP - Policy - Nonenforcement of Policy ParentalControl:RatingPolicy - US - MMPA - G rating - Full User</con:value></con:property><con:property><con:name>sName</con:name><con:value>Link LASP Test Cases</con:value></con:property><con:property><con:name>policyClass</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6rKEn73V1iuR8twUbxVkqrhIkEFBfH6cgphhFEEZUDQX78HjMZkJWuvfR5SZpq+fN390fQ8Y2vvs12AMYxiFAZlRXyp/G9Nw4bNtWCN49hmrdFZ12udNduoNRya5ViLs9sdplJWME6gEuDYCuKXCkszbI1u1dimydBdttFttJ7azeaqUp7BCBPXROWJrpSzvR/gbhH2pZJEQTe0MMLdwNpD3I3t7gSowy7R7Fo3TJXX5yvKImD06sXxoUtR9pMDbej79pMd7qln6pPOs4O7E+QGVpxE8D2mg18q77Zpmj6l9acwcimWpmmK7lBEx8HI/VV5Ld2MoaMEm/B6FqwgDJBt+ehi5aBUGHuhUwa+G0Yo9vY/uGYohs5d12Bm12ymEfyqUB8BCnR/6ekTyAhbNexZzM2ZATcwgoENy1NDean8+rsOXm3NyArwJoz2+Mv5v0GCwQn64QE6NXzL7Ibu7z1+U67XZ2h3lcD2E4xOUMtpcrBsiMvjCG5QNkSYkM/B5aL95QzfGAbt/9KSZ+oRJ4FNfVMZEbkQx/9Pvx57dfUys/wEvkZbBbST6mAu7LWVGJ5G42rTPG+Pszl+KSA8Kl9B3Vv9fv5K1Duv3o3WMhpHvr6duZt+2Fp5mk/Rzo7eTg4dNNLSS1+C9b7fmlxCxsStCCEd708rUZsFaYsZeI1m2jMpwfcuAYpLGzr1JgbV2gD6YtOafNJTZ4SO7SVK7flbvT40m77hLy+nBoOd7VA+SH2sy5PVFMhKnaZSZ1p3Dmk82G3tdmk3eDs2q9q5veQG7A5w2aT98pHTYw55XgN4LpLM/19wdEe0Yut+EPJJsSGvZwxfVUURk4sggPPEBanCA5f8bYHGu7ujt0NyJ6V5oOs9IAq8v5WGKtjJgJlKvKcKs5maCRfQ511tRgzNEvBXvGpIqZguxZmuv0mpZzry7LyW/WR1kTQV4MJY8FTJkGaiYUqqCsKrLFPFtZxt1YmaKvpSLBEHopQdLo7ciaGcIZtVOHXCscsJl6wWMyLvnYd77bQ2JV8VVFmYHOWJsq6LutQHxnJus72E2F6G+0NYWk75B6P+AW4B7KU0iQkuqrlLVXPKaqJhFTLzs0xV5L6q41TQi6zkkpT2Z9PLRy0EXhWcvZRJJhhfa2GbQk+jV4s+tuZcoBogFd3CeCARCtyAqDqdloRrrYZSakjGVOuphpJKoJCJUurjNat5a9k72XU965tg+9gYQZfmvYA8D4yTfeaOJUvugfV+xth1w7MRh6xFmLqrdirqy/4gXCnEjQZ0ied1QADRIE+N1J8HQ37GjQ6owyI43PTCPfSiksqEg93pktFtVB+5Y23OiZtda0zekLrleJTi2+y2vgOKAp0B4+mWYywpQwzQpTkaTBcQRctLrHE600RtrmTMk+lCDP2W87ZYTgfVbGnr5mg8mc7HlyzTjtv2xY/fRvxbNOmrojvSIBxju0rRVo832yInLN+2hE8bg4ZcCbgqD4C8dV0JEQLzb9srCd8MVSLkBaqQysJckCdAlquSwou6vul5zNiWZ8mU0VRFcnxSpvNyYfillcCLpFO0NV8dlmyPXpnAKZzpDann6lOu2l/Ala755iwG6WG2CRiGlg/620ZNXVvNGeAo6YQnbxFfShQwtUaHPp0NZk2aOeqO3590wLSeTdhdNvLc1XnnrnakKcuHV2dpAn9mPnBMIRSbl3RTMlTQvr5vmapM64Zv77PDem9nokl6VhiHJi8ZPZ2eZqIIBlcZNgGb4eVF2qqCVNiXQKZahBan9cLDy0BDI1NKCGmTB7ps1yz9rxzLKVb6zLGjAHTwlWPSlWMS2ByrSltkMNcUDnieurwsHfXWbNjvHGh9MdyV+GqPcmPkN0ZBOzUH1TlzTlveVp/PO4roCdVgs/Tq65inrYutw/6uJSNjJwbNhn9Wh6rOTRHln+ktPKZ4WNIUJpDq8aVHdaKkyu9XaH+51BvsdD+eJCdlag0wc/bWx3kn3Y7fmhQVyWfu0lqd9N4itJfX78jXIXkXXsco9ThgP03g2+41SdZbaMe3Y/4dVsRyj3wcrfjPe1wuQU5tU6h2D/kyiGMYxJXX3Crf4boJ2fSQ0yVfzuu5wzc50GnxQkcUJYEVJLpBMz0a0Fyn0wKtzm3Zu6L4AlEIgw3KY+Xr7PVj/WeA9r67hlYEo8ofPOV1KiuBQbaPMMDQDF8qnbbANrheixXqHNtpiW2Jp0EDNNsNpt2m66BS1sJ4FIwisIlh9LAht75uyAa00QHBfI1+3yVwTApxtE5J7LNPJ+spgAnZs6N81e22aJqlMNoffJjDpfahk/jw6eAdirJQ+PrL1iwbF1K6w9DFjvNjdl+f3QpBdByUK+A8Fx6SJsJvVv36LZHfEq5/eyW4uQeJg/JVhlQ1jpB9RfL50QdJcnbcGZKndMN8V/070w7DcL+bUn9ARH0txj2Sc0IPcW8XFrKDky2tuKdg0suj9XR8Sk6n5KN7EXFPMRT5bwLthKyRZzPcwYC6u6D+aoO/o/4S+S7/jC+JvWASk9d/T6hWLo7/fn37ZE1KEMMs/k4m+OTClgf/453O7tq5HhGPyU8aRs5H5b/x9RCHQM5HFwrc/JSv3ucfGmyHxC0i4yuMHp1/5+C74J+F93rdscSEGOskhj8/Kedz6aVi2XaYBLEiVgrB46wscMbnA+x+KP3mplh+328zGf7xNrNQhxPbg3urctdF/65cQ0XnbUisMCqwvFQycjEnwQP3YTa/A/xhPPN/Gs+fM3n9Tfy75KGmX6n9+g8=</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - Remove all Parental Control Policies" searchProperties="true" id="509e3aa3-4ef6-4d43-8be0-939d7e2a3f3d"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL1",null);
tC.setPropertyValue("assertionUserIdFULL2",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assert2",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));



tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));
</script></con:config></con:testStep><con:testStep type="groovy" name="EnableParentalControlInvolvingSteps" disabled="true"><con:settings/><con:config><script>def testSuite = context.testCase.testSuite;
def totalTestCases = testSuite.getTestCases().size();

 for(n in (0..totalTestCases-1))
def policyClass = context.expand( '${#TestCase#policyClass}' )
{   if(policyClass == "urn:dece:type:policy:ParentalControl:RatingPolicy") {
   if(testSuite.getTestCaseAt(n).name == "Policy - Remove all Parental Control Policies"){
   //testSuite.getTestCaseAt(n).setDisabled(false)
	if(testSuite.getTestCaseAt(n).getTestStepByName("PolicyGet for ParentalControl:BlockUnratedContent") || testSuite.getTestCaseAt(n).getTestCaseByName("PolicyDelete for ParentalControl:BlockUnratedContent")){
		testSuite.getTestCaseAt(n).getTestStepByName("PolicyGet for ParentalControl:BlockUnratedContent").setDisabled(true)
		testSuite.getTestCaseAt(n).getTestStepByName("PolicyDelete for ParentalControl:BlockUnratedContent").setDisabled(true)
	}
   
   }
}

}</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:RatingPolicy");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:RatingPolicy","UTF-8"));
}
def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:RatingPolicy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true")
{
tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:RatingPolicy");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:RatingPolicy","UTF-8"));
}
	

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:BlockUnratedContent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:BlockUnratedContent","UTF-8"));
}


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:BlockUnratedContent"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");
	def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:BlockUnratedContent");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:BlockUnratedContent","UTF-8"));
}

	
	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:AllowAdult"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:AllowAdult");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:AllowAdult","UTF-8"));
}



def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:AllowAdult"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:AllowAdult");
	def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:AllowAdult");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:AllowAdult","UTF-8"));
}

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="remove policies" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def useroid = context.expand( '${#TestCase#useroid}' )

a = new dbUtils.dbPolicy(log,tP.getPropertyValue("targetsystem"));
log.info "useroid"+useroid;
a.policyDelete(302,useroid,"deleted")
a.policyDelete(300,useroid,"deleted")
a.policyDelete(304,useroid,"deleted")
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for ParentalControl:NoPolicyEnforcement"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");
def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:NoPolicyEnforcement","UTF-8"));
}


def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for ParentalControl:NoPolicyEnforcement"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");
	def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", "urn:dece:type:policy:ParentalControl:NoPolicyEnforcement");
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode("urn:dece:type:policy:ParentalControl:NoPolicyEnforcement","UTF-8"));
}

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVZbU+JKEP4rVPbRCrkZAimhCoireFTQiOuel61h0gnjJjOYmQD6689MgCzg5bD6BNPpy9c933T3CUdZavtdziEXhNHaMksp90tpWyty6jPECfcpyoD7Avth9+rSt+umjzYmWm0QtLVfrfi44ZoO0hvgTfRjMwa91bSOdQs5tme5toMmrlTlvIAB5QJR0dZsUynYumndmS3fMX3Hq7sN71+tdg85l76lSt3U1qCWvK1NhZj5hrFYLOoLp87yxLBN0zIeri5DPIUMaZ2TVUZloLyz1sf1CDCkKa5jlhknxo7OScT9kCQUiSKHdazovVimYbYMqRNxknzTKluIBjRm5bGPKKMEo5S8IFWfKxBTFtW6acJyIqbZu0lYpnKswxLr2Dqm3zRjF9qBjnYQ5hzpfIqsta9biCEHiqE2vh20tW+H3VppepcjymOWZ3z3+Hd4gM4hZTOIdL5Jaw3tcIdvVKpzAtgfUJwWnMzhWpF1hjDw9W0CPtxVbZRDTJaXhEuCLrlCZ2zD2zuuqhGQBLj4zAVtXc7KyT1KC+g07oezVtwM+w3avZ9DHF7YL/e3R2cPhtkuAWwrl4LqalfHPVJWJFpZPC5Cu0HOH60edoMztvgZnrnn8JAcTbuT5ffJw9mwMWWzycKMvbB5NOlxIW6C6fjlx1PLTHoCFtmiNzR62eNFOCrGmI3x5ZWx9IrwBo0z+yUfPAbLm8ckjdHP8/PUePrnjt2I4OpiFMSOvbxGV97P0Ti5mAzHw9Yzp/a1dZYdNSYPNPNyRiwkMm8siuTHyMPtKp0t/LuyzZsPi8kjYLE5KhoMgtp3eUtIfNzMlIREelyq+jPVfLgAKrSOslK9wy9kuyORL+9wdTZbtus0Xcfsuq2G1eyemvK/22pZ382u07SdTZNZodiD2Gc0JiqWarkr2nwMEGc+BxpBrs9ZITsd1z7wGCCBagN6Kx8BoxzumGzP1hLy31HjxclTx8pfkugpinFhub+12jUTQzrMu7GAfKcnW/ZOT74FTGYEVONWvOaS2FzIWjyheSFSqz5HdQqFbO256rK+fdx0DU6yWQoKqZGxqEihPpvOysoYfPVr6wjzUnp7ele+tnfz2v+2KYHUiYhS4CqXHshrhDeGi71J5P2E3e2EN+67RUTUw5L1FDnBKyS7n/7QRPGj4ki33z8N++EGdqX9F9afNe4Ph5+0DC674egrtr/64S/rsw4+H/prgS+/ilyy94vmry2NDwho7HO/ChTNyVbYzZomB74cEZ3Ny53Vn+rFfF6UT9VTkzCX3uV4slzDtI0QcCFn2PMd+w3UqJwYBy0MFe692JV8F2EhpjQUSEAme0utPB6wIYbA1YY4kE1xeej6uRNSVk7AUrwl66dyu1WIP1yAsY+VnhSP5M+C5dGfC3vD11YcmadcEAWhiTqpZeH5HVpgJt0SOeZYvu38LQdvBd8VVkWusAjJp0kh4P0vNTW/2hrCmBVUDAKtFGzP1BKneJ6B/0fplZtybFd7PPn/RV4nJQUwyO2fk9K/Wsd89QJosjWX10Ffj+bGqRl4PdNqBOVo9lajOZDjuirKDrrOK/FryVad9jne+Q8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>D0B7FECAB7D27EADE0401F0A07993BF2</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyExists</con:name><con:value>false</con:value></con:property><con:property><con:name>policyGetXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<dece:ErrorList xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator" xmlns:md="http://www.movielabs.com/schema/md/v2.1/md" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
   <dece:Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <dece:Reason Language="en">The policy was not found.</dece:Reason>
      <dece:OriginalRequest>http://stdecqavap1.va.neustar.com:8009/rest/2015/02/Account/urn:dece:accountid:org:dece:0925386E0D7B016DE05307991F0ADA59/User/urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D/Policy/urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</dece:OriginalRequest>
      <dece:ErrorLink>https://qa.q.uvvu.com:7001/rest/2015/02/error/en/ErrorList.html#Policy:PolicyNotFound</dece:ErrorLink>
   </dece:Error>
</dece:ErrorList>]]></con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyResource</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>Geo_NewCases_DMRDelete</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_002_DMRDelete_FUNC_RTL_POST_by_Full_Access_User_with_RatingPolicy_User_6_Content_6_Parental_Control_Policy_DE</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77342</con:value></con:property><con:property><con:name>useroid</con:name><con:value>0600</con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:0925381223A70188E05307991F0A3074</con:value></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:092538530A59618AE05305991F0A3823</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0925381AD62E6131E05305991F0AAD2D</con:value></con:property><con:property><con:name>assert2</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SAML2 Assertion=pVdbc9o6EP4rjPvYMb5w9wRmXEwSp5CkgbRNXjqKvAYRW3Is2RB+/ZEMuEAuhyZPjNZ7+Xb1aXc54SiObMflHFJBGK0s44hyp5B2tSylDkOccIeiGLgjsDN2R0PHrpoO2ppoFd/ran+aQa3VNFsNPQRs6nWMQEcPrY6OIOw0QxNDC4NU5TwDn3KBqOhqtmnVdcvWTWtidpya6dTbVbPdudcqPyHl0rdUqZraBtSSd7WZEIljGIvForqoVVk6NWzTtIzfo+EYzyBGWu9knVERKO1t9HE1AAxRhKuYxcaJsadzEnBnTKYUiSyFTazgrVimYXYMqRNwMv2ilbYQ+DRkxbGPKKMEo4iskKrPCMSMBRU3mrKUiFn8ZhKWqRzrsMQ6tur0i2bsQzvS0R7ClCOdz5C18XUDIaRAMVRub/yu9uW4WytMJymiPGRpzPeP/4YHaA4RSyDQ+TatDbTjHb5Sqd4JYMenOMo4yeFSkTVBGPjmNgEf76pynUJIlkPCJUGXXKEzduEdHNfV8MgUuPjIBe1cztrJTxRl0Ot/HQTtMzqyOMsntzN8GUX1y+akCcO7bgFgV7kQlFe7Ph6QsiTR2uLXrzuvnixcbF0/T7FvNCZncGW06rXsBj890rPz74NlYp4tR2at4a1q9/YFWK0+PfezpuVdtk7vn36MhqtoMa0Zs+ZdmETn5uQut+d5yBpsMbnI2+PaPJrPo9tR/DglQ34PTe9hdXf15K+8eXz6+/fFV+Ps8tYNf4J/fzo9j5m1cv0LK75FNF+l1/SHNU/i1dDj3TKdHfz7su2bH2cPc8Bie1Q08L3KqbwlJN5vZkpCAj0sVJ1ENR8ugAqtp6xU73Ay2e5I4Mg7XJ/Njt2otS3Xa9qDplWzBmajZjY6HevUdF3P9rZNZo3iAGKf0ZCoWKrlrmnzPkAcOxxoAKmes0x2Oq6949FDAlV8eiMfAaMcJky25+nTI0pZe56ESWOeW+Ey7XTaC97UKpdMXNGr1A0FpHst2bL3WvINYJIQUH1b0ZpLXnMhS/GE8kxEVjVHVQqZ7OyparKOXW83DE7iJAIF1IhZkEVQTWZJURiDr39tHWFeSG8Gk+KxvZnW4bdtBaROQJQCV7l8A3mL8MpsqW0TeTvhxm7CW/duFhD1rmQ5RUrwGsn+p78sUfQoKeL2+4Nxf7yFXWr/g/VHjftXVx+09Ibu+Poztn/64z/WRx18PPTnAg8/i1yy95PmLy2NdwhoHHK/DBTkZCfsdkuT815OiN725SbVp2qW51nxVFtqEKbSu5xOVsMwbWMMOJMj7HnCHoEapRPjqH2hxH0Qu5TvI8zEjI4FEhDL3lIpjkcsiGPgakH0ZU9cHrt97oWUlROwFK/J+pFcbhXid/df7GClJ8XX8mfB0uDvhb3iayeOzFPuh4LQqTqpXeH5DVpgJt0SOeVYuuv8NQevBd8XlkUusQjJp4dMwNtfKmp8dTWEMcuo8D2tEOyO1AKneE7A+av0wk0xtcs1nvz/Hq+TggLqL4PUL/yrbcxRL4BOd8byJujLydwcmF7rm2k1vWIyt9aT2XMbnbIoe+h6L8QvJTt1OuR47z8=</con:value></con:property><con:property><con:name>PolicyIDEncoded</con:name><con:value>urn:dece:policyid:org:dece:0925381223A70188E05307991F0A3074</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>1118b9c0-9658-4d95-ba03-b7e57a6ed36c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Policy - General Policy Establishment" searchProperties="true" id="7c9eac24-c829-4257-99d7-fbf6e1b21d54"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("policyExists",null);
tC.setPropertyValue("policyClass",null);
tC.setPropertyValue("policyRequestEntity",null);
tC.setPropertyValue("policyResource",null);
tC.setPropertyValue("policyCreator",null);
tC.setPropertyValue("returnXMLResult","true");
tC.setPropertyValue("policyStatus","urn:dece:type:status:active");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("assertionUserIdFULL1",callTC.getPropertyValue("assertionUserIdFULL1"));
tC.setPropertyValue("assertionUserIdFULL2",callTC.getPropertyValue("assertionUserIdFULL2"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("policyCreator",callTC.getPropertyValue("policyCreator"));
tC.setPropertyValue("policyClass",callTC.getPropertyValue("policyClass"));
tC.setPropertyValue("policyResource",callTC.getPropertyValue("policyResource"));
tC.setPropertyValue("policyRequestEntity",callTC.getPropertyValue("policyRequestEntity"));
tC.setPropertyValue("assert",callTC.getPropertyValue("assert"));
tC.setPropertyValue("assert2",callTC.getPropertyValue("assert2"));

if (tC.getPropertyValue("policyCreator") == null || tC.getPropertyValue("policyCreator") == "") {
	tC.getPropertyValue("policyCreator") == tC.getPropertyValue("assertionUserIdFULL1");
}
</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyGet for Policy" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("Policy GET for User")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyDelete for Policy if necessary" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
	
if (tC.getPropertyValue("policyExists") == "true") {
	tC.setPropertyValue("policyClass", tC.getPropertyValue("policyClass"));

	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyDelete for User")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;
}

</script></con:config></con:testStep><con:testStep type="groovy" name="PolicyCreate for Policy"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//tC.setPropertyValue("policyRequestEntity",tC.getPropertyValue("assertionUserIdFULL"));
//tC.setPropertyValue("policyClass", "urn:dece:type:policy:ParentalControl:RatingPolicy");
//tC.setPropertyValue("policyResource","urn:dece:type:rating:US:MPAA:G");
def policyClass = context.expand( '${#TestCase#policyClass}' )

def v2 = context.expand( '${#Project#versionMinor}' )
if(v2!=tP.getPropertyValue("versionURLEncode"))
{
	tC.setPropertyValue("policyClassEncoded", policyClass);
}
else
{
	tC.setPropertyValue("policyClassEncoded", URLEncoder.encode(policyClass,"UTF-8"));
}


	def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("PolicyCreate for Block unrated content")

	myTC.setPropertyValue("tName",tC.getName());
	myTC.setPropertyValue("sName",tS.getName());

	def runnerTC = myTC.run( null , false )

	assert runnerTC.status == Status.FINISHED;

</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value>SAML2 Assertion=pVZbc9o6EP4rjPuYMb5wMXgCM2DIOT4FkuKEpH3pCHkBJbbkWDKX/vpKBlwgl0OTJ4/We/l29Wl3LzmKI9vtcA6pIIyW1nFEuZtLW1qWUpchTrhLUQzcFdgNOsOBa5dNF+1NtJLfa2k/pzWnMqtirGNkNvVqWEU6mjZDveLUnKrVqEJj2pCqnGfgUy4QFS3NNq2qblm6Xbu1bLfiuGat3HTqP7TSBFIufUuVsqntQK15S1sIkbiGsVqtyqtKmaVzwzZNy3gYDgK8gBhp7cttRnmgtL3Tx+UQMEQRLmMWG5fGkc5lyN2AzCkSWQq7WOFbsUzDbBpSJ+Rk/kUrbCH06YzlRw9RRglGEfmFVH2GIBYsLHWiOUuJWMRvJmGZyrEOa1lDq0q/aMYxtDMdHSFMOdL5Alk7X2OYQQoUQ+lu7Le0L+fdWm56myLKZyyN+fHx7/AAXULEEgh1vk9rB+18h69Uqn0J2PUpjjJOljBSZE0QBr67TcDnuyrdpDAj6wHhkqBrrtAZh/BOjttq9MgcuPjIBR1cztbJBEUZtPuzRf9rNBp+v/sPPzsP/qb28I8Y3Qe98HsrB3ConAuKq90eT0hZkGhrgdCm4lyNHJSMQrgIxtHQdqKluHqKZt3rr8vJeDCuNI1omeENffIS6sBjfD8RYT+++bqaVm3SSRqwWlpmTJ82XfyjM61c3DbqfuWOZ8N6+is0q14jWfVno2/h3SMJ7wcXATPJQ1jxKxML0V9JdlO9n0TPmy70jeETvmuKZyHA//ex2bhn3y7IZOIj374bNFpFOgf4j2X7Nx9k00fAYn9UNPB7pSt5S0i838yUhIT6LFd1E9V8uAAqtLayUr3DzWS7I6Er73B7Nhudvud1r7pVs1Oze92+WauYTrNpXZkdq1ev75vMFsUJRI/RGVGxVMvd0uZ9gDh2OdAQUn3JMtnpuPaOxx4SqOTTsXwEjHK4ZbI9M3vK41VzVg/rpsNqocNiZPGnpVYaMXFNr9POTEB63JJrRy15DJgkBFTfVrTmktdcyFI8o2UmIqu8RGUKmezsqWqyrl1t1AxO4iQCBdSIWZhFUE4WSV4Yg2+/to4wz6Xj/m3+2N5M6/TfvgJSJyRKgatcuiBvEV7Mlrpb2yfydsKNw4T37jtZSNS7kuUUKcFbJMe//rBE0aOgSMfz+oEX7GEX2n9h/VFj7/r6g5a9QSe4+YztTy/4aX3UwcdDfy7w4LPIJXs/af7S0niHgMYp94tA4ZIchN1vaXLeywnR3r/cZ1R+LmfLZZa/VUdNwlS6l+PJqhmmbQSAMznDNrfsCahReDHOWhgK4CfBC/kxxEwsaCCQgFg2l1J+PGNDDICrDdGXTXF97vp5FFKWTsBavCbzIrndKsTvLsDYxUpPim/kZ8XS8M+NveLrII7MUy6IgtC5OqllYfMGLzCTbokccyw9dP6ag9eCHwuLIhdYhCTUNBPw9p+Sml8tDWHMMir8npYLDmdqjlNsEnD/KL1wk4/tYo8n/7/I6ySnAAa5/XOS+1frmKueAJ0fzOVd0Jej2euZZt2So7l5OJp7dbNbFOUIXfuF+KXkoE6nHG//Bg==</con:value></con:property><con:property><con:name>assert2</con:name><con:value>SAML2 Assertion=pVZbc6JKEP4rFvu4hVyEqFS0iqA5666JHjHZbF5S49DoJDAQZlDMrz8zeIkak+MmT9Q0ffm655vuPmcojkzHZQwyThJaKeKIMqeUtpQ8o06CGGEORTEwh2PHd6/6jlnVHbQxUSq9Tkt5CEwAK5zUVFQzDdVCeqg2dVxTaxCGGNsTXG/WhCpjOfQo44jylmLqhqUahmraY8N0anXHNqqGXb9XKreQMeFbqFR1ZQ2qYC1lxnnqaNpisaguatUkm2qmrhva3VXfxzOIkdI+X2VUBsraa31cDQBDFOEqTmLtXNvTOQ+Y45MpRTzPYB0reC+WrulNTegEjEy/KVtbCHo0TMqjh2hCCUYReUGyPlfAZ0lQcaNpkhE+i99NwtClYxUKrGLDot8UbR/aiY72EGYMqWyGjLWvEYSQAcVQuRn1Wsq3026tNB1niLIwyWK2f/w7PEDnECUpBCrbpLWGdrrDI5VqnwN2ehRHOSNzuJZkTREGtr5NwKe7qgwzCEnRJ0wQtGASnbYL7+C4qkaHTIHxz1zQzuWsnNyiKIc2CboXj9roxRoNx41hH5D9fRT9QKQYLFolgF3lUrC92tXxgJRbEq0snuLAvZs+ev7U6uazf2+f5z/5Y7RsRvTpKjzzF5YR/Zjee/Ooe3Nj3yxzbzZgkxD+WL4/u7t2m7MBTuD38OckS90XuiCD4Pd1NFn64UUWuvVu/fJlEF9fLWaNP1PfS7kVE1aQxj9BirjN2SO+ZzP7103DK5r58GyuvdxOLxF/TvPrX7djGtT9n0z/ft95KvrUam3T2cG/L9u8eT+fPALmm6OkQa9TuRS3hPjHzUxKSKCGpaqTyubDOFCutKWV7B1OLtodCRxxh6uz3nC7nud1dKNp2man2dXtml5vNo1L3e2c6RebJrNCcQDRS2hIZCzZcle0+Rggjh0GNIBMnSe56HRM+cBjB3FU6dGReAQJZTBORHu2noolY5SSSc1eLAITL2vNBSpelMp1wgd0kLkhh2y/Jdt7LXkEmKQEZN+WtGaC14yLUjyjec4jozpHVQq56OyZbLKOaTVsjZE4jUAC1eIkyCOoprO0LIzGVl9TRZiV0lF3XD62d9M6/LepgNAJiFRgMpcLELcIR2aLtUnk/YQbuwlv3Lt5QOS7EuXkGcErJPu/Xlki6bGliOt5Xd/zN7C32n9h/VljbzD4pGWn7/rDr9g+eP6D8VkHnw/9tcD9ryIX7P2i+VtL7QMCaofc3wYK5mQn7GZLE/NeTIj25uU+o+pzNZ/P8/Kt1uUkzIR7MZ4MW9NNzQecixm2HCdPQLWtF+2khWEL/CD4Vr4PMecz6nPEIRbNpVIeT9gQfWByQ+yJplicun7uhRSl41DwYzIvEtutRPzhAowdLPWEeCg+iyQLXm/siK+dOCJPsSByQqfyJJeF5Tu8wIlwS8SYS7Jd58ccHAu+L9wWeYuFC0JNcg7v/6nI+dVSEMZJTnmvo5SC3Zla4uTLFJxXpTduyrG93ePJ/y/yKikpgEFs/4yU/uU65sgnQKc7c3kd9Oho1s+Mj0bzPrr2G/FbyU6dDjne/g8=</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:08AECCCD006152D9E05307991F0AD60B</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL1</con:name><con:value>urn:dece:userid:org:dece:08AECCBFB40A52DBE05307991F0A1D66</con:value></con:property><con:property><con:name>assertionUserIdFULL2</con:name><con:value>urn:dece:userid:org:dece:08AECCCD019252D9E05307991F0AD60B</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>policyClass</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyClassEncoded</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>policyCreator</con:name><con:value>08AECCBFB40A52DBE05307991F0A1D66</con:value></con:property><con:property><con:name>policyExists</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>policyGetXML</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2011/08/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Policy:PolicyNotFound">
      <Reason Language="en">The supplied policy was not found.</Reason>
      <OriginalRequest>https://qa.p.uvvu.com:7001/rest/$major/$minor/Account/urn:dece:accountid:org:dece:D0A738982B0871D4E0401F0A0799246D/User/urn:dece:userid:org:dece:D0B7FECAB7D27EADE0401F0A07993BF2/Policy/urn:dece:type:policy:ParentalControl:BlockUnratedContent</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/$major/$minor/error/en/ErrorList.html#Policy:PolicyNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:D10E11162D271256E0401F0A07991400</con:value></con:property><con:property><con:name>policyRequestEntity</con:name><con:value>08AECCCD019252D9E05307991F0AD60B</con:value></con:property><con:property><con:name>policyResource</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:rating:us:mpaa:x</con:value></con:property><con:property><con:name>policyStatus</con:name><con:value>urn:dece:type:status:active</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value>77343</con:value></con:property><con:property><con:name>returnXMLResult</con:name><con:value>true</con:value></con:property><con:property><con:name>sName</con:name><con:value>RTL_CS_P1_TestCases</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_00051_DiscreteMediaRightDelete_FUNC_by_Full_Access_User_with_AllowAdult_and_RatingPolicy_User_X_Content_X_Parental_Control_Policy</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Authentication/Permission Test Cases"; 

def oldString = """tC.setPropertyValue("nodeid","221500");""";
def newString = """tC.setPropertyValue("nodeid","221501");""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				def testStepName = testStepList[j].name;

				//Find if a step contains
				
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				//stepScript = testStepList[j].getScript();
				//if (stepScript.contains("QC_ResultExportLevel")) {
					log.info "TC[" + targetTestCase.name + "] STEP[$testStepName]";
				//}	
				
				if (testStepName == "Establish Requesting Entity Environment") {
					log.info "Hit!";
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					//stepScript = testStepList[j].getScript();
					//stepScript = stepScript.replace(oldString, newString);
					//targetTestStep.setScript(stepScript);		

					/*
					*  Delete a step
					*/
					//targetTestCase.removeTestStep(targetTestStep);

					/*
					*  Replaces step's script completely
					*/
					stepScript = """import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authentication Contexts")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;
""";
					targetTestStep.setScript(stepScript);		
				}
				
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Property" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Remove a Property"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Link LASP Test Cases";
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	

	for( prop in targetTestCase.properties) {
		/*
		*  This will remove all test case properties
		*/
   		//targetTestCase.removeProperty( prop.value.name )
   		log.info "prop.value.name is " + prop.value.name;
   		if (prop.value.name == "synced") {
   			targetTestCase.removeProperty( prop.value.name )
   		}
   	}
}
/*	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "synced";			
			/*if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			*/
			/*
			propertyValue = null
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}
*/
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>FUNC_USER_CONSENT_POLICIES</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>NumberOfPolicyRequestingEntities</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>1</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "DECE Customer Service (DECECS) Test Cases"; 
def stepName  = "Change context to LLPCS";
def stepNewName  = "Change context to DLPCS";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Renaming Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestStep.name = stepNewName;
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Rename Test Cases"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def testSuite = "Link LASP Customer Service Test Cases";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		//newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = oldTestCaseName.replace("- LLP -", "- LLPCS -");	
		/*	
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
			*/
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step for all Testcases in a Suite" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Authentication/Permission Test Cases"; 
def stepName  = "Save node's current role";

def TCList  = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList  = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				if (testStepList[j].name == stepName) {
					log.info "Removing Step " + testStepList[j].name;
					targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
					targetTestCase.removeTestStep(targetTestStep);
				}
				
				//stepScript = testStepList[j].getScript();
				//stepScript = stepScript.replace(oldString, newString);
				//targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info "ERROR:" + e;
			}	
		}
	}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="Infrastructure" disabled="true"><con:description/><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Rename Test Cases"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 115;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(false);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_DiscreteMediaRightGet_", "_DMRList_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_DiscreteMediaRightList" + newTestCaseName.split("DiscreteMediaRightList")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_DiscreteMediaRightList" + newTestCaseName.split("DiscreteMediaRightList")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_DiscreteMediaRightList" + newTestCaseName.split("DiscreteMediaRightList")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_DiscreteMediaRightList" + newTestCaseName.split("DiscreteMediaRightList")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>import java.io.*;

def testCase  = testRunner.getTestCase();
def testSuite = "01AccountStatusUpdate_PERM";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

BufferedReader br = new BufferedReader(new FileReader("C:\\Users\\srikanth.paridala\\Desktop\\userRSU.txt"));

def newTestCaseName;

log.info "TCCount:"+TCCount;

for(i = 0; i &lt;= TCCount - 1; i++)
{               
                def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);

                newTestCaseName = br.readLine();
                log.info "Input Test Case Name: "+newTestCaseName;
                
                if(targetTestCase.isDisabled() == false)
                {
                                targetTestCase.setFailOnError(true);
                                targetTestCase.name = newTestCaseName;    
                }

}
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>DEC_PTL</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Property" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove a Property"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	try
	{
		targetTestCase.removeProperty(propertyName);
	}
	catch(Throwable e)
	{
		log.info e.text;
	}		
	log.info "Done with Test Case '" + TCList[i].name + "'";
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>DiscreteMediaTokenOid</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove Test Cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove Test Cases"><con:settings/><con:config><script>//Copyright (c) 2013 rat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuiteName = testCase.getPropertyValue("TestSuite"); 
def testSuite = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuiteName);

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuiteName).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuiteName).getTestCaseCount();

def i = 0;
while (i &lt;= TCCount - 1)
{
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuiteName).getTestCaseByName(TCList[i].name);
	def oldTestCaseName = TCList[i].name;
	try
	{
		testSuite.removeTestCase(targetTestCase);
	}
	catch (Throwable e)
	{
		log.info e;
	}		
	log.info "Done removing Test Case '" + oldTestCaseName + "'";
	i = i + 1;
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL_CS</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Disable a Step" searchProperties="true" id="69c7bb33-a2d6-47e1-9693-b9a42c3bc438"><con:settings/><con:testStep type="groovy" name="Disable a Step"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	def targetTestStep = targetTestCase.getTestStepByName(testStepName);	
	if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
	{
		try
		{			
			targetTestStep.setDisabled(true);	
			log.info "Done with Test Case '" + TCList[i].name + "'";		
		}
		catch(Throwable e)
		{
			log.info e;
		}
	}		
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>TestStepName</con:name><con:value>Create a AllowAdult Policy for a different Full user</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property to a step in a testcase" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set a Property"><con:settings/><con:config><script>
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");


//Get Arguments
//def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
		
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	def targetTestStep = targetTestCase.getTestStepByName(testStepName);	
	
	//def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");	
	//log.info propertyName
	//if(targetTestStep.isDisabled() == false)
	if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue(propertyName);
			//if(nodeRole == "urn:dece:role:retailer")
			//{
				//targetTestCase.setPropertyValue(propertyName, propertyValue);
				targetTestStep.setPropertyValue(propertyName, propertyValue);
				log.info "Done with Test Case '" + TCList[i].name + "'";
			//}
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>01AccountStatusUpdate_FUNC_RETCS</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>ResponseType</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>${#TestCase#ResponseType}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>testStepName</con:name><con:value>Account_DB_Validation</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename a Step" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Rename a Step"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");
def testStepNewName = testCase.getPropertyValue("TestStepNewName");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	def targetTestStep = targetTestCase.getTestStepByName(testStepName);	
	if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
	{
		try
		{
			targetTestStep.name = testStepNewName;	
			log.info "Done with Test Case '" + TCList[i].name + "'";		
		}
		catch(Throwable e)
		{
		log.info e.text;
		}
	}		
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>TestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>TestStepName</con:name><con:value>CreateParentalControlPolicy</con:value></con:property><con:property><con:name>TestStepNewName</con:name><con:value>CreateRatingPolicy</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove all Assertions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove all Assertions"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	def targetTestStep = targetTestCase.getTestStepByName(testStepName);
	def assertionsList = targetTestStep.getAssertionList();
	for(stepAssertion in assertionsList)
	{
		try
		{
  			targetTestStep.removeAssertion(stepAssertion);
  		}
		catch(Throwable e)
		{
			log.info e.text;
		}
	}			
	log.info "Done with Test Case '" + TCList[i].name + "'";
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>DEC_PTL</con:value></con:property><con:property><con:name>TestStepName</con:name><con:value>DiscreteMediaRightGetGet - DiscreteMediaRightGetGet</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove a Step" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Remove a Step"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	def targetTestStep = targetTestCase.getTestStepByName(testStepName);	
	if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
	{
		try
		{
			targetTestCase.removeTestStep(targetTestStep);		
			log.info "Done with Test Case '" + TCList[i].name + "'";	
		}
		catch(Throwable e)
		{
		log.info e.text;
		}
	}		
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>TestStepName</con:name><con:value>Create a AllowAdult Policy for the Full User to be able to Create Rights Token</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Clone a Step" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clone a Step"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def sourceTestSuite = testCase.getPropertyValue("SourceTestSuite"); 
def targetTestSuite = testCase.getPropertyValue("TargetTestSuite"); 
def sourceTestStepName = testCase.getPropertyValue("SourceTestStepName");
def sourceTestCaseName = testCase.getPropertyValue("SourceTestCaseName");
def prevTestStep = testCase.getPropertyValue("PreviousTestStep");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(targetTestSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(targetTestSuite).getTestCaseCount();

def sourceTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(sourceTestSuite).getTestCaseByName(sourceTestCaseName);
def sourceTestStep = sourceTestCase.getTestStepByName(sourceTestStepName);

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	if(sourceTestSuite == targetTestSuite)
	{
		if(TCList[i].name != sourceTestCaseName)
		{
			def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(targetTestSuite).getTestCaseByName(TCList[i].name);
			def targetTestStep = targetTestCase.getTestStepByName(sourceTestStepName);
			def previousTestStep = targetTestCase.getTestStepByName(prevTestStep);
			Integer indexPreviousTestStep = targetTestCase.getIndexOfTestStep(previousTestStep)						
			if(targetTestCase.isDisabled() == false)
			{
				if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
				{
					targetTestCase.removeTestStep(targetTestStep);
				}
				if(indexPreviousTestStep >= 0)			
				{
					targetTestCase.cloneStep(sourceTestStep, sourceTestStepName);
					targetTestStep = targetTestCase.getTestStepByName(sourceTestStepName);
					Integer indexTargetTestStep = targetTestCase.getIndexOfTestStep(targetTestStep);				
					testStepOffset = (indexPreviousTestStep + 1) - indexTargetTestStep;				
					try
					{	
						targetTestCase.moveTestStep(indexTargetTestStep, testStepOffset);
						//log.info "Done with Test Case '" + TCList[i].name + "'";	
					}
					catch(Throwable e)
					{
						log.info e;				
					}
				}				
				else
				{
					log.info TCList[i].name;
				}
			}						
		}
	}
	else
	{		
		def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(targetTestSuite).getTestCaseByName(TCList[i].name);
		def targetTestStep = targetTestCase.getTestStepByName(sourceTestStepName);
		if(targetTestCase.getIndexOfTestStep(targetTestStep) >= 0)
		{
			targetTestCase.removeTestStep(targetTestStep);
		}
		targetTestCase.cloneStep(sourceTestStep, sourceTestStepName);
		try
		{	
			targetTestCase.moveTestStep(Integer.parseInt(testStepIndex), Integer.parseInt(testStepOffset));	
		}
		catch(Throwable e)
		{
			log.info e.text;
		}
		log.info "Done with Test Case '" + TCList[i].name + "'";
	}
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>SourceTestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>SourceTestCaseName</con:name><con:value>TC_DECE_00047_DMRList_FUNC_RTL_CS_GET_with_Active_Account_Active_User</con:value></con:property><con:property><con:name>SourceTestStepName</con:name><con:value>Set Pem</con:value></con:property><con:property><con:name>TargetTestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>PreviousTestStep</con:name><con:value>DiscreteMediaRightListGet - DiscreteMediaRightListGet</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script" searchProperties="true" id="ca3c5b50-aea2-4a24-825a-f4aff76ab262"><con:settings/><con:testStep type="groovy" name="Change a step's script"><con:settings/><con:config><script>
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStep");
def oldString = testCase.getPropertyValue("OldString");
def newString = testCase.getPropertyValue("NewString");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{   
 def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
 if(targetTestCase.isDisabled() == false)
 {
  try
  {
  targetTestStep = targetTestCase.getTestStepByName(testStepName);
  stepScript = targetTestStep.getScript();
  //stepScript = stepScript.replace(oldString, newString);
  stepScript = """def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def v2 = context.expand( '\${#Project#versionMinor}' )
def commonTC;
 if (testProject.getPropertyValue("V2") != testProject.getPropertyValue("versionURLEncode"))
 {
	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete07');
 }
 else
 {
 	commonTC = testRunner.testCase.testSuite.project.getTestSuiteByName("CommonSteps").getTestCaseByName('DiscreteMediaRightDeleteDelete06');
 }

commonTC.setPropertyValue("CallingTestSuiteName", testSuite.name);
commonTC.setPropertyValue("CallingTestCaseName", testCase.name);

commonTC.setPropertyValue("RightsTokenOid", testCase.getPropertyValue("RightsTokenOid"));
commonTC.setPropertyValue("RightsTokenId", testCase.getPropertyValue("RightsTokenId"));
commonTC.setPropertyValue("DiscreteMediaFulfillmentMethod", testCase.getPropertyValue("DiscreteMediaFulfillmentMethod"));
commonTC.setPropertyValue("ErrorResponse", testCase.getPropertyValue("ErrorResponse"));
commonTC.setPropertyValue("State", testCase.getPropertyValue("State"));
commonTC.setPropertyValue("LeaseExpiration", testCase.getPropertyValue("LeaseExpiration"));

commonTC.setPropertyValue("DiscreteMediaTokenOid", testCase.getPropertyValue("DiscreteMediaTokenOid"));
commonTC.setPropertyValue("DiscreteMediaTokenId", testCase.getPropertyValue("DiscreteMediaTokenId"));

def runnerCommonTC = commonTC.run(null, false);
assert "\$runnerCommonTC.status" != "FAILED";""" 
  
  targetTestStep.setScript(stepScript);
  log.info TCList[i].name;
  }
  catch(Throwable e)
  {
   log.info e;
  }
 }
}
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>Error Codes_P2_TestCases_mi</con:value></con:property><con:property><con:name>TestStep</con:name><con:value>Call DiscreteMediaRightDeleteDelete</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Change a step's script for all Steps in a Suite"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();
def testSuiteObj = testCase.getTestSuite();
def testProject = testSuiteObj.getProject();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """dataUtils.dbConnEstablish();"""
def newString = """dataUtils.dbConnEstablish(testProject.getPropertyValue("DBIdentifier"));"""

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	//if(targetTestCase.isDisabled() == false)
	//{		
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);			
			//if(targetTestStep.name == "Call Get Expected Row Count for DELETE" || targetTestStep.name == "Call Get Expected Row Count for DELETE 1" || targetTestStep.name == "Call Get Expected Row Count for DELETE 2")
			//{
			try
			{				
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);	
				//log.info targetTestStep.name;	
			}
			catch(Throwable e)
			{
				log.info e;
			}
			//}			
		}
	//}
}						
log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>DEC_PTL</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Node Roles for Authentication Test Cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set Node Roles for Authentication Test Cases"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def nodeRoles = new String[29];
nodeRoles = ['urn:dece:role:coordinator', 'urn:dece:role:retailer', 'urn:dece:role:lasp:linked', 'urn:dece:role:lasp:dynamic', 'urn:dece:role:dsp', 'urn:dece:role:dsp:drmlicenseauthority', 'urn:dece:role:coordinator:customersupport', 'urn:dece:role:userinterface', 'urn:dece:role:mdp', 'urn:dece:role:portal', 'urn:dece:role:portal:customersupport', 'urn:dece:role:drmdomainmanager', 'urn:dece:role:retailer:customersupport', 'urn:dece:role:retailer:issuer', 'urn:dece:role:retailer:issuer:customersupport', 'urn:dece:role:lasp:linked:customersupport', 'urn:dece:role:lasp:dynamic:customersupport', 'urn:dece:role:dsp:customersupport', 'urn:dece:role:dsp:drmlicenseauthority:customersupport', 'urn:dece:role:device', 'urn:dece:role:device:customersupport', 'urn:dece:role:contentprovider', 'urn:dece:role:contentprovider:customersupport', 'urn:dece:role:userinterface:customersupport', 'urn:dece:role:dece', 'urn:dece:role:dece:customersupport', 'urn:dece:role:manufacturerportal', 'urn:dece:role:manufacturerportal:customersupport', 'urn:dece:role:mdagent'];
String nodeRole = 'urn:dece:role:retailer';
Integer nodeOid = 1397;
def targetTestCase = null;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	nodeRole = nodeRoles[i];	
	if (nodeRole == null)
	{
		nodeRole = 'urn:dece:role:retailer';		
	}
	targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	targetTestCase.setPropertyValue("NodeRole", nodeRole);
	targetTestCase.setPropertyValue("NodeOid", nodeOid.toString());
	targetTestCase.setPropertyValue("NodeId", 'urn:dece:org:org:dece:' + nodeOid.toString());
	log.info "Set Role '" + nodeRole + "' for Test Case '" + TCList[i].name + "'"; 
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>Authentication</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Node Roles for Non Authentication Test Cases" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set Node Roles for Non Authentication Test Cases"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def nodeRoles = new String[29];
nodeRoles = ['urn:dece:role:coordinator', 'urn:dece:role:retailer', 'urn:dece:role:lasp:linked', 'urn:dece:role:lasp:dynamic', 'urn:dece:role:dsp', 'urn:dece:role:dsp:drmlicenseauthority', 'urn:dece:role:coordinator:customersupport', 'urn:dece:role:userinterface', 'urn:dece:role:mdp', 'urn:dece:role:portal', 'urn:dece:role:portal:customersupport', 'urn:dece:role:drmdomainmanager', 'urn:dece:role:retailer:customersupport', 'urn:dece:role:retailer:issuer', 'urn:dece:role:retailer:issuer:customersupport', 'urn:dece:role:lasp:linked:customersupport', 'urn:dece:role:lasp:dynamic:customersupport', 'urn:dece:role:dsp:customersupport', 'urn:dece:role:dsp:drmlicenseauthority:customersupport', 'urn:dece:role:device', 'urn:dece:role:device:customersupport', 'urn:dece:role:contentprovider', 'urn:dece:role:contentprovider:customersupport', 'urn:dece:role:userinterface:customersupport', 'urn:dece:role:dece', 'urn:dece:role:dece:customersupport', 'urn:dece:role:manufacturerportal', 'urn:dece:role:manufacturerportal:customersupport', 'urn:dece:role:mdagent'];
String nodeRole = 'urn:dece:role:retailer';
Integer nodeOid = 1397;
def targetTestCase = null;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	//nodeRole = nodeRoles[i];	
	//if (nodeRole == null)
	//{
		nodeRole = 'urn:dece:role:retailer';		
	//}
	targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	targetTestCase.setPropertyValue("NodeRole", nodeRole);
	targetTestCase.setPropertyValue("NodeOid", nodeOid.toString());
	targetTestCase.setPropertyValue("NodeId", 'urn:dece:org:org:dece:' + nodeOid.toString());
	log.info "Set Role '" + nodeRole + "' for Test Case '" + TCList[i].name + "'"; 
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>DEC_PTL</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's Request Body" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Change a step's Request Body"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc. All Rights Reserved.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def testStepName = testCase.getPropertyValue("TestStepName");
def oldString = testCase.getPropertyValue("OldString");
def newString = testCase.getPropertyValue("NewString");

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			targetTestStep = targetTestCase.getTestStepByName(testStepName);
			oldReqBody = targetTestStep.httpRequest.getRequestContent();
			newReqBody = oldReqBody.replace(oldString, newString);
			targetTestStep.httpRequest.setRequestContent(newReqBody);
			log.info "Done Setting Request Body for Test Step " + targetTestStep.name + " for Test Case " + targetTestCase.name;
		}
		catch(Throwable e)
		{
			log.info e;
		}
	}
}						
log.info 'Woohoo!'</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>CommonSteps</con:value></con:property><con:property><con:name>TestStepName</con:name><con:value>RightsTokenCreatePost - RightsTokenCreatePost</con:value></con:property><con:property><con:name>OldString</con:name><con:value>http://www.decellc.org/schema</con:value></con:property><con:property><con:name>NewString</con:name><con:value>${#Project#SchemaNameSpace}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Copy of Set a Property" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Set a Property"><con:settings/><con:config><script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");	
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			//nodeRole = targetTestCase.getPropertyValue(propertyName);
			//if(nodeRole == "urn:dece:role:retailer")
			//{
				targetTestCase.setPropertyValue(propertyName, propertyValue);
				log.info "Done with Test Case '" + TCList[i].name + "'";
			//}
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'
</script></con:config></con:testStep><con:properties><con:property><con:name>TestSuite</con:name><con:value>RTL</con:value></con:property><con:property><con:name>PropertyName</con:name><con:value>RequestorUUID</con:value></con:property><con:property><con:name>PropertyValue</con:name><con:value>${=project.properties["E2E_UUID_FAU2"].value}</con:value></con:property><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get All testcase titles" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script"><con:settings/><con:config><script>import java.io.*;

//def commonTestStep = "User_Delete_API";

def testCase  = testRunner.getTestCase();
def TSList = testRunner.testCase.testSuite.project.getTestSuiteList();
def TSCount = testRunner.testCase.testSuite.project.getTestSuiteCount();

//def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
//def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def logFile = new File(projectPath+"\\TCs.txt");

log.info "TS List:"+TSList[0].name;

//log.info "TCCount:"+TCCount;

for(k in (0..TSCount-1))
{
            def testSuite = TSList[k].name;
            def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList(); 
            def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();
            log.info "TestSuite  " + testSuite +"  TCCount:"+TCCount;
            log.info "TSList[k].disabled " + TSList[k].disabled 
            
            if ((TSList[k].disabled).toString() != "true")
            {                              
                  for(i in (0..TCCount-1))                                                                  
                                  {                                                                                         
                            try {
                                  def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
                                   // def targetStep = targetTestCase.getTestStepByName(commonTestStep);
                                    log.info  testSuite + " " + targetTestCase.name; 
                                    logFile.append(targetTestCase.name+"\r\n");      
                                  
                            }
                            catch(Throwable e) {
                                  log.info "Exception : " + e;
                                  }                                                                              
                                  }                              
            }
                }
</script></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountDisplayName</con:name><con:value>Acc_Create_20130912_053315</con:value></con:property><con:property><con:name>AccountId</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>AccountOid</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>AccountStatus</con:name><con:value>suspended</con:value></con:property><con:property><con:name>ADULT_MIN_AGE</con:name><con:value>18</con:value></con:property><con:property><con:name>ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>AllowAdult</con:name><con:value>urn:dece:type:policy:ParentalControl:AllowAdult</con:value></con:property><con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:RET_CS_1;urn:dece:org:org:dece:ACCESS;urn:dece:org:org:dece:ACCESCS;urn:dece:org:org:dece:DLASP;urn:dece:org:org:dece:DLASP_CS_1;urn:dece:org:org:dece:LLASP_CS_1;urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:DSP_CS_1;urn:dece:org:org:dece:COO;urn:dece:org:org:dece:coord:cs;urn:dece:org:org:dece:CON;</con:value></con:property><con:property><con:name>Batch_HostName</con:name><con:value>https://qa1.b.uvvu.com</con:value></con:property><con:property><con:name>BlockUnratedContent</con:name><con:value>urn:dece:type:policy:ParentalControl:BlockUnratedContent</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property><con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property><con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certspath</con:name><con:value/></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>CHILD_MAX_AGE</con:name><con:value>12</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>CIDStatus</con:name><con:value>CIDStatus</con:value></con:property><con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>ContentProfile</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>ContentProfile_Encoded</con:name><con:value>urn%3Adece%3Atype%3Amediaprofile%3Ahd</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property><con:property><con:name>DBHost</con:name><con:value>LP3CH</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa1.d.uvvu.com</con:value></con:property><con:property><con:name>disablePriority</con:name><con:value>P3,CHILD,CLG</con:value></con:property><con:property><con:name>DiscreteMediaProfile</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaProfileHD</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaProfileInURL</con:name><con:value>urn:dece:type:discretemediaformat:bluray:packaged</con:value></con:property><con:property><con:name>DiscreteMediaProfilePD</con:name><con:value>urn:dece:type:discretemediaformat:securedigital</con:value></con:property><con:property><con:name>DiscreteMediaProfileSD</con:name><con:value>urn:dece:type:discretemediaformat:dvd:cssrecordable</con:value></con:property><con:property><con:name>DiscreteMediaProfile_Encoded</con:name><con:value>urn%3Adece%3Atype%3Adiscretemediaformat%3Abluray%3Apackaged</con:value></con:property><con:property><con:name>DiscreteMediaRightsRemaining</con:name><con:value>0</con:value></con:property><con:property><con:name>DiscreteMediaRightsRemainingHD</con:name><con:value>1</con:value></con:property><con:property><con:name>DiscreteMediaRightsRemainingPD</con:name><con:value>0</con:value></con:property><con:property><con:name>DiscreteMediaRightsRemainingSD</con:name><con:value>0</con:value></con:property><con:property><con:name>E2E_AccountID_BAU1</con:name><con:value>urn:dece:accountid:org:dece:E62D6AF009C02A2DE0401F0A07993243</con:value></con:property><con:property><con:name>E2E_AccountID_FAU1</con:name><con:value>urn:dece:accountid:org:dece:E62D6AF009C02A2DE0401F0A07993243</con:value></con:property><con:property><con:name>E2E_AccountID_FAU2</con:name><con:value>urn:dece:accountid:org:dece:E62D6AF009C02A2DE0401F0A07993243</con:value></con:property><con:property><con:name>E2E_AccountID_SAU1</con:name><con:value>urn:dece:accountid:org:dece:E62D6AF009C02A2DE0401F0A07993243</con:value></con:property><con:property><con:name>E2E_AccountOID_BAU1</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>E2E_AccountOID_FAU1</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>E2E_AccountOID_FAU2</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>E2E_AccountOID_SAU1</con:name><con:value>13E6CB4014F15DFBE05305991F0A1631</con:value></con:property><con:property><con:name>E2E_NodeUserID_BAU1</con:name><con:value>urn:dece:userid:org:dece:E62D6AF00B282A2DE0401F0A07993243</con:value></con:property><con:property><con:name>E2E_NodeUserID_FAU1</con:name><con:value>urn:dece:userid:org:dece:E62D6AFAEA1F84BBE0401F0A0799324F</con:value></con:property><con:property><con:name>E2E_NodeUserID_FAU2</con:name><con:value>urn:dece:userid:org:dece:E62D6215618E9EBCE0401F0A07992144</con:value></con:property><con:property><con:name>E2E_NodeUserID_SAU1</con:name><con:value>urn:dece:userid:org:dece:E62D6AFAEAF084BBE0401F0A0799324F</con:value></con:property><con:property><con:name>E2E_UserOID_BAU1</con:name><con:value>13E6DD9F1AF3797AE05307991F0A593A</con:value></con:property><con:property><con:name>E2E_UserOID_FAU1</con:name><con:value>13E6DD9F1A76797AE05307991F0A593A</con:value></con:property><con:property><con:name>E2E_UserOID_FAU2</con:name><con:value>13E6CCF206AC70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>E2E_UserOID_SAU1</con:name><con:value>13E6E4781B630E94E05305991F0A168E</con:value></con:property><con:property><con:name>E2E_UUID_BAU1</con:name><con:value>_1b56c8c1-2977-455a-a20d-6e39ea58c929</con:value></con:property><con:property><con:name>E2E_UUID_FAU1</con:name><con:value>_a14312d6-757c-422e-a33d-2ec86f27e9b8</con:value></con:property><con:property><con:name>E2E_UUID_FAU2</con:name><con:value>_fab8a272-b60a-44a3-ada2-73cb3506f042</con:value></con:property><con:property><con:name>E2E_UUID_SAU1</con:name><con:value>_d1238c63-c102-49fe-9e7a-302e7dc4c093</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>false</con:value></con:property><con:property><con:name>Encoded_NodeAcc_Id</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encoded_NodeUser_Id</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encoded_PolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3A</con:value></con:property><con:property><con:name>Encode_NodeAcc_Id</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encode_NodeUser_Id</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3A</con:value></con:property><con:property><con:name>Encode_PolicyClass</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3A</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>FulfillmentManifestLoc1Location</con:name><con:value>https://dl.bestbuy.com/ml1</con:value></con:property><con:property><con:name>FulfillmentManifestLoc1Preference</con:name><con:value>1</con:value></con:property><con:property><con:name>FulfillmentWebLoc1Location</con:name><con:value>https://dl.bestbuy.com/wl1</con:value></con:property><con:property><con:name>FulfillmentWebLoc1Preference</con:name><con:value>1</con:value></con:property><con:property><con:name>GeoProfile</con:name><con:value>US</con:value></con:property><con:property><con:name>HOST</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>ISCnode</con:name><con:value>yes</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>oracle.jdbc.driver.OracleDriver</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>LeaseCreatedDate</con:name><con:value>2011-06-01 21:45:12.284</con:value></con:property><con:property><con:name>LeaseExpirationDate</con:name><con:value>2011-06-02 03:45:12</con:value></con:property><con:property><con:name>LeaseStatus</con:name><con:value>active</con:value></con:property><con:property><con:name>LeaseType</con:name><con:value>available</con:value></con:property><con:property><con:name>LicenseAcqBaseLoc</con:name><con:value>ns3.google.com</con:value></con:property><con:property><con:name>LicenseAcqLoc1DRMType</con:name><con:value>urn:dece:drm:playready:11</con:value></con:property><con:property><con:name>LicenseAcqLoc1Location</con:name><con:value>https://dl.bestbuy.com/al1</con:value></con:property><con:property><con:name>LicenseAcqLoc1Preference</con:name><con:value>1</con:value></con:property><con:property><con:name>LicenseAcqLoc2DRMType</con:name><con:value>urn:dece:drm:playready:11</con:value></con:property><con:property><con:name>LicenseAcqLoc2Location</con:name><con:value>https://dl.bestbuy.com/al2</con:value></con:property><con:property><con:name>LicenseAcqLoc2Preference</con:name><con:value>2</con:value></con:property><con:property><con:name>LicenseAcqLoc3DRMType</con:name><con:value>urn:dece:drm:playready:11</con:value></con:property><con:property><con:name>LicenseAcqLoc3Location</con:name><con:value>https://dl.bestbuy.com/al3</con:value></con:property><con:property><con:name>LicenseAcqLoc3Preference</con:name><con:value>3</con:value></con:property><con:property><con:name>NodeAccountId</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NodeAccountIdAllUsers</con:name><con:value>E62D6AF009BF2A2DE0401F0A07993243</con:value></con:property><con:property><con:name>NodeAccountOid</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NodeCredentialId</con:name><con:value/></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDECECS1</con:name><con:value>truststore-dece-cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRetailerforDeviceAuthToken</con:name><con:value/></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeIdRTL1</con:name><con:value>sriniretailer</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS1</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>nodeIdSPCLCS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>NodeUserId</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NodeUserId-BasicUser1</con:name><con:value>E62D6AF00B282A2DE0401F0A07993243</con:value></con:property><con:property><con:name>NodeUserId-FullUser1</con:name><con:value>E62D6AFAEA1F84BBE0401F0A0799324F</con:value></con:property><con:property><con:name>NodeUserId-FullUser2</con:name><con:value>E62D6215618E9EBCE0401F0A07992144</con:value></con:property><con:property><con:name>NodeUserId-StandardUser1</con:name><con:value>E62D6AFAEAF084BBE0401F0A0799324F</con:value></con:property><con:property><con:name>NodeUserOid</con:name><con:value>13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NodeUserSAMLAssertion</con:name><con:value>SAML2 Assertion=pVZZc+I4EP4rlOdxyvjAXK5AlcGwIZuDwYRh92VKyG1QYsvGkjnm169kwAFyLJM8udTu4+u7rxiKQtN2GIOUk5iWNlFImZ1TW0qWUjtGjDCbogiYzbHtOXe3tlnWbXQQUUoDt6X8QoZVMUy/ptardaxapgkqqlR81QTcqAVmHZqzhmBlLIMBZRxR3lJM3aiquqUa9bFes6uWXa2V9Wr9X6U0gZQJ3YKlrCt7UBvWUhacJ7amrdfr8rpSjtO5Zuq6oU3vbj28gAgp7audR7mhtL3nx2UfMIQhLuM40q60E54rn9kemVPEsxT2tvz3bOma3tQEj8/I/JtSyII/oEGcP7uIxpRgFJLfSMbnDvgi9ktOOI9TwhfRu04YulSswgar2LDoN0U7hXahohOEKUMqWyBjr2sEAaRAMZQeR4OW8u2yrOWi4xRRFsRpxE6ff4YH6ArCOAFfZQe39tAuV/hGpNpXgO0BxWHGyAruZbEmCAPbZxPw5apKwxQCsrklTBTohkl02jG8s+cuGi6ZA+OfSdBRcnZKJijMoG3Vv+v/butGkhjr++Xj5BovR+7T9wnjTisHcMycE4rU7p5nRVkU0U6iYzxi9jt66kxn953ZtslShmudB/d5ct9Y3Y2t9eR3Mo2D4Mdw4N/cJ88/h871ajuajxIt7s9uPF1/jJ3hP9e965+TLLiGyJvW0XNzbA1/aoMoWNfNAE+zm/7DX8/+iCW65vYaPfZk0d5jf1YfNGrj7qTL9aen9d83P8akQTvedroY335/nN7U8LLpEo46wZos57hVuHOE/5R26Hkvmz0B5oenLIOBW+qLLCH+8TCTFOKrQc5qJ3L4MA6UK20pJWeHnYlxR3xb5HD3Niq9mus2+4YjWqdZd3p6taLXm02jrzvVZsU5DJkdijOI3ZgGRNqSI3dXNh8DxJHNgPqQqqs4E5OOKR9odBFHpQEdiSaIKYNxLMbzMqvSWrAJM54mVI+NdGtyGvgzpXQf8wf6kDoBh/R0JDdPRvIIMEkIyLkty5qJumZchGKJVhkPjfIKlSlkYrKncsjaptWoaoxESQgSqBbFfhZCOVkkeWA0tvuaKsIsp45647zZ3nXr/N8hAoLHJ5KBSV86ILIIb+wW6+DIuw4b5rHDB/VO5hPZVyKcPCV4h+T010uVyPIoSsTpdnte1zvALrj/QPqzwt2Hh09KureON/yK7K+u98v4rILPm/6a4duvIhfV+0Xx15LaBwWondd+YchfkSOzhytN7HuxIdqHzl0io7wsZ6tVljerZVW0VKjXZDdouql5gDOxw7bj+BmoVmjRLjoYCuBnxgv6KcSML6jHEYdIDJdS/rzgQvSAyQtxIIbi5tLz88SkCB2HDX+L1g3FdSsRf3gAYxtLPkEeis86Tv2XjL2h68iO8FMciJzQuXzJY2H7Tl3gWKglYs3F6bHytxS8ZfyUWAS5wMJFQc0yDu//Kcn91VIQxnFG+cBVcsLxTs1x8m0C9gvTKzX52i7uePL/h7xK8hLAIK5/RnL98hyzZQvQ+dFe3hs9X83djqUbVl+vuv1Ovpqru9Vs1CovPXqCrv2K/JpyFKfzGm//Bw==</con:value></con:property><con:property><con:name>Node_Account_ID</con:name><con:value>13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL1</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>Node_ID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>Node_OID</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>Node_User_ID</con:name><con:value>E62D6215618E9EBCE0401F0A07992144</con:value></con:property><con:property><con:name>NODE_USER_ID_BAU</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU1</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_ID_FAU2</con:name><con:value>urn:dece:userid:org:dece:13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_ID_SAU</con:name><con:value>urn:dece:userid:org:dece:13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>NODE_USER_OID_BAU</con:name><con:value>13E6DD9F1AF2797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_OID_FAU1</con:name><con:value>13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>NODE_USER_OID_FAU2</con:name><con:value>13E6CCF206AB70CCE05305991F0A9A68</con:value></con:property><con:property><con:name>NODE_USER_OID_SAU</con:name><con:value>13E6E4781B620E94E05305991F0A168E</con:value></con:property><con:property><con:name>NoPolicyEnforcement</con:name><con:value>urn:dece:type:policy:ParentalControl:NoPolicyEnforcement</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>Policy_TOU</con:name><con:value>https://qa1.c.uvvu.com/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>PORT</con:name><con:value>7001</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa1.p.uvvu.com</con:value></con:property><con:property><con:name>PurchasedMediaProfile</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PurchasedMediaProfileHD</con:name><con:value>urn:dece:type:mediaprofile:hd</con:value></con:property><con:property><con:name>PurchasedMediaProfilePD</con:name><con:value>urn:dece:type:mediaprofile:pd</con:value></con:property><con:property><con:name>PurchasedMediaProfileSD</con:name><con:value>urn:dece:type:mediaprofile:sd</con:value></con:property><con:property><con:name>PurchaseInfoPurchaseAccount</con:name><con:value>urn:dece:accountid:org:dece:13E6CB4014F05DFBE05305991F0A1631</con:value></con:property><con:property><con:name>PurchaseInfoPurchaseTime</con:name><con:value>2010-11-29T08:44:01Z</con:value></con:property><con:property><con:name>PurchaseInfoPurchaseUser</con:name><con:value>urn:dece:userid:org:dece:13E6DD9F1A75797AE05307991F0A593A</con:value></con:property><con:property><con:name>PurchaseInfoRetailerID</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>PurchaseProfileBurnsLeft</con:name><con:value>1</con:value></con:property><con:property><con:name>PurchaseProfileBurnsLeftHD</con:name><con:value>1</con:value></con:property><con:property><con:name>PurchaseProfileBurnsLeftPD</con:name><con:value>0</con:value></con:property><con:property><con:name>PurchaseProfileBurnsLeftSD</con:name><con:value>0</con:value></con:property><con:property><con:name>PurchaseProfileCanDownLoad</con:name><con:value>true</con:value></con:property><con:property><con:name>PurchaseProfileCanStream</con:name><con:value>true</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>Default</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>off</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\DECE_API\DECE_API_7.1\IOT Test Cases\DiscreteMedia\DiscreteMediaRightLeaseCreate\Authentication</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_1.0_Release\DECE_API\APIs\DiscreteMediaRightUpdate</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>Authentication</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>bhjoshi</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa1.q.uvvu.com</con:value></con:property><con:property><con:name>Request_XML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>RetailerTransactionId</con:name><con:value>874336</con:value></con:property><con:property><con:name>RightsTokenStatus</con:name><con:value>suspended</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=pVZZc+I4EP4rlOdxyvjAXK5AlcGwIZuDwYRh92VKyG1QYsvGkjnm169kwAFyLJM8udTu4+u7rxiKQtN2GIOUk5iWNlFImZ1TW0qWUjtGjDCbogiYzbHtOXe3tlnWbXQQUUoDt6X8QoZVMUy/ptardaxapgkqqlR81QTcqAVmHZqzhmBlLIMBZRxR3lJM3aiquqUa9bFes6uWXa2V9Wr9X6U0gZQJ3YKlrCt7UBvWUhacJ7amrdfr8rpSjtO5Zuq6oU3vbj28gAgp7audR7mhtL3nx2UfMIQhLuM40q60E54rn9kemVPEsxT2tvz3bOma3tQEj8/I/JtSyII/oEGcP7uIxpRgFJLfSMbnDvgi9ktOOI9TwhfRu04YulSswgar2LDoN0U7hXahohOEKUMqWyBjr2sEAaRAMZQeR4OW8u2yrOWi4xRRFsRpxE6ff4YH6ArCOAFfZQe39tAuV/hGpNpXgO0BxWHGyAruZbEmCAPbZxPw5apKwxQCsrklTBTohkl02jG8s+cuGi6ZA+OfSdBRcnZKJijMoG3Vv+v/butGkhjr++Xj5BovR+7T9wnjTisHcMycE4rU7p5nRVkU0U6iYzxi9jt66kxn953ZtslShmudB/d5ct9Y3Y2t9eR3Mo2D4Mdw4N/cJ88/h871ajuajxIt7s9uPF1/jJ3hP9e965+TLLiGyJvW0XNzbA1/aoMoWNfNAE+zm/7DX8/+iCW65vYaPfZk0d5jf1YfNGrj7qTL9aen9d83P8akQTvedroY335/nN7U8LLpEo46wZos57hVuHOE/5R26Hkvmz0B5oenLIOBW+qLLCH+8TCTFOKrQc5qJ3L4MA6UK20pJWeHnYlxR3xb5HD3Niq9mus2+4YjWqdZd3p6taLXm02jrzvVZsU5DJkdijOI3ZgGRNqSI3dXNh8DxJHNgPqQqqs4E5OOKR9odBFHpQEdiSaIKYNxLMbzMqvSWrAJM54mVI+NdGtyGvgzpXQf8wf6kDoBh/R0JDdPRvIIMEkIyLkty5qJumZchGKJVhkPjfIKlSlkYrKncsjaptWoaoxESQgSqBbFfhZCOVkkeWA0tvuaKsIsp45647zZ3nXr/N8hAoLHJ5KBSV86ILIIb+wW6+DIuw4b5rHDB/VO5hPZVyKcPCV4h+T010uVyPIoSsTpdnte1zvALrj/QPqzwt2Hh09KureON/yK7K+u98v4rILPm/6a4duvIhfV+0Xx15LaBwWondd+YchfkSOzhytN7HuxIdqHzl0io7wsZ6tVljerZVW0VKjXZDdouql5gDOxw7bj+BmoVmjRLjoYCuBnxgv6KcSML6jHEYdIDJdS/rzgQvSAyQtxIIbi5tLz88SkCB2HDX+L1g3FdSsRf3gAYxtLPkEeis86Tv2XjL2h68iO8FMciJzQuXzJY2H7Tl3gWKglYs3F6bHytxS8ZfyUWAS5wMJFQc0yDu//Kcn91VIQxnFG+cBVcsLxTs1x8m0C9gvTKzX52i7uePL/h7xK8hLAIK5/RnL98hyzZQvQ+dFe3hs9X83djqUbVl+vuv1Ovpqru9Vs1CovPXqCrv2K/JpyFKfzGm//Bw==</con:value></con:property><con:property><con:name>SAML-BasicUser1</con:name><con:value>SAML2 Assertion=pVZZc6JKFP4rFvN4C1kEDVS0ikCccWIWxSSTeZlqm6N2Ao2hG7dfP92oRM1yneSJ6sNZvrOfU4aS2HQ9xiDjJKWVRRJT5hbUppJn1E0RI8ylKAHmcuyG3mXXNau6i7YiSqUTNJU/xtCu4xNsqKbTaKiWbSMVmXqk1qHmALJPsGM6gpWxHDqUcUR5UzF1w1Z1SzUaA73u2rZbM6qOdfJbqdxBxoRuwVLVlQ2oBWsqE86nrqbN5/PqvFZNs7Fm6rqh/brshngCCVJap2uPCkNZa8OPqxFgiGNcxWminWp7PKcRc0MypojnGWxsRe/Z0jXd0QRPxMj4m1LKQtSho7R4+oimlGAUkxWS8bkEPkmjiheP04zwSfKuE4YuFauwwCo2LPpN0fahHaloD2HGkMomyNjo6sMIMqAYKrf9TlP5dlzWCtFBhigbpVnC9p//hgfoDOJ0CpHKtm5toB2v8I1ItU4Bux2K45yRGVzJYp0iDGyTTcDHq6rcZDAiiy5hokAXTKLTduEdPNfRCMgYGP9MgnaSs1Zyh+IcWrftm58/H6g37Jnd0fd+MPR7w1lIzLk1bhYAdpkLQpna9fOgKMsiWkucNZ6Wg4vHGX96fOj6Px5gwh3bH+k1dDH73g/RGN9Qz8tXg7sstCcXv37cD/msH14Nrp6CxcPy+8/MX/Lx3Y+A2fSmG5/dPv837l/zPL+uP61SOu9ddi78K6Rr+Lb3m941elb/YRxc3HvOXLulq4eoO9EsyIfL3jxpXNZ6t/3H+e+hswL7kS4GXf3X40mqt++Bry6bpTs7+Pdp254P8+EjYL59yjLoBJW2yBLiHw8zSSGROipY3akcPowD5UpLSsnZ4eZi3JHIFTlcv43aeT0InLbhtc2G0/DOdbumNxzHaOue7dS87ZBZoziA6Kd0RKQtOXLXZfMxQJy4DGgEmTpLczHpmPKBxgBxVOnQvmiClDIYpHI8m7ZlGDRbTPkqqafpakKeyTgxQalcpfyaXmfeiEO2P5OdvZncB0ymBOTglnXNRGEzLmLxjGY5j43qDFUp5GK0Z3LKuqZ1YmuMJNMYJFItSaM8hup0Mi0io7H111QRZgW1fz4ouu1dvw7/bUMgeCIiGZj05QxEGuGN5WJuHXnXYcPcdXir3ssjIhtLxJNnBK+R7P96KRNZH2WNeL5/HvrhFnbJ/Q/SnxX2r68/KRl0vfDmK7J//PCP8VkFnzf9NcPdryIX1ftF8deS2gcFqB3WfmkompEds9szTSx8sSJa2859Rkb1uZrPZnnRrJZV0zKhXpPdoOmmFgLOxRJbDtInoFqpRTvqYiiBHxgv6fsQcz6hIUccEjFcKsXziBMxBCZPxI6Yiotj7889kyJ0HBb8LZofi/NWIv7wAsYulnyCfCM+8zSLXjL2hq4dO8JPcSFyQsfyJa+F5Tt1gVOhlog9l2a7yt9S8JbxfWIZ5BILFwU1zDm8/6ciF1hTQRinOeWdQCkIu0u1wMmXU3BfmF6pKfZ2eciT/7/kVVKUABYLSvAX+uU95soWoOOdxbwxerib/TNLN6y2bgfts2I32+vdbNRrLz26h671ivyashOnwxpv/QU=</con:value></con:property><con:property><con:name>SAML-FullUser1</con:name><con:value>SAML2 Assertion=pVZZc+I4EP4rlOdxyvjAXK5AlcGwIZuDwYRh92VKyG1QYsvGkjnm169kwAFyLJM8udTu4+u7rxiKQtN2GIOUk5iWNlFImZ1TW0qWUjtGjDCbogiYzbHtOXe3tlnWbXQQUUoDt6X8QoZVMUy/ptardaxapgkqqlR81QTcqAVmHZqzhmBlLIMBZRxR3lJM3aiquqUa9bFes6uWXa2V9Wr9X6U0gZQJ3YKlrCt7UBvWUhacJ7amrdfr8rpSjtO5Zuq6oU3vbj28gAgp7audR7mhtL3nx2UfMIQhLuM40q60E54rn9kemVPEsxT2tvz3bOma3tQEj8/I/JtSyII/oEGcP7uIxpRgFJLfSMbnDvgi9ktOOI9TwhfRu04YulSswgar2LDoN0U7hXahohOEKUMqWyBjr2sEAaRAMZQeR4OW8u2yrOWi4xRRFsRpxE6ff4YH6ArCOAFfZQe39tAuV/hGpNpXgO0BxWHGyAruZbEmCAPbZxPw5apKwxQCsrklTBTohkl02jG8s+cuGi6ZA+OfSdBRcnZKJijMoG3Vv+v/butGkhjr++Xj5BovR+7T9wnjTisHcMycE4rU7p5nRVkU0U6iYzxi9jt66kxn953ZtslShmudB/d5ct9Y3Y2t9eR3Mo2D4Mdw4N/cJ88/h871ajuajxIt7s9uPF1/jJ3hP9e965+TLLiGyJvW0XNzbA1/aoMoWNfNAE+zm/7DX8/+iCW65vYaPfZk0d5jf1YfNGrj7qTL9aen9d83P8akQTvedroY335/nN7U8LLpEo46wZos57hVuHOE/5R26Hkvmz0B5oenLIOBW+qLLCH+8TCTFOKrQc5qJ3L4MA6UK20pJWeHnYlxR3xb5HD3Niq9mus2+4YjWqdZd3p6taLXm02jrzvVZsU5DJkdijOI3ZgGRNqSI3dXNh8DxJHNgPqQqqs4E5OOKR9odBFHpQEdiSaIKYNxLMbzMqvSWrAJM54mVI+NdGtyGvgzpXQf8wf6kDoBh/R0JDdPRvIIMEkIyLkty5qJumZchGKJVhkPjfIKlSlkYrKncsjaptWoaoxESQgSqBbFfhZCOVkkeWA0tvuaKsIsp45647zZ3nXr/N8hAoLHJ5KBSV86ILIIb+wW6+DIuw4b5rHDB/VO5hPZVyKcPCV4h+T010uVyPIoSsTpdnte1zvALrj/QPqzwt2Hh09KureON/yK7K+u98v4rILPm/6a4duvIhfV+0Xx15LaBwWondd+YchfkSOzhytN7HuxIdqHzl0io7wsZ6tVljerZVW0VKjXZDdouql5gDOxw7bj+BmoVmjRLjoYCuBnxgv6KcSML6jHEYdIDJdS/rzgQvSAyQtxIIbi5tLz88SkCB2HDX+L1g3FdSsRf3gAYxtLPkEeis86Tv2XjL2h68iO8FMciJzQuXzJY2H7Tl3gWKglYs3F6bHytxS8ZfyUWAS5wMJFQc0yDu//Kcn91VIQxnFG+cBVcsLxTs1x8m0C9gvTKzX52i7uePL/h7xK8hLAIK5/RnL98hyzZQvQ+dFe3hs9X83djqUbVl+vuv1Ovpqru9Vs1CovPXqCrv2K/JpyFKfzGm//Bw==</con:value></con:property><con:property><con:name>SAML-FullUser2</con:name><con:value>SAML2 Assertion=pVbZcuI6EP0VynlMGcsrwRWocmwy4wlkgzBJXlJCFqCMLYMls8zXX8mAA4TkMsmTS+1eTreOuvucwSQ2XI8xnHGS0soiiSlzC2lDyTPqppAR5lKYYOZy5Ha9Tts1qsCFGxOlEgYN5WUIB2fQqBnqwAFQtSxoqjCChloz0cC0gTMEliFUGctxSBmHlDcUA+i2CixVr/WA49q2azlVs157Vip9nDHhW6hUgbIGtWANZcz5xNW0+XxenZvVNBtpBgC69thpd9EYJ1Bpnq8yKgJlzbU+qkYY4ThGVZQm2rm2o3MeMbdLRhTyPMPrWNFHsYAG6prQiRgZnSilLY5COkyLow9pSgmCMfkLZX06mI/TqOLFozQjfJx8mIQOpGMVL5CKdIueKNoutCMd7SDMGFTZGOprX/d4iDNMEa483IcN5eS4WytMexmkbJhmCds9/hseTGc4Tic4UtkmrTW04x0eqFTzHCM3pCjOGZnha0nWCUSYrW8To+NdVW4zPCSLNmGCoAsm0Wnb8PaOq2oEZIQZ/8oFbV3OykkfxjluksulBfwOfVoMAv/uib9qEMGrq8HT7VOjALCtXAjKq10d90hZkmhl8fNM6+PpLFo8Bt5NPut543lc/9GfGr9mF2bIxiTk+HfNvzKXke/Qv/7NcvQYnI5ay974qk0e5qcMRtrPQTBetvwgeLZbmQfzWURf6/oDhf27Vr/7YHR+JFdm0KkJQ5Pkd86j40Fw99qOAbAzCrwsvK0Hjh2eORP79Jf/On1uZ067k3R+J8O74fPp9fJ+Sh4aZTpb+HdlmzffzQevGPHNUdIgDCqX4pYg/7yZSQmJ1GGh6k5k82EcU640pZXsHW4u2h2JXHGHq7NuthzfvzSA413UgO+3gG0Cu17XL4FX95yzTZNZodiD6Kd0SGQs2XJXtPkcIEpchmmEM3WW5qLTMeUTjwHksBLSe/EIUspwLxXtWV/QeV0fOYjYS6QPR5nD4j8Ty3bmSuU65Tf0JvOGHGe7Tbm+05TvMSITgmXnlsRmgtmMi2JM4SznsV6dwSrFuejtmWyzrmGd2RojySTGEqqWpFEe4+pkPClKo7HV11AhYoX0vtUrntuHie3/29RA6EREKjCZywUW94gPTBdzk8iHCevGdsIb914eEfmyREF5RtAKye6vN55IgpQk8QQvun53A7vU/gfrrxr7NzdftAzaXvf2O7YvfvdF/6qDr4f+XuD2d5EL9n7T/L2l9gkBtX3ul4GiGdkKu9nTxMQXM6K5eblTqFen1Xw2y4vHalmmlgn3mnwNGjC0Lka5mGLLXvoHU630oh21MpTA94KX8l2IOR/TLoccJ6K5VIrjETtiFzO5I4aiLS6OXUB3QorScbzgh2R+LPZbifjTFRi5SOoJ8a34zNMseruxA7624og8xYrICR3Jk1wXlh/wAqXCLRGDLs22nR9ycCj4rrAscomFC0INco4//lORE6yhQITSnPIwUArB9lQtcPLlBLtvSu/cFIO73OTJ/6/yKikogLDY/xkp/MuFzJVPgI62JvM66LvhfGEB3boEdnB5sT2cdcd8e6M76JrvxO8lW3Xa53jzPw==</con:value></con:property><con:property><con:name>SAML-StandardUser1</con:name><con:value>SAML2 Assertion=pVZZc9o6FP4rjPvYMV7ZPIEZAqSXCQSCSZrmpSNkYSu1JUeSgeTXVzLgYLJcmjx5dHyW7+znjIMktr0u54gJTEllk8SEezm1rWWMeBRwzD0CEsQ9AT2/Ox55dtX0wF5Eqwz7be13YNlOE9YdHVqmrbutJdJbqAF0x7RRI4AuNFuOZOU8Q0PCBSCirdmmVdNNV7cac7Pu1WqeVa/WG+69VrlFjEvdkqVqajtQG97WIiFSzzDW63V17VQpCw3bNC3jbjzyYYQSoHXOth7lhlhnxw+rAYIojmEV0sQ4M0o8ZwH3fBwSIDKGdraC92yZhtkyJE/AcfhNK2RRMCRLmj97gFCCIYjxM1DxGSMR0aDSjUPKsIiSd52wTKVYRxsoY+iSb5pRhnaiohJCxoHOI2DtdM3QEjFEIKrczIZt7dtpWctF5wwQvqQs4eXnv+FBZIVimqJA53u3dtBOV/hGpDpnCHpDAuOM4xW6UsWaAoj4LpsInq6qMmVoiTcjzGWBbrhCZxzCO3puo9HHIeLiMwk6SM5WyS2IM9Sp367HgTV4QNAkf0Z3jcWisYj5zUY61s4BHDLnhCK12+dRURZFtJXgzuOvu2fUtP2630r973OWxf783idj6i7Gg58/myBoTmp3dPX88N/VzSYQTxgkflSrz35YjJ1HmfHreX2xEC1BUNq4fvi+oKPU+M5600tqhuOrYH3tppfJ7X34GLIonl3WoudpcOGusiXrjm6SdO78MaYPEXF+ilbYuJpNJtmPa9+9d0X94cd0sJxb93xzSZdhu3DnAH+Ztu95P1vIgIn9U5XBsF+5kFkC4uNhpig40Jc5q5eq4cMFIkLrKCk1O7xMjjsceDKH27flDOoDt9G0zuu2OWi5A7PmmLVWy7owu1a9OdgPmS2KI4g9SpZY2VIjd1s2HwOEiccRCRDTVzSTk45rH2jsAwEqQzKTTUAJR3MqxzPaNBbcrVsJwdlT85mFafTgBBuhVa6omJAJ6y4FYuWR3CqN5BmCOMVIzW1V1lzWNRcyFI9glYnYqq5AlaBMTnamhqxnu82awXGSxkgBNRIaZDGqplGaB8bg26+tA8hz6mwwz5vtXbeO/+0jIHkCrBi48uUcySyiN3aLuXfkXYct+9DhvfpuFmDVVzKcgmG4RVL+9VIlqjyKEun2egO/5+9hF9z/IP1Z4d5k8knJ/qjrT78i+7vn/7Y+q+Dzpr9mePRV5LJ6vyj+WtL4oACN49ovDAUrfGB2f6XJfS83RGffuY/Aqj5Ws9Uqy5vVdR2DSfWG6gbDtA0fwUzusKc5/YOIUWgxTjoYCuBHxgt6GWImIuILIFAih0slf55wIfqIqwtxKIfi5tTzs2RShk6gjXiL1ovldasQf3gAQw8qPkmeys+asuAlY2/oOrAj/ZQHosAkVC91LDy9UxeQSrVYrjnKDpW/peAt42ViEeQCi5AFtcgEev9PRe2vtgYgpBkRw76WEw53ao5TPKXIe2F6pSZf28Udj///kNdxXgIQyeuf41y/Osc81QIkPNjLO6PHq7l37pqWe2HW+hfn5dXsvPRoCV3nFfk15SBOxzXe+Qs=</con:value></con:property><con:property><con:name>SAML_BAU</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_FAU2</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SAML_SAU</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>SchemaNameSpace</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>scriptsPath_Linux</con:name><con:value>/opt/dece/scripts</con:value></con:property><con:property><con:name>scriptsPath_Windows</con:name><con:value>C:\Scripts</con:value></con:property><con:property><con:name>SoldAsBundleId</con:name><con:value>urn:dece:bid:200002</con:value></con:property><con:property><con:name>SoldAsBundleOid</con:name><con:value>[32, 0, 2]</con:value></con:property><con:property><con:name>SoldAsCID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>SoldAsDisplayName</con:name><con:value>Avatar</con:value></con:property><con:property><con:name>SoldAsDisplayNameLanguage</con:name><con:value>en-US</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostb</con:name><con:value>qa1.b.uvvu.com</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa1.d.uvvu.com</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa1.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa1.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>443</con:value></con:property><con:property><con:name>targetsystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa1.s.uvvu.com</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa1.c.uvvu.com</con:value></con:property><con:property><con:name>TOU_AT</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_AU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_BE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CA</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_CH</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_DE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_FR</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_GB</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_IE</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_LU</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NL</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_NZ</con:name><con:value>20140811</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnRating</con:name><con:value>urn:dece:type:rating:</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>UserName</con:name><con:value>userget_firstuser20150417_122812</con:value></con:property><con:property><con:name>usernameFAU1</con:name><con:value>user_create_20130912_053316</con:value></con:property><con:property><con:name>UserOid</con:name><con:value>13E6DD9F1A76797AE05307991F0A593A</con:value></con:property><con:property><con:name>User_OID</con:name><con:value>E62D6215618F9EBCE0401F0A07992144</con:value></con:property><con:property><con:name>UUID</con:name><con:value>_a14312d6-757c-422e-a33d-2ec86f27e9b8</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>YOUTH_MIN_AGE</con:name><con:value>13</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>DMR_CID</con:name><con:value>urn:dece:cid:org:200002</con:value></con:property><con:property><con:name>DMR_APID</con:name><con:value>urn:dece:apid:org:200002</con:value></con:property><con:property><con:name>DMR_ALID</con:name><con:value>urn:dece:alid:org:200002</con:value></con:property><con:property><con:name>DMR_BID</con:name><con:value>urn:dece:bid:org:200002</con:value></con:property><con:property><con:name>enableFlakyScript</con:name><con:value>false</con:value></con:property><con:property><con:name>Flaky_Disabled</con:name><con:value>true</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep"><con:script>if(testStepResult.getTestStep().config.type.toString() == "restrequest")
{
                byte [] tempByteArrRequest = testStepResult.getRawRequestData();
                String tempRequest = new String(tempByteArrRequest);

                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Request>--------------------------------");
                log.info(tempRequest);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Request>--------------------------------");

                byte [] tempByteArrResponse = testStepResult.getRawResponseData();
                String tempResponse = new String(tempByteArrResponse);


                log.info("-----------------------------&lt;" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
                log.info(tempResponse);
                log.info("-----------------------------&lt;/" + testStepResult.getTestStep().getName() + " Response>--------------------------------");
}
</con:script></con:eventHandlers><con:sensitiveInformation/></con:soapui-project>