<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="RSAML" resourceRoot="" soapui-version="4.6.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AuthNRequest" type="rest" id="608525b4-4576-486c-bd56-b9183f71bb28" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint></con:endpoints><con:resource name="authNRequest POST" path="/rest/{MAJOR}/{MINOR}/loginservice/login" id="f7bc0205-8636-45d4-8bf3-6aa9b138257b"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="6470541a-5971-49db-9db1-0b9ab4034d59"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="authNRequest" mediaType="application/xml" postQueryString="false" id="21d96ed6-a45c-4ba9-80ea-c5d3e29f095c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="authNRequest Redirect" type="rest" id="15aba527-5452-495c-bc3b-d44cf29196b0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetURL}</con:endpoint></con:endpoints><con:resource name="AuthnRequest Redirect" path="/rest/{MAJOR}/{MINOR}/loginservice/login?SAMLRequest=${#TestCase#authnrequestSigBase64}&amp;SigAlg=${#TestCase#authrequestSigAlg}&amp;Signature=${#TestCase#authnrequestSigBase64}" id="0ca7e9cb-4c47-4f25-847a-7d659a2103f5"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#TestCase#versionMinor}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET" id="e57e219d-d1cf-4fd2-879f-1d352bbbda82"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="authnrequest redirect" mediaType="application/xml" id="4cf235d0-e40a-4f74-aafb-702f24481399"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="SubjectQuery" type="rest" basePath="" id="0f028d34-d374-448b-98b0-ed44c855ea98" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint></con:endpoints><con:resource name="SubjectQuery POST" path="/rest/{MAJOR}/{MINOR}/subjectquery/" id="231de910-7280-4dd4-a355-847746b09cab"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="cc3b6ff6-2018-478c-a557-d6e137d07c28"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="SubjectQuery POST" mediaType="application/xml" postQueryString="false" id="4b2f88c4-e12d-45f6-865e-fa745ffb08cd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="RSAML ACS" type="rest" id="f2b6e7ba-df4b-40ce-a2b2-e0ca46a01932" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="RSAML-ACS" path="/security/federation/saml/acs" id="9a124ad7-f528-4854-9872-3e6b4dd8f520"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="4cf66a53-6699-4a36-a61f-67ee563e6343"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:request name="RSAML_POST" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request>Samlresponse=${#TestCase#samlResponse}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="GET" method="GET" id="4cf66a53-6699-4a36-a61f-67ee563e6343"><con:settings/><con:parameters><con:parameter><con:name>SAMLResponse</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>SigAlg</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>Signature</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:xht="http://www.w3.org/1999/xhtml">xht:html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>303</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>302</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RSAML_GET" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request>Samlresponse=${#TestCase#samlResponse}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" id="46073b1c-91e2-411b-9c8f-312cee05424b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint></con:endpoints><con:resource name="STS" path="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}${#TestCase#audiencelist}" id="7bbc4b96-7f31-497e-84b6-62fd22634077"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#versionMajor}</con:default></con:parameter><con:parameter><con:name>MINOR</con:name><con:style>TEMPLATE</con:style><con:default>${#Project#versionMinor}</con:default></con:parameter></con:parameters><con:method name="POST" method="POST" id="3de3c6b9-b68c-41dc-9021-a32c98216aee"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain</con:mediaType><con:status>0 201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="STS to Coordinator" mediaType="application/xml" postQueryString="false" id="1ca5365d-e968-4b28-95fe-4baac3529d58"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?> <Credentials xmlns=${#Project#schemaCoordinator}">    <Username>${#TestCase#username}</Username>    <Password>${#TestCase#password</Password> </Credentials>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="SAML slo" type="rest" basePath="" id="995436db-d0ea-4d28-8510-bd207da4baa6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://${#Project#targetHostportal}:{#Project#targetPortportal}</con:endpoint><con:endpoint>https://qa.uvvu.com:7002</con:endpoint></con:endpoints><con:resource name="slo" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/slo" id="100c8ef9-90fe-492b-ad2b-27bf8898a963"><con:settings/><con:parameters/><con:method name="POST" method="POST" id="5c560a1c-6dde-46ad-b56b-00c8e8ffee49"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="slo" mediaType="application/xml" postQueryString="false" id="760bb477-3531-4bc6-92a3-9c5d1c80ec09"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${targetHostp}</con:endpoint><con:request>LogoutRequest =${#TestCase#samlResponse}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STSGet" type="rest" id="b9eb085e-7054-4690-8491-d846553aa15c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="STSGet" path="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/${assertionUUID}" id="509c27ea-6fff-47fb-88af-26e0cdca2905"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:style>TEMPLATE</con:style></con:parameter><con:parameter><con:name>MINOR</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>assertionUUID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET" id="c0935811-cbec-46d4-9e61-bfa605a63934"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=ISO-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="urn:oasis:names:tc:SAML:2.0:assertion">urn:Assertion</con:element></con:representation><con:request name="STSGet" mediaType="application/xml" id="9a9c8b2b-d258-4e60-b663-2d122c787548"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountCreate" type="rest" id="2b30ae52-1e81-4811-8b79-e68006314b10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint></con:endpoints><con:resource name="AccountCreate" path="/rest/{MAJOR}/{MINOR}/Account" id="5b4f3e1d-8176-40f8-a9d4-a5d4b3004292"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>MAJOR</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>MAJOR</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>MINOR</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>MINOR</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="UserCreate" path="/{AccountID}/User" id="3d13a802-4c48-4b9e-b92a-55e646b20818"><con:settings/><con:parameters/><con:method name="UserCreate" method="POST" id="947e7097-28a7-4b6a-8a46-832fbc02bcd2"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:User</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:request name="UserCreate" mediaType="application/xml" postQueryString="false" id="39941d17-b770-4dad-9d96-76005e351456"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="AccountCreate" method="POST" id="8093e7e0-124b-4745-abdd-42dbfb57654a"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="${Coordinator_Schema}">coor:Account</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/06/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>503 404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2015/03/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="AccountCreate" mediaType="application/xml" postQueryString="false" id="2445561b-93ab-4d69-a525-3da5309f10e7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="PolicyCreate" type="rest" id="02f0bd5a-d40a-46bb-8cea-9af602bfd637" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="PolicyCreate" path="/rest/{MAJOR}/{MINOR}/Account/{ACCT}/Policy/{PolicyClass}" id="02038d90-86cf-4286-b106-e962b01c7c4f"><con:settings/><con:parameters><con:parameter><con:name>MAJOR</con:name><con:value>MAJOR</con:value><con:style>TEMPLATE</con:style><con:default>MAJOR</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>MINOR</con:name><con:value>MINOR</con:value><con:style>TEMPLATE</con:style><con:default>MINOR</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>ACCT</con:name><con:value>ACCT</con:value><con:style>TEMPLATE</con:style><con:default>ACCT</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" method="POST" id="5e1439f1-9f02-4c6d-a47a-d352ccdbd02b"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="3525a0fa-1b4b-4901-8718-0f79f2c2b179"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="ACCT" value="${#Project#NODEACCID}"/>
  <con:entry key="PolicyClass" value="urn:dece:type:policy:TermsOfUse"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite name="API Test Cases" id="78b44118-040c-4f1c-b769-063207f5d845"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AuthnRequest POST SAML Binding" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7fd3686a-4064-4e39-b76a-be8116ab6b33"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="40e5a905-97ec-4c82-bc02-dfbd2a0a4e8b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("affiliates",null);
tC.setPropertyValue("authNxmlbody",null);
tC.setPropertyValue("authnRequest",null);


/*
*  Safey net...
*/

if (tC.getPropertyValue("authnVersion") == null || tC.getPropertyValue("authnVersion") == "null") {
	tC.setPropertyValue("authnVersion","2.0");
}
if (tC.getPropertyValue("authnProtocolBinding") == null || tC.getPropertyValue("authnProtocolBinding") == "null") {
	tC.setPropertyValue("authnProtocolBinding","urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post");
}
if (tC.getPropertyValue("authnIsPassive") == null || tC.getPropertyValue("authnIsPassive") == "null") {
	tC.setPropertyValue("authnIsPassive","false");
}
if (tC.getPropertyValue("authnForceAuthn") == null || tC.getPropertyValue("authnForceAuthn") == "null") {
	tC.setPropertyValue("authnForceAuthn","true");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from Invoking Test Case" id="3b804b39-5fa1-447f-8bbd-e3ffff0feb3d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

log.info 'callTSname='+callTSname;
log.info 'callTCname='+callTCname;

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("authNDestinationAction",null);
tC.setPropertyValue("authNIDAction",null);
tC.setPropertyValue("authNVersionAction",null);
tC.setPropertyValue("authNAudienceAction",null);
tC.setPropertyValue("authNSigningAction",null);
tC.setPropertyValue("authNIssuerAction",null);
tC.setPropertyValue("expectResultSamlRequestPost",null);
tC.setPropertyValue("authNSAMLRequestAction",null);

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("authNDestinationAction",callTC.getPropertyValue("authNDestinationAction"));
tC.setPropertyValue("authNIDAction",callTC.getPropertyValue("authNIDAction"));
tC.setPropertyValue("authNVersionAction",callTC.getPropertyValue("authNVersionAction"));
tC.setPropertyValue("authNAudienceAction",callTC.getPropertyValue("authNAudienceAction"));
tC.setPropertyValue("authNSigningAction",callTC.getPropertyValue("authNSigningAction"));
tC.setPropertyValue("authNIssuerAction",callTC.getPropertyValue("authNIssuerAction"));
tC.setPropertyValue("authNSAMLRequestAction",callTC.getPropertyValue("authNSAMLRequestAction"));
tC.setPropertyValue("affiliates",callTC.getPropertyValue("affiliates"));
tC.setPropertyValue("expectResultSamlRequestPost",callTC.getPropertyValue("expectResultSamlRequestPost"));

if (tC.getPropertyValue("expectResultSamlRequestPost") == null ||
	tC.getPropertyValue("expectResultSamlRequestPost") == "null") {
		tC.setPropertyValue("expectResultSamlRequestPost","SUCCESS")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="5987d7a5-254d-43b3-a2bf-4ea545e135aa"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = "http://www.decellc.org/schema/2010/10/dece";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

/*
*  AuthnRequest static attributes/element values
*/
String AssertionConsumerServiceURL = "https://node.example.com/samlp/responseHandler";
String destinationStr = tP.getPropertyValue("targetlAuthnDestination").toString();
String forceAuthnStr = tC.getPropertyValue("authnForceAuthn");
String idStr = "_" + genUtils.randomAlphaNumericString(13);
String isPassiveStr = tC.getPropertyValue("authnIsPassive");
String protocolBindingStr = tC.getPropertyValue("authnProtocolBinding").toString();
String versionStr = tC.getPropertyValue("authnVersion").toString();
String authNfile = tP.getPropertyValue("fileNameAuthnRequest").toString();
String nodeid = tC.getPropertyValue("nodeid").toString();
String affiliates = tC.getPropertyValue("affiliates").toString();
String versionMajor = tP.getPropertyValue("versionMajor").toString();
String versionMinor = tP.getPropertyValue("versionMinor").toString();
String urnNode = tP.getPropertyValue("urnNode").toString();
String xmlBody = "";
String Destination = "";

/*
*  Elements
*/
Element conditions;
Element audiencerestriction;
Element issuer;
Element audience;
/*
*  Create an nice clean dom
*/
try	{
	//Create instance of DocumentBuilderFactory
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	//Get the DocumentBuilder
	DocumentBuilder parser = factory.newDocumentBuilder();
	//Create blank DOM Document
	doc = parser.newDocument();
}
catch(Exception e) {
	log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
}
finally {
	Element root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");

	root.setAttribute("AssertionConsumerServiceURL",AssertionConsumerServiceURL);

	switch (tC.getPropertyValue("authNDestinationAction").toString()) {
		case "NULL":
			root.setAttribute("Destination","");
			break;	
		case "randomURLString":
			root.setAttribute("Destination","http://www.google.com/" + genUtils.randomAlphaNumericString(10) + "/" + genUtils.randomAlphaNumericString(25));
			break;			
		default:
			root.setAttribute("Destination",destinationStr);
			break;
	}
	
	root.setAttribute("ForceAuthn",forceAuthnStr);

	switch (tC.getPropertyValue("authNIDAction").toString()) {
		case "NULL":
			root.setAttribute("ID","");
			break;
		case "STATIC":
			root.setAttribute("ID","_1234567890");
			break;
		case "SINGLE_CHAR":
			root.setAttribute("ID",genUtils.randomAlphaNumericString(1));
			break;
		case "25_CHAR":
			root.setAttribute("ID",genUtils.randomAlphaNumericString(25));
			break;
		case "UUID":
			root.setAttribute("ID",genUtils.randomUUID());
			break;
		case "EXCUDE":
			break;
		default:
			root.setAttribute("ID",idStr);
			break;
	}
	root.setAttribute("IsPassive",isPassiveStr);
	root.setAttribute("IssueInstant","2010-12-07T14:54:09.353Z");
	root.setAttribute("ProtocolBinding",protocolBindingStr);
	
	switch (tC.getPropertyValue("authNVersionAction").toString()) {
		case "NULL":
			root.setAttribute("Version","");
			break;
		case "1.0":
			root.setAttribute("Version","1.0");
			break;
		case "EXCUDE":
			break;
		default:
			root.setAttribute("Version",versionStr);
			break;
	}

	/*
	*	Construct the issuer
	*/
	switch (tC.getPropertyValue("authNIssuerAction").toString()) {
		case "DOES_NOT_EXIST":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + genUtils.randomNumericString(35));
			issuer.appendChild(textIssuer);
			break;
		case "NULL":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			break;
		case "URN_ONLY":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode);
			issuer.appendChild(textIssuer);
			break;	
		case "NODEID_ONLY":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(nodeid);
			issuer.appendChild(textIssuer);
			break;
		case "RANDOM_STRINGS":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + genUtils.randomMixedCharacterString(150));
			issuer.appendChild(textIssuer);
			break;	
		default:
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + nodeid);
			issuer.appendChild(textIssuer);
			break;
	}


	/*
	*  Construct the Conditions
	*/
	
	if (affiliates != "null" &amp;&amp; affiliates.length() > 0) {
		conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
		audiencerestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");
		
		affiliateArray = affiliates.split(",")
		for (audienceMember in affiliateArray) {
			audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
			Text textAudience = doc.createTextNode(urnNode + audienceMember);
			audience.appendChild(textAudience);
			audiencerestriction.appendChild(audience);	
		}
		
		conditions.appendChild(audiencerestriction);
	} else {
		switch (tC.getPropertyValue("authNAudienceAction").toString()) {
			case "EMPTY_CONDITION":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				root.appendChild(conditions);
				break;
			case "EMPTY_AUDIENCE":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;
			case "URN_ONLY":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				Text textAudience = doc.createTextNode(urnNode);
				audience.appendChild(textAudience);
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;
			case "NODEID_ONLY":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				Text textAudience = doc.createTextNode(nodeid);
				audience.appendChild(textAudience);
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;

		}
	}

	/*
	* Add Issuer element to AuthnRequest.
	*/
	root.appendChild(issuer);
	
	/*
	* Add Conditions element to AuthnRequest.
	*/
	if (affiliates != "null" &amp;&amp; affiliates.length() > 0) {
		root.appendChild(conditions);
	}
		
	/*
	* Add AuthnRequest element to tree.
	*/
	doc.appendChild(root);
}



/*
* Turn the DOM into a String to display here...
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String xml = writer.toString();
this.log.info xml;

/*
*  Save the new body
*/
tC.setPropertyValue("authNxmlbody",xml);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(authNfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(tC.getPropertyValue("authNxmlbody").toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}






</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="e3058840-58ac-4488-b2a6-457a4b6cdbd1"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2Prefix = "saml2";
String saml2pPrefix = "saml2p";

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String authNfile   = tP.getPropertyValue("fileNameAuthnRequest").toString();
String signedAuthN = tP.getPropertyValue("fileNameSignedAuthnRequest").toString();
String authNSigningAction = tC.getPropertyValue("authNSigningAction").toString();

log.info "authNfile[$authNfile]";
log.info "signedAuthN[$signedAuthN]";
log.info "myKeyStore[$myKeyStore]";
log.info "authNSigningAction[$authNSigningAction]";

if (authNSigningAction != "SKIP") {
	// Create a DOM XMLSignatureFactory that will be used to
	// generate the enveloped signature.
	XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

	// Create a Reference to the enveloped document (in this case,
	// you are signing the whole document, so a URI of "" signifies
	// that, and also specify the SHA1 digest algorithm and
	// the ENVELOPED Transform.
	Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
 	  (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

	// Create the SignedInfo.
	SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
 	   fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

	// Load the KeyStore and get the signing key and certificate.
	KeyStore ks = KeyStore.getInstance("JKS");
	ks.load(new FileInputStream(myKeyStore), "testing".toCharArray());
	KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("selfsigned", new KeyStore.PasswordProtection("testing".toCharArray()));
	X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

	// Create the KeyInfo containing the X509Data.
	KeyInfoFactory kif = fac.getKeyInfoFactory();
	List x509Content = new ArrayList();
	x509Content.add(cert.getSubjectX500Principal().getName());
	x509Content.add(cert);
	X509Data xd = kif.newX509Data(x509Content);
	KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

	// Instantiate the document to be signed.
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	dbf.setNamespaceAware(true);
	//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
	//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
	log.info "DocumentBuilderFactory -- authNfile[$authNfile]";
	Document doc = dbf.newDocumentBuilder().parse(authNfile);

	// Create a DOMSignContext and specify the RSA PrivateKey and
	// location of the resulting XMLSignature's parent element.
	DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

	// Create the XMLSignature, but don't sign it yet.
	XMLSignature signature = fac.newXMLSignature(si, ki);

	// Marshal, generate, and sign the enveloped signature.
	signature.sign(dsc);

	// Output the resulting document.
	OutputStream os = new FileOutputStream(signedAuthN);
	TransformerFactory tf = TransformerFactory.newInstance();
	Transformer trans = tf.newTransformer();
	trans.transform(new DOMSource(doc), new StreamResult(os));
	os.close();
} else {
	/* 
	*  This code will just copy the AuthnRequest xml file
	*  as is with no signature.
	*/
	try {
	// Create channel on the source
	FileChannel srcChannel = new FileInputStream(authNfile).getChannel();

	// Create channel on the destination
	FileChannel dstChannel = new FileOutputStream(signedAuthN).getChannel();

	// Copy file contents from source to destination
	dstChannel.transferFrom(srcChannel, 0, srcChannel.size());

	// Close the channels
	srcChannel.close();
	dstChannel.close();

	} catch (IOException e) {
		log.info "Error doing FileChannel - $e";
	} 
}

if ( authNSigningAction == "INVALIDATE") {
	String invalidId = "";
	
	log.info "PATTY Here!";
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc2 = dBuilder.parse(signedAuthN);

	Element root = doc2.getDocumentElement();
	invalidId = root.getAttribute("ID");

	/*
	*  Change the ID...
	*/
	invalidId = "_sugarplumfairy";

	/*
	*  Set the ID
	*/
	root.setAttribute("ID",invalidId);

	/*
	*  Output the updated document.
	*/
  	OutputStream os2 = new FileOutputStream(signedAuthN);
	TransformerFactory tf2 = TransformerFactory.newInstance();
	Transformer trans2 = tf2.newTransformer();
	trans2.transform(new DOMSource(doc2), new StreamResult(os2));
	os2.close();
}
	




</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml" id="3090937b-5eef-403e-99b8-775e3e6b726d"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String signedAuthNfile = tP.getPropertyValue("fileNameSignedAuthnRequest");

file = new File(signedAuthNfile);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) 
{ 
                throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();

String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));

log.info base64Str;

tC.setPropertyValue("authnRequest", base64Str);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem for AuthnRequest" id="8c07f136-0858-4fe2-9ad5-6edec42238d9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - authNRequest");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "500500":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\500500.pem";
	break;
	case "0910":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "0914":  // DLP
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "0912":  // RTR
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "0701":
		keyStorePath = "I:\\deceAPI\\certs\\999.pem";
	break;
	case "25":
		keyStorePath = "I:\\deceAPI\\certs\\25_concat.pem";
	break;
	case "26":
		keyStorePath = "I:\\deceAPI\\certs\\26_concat.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\stscerts\\80080010.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="SAMLRequest string modifications" id="ba1ac4c4-9f95-474d-8324-4b3dd6777d75"><con:settings/><con:config><script>import java.lang.StringBuffer;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String authnRequest = "";

switch (tC.getPropertyValue("authNSAMLRequestAction")) {
	case "NULL":
		tC.setPropertyValue("authnRequest",null);
		break;
	case "LOWER":
		authnRequest = tC.getPropertyValue("authnRequest").toString().toLowerCase();
		tC.setPropertyValue("authnRequest",authnRequest);
		break;
	case "UPPER":
		authnRequest = tC.getPropertyValue("authnRequest").toString().toUpperCase();
		tC.setPropertyValue("authnRequest",authnRequest);
		break;
	case "INVALIDATE":
		authnRequest = tC.getPropertyValue("authnRequest");
		try {
			StringBuffer s = new StringBuffer(authnRequest);

			s.setCharAt((int)2, (char)'Z');
			s.setCharAt((int)6, (char)'G');
			s.setCharAt((int)60, (char)'1');
			s.setCharAt((int)200, (char)'x');
		
			authnRequest = s.toString();
		}
		catch (Throwable e) {
			log.info "ERROR! StringBuffer issue - $e";
		}
		finally {
			tC.setPropertyValue("authnRequest",authnRequest);
		}
		break;
}</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - authNRequest" id="2202d58c-61b7-4a4e-b0aa-9bc0b5d117cc"><con:settings/><con:config service="AuthNRequest" resourcePath="/rest/{MAJOR}/{MINOR}/loginservice/login" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - authNRequest" mediaType="application/xml" postQueryString="false" accept="text/html, application/xml" sslKeystore="80080010.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request>SAMLRequest=${#TestCase#authnRequest}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" id="b946a1ab-fb7f-40e6-9e23-831778de165a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - authNRequest');
def expBody = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Perform Verifications on Response Headers and Body" id="00120cb5-7a55-4f94-9f62-d0895069c423"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String httpBody = tC.getPropertyValue("httpBody").toString();
String expectedResult = tC.getPropertyValue("expectResultSamlRequestPost");
String expectPasswordPhase = "";
String expectStrings = "";
String expectLoginPhase = "";
String expectLinkMyAccounts = "";
String expectReason = "";
String expectOriginalRequest = "";
String expectErrorLink = "";
String expectErrorId = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPcontenttype = "text/html;charset=iso-8859-1";
String recvHTTPstatus = tC.getPropertyValue("httpStatus").toString();
String recvHTTPcontentType = tC.getPropertyValue("httpContentType").toString();
String recvHTTPcontentLocation = tC.getPropertyValue("httpContentLocation").toString();
int recvHTTPcontentLength = tC.getPropertyValue("httpContentLength").toInteger();

log.info "expectedResult[$expectedResult]";

switch (expectedResult) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectReason = "Forbidden";
		expectOriginalRequest = "";
		expectErrorLink = "";
		expectErrorId = "Forbidden";
		expectHTTPcontenttype = "application/xml";
		break;
	case "ULTRAVIOLET_ERROR_PAGE":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "text/html; charset=UTF-8";
		expectStrings = "Please try again or contact your Customer Support representative,error-response_Error";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "text/html; charset=UTF-8";
		expectStrings = "Please enter username,Please enter password";
		break;

}
/*
*   VALIDATIONS
*/

// HTTP header status
log.info "recvHTTPstatus[$recvHTTPstatus] - expectHTTPstatus[$expectHTTPstatus]";
assert recvHTTPstatus == recvHTTPstatus;

//Content-Length
log.info "recvHTTPcontentLength[$recvHTTPcontentLength] greater than zero";
assert recvHTTPcontentLength > 0;

//No Content-Location
log.info "recvHTTPcontentLocation[$recvHTTPcontentLocation] is NULL";
assert recvHTTPcontentLocation == "null";

//Content-Type
log.info "recvHTTPcontentType[$recvHTTPcontentType] - expectHTTPcontenttype[$expectHTTPcontenttype]";
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

/*
*  Verify Body attributes
*/
switch (expectedResult) {
	case "SUCCESS":
	case "ULTRAVIOLET_ERROR_PAGE":
		String[] temp;

		temp = expectStrings.split(",");

		for(int i =0; i &lt; temp.length ; i++) {
			log.info "expectString[" + temp[i] + "] is present";
			assert httpBody.lastIndexOf(temp[i]) != -1;
		}
	break;
	case "FORBIDDEN":
		try {
			def myXML = new XmlSlurper().parseText(httpBody);
		}
		catch (Throwable e) {
			log.info "XmlSlurper() creation failed!  Reason - " + e;
		}
		finally {
			String recvErrorID = myXML.Error[0].@ErrorID.text();
			String recvReason = myXML.Error[0].Reason;
			String recvOriginalRequest = myXML.Error[0].OriginalRequest;
			String recvErrorLink = myXML.Error[0].ErrorLink;

			log.info "ErrorID - expectErrorId[$expectErrorId] recvErrorID[$recvErrorID]";
			assert expectErrorId == recvErrorID;
			log.info "Reason - expectReason[$expectReason] recvReason[$recvReason]";
			assert expectReason == recvReason;
			log.info "OriginalRequest - expectOriginalRequest[$expectOriginalRequest] recvOriginalRequest[$recvOriginalRequest]";
			assert expectOriginalRequest == recvOriginalRequest;
			log.info "ErrorLink - expectErrorLink[$expectErrorLink] recvErrorLink[$recvErrorLink]";
			assert expectErrorLink == recvErrorLink;
		}
	break;
	default:
		log.info "expectPasswordPhase[$expectPasswordPhase] is NOT present";
		assert httpBody.lastIndexOf(expectPasswordPhase) == -1;

		log.info "expectLoginPhase[$expectLoginPhase] is NOT present";
		assert httpBody.lastIndexOf(expectLoginPhase) == -1;
	break;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return Properties to calling Test Case" disabled="true" id="38401a8d-4f90-4bca-bc42-31658b778e80"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("authPostSAMLRequest",tC.getPropertyValue("authnRequest"));
	callTC.setPropertyValue("authnxml",tC.getPropertyValue("authnxml"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>affiliates</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNDestinationAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authnForceAuthn</con:name><con:value>true</con:value></con:property><con:property><con:name>authNIDAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authnIsPassive</con:name><con:value>false</con:value></con:property><con:property><con:name>authnProtocolBinding</con:name><con:value>urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post</con:value></con:property><con:property><con:name>authnRequest</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authnVersion</con:name><con:value>2.0</con:value></con:property><con:property><con:name>authNxmlbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectResultSamlRequestPost</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpBody</con:name><con:value><![CDATA[
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

    <body onload="document.forms[0].submit()">
        <noscript>
            <p>
                <strong>Note:</strong> Since your browser does not support JavaScript,
                you must press the Continue button once to proceed.
            </p>
        </noscript>

        <form action="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php" method="post">
            <div>
                
                
                <input type="hidden" name="SAMLResponse" value="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cDovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NhbWwvZHVtcGN1c3RvbWVycG9zdC5waHAiIElEPSJ1cm46ZGVjZTpvcmc6b3JnOmRlY2U6bmV1c3RhcjppZHAiIEluUmVzcG9uc2VUbz0iX29mYjFKbVpnNWtwU0ciIElzc3VlSW5zdGFudD0iMjAxMS0wNi0yOFQxNzowMTozMS42NTdaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiN1cm46ZGVjZTpvcmc6b3JnOmRlY2U6bmV1c3RhcjppZHAiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImRzIHNhbWwyIHNhbWwycCB4cyB4c2kiIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPm0rd1QwaCsrd2RZWkVMaGlHaWRIbnJTSlU0QT08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CkQ0T2JUWDJ6RDczUFdSZFY2TXZ3UGR2dDdYRDZGcnUzeDZKK0NvUlVoSndOdWhjY1RMWERQRUgrOWpQaXMyTm5kRVhlQmVBclJGU1MKcjdNV1Q2TXNyaFoyWEROL0JZd0FkMHErR2RoYWxaTHJrdEFoNFE5QWowVitzeE1XUXhYZUpFNXZ2ZHErdVFyeEg2ak9IVDZxU1ZmbQoxM3NOaUJXWGlaZnEzRkZBZUFZPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8L2RzOlNpZ25hdHVyZT48c2FtbDJwOlN0YXR1cyB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlJlc3BvbmRlciI+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOkF1dGhuRmFpbGVkIi8+PC9zYW1sMnA6U3RhdHVzQ29kZT48c2FtbDJwOlN0YXR1c01lc3NhZ2U+Tm9kZV9zdGF0dXNfaW5hY3RpdmU8L3NhbWwycDpTdGF0dXNNZXNzYWdlPjxzYW1sMnA6U3RhdHVzRGV0YWlsPjxzYW1sMjpBdHRyaWJ1dGUgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRoaXMgTm9kZSBpcyBub3QgYWN0aXZlPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwycDpTdGF0dXNEZXRhaWw+PC9zYW1sMnA6U3RhdHVzPjwvc2FtbDJwOlJlc3BvbnNlPg=="/>
            </div>
            <noscript>
                <div>
                    <input type="submit" value="Continue"/>
                </div>
            </noscript>
        </form>

    </body>
</html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">

    <body onload="document.forms[0].submit()">
        <noscript>
            <p>
                <strong>Note:</strong> Since your browser does not support JavaScript,
                you must press the Continue button once to proceed.
            </p>
        </noscript>

        <form action="http://stdecqavutl1.va.neustar.com:2485/saml/dumpcustomerpost.php" method="post">
            <div>
                
                
                <input type="hidden" name="SAMLResponse" value="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cDovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NhbWwvZHVtcGN1c3RvbWVycG9zdC5waHAiIElEPSJ1cm46ZGVjZTpvcmc6b3JnOmRlY2U6bmV1c3RhcjppZHAiIEluUmVzcG9uc2VUbz0iX29mYjFKbVpnNWtwU0ciIElzc3VlSW5zdGFudD0iMjAxMS0wNi0yOFQxNzowMTozMS43MThaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlNpZ25lZEluZm8+CjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4KPGRzOlJlZmVyZW5jZSBVUkk9IiN1cm46ZGVjZTpvcmc6b3JnOmRlY2U6bmV1c3RhcjppZHAiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9ImRzIHNhbWwyIHNhbWwycCB4cyB4c2kiIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybT4KPC9kczpUcmFuc2Zvcm1zPgo8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KPGRzOkRpZ2VzdFZhbHVlPlJKdDBDVXhsaGZlTS9Qb3EvcXRJVjlyUEpaOD08L2RzOkRpZ2VzdFZhbHVlPgo8L2RzOlJlZmVyZW5jZT4KPC9kczpTaWduZWRJbmZvPgo8ZHM6U2lnbmF0dXJlVmFsdWU+CmVkYi81Ky9ybUxVT2lPUkdGUlZ1ajdCeTc0NWdOeGZmK2RMWmZUM25FcHdLSlRLcjhmWEVjSm8wa0dYYVpsWjZ1WGlHMmxoR2ZNWXAKMWV6Y1VoWHV3Q1NTSWQ3dmFpVTF1U0lHRmxiZjJyYyt5RHo0U1crSkNHSWliZGk5RVpIOTlJZGFTWWJYcWtwUmRubU1KWjhxRXVFQgptK0w1bEtOZVJibjdhQnBGekJrPQo8L2RzOlNpZ25hdHVyZVZhbHVlPgo8L2RzOlNpZ25hdHVyZT48c2FtbDJwOlN0YXR1cyB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlJlc3BvbmRlciI+PHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOkF1dGhuRmFpbGVkIi8+PC9zYW1sMnA6U3RhdHVzQ29kZT48c2FtbDJwOlN0YXR1c01lc3NhZ2U+Tm9kZV9zdGF0dXNfaW5hY3RpdmU8L3NhbWwycDpTdGF0dXNNZXNzYWdlPjxzYW1sMnA6U3RhdHVzRGV0YWlsPjxzYW1sMjpBdHRyaWJ1dGUgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPlRoaXMgTm9kZSBpcyBub3QgYWN0aXZlPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwycDpTdGF0dXNEZXRhaWw+PC9zYW1sMnA6U3RhdHVzPjwvc2FtbDJwOlJlc3BvbnNlPg=="/>
            </div>
            <noscript>
                <div>
                    <input type="submit" value="Continue"/>
                </div>
            </noscript>
        </form>

    </body>
</html>]]></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value>7078</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>text/html;charset=UTF-8</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>nodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>sName</con:name><con:value>AuthnRequest POST Binding Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_100101 - AuthN - POST - SAML Node_status_inactive - saml2:Issuer has NODE.NODE_STATUS of 'suspended'</con:value></con:property><con:property><con:name>authNVersionAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNAudienceAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNSigningAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNIssuerAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNSAMLRequestAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AuthnRequest GET SAML Binding" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="02e435cb-8bf5-4e1b-b1e5-462723f36515"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="675bf2b9-0c44-4c6c-ab0e-cf705e133825"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("affiliates",null);
tC.setPropertyValue("authNxmlbody",null);
tC.setPropertyValue("authnRequest",null);


/*
*  Safey net...
*/

if (tC.getPropertyValue("authnVersion") == null || tC.getPropertyValue("authnVersion") == "null") {
	tC.setPropertyValue("authnVersion","2.0");
}
if (tC.getPropertyValue("authnProtocolBinding") == null || tC.getPropertyValue("authnProtocolBinding") == "null") {
	tC.setPropertyValue("authnProtocolBinding","urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post");
}
if (tC.getPropertyValue("authnIsPassive") == null || tC.getPropertyValue("authnIsPassive") == "null") {
	tC.setPropertyValue("authnIsPassive","false");
}
if (tC.getPropertyValue("authnForceAuthn") == null || tC.getPropertyValue("authnForceAuthn") == "null") {
	tC.setPropertyValue("authnForceAuthn","true");
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Properties from Invoking Test Case" id="103bab81-f8cd-4997-920c-2784470e793e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("authNDestinationAction",null);
tC.setPropertyValue("authNIDAction",null);
tC.setPropertyValue("authNVersionAction",null);
tC.setPropertyValue("authNAudienceAction",null);
tC.setPropertyValue("authNSigningAction",null);
tC.setPropertyValue("authNIssuerAction",null);
tC.setPropertyValue("expectResultSamlRequestPost",null);
tC.setPropertyValue("authNSAMLRequestAction",null);

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("authNDestinationAction",callTC.getPropertyValue("authNDestinationAction"));
tC.setPropertyValue("authNIDAction",callTC.getPropertyValue("authNIDAction"));
tC.setPropertyValue("authNVersionAction",callTC.getPropertyValue("authNVersionAction"));
tC.setPropertyValue("authNAudienceAction",callTC.getPropertyValue("authNAudienceAction"));
tC.setPropertyValue("authNSigningAction",callTC.getPropertyValue("authNSigningAction"));
tC.setPropertyValue("authNIssuerAction",callTC.getPropertyValue("authNIssuerAction"));
tC.setPropertyValue("authNSAMLRequestAction",callTC.getPropertyValue("authNSAMLRequestAction"));
tC.setPropertyValue("affiliates",callTC.getPropertyValue("affiliates"));
tC.setPropertyValue("expectResultSamlRequestPost",callTC.getPropertyValue("expectResultSamlRequestPost"));

if (tC.getPropertyValue("expectResultSamlRequestPost") == null ||
	tC.getPropertyValue("expectResultSamlRequestPost") == "null") {
		tC.setPropertyValue("expectResultSamlRequestPost","SUCCESS")
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Body" id="0f255e43-e9e5-4e7f-bdb1-1b6269920fe2"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = "http://www.decellc.org/schema/2010/10/dece";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

/*
*  AuthnRequest static attributes/element values
*/
String AssertionConsumerServiceURL = "https://node.example.com/samlp/responseHandler";
String destinationStr = tP.getPropertyValue("targetlAuthnDestination").toString();
String forceAuthnStr = tC.getPropertyValue("authnForceAuthn");
String idStr = "_" + genUtils.randomAlphaNumericString(13);
String isPassiveStr = tC.getPropertyValue("authnIsPassive");
String protocolBindingStr = tC.getPropertyValue("authnProtocolBinding").toString();
String versionStr = tC.getPropertyValue("authnVersion").toString();
String authNfile = tP.getPropertyValue("fileNameAuthnRequest").toString();
String nodeid = tC.getPropertyValue("nodeid").toString();
String affiliates = tC.getPropertyValue("affiliates").toString();
String versionMajor = tP.getPropertyValue("versionMajor").toString();
String versionMinor = tP.getPropertyValue("versionMinor").toString();
String urnNode = tP.getPropertyValue("urnNode").toString();
String xmlBody = "";
String Destination = "";

/*
*  Elements
*/
Element conditions;
Element audiencerestriction;
Element issuer;
Element audience;
/*
*  Create an nice clean dom
*/
try	{
	//Create instance of DocumentBuilderFactory
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	//Get the DocumentBuilder
	DocumentBuilder parser = factory.newDocumentBuilder();
	//Create blank DOM Document
	doc = parser.newDocument();
}
catch(Exception e) {
	log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
}
finally {
	Element root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");

	root.setAttribute("AssertionConsumerServiceURL",AssertionConsumerServiceURL);

	switch (tC.getPropertyValue("authNDestinationAction").toString()) {
		case "NULL":
			root.setAttribute("Destination","");
			break;	
		case "randomURLString":
			root.setAttribute("Destination","http://www.google.com/" + genUtils.randomAlphaNumericString(10) + "/" + genUtils.randomAlphaNumericString(25));
			break;			
		default:
			root.setAttribute("Destination",destinationStr);
			break;
	}
	
	root.setAttribute("ForceAuthn",forceAuthnStr);

	switch (tC.getPropertyValue("authNIDAction").toString()) {
		case "NULL":
			root.setAttribute("ID","");
			break;
		case "STATIC":
			root.setAttribute("ID","_1234567890");
			break;
		case "SINGLE_CHAR":
			root.setAttribute("ID",genUtils.randomAlphaNumericString(1));
			break;
		case "25_CHAR":
			root.setAttribute("ID",genUtils.randomAlphaNumericString(25));
			break;
		case "UUID":
			root.setAttribute("ID",genUtils.randomUUID());
			break;
		case "EXCUDE":
			break;
		default:
			root.setAttribute("ID",idStr);
			break;
	}
	root.setAttribute("IsPassive",isPassiveStr);
	root.setAttribute("IssueInstant","2010-12-07T14:54:09.353Z");
	root.setAttribute("ProtocolBinding",protocolBindingStr);
	
	switch (tC.getPropertyValue("authNVersionAction").toString()) {
		case "NULL":
			root.setAttribute("Version","");
			break;
		case "1.0":
			root.setAttribute("Version","1.0");
			break;
		case "EXCUDE":
			break;
		default:
			root.setAttribute("Version",versionStr);
			break;
	}

	/*
	*	Construct the issuer
	*/
	switch (tC.getPropertyValue("authNIssuerAction").toString()) {
		case "DOES_NOT_EXIST":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + genUtils.randomNumericString(35));
			issuer.appendChild(textIssuer);
			break;
		case "NULL":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			break;
		case "URN_ONLY":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode);
			issuer.appendChild(textIssuer);
			break;	
		case "NODEID_ONLY":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(nodeid);
			issuer.appendChild(textIssuer);
			break;
		case "RANDOM_STRINGS":
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + genUtils.randomMixedCharacterString(150));
			issuer.appendChild(textIssuer);
			break;	
		default:
			issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
			Text textIssuer = doc.createTextNode(urnNode + nodeid);
			issuer.appendChild(textIssuer);
			break;
	}


	/*
	*  Construct the Conditions
	*/
	
	if (affiliates != "null" &amp;&amp; affiliates.length() > 0) {
		conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
		audiencerestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");
		
		affiliateArray = affiliates.split(",")
		for (audienceMember in affiliateArray) {
			audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
			Text textAudience = doc.createTextNode(urnNode + audienceMember);
			audience.appendChild(textAudience);
			audiencerestriction.appendChild(audience);	
		}
		
		conditions.appendChild(audiencerestriction);
	} else {
		switch (tC.getPropertyValue("authNAudienceAction").toString()) {
			case "EMPTY_CONDITION":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				root.appendChild(conditions);
				break;
			case "EMPTY_AUDIENCE":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;
			case "URN_ONLY":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				Text textAudience = doc.createTextNode(urnNode);
				audience.appendChild(textAudience);
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;
			case "NODEID_ONLY":
				conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
				audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
				Text textAudience = doc.createTextNode(nodeid);
				audience.appendChild(textAudience);
				conditions.appendChild(audience);
				root.appendChild(conditions);
				break;

		}
	}

	/*
	* Add Issuer element to AuthnRequest.
	*/
	root.appendChild(issuer);
	
	/*
	* Add Conditions element to AuthnRequest.
	*/
	if (affiliates != "null" &amp;&amp; affiliates.length() > 0) {
		root.appendChild(conditions);
	}
		
	/*
	* Add AuthnRequest element to tree.
	*/
	doc.appendChild(root);
}



/*
* Turn the DOM into a String to display here...
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String xml = writer.toString();
this.log.info xml;

/*
*  Save the new body
*/
tC.setPropertyValue("authNxmlbody",xml);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(authNfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(tC.getPropertyValue("authNxmlbody").toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}






</script></con:config></con:testStep><con:testStep type="groovy" name="Create and url encode SigAlg Query Parameter" id="f0bea48f-3161-42a7-af5f-e9520c33eabf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

tC.setPropertyValue("sigalg",null);

String sa = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";

/*
*  URL encode the base64 encoded data
*/
String urlencodedD = URLEncoder.encode(sa, 'UTF-8');

log.info "url encoded data --> " + urlencodedD;

tC.setPropertyValue("sigalg",urlencodedD);</script></con:config></con:testStep><con:testStep type="groovy" name="Perform deflate, base64 and url encode AuthnRequest XML" id="b56e2bc5-33b9-4224-b162-a80220050936"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;
import java.util.zip.Deflater;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("authnRequestEncoded",null);

String authnRequest = tC.getPropertyValue("authnRequest");

byte[] input = authnRequest.getBytes();

// Create the compressor with highest level of compression
Deflater compressor = new Deflater();
compressor.setLevel(Deflater.BEST_COMPRESSION);

// Give the compressor the data to compress
compressor.setInput(input);
compressor.finish();

// Create an expandable byte array to hold the compressed data.
// You cannot use an array that's the same size as the orginal because
// there is no guarantee that the compressed data will be smaller than
// the uncompressed data.
ByteArrayOutputStream bos = new ByteArrayOutputStream(input.length);

// Compress the data
byte[] buf = new byte[1024];
while (!compressor.finished()) {
	int count = compressor.deflate(buf);
	bos.write(buf, 0, count);
}
try {
	bos.close();
} catch (IOException e) {
	log.info "ERROR - Compressor issue - $e";
}

//  Get the compressedData
byte[] compressedData = bos.toByteArray();

/*
*  base64 encode the compressed data.
*/
String base64Str = URLEncoder.encode(Base64.encodeBytes(compressedData));

log.info "base64 encoded data --> " + base64Str;

/*
*  URL encode the base64 encoded data
*/
String urlencodedD = URLEncoder.encode(base64Str, 'UTF-8');

urlencodedD = urlencodedD.trim();
log.info "url encoded data --> " + urlencodedD;

tC.setPropertyValue("authnRequestEncoded",urlencodedD);</script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="1a8c6750-42f7-427b-b51f-695821f48693"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import org.xml.sax.InputSource;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2Prefix = "saml2";
String saml2pPrefix = "saml2p";

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String authNUrlFile = tP.getPropertyValue("fileNameAuthnRequestURL").toString();
String signedAuthN = tP.getPropertyValue("fileNameSignedAuthnRequest").toString();
String authNSigningAction = tC.getPropertyValue("authNSigningAction").toString();


/*
*  Construct the URL string for signing...
*/
String urlStr = "SAMLRequest=" + tC.getPropertyValue("authnRequestEncoded").toString() +
	"&amp;SigAlg=" + tC.getPropertyValue("sigalg").toString();
	

log.info "urlStr[$urlStr]";

/*
*  Write the URL to a file
*/
BufferedWriter outURL = new BufferedWriter(new FileWriter(authNUrlFile));
outURL.write(urlStr);
outURL.close();
    	    
if (authNSigningAction != "SKIP") {
	// Create a DOM XMLSignatureFactory that will be used to
	// generate the enveloped signature.
	XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

	// Create a Reference to the enveloped document (in this case,
	// you are signing the whole document, so a URI of "" signifies
	// that, and also specify the SHA1 digest algorithm and
	// the ENVELOPED Transform.
	Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
 	  (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

	// Create the SignedInfo.
	SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
 	   fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

	// Load the KeyStore and get the signing key and certificate.
	KeyStore ks = KeyStore.getInstance("JKS");
	ks.load(new FileInputStream(myKeyStore), "testing".toCharArray());
	KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("selfsigned", new KeyStore.PasswordProtection("testing".toCharArray()));
	X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

	// Create the KeyInfo containing the X509Data.
	KeyInfoFactory kif = fac.getKeyInfoFactory();
	List x509Content = new ArrayList();
	x509Content.add(cert.getSubjectX500Principal().getName());
	x509Content.add(cert);
	X509Data xd = kif.newX509Data(x509Content);
	KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));

	//Instantiate the document to be signed.
	//DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	//dbf.setNamespaceAware(true);
	//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
	//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(authNfile));
	//Document doc = dbf.newDocumentBuilder().parse(authNfile);
	//Document doc = dbf.newDocumentBuilder();

	// Create a DOMSignContext and specify the RSA PrivateKey and
	// location of the resulting XMLSignature's parent element.
	//DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());
	//DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), urlStr.getBytes());

	// Create the XMLSignature, but don't sign it yet.
	XMLSignature signature = fac.newXMLSignature(si, ki);

	// Marshal, generate, and sign the enveloped signature.
	signature.sign(urlStr.getBytes());
	log.info "PATTY YOU ARE HERE";

	// Output the resulting document.
	OutputStream os = new FileOutputStream(signedAuthN);
	TransformerFactory tf = TransformerFactory.newInstance();
	Transformer trans = tf.newTransformer();
	trans.transform(new DOMSource(doc), new StreamResult(os));
	os.close();
} else {
	/* 
	*  This code will just copy the AuthnRequest xml file
	*  as is with no signature.
	*/
	try {
	// Create channel on the source
	FileChannel srcChannel = new FileInputStream(authNfile).getChannel();

	// Create channel on the destination
	FileChannel dstChannel = new FileOutputStream(signedAuthN).getChannel();

	// Copy file contents from source to destination
	dstChannel.transferFrom(srcChannel, 0, srcChannel.size());

	// Close the channels
	srcChannel.close();
	dstChannel.close();

	} catch (IOException e) {
		log.info "Error doing FileChannel - $e";
	} 
}

if ( authNSigningAction == "INVALIDATE") {
	String invalidId = "";
	
	log.info "PATTY Here!";
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc2 = dBuilder.parse(signedAuthN);

	Element root = doc2.getDocumentElement();
	invalidId = root.getAttribute("ID");

	/*
	*  Change the ID...
	*/
	invalidId = "_sugarplumfairy";

	/*
	*  Set the ID
	*/
	root.setAttribute("ID",invalidId);

	/*
	*  Output the updated document.
	*/
  	OutputStream os2 = new FileOutputStream(signedAuthN);
	TransformerFactory tf2 = TransformerFactory.newInstance();
	Transformer trans2 = tf2.newTransformer();
	trans2.transform(new DOMSource(doc2), new StreamResult(os2));
	os2.close();
}
	




</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Out the &lt;Signature> Element" disabled="true" id="e7e0a8b3-902a-4d1a-908a-2dafb9c5c2d0"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.nio.channels.FileChannel;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("authnSignature",null);

String authNfile   = tP.getPropertyValue("fileNameAuthnRequest").toString();
String signedAuthN = tP.getPropertyValue("fileNameSignedAuthnRequest").toString();
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = "http://www.decellc.org/schema/2010/10/dece";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

StringWriter sw = new StringWriter();

DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
Document doc = dBuilder.parse(signedAuthN);

NodeList nList = doc.getElementsByTagName("Signature");
Node nNode = nList.item(0);

log.info "Size of nList is " + nList.getLength();

try {
	Transformer t = TransformerFactory.newInstance().newTransformer();
	t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
	t.transform(new DOMSource(nNode), new StreamResult(sw));
} catch (TransformerException te) {
	this.log "nodeToString Transformer Exception - $te";
} finally {
	log.info "Sigature is --> $sw";
	tC.setPropertyValue("authnSignature",sw.toString());
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem for AuthnRequest" id="107692c8-e894-46eb-992f-78f7b29b4ec3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("GET - authnrequest redirect");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "500500":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\500500.pem";
	break;
	case "0910":  // LLP
		keyStorePath = "I:\\deceAPI\\certs\\910_concat.pem";
	break;
	case "0914":  // DLP
		keyStorePath = "I:\\deceAPI\\certs\\914_concat.pem";
	break;
	case "0912":  // RTR
		keyStorePath = "I:\\deceAPI\\certs\\912_concat.pem";
	break;
	case "1910":  // LLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1910.pem";
	break;
	case "1912":  // RTR Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1912.pem";
	break;
	case "1914":  // DLP Standalone
		keyStorePath = "I:\\deceAPI\\certs\\1914_concat.pem";
	break;
	case "0701":
		keyStorePath = "I:\\deceAPI\\certs\\999.pem";
	break;
	case "25":
		keyStorePath = "I:\\deceAPI\\certs\\25_concat.pem";
	break;
	case "26":
		keyStorePath = "I:\\deceAPI\\certs\\26_concat.pem";
	break;
	case "80080010":
	default:
		keyStorePath = "I:\\deceAPI\\stscerts\\80080010.pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - authnrequest redirect" id="cbd742df-f5a1-4631-ac5a-82a0cfd4e599"><con:settings/><con:config service="authNRequest Redirect" resourcePath="/rest/{MAJOR}/{MINOR}/loginservice/login?SAMLRequest=${#TestCase#authnrequestSigBase64}&amp;SigAlg=${#TestCase#authrequestSigAlg}&amp;Signature=${#TestCase#authnrequestSigBase64}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - authnrequest redirect" mediaType="application/xml"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetURL}</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SAMLRequest string modifications" id="946dc9de-cd6f-4762-ab5f-a5710c91df39"><con:settings/><con:config><script>import java.lang.StringBuffer;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String authnRequest = "";

switch (tC.getPropertyValue("authNSAMLRequestAction")) {
	case "NULL":
		tC.setPropertyValue("authnRequest",null);
		break;
	case "LOWER":
		authnRequest = tC.getPropertyValue("authnRequest").toString().toLowerCase();
		tC.setPropertyValue("authnRequest",authnRequest);
		break;
	case "UPPER":
		authnRequest = tC.getPropertyValue("authnRequest").toString().toUpperCase();
		tC.setPropertyValue("authnRequest",authnRequest);
		break;
	case "INVALIDATE":
		authnRequest = tC.getPropertyValue("authnRequest");
		try {
			StringBuffer s = new StringBuffer(authnRequest);

			s.setCharAt((int)2, (char)'Z');
			s.setCharAt((int)6, (char)'G');
			s.setCharAt((int)60, (char)'1');
			s.setCharAt((int)200, (char)'x');
		
			authnRequest = s.toString();
		}
		catch (Throwable e) {
			log.info "ERROR! StringBuffer issue - $e";
		}
		finally {
			tC.setPropertyValue("authnRequest",authnRequest);
		}
		break;
}</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Headers and Body" id="1e14bc6d-27d0-4795-a640-347dcb85b198"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - authNRequest');
def expBody = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("httpBody", null);
tC.setPropertyValue("httpStatus", null);
tC.setPropertyValue("httpConnect", null);
tC.setPropertyValue("httpContentType", null);
tC.setPropertyValue("httpContentLength", null);
tC.setPropertyValue("httpContentLocation", null);

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String Location = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			Location = value[0];
			break;
		case "Content-Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpBody", expBody);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Perform Verifications on Response Headers and Body" id="76777045-2f9f-4ac0-808f-a2f3173f5fdf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String httpBody = tC.getPropertyValue("httpBody").toString();
String expectedResult = tC.getPropertyValue("expectResultSamlRequestPost");
String expectPasswordPhase = "";
String expectLoginPhase = "";
String expectLinkMyAccounts = "";
String expectReason = "";
String expectOriginalRequest = "";
String expectErrorLink = "";
String expectErrorId = "";
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPcontenttype = "text/html;charset=iso-8859-1";
String recvHTTPstatus = tC.getPropertyValue("httpStatus").toString();
String recvHTTPcontentType = tC.getPropertyValue("httpContentType").toString();
String recvHTTPcontentLocation = tC.getPropertyValue("httpContentLocation").toString();
int recvHTTPcontentLength = tC.getPropertyValue("httpContentLength").toInteger();

log.info "expectedResult[$expectedResult]";

switch (expectedResult) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectReason = "Forbidden";
		expectOriginalRequest = "";
		expectErrorLink = "";
		expectErrorId = "Forbidden";
		expectHTTPcontenttype = "application/xml";
		break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectPasswordPhase = "Please enter username";
		expectLoginPhase = "Please enter password";
		break;
}
/*
*   VALIDATIONS
*/

// HTTP header status
log.info "recvHTTPstatus[$recvHTTPstatus] - expectHTTPstatus[$expectHTTPstatus]";
assert recvHTTPstatus == recvHTTPstatus;

//Content-Length
log.info "recvHTTPcontentLength[$recvHTTPcontentLength] greater than zero";
assert recvHTTPcontentLength > 0;

//No Content-Location
log.info "recvHTTPcontentLocation[$recvHTTPcontentLocation] is NULL";
assert recvHTTPcontentLocation == "null";

//Content-Type
log.info "recvHTTPcontentType[$recvHTTPcontentType] - expectHTTPcontenttype[$expectHTTPcontenttype]";
assert tC.getPropertyValue("httpContentType") == expectHTTPcontenttype;

/*
*  Verify Body attributes
*/
switch (expectedResult) {
	case "SUCCESS":
		log.info "expectPasswordPhase[$expectPasswordPhase] is present";
		assert httpBody.lastIndexOf(expectPasswordPhase) != -1;

		log.info "expectLoginPhase[$expectLoginPhase] is present";
		assert httpBody.lastIndexOf(expectLoginPhase) != -1;

	break;
	case "FORBIDDEN":
		try {
			def myXML = new XmlSlurper().parseText(httpBody);
		}
		catch (Throwable e) {
			log.info "XmlSlurper() creation failed!  Reason - " + e;
		}
		finally {
			String recvErrorID = myXML.Error[0].@ErrorID.text();
			String recvReason = myXML.Error[0].Reason;
			String recvOriginalRequest = myXML.Error[0].OriginalRequest;
			String recvErrorLink = myXML.Error[0].ErrorLink;

			log.info "ErrorID - expectErrorId[$expectErrorId] recvErrorID[$recvErrorID]";
			assert expectErrorId == recvErrorID;
			log.info "Reason - expectReason[$expectReason] recvReason[$recvReason]";
			assert expectReason == recvReason;
			log.info "OriginalRequest - expectOriginalRequest[$expectOriginalRequest] recvOriginalRequest[$recvOriginalRequest]";
			assert expectOriginalRequest == recvOriginalRequest;
			log.info "ErrorLink - expectErrorLink[$expectErrorLink] recvErrorLink[$recvErrorLink]";
			assert expectErrorLink == recvErrorLink;
		}
	break;
	default:
		log.info "expectPasswordPhase[$expectPasswordPhase] is NOT present";
		assert httpBody.lastIndexOf(expectPasswordPhase) == -1;

		log.info "expectLoginPhase[$expectLoginPhase] is NOT present";
		assert httpBody.lastIndexOf(expectLoginPhase) == -1;
	break;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Return Properties to calling Test Case" disabled="true" id="2b3a4602-9e8f-4128-b2a6-7c08d89d47c3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("authPostSAMLRequest",tC.getPropertyValue("authnRequest"));
	callTC.setPropertyValue("authnxml",tC.getPropertyValue("authnxml"));
}
</script></con:config></con:testStep><con:properties><con:property><con:name>affiliates</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNDestinationAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authnForceAuthn</con:name><con:value>true</con:value></con:property><con:property><con:name>authNIDAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authnIsPassive</con:name><con:value>false</con:value></con:property><con:property><con:name>authnProtocolBinding</con:name><con:value>urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post</con:value></con:property><con:property><con:name>authnRequest</con:name><con:valuecon:value></con:property><con:property><con:name>authnVersion</con:name><con:value>2.0</con:value></con:property><con:property><con:name>authNxmlbody</con:name><con:value>&lt;?xml version="1.0" encoding="UTF-8"?>&lt;saml2p:AuthnRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" AssertionConsumerServiceURL="https://node.example.com/samlp/responseHandler" Destination="https://qa.p.uvvu.com:7001/rest/1/0/loginservice/login" ForceAuthn="true" ID="_So2GZAKHPrIOc" IsPassive="false" IssueInstant="2010-12-07T14:54:09.353Z" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Post" Version="2.0">&lt;saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:80080010&lt;/saml2:Issuer>&lt;/saml2p:AuthnRequest></con:value></con:property><con:property><con:name>expectResultSamlRequestPost</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpBody</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece">
   <Error ErrorID="urn:dece:error:MalformedRequest">
      <Reason Language="en-us">405 Method Not Allowed. The request cannot be fulfilled because the method is unknown or not supported at the requested server.</Reason>
      <OriginalRequest>urn:dece:type:null</OriginalRequest>
   </Error>
</ErrorList>]]></con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value>356</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentType</con:name><con:value>text/xml</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 405 Method Not Allowed</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>80080010</con:value></con:property><con:property><con:name>sName</con:name><con:value>AuthnRequest POST Binding Test Cases</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_100003 - AuthN - POST - ERROR - SAMLRequest element cannot be base64 decoded - all uppercased</con:value></con:property><con:property><con:name>authNVersionAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNAudienceAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNSigningAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNIssuerAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>authNSAMLRequestAction</con:name><con:value>UPPER</con:value></con:property><con:property><con:name>authnSignature</con:name><con:value><![CDATA[<Signature xmlns="http://www.w3.org/2000/09/xmldsig#" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><SignedInfo xmlns=""><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>vTenXVvKiIEm2O48VJg9ErWh554=</DigestValue></Reference></SignedInfo><SignatureValue xmlns="">rX+UeOFL3pH8a86dSpoLfqvzkNafP7quvy8dcPpx5DRSOZycgL9LPsR7UG0UAlA9przuHWuDTEZ8
otbNM8/6Osn7W+JXU/An5SVb7ugWH3cGUz+/iRvdDDu278pQXibxCfr6Qh3GfbfnMHJU6IJAWoDO
F3N6Qf/qu0hzGT+5gzHYSBfjRPIeqXwrjy/6Z2XUrSktYj7U3oAa3KwJ5opCJo+y8f98fWA4Eg/y
QTnJPWTKASzUoXD/YlITj/yCtEEBsiQPDUS2YXbtiahR0uxXBzE6GYXzWGRWk+YdfbvP62HGXAXr
j/mdE2Mqbypc0Ee5zbnramPZDMcJIfXSLGuZRQ==</SignatureValue><KeyInfo xmlns=""><X509Data><X509SubjectName>CN=Pat Gentry,OU=QA,O=Neustar,L=Sterling,ST=VA,C=US</X509SubjectName><X509Certificate>MIIDPjCCAiagAwIBAgIETNwjNzANBgkqhkiG9w0BAQUFADBhMQswCQYDVQQGEwJVUzELMAkGA1UE
CBMCVkExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQswCQYDVQQLEwJRQTET
MBEGA1UEAxMKUGF0IEdlbnRyeTAeFw0xMDExMTExNzA5MTFaFw0xMTExMDYxNzA5MTFaMGExCzAJ
BgNVBAYTAlVTMQswCQYDVQQIEwJWQTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0
YXIxCzAJBgNVBAsTAlFBMRMwEQYDVQQDEwpQYXQgR2VudHJ5MIIBIjANBgkqhkiG9w0BAQEFAAOC
AQ8AMIIBCgKCAQEAte8f73p6v6/3M4N1XmP1f5AEi5xIkpWW+ofZEhXu45/QVoI42Qpunw0MhBzB
p1jLNWHGtgiWqX+rvT04cWm4KQCaoAIEgWj5SPanW1nLvNYvLM1aQy+pG4GPMhJtOtHUun5YOI/r
PovNVqBzVnw1fOMqSXyjM03vo8DF89/PYtCujbKD3peE2OANBmabaCMnuke5hAk5czocKTfMt4fZ
qVIBel/bm9XwXvY67v+OciorjevpkCYL1p5WmlB5LDNYoJ0ul1jNoWXZtU7rWySJGN66E1eSCe1P
BcQRMDLMxy7T9oKRlaQtVT8PmGGRahLundv+qyvnaxQoYXfzqzh5uwIDAQABMA0GCSqGSIb3DQEB
BQUAA4IBAQAK7hJpXF23T60erk5faMHdmHIqTguJWrOdXIdQrXiIbjHU1U+vafhHhymqT14Y+Xju
He2P4P62trOQ7DigT/xu7pLidQhbM1CVHy2hFk/hXguuhgdR/5RWqg6W1JGtqWiVrtPZ2SN2RxPj
J+xqA5/PfqU30qeDEByNszq1hpZL0jERNyQ+0QbKYmqL7+crxg/DNz4G/sjqaDE09wurrBuaJTbW
FQJDFlgzh9x6kJt3FSZUCQPilW9bAspyuK0AVRvooYycUjUQOhobletM3gu73NDfuF8Z+tYlh8Al
xG8qhGm+rq3geI7XQDI+vFViddiR5ndomHsXDOaGspx8kVyD</X509Certificate></X509Data></KeyInfo></Signature>]]></con:value></con:property><con:property><con:name>sigalg</con:name><con:value>http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1</con:value></con:property><con:property><con:name>authnRequestEncoded</con:name><con:value>eNqVV9my7CgO%252FJp%252BB1x1ovxoNmM2Gwxi%252Bf8PGfmcvjO3OzpiZh4cFWXjREiZKfmS64u3tssAQzAP%250A3JIj3K92HNzzEGHuvs5JDoC8%252B7If13x9BNOFS9tOp6ncTa0Bumww%252FyCbFBzhehXzmqPRO8RtPSIM%250Abi8YPV54v%252BJ9j79kzKukSsNpjxrk1URYCWcRuDj21OMDN7slW1trYmsVCxT8%252F1xsa9ED2HDd9pQm%250ANzFP8OyN0dY6uzG883veb8sZge9ozQYIJwJMsSMUg2O0t%252BM7DDyomj3iNm8j958EbCYTYcKXH2sf%250A97v5CEzGWgdby2lFC1L9gpPi0%252F3cgO9rRIj5KzrPOkzmK8LvfLF21p9cYcRERPB432ZJjk4jBCc3%250AhEu1HNVYW1g4DuVn3fXEkrBZyDGDvgWr3%252FcxEf7GreSuq0SIYLceBOnhIC1SzJw8KcLhTzvv14wl%250Abrhb%252Bnd6lb14yHiJ%252F7U0B8Lh4RxeER8foHPCTIFY0nHo6UWMF2ev9XiWi%252BMPxi8TDdJqnO4nXnH8%250AlRcIGDDRstt6htXgMecZ3vgKzDNme%252FrIS21f4Xi1MzxpgPFdnOMB%252F3kr%252B8HqF%252BY2IsJ4yDIvNzH1%250Ap92xQs%252Bl2iXWHx7ay4ol0tm%252Fo9PxmgzrbWDM%252B1dkf9ZdIpUWuTxkHu8ljDeIIACT3IL4YEYfvXSH%250AEcdj%252FAbmp0KlhM9zR%252BHhw1qRB4bv%252Fmt0zDZ7x29C55OztKfWI4Z%252BISXKLxKfxwck7uwxxx6PNMda%250A6%252FEZQW7dU6vToI9Uy5iK8IM8R34eBRl6vA%252B4bC9bkxV3o8jM%252BP9t9fkTriGZ334xhe95bk1YrK3x%250APZ6jqMOj%252BFHsAUn%252BmIM%252FNNw3svOwrw8Ya3iMAbcqAtch3O%252B3DqXvydaxPVGVv6b6v%252BaZQX3KEeDm%250AC0dC0fmfg9bvqDzNYzzyw8PwHr6LkLEsKFBFPR4dhc853yVu4sm2kxUBj2CINNsjc4xCVDlDffjk%250A54Hk2SBIB2qn9zRY4RHntqt%252BHJ%252FfwfU03IC%252FXEmPIRA68ii3JPk9d4leZP1ZpIeeFgDp5CQfT%252F72%250Aqm3we06%252F%252F%252BOhEY4HcCj0wJ%252B04y0eNEHue0AzkK1iHJWacvt8ZHd1aCYrb2%252FHKAcJd9VgNu9IKjNt%250ARD7xnSb3s%252FoL9DU8oSziNRXMufDhmAnVR9%252BKTjzaHV0fYOrUMP11u9BKK7tdtFzGJpbwuHOiZnJ3%250AFeiqj5BBWFtL9Ka4t1NY%252FAZWhWIM7MWc6kMlkXoErU6YLZNZBENaOHPNAs9xAxopl4kK11PUWnLY%250A20ZlnN6jQSnKRbHCld68dNFo39qVmpKmtkAL6XoU3fKUssbJEQ6dcio5fQrtFYh%252BgyqnpGYp0xQJ%250AJo6lujET4U6hsa5fuQbWIHrV%252Btn8IHmfNVjvK4knwlV1vKY3ARNikUw0irJjBfdByggm5ejeRjTJ%250AbtWtG593snkDmrFzpNfcrlmR5rLJce%252Fr%252FmijaaWQEqOYwbXP5x6JY9c93HrFABc%252BrLWQFQ3sd1W3%250A0Tqd5fW5Gbx%252FcQPhcEU7a8YOpr4taadB%252BiKbTeiIpARdZnnLYmkaPe0ZBSWNfXu1ApKBe%252FVZSwAq%250AlmzEgfIh2wWRICXvx%252FK9jvWCicvCChBQbP8E%252F%252Fr8BBGxHSDFg7cYMyqDWoS7a06bizI1bybRy10t%250An8RrUO9lc%252B%252BvVN9istK3vVx5%252BiUoyyvAnmoWm6JZLFhX8Aq8zgiXCSy3n6AchFJ1zkR1zJdLxMZE%250AZ87dILROKaDFOMsHzTK7V8Pd0VF0j3iq6vSSd%252FkQOeuZMdtasnzhkqZCNjn6WHtcEsWH38%252B7luS6%250AK2QN2xWTA5OKhlz1q9QCmYyGD92j291WTIPHCHyOoilFFUYUQcGrYKeMldYcNO7NX%252Fiifp63jhJx%250AiuL%252FfaCscb1UTj9wwtlY0PUS%252BIpm3uBv%252BcBdMRkyI%252Fxdqnr9JAMEwloo8eZ7LMrwg7f4eg5bMxrw%250An5DPbGU3imY%252Fit1cQ9UqFbEcOA6Qd0tOY5L1nTGE6uiS4VcyspYLf0qBr%252BRJjwERzUqdtFRvk%252FPp%250AHytan4pqlO3FazH8Z22MN4nPs0e1cq%252BvacUUcrJ4fGYp%252BQxgSpU6xKr1VuB1t9KQrJmzueVmhiyJ%250AeqobJ44Er5ts2E8UfVSbcK4Rceub6ycQg%252FqQFyx6uMUykBsZVJaoSk5MQ6peTypThJiwl%252FSA8pIO%250A5yzXY2jfvFN3QYvJpiL6jSyXyoBsL9rqav1yuLqvDPOK%252FnU1HkWfbo0C4sBBJAYZGZ9GZbu%252FPeXf%250A07KKFOcgn9FTJ46XhegzBWrQJGVpb7qxSjelc2zxC0c3D%252FuMUubQdrR7h5NaazAC1snIp31L71hc%250ARi4MSbagNvtsG4mzSN0iyMLVQYvKZ2urCwbu0K6TUzlazBAX2xVEl8mLRVf7M6tAlBO7AfLPVrAx%250Aqx6VcQtgQ7upvQdoAj696o50pdZsqlMcLJlb9FviMKe0BmRHUFF%252FPQOkBOwAXiU0nORwpUIKL9pU%250A4o9Acs71cMk%252FZVDksYdatY8M9arNHpB%252B2Hq8CDfFUfjpFveey618h11SZP8oLI%252B75Sy8uW40plvX%250Ajnpgo83z3s2bd11DydNRk2S6jlksdpmNhZif3BWq0A1w0BfrS6Kzld272sxR0BXAmXcIZt%252FGeuKX%250AEpXNxKkPZLztouFsOrXLS%252B7AfEPvezptwzG%252BWHsrPKtwZ1ZG83ivaUaNrZ73iQJKOKqK5UKemdZc%250Aa5vDeKPPbvI8XMFVSHmU5WMB0UQcHE5ls%252FFLTAK7Ry7bWy741eYsHRVndy9c9hiJmvdcrvPsO9vI%250ARQJ22uYB7YJfXIs3wg2UtTAeJxvOwVvG2ToVUmTzgOTBoRhbsVQE54K6IL3UjLCf%252BsxS%252B3uThvPt%250AeuVp%252BqZkQTgUUw9M%252BrvIgc5g3TJ3CN7ht%252BMdn88sRg9BjSpMG7Hw17mXpmr61Ufkz1fevAbT5OFd%250Aef16pLCFmGci%252Br3defrb9P6sXX6%252BNYS88NMAx0tvvej4zbEk7IUI%252BC%252BwukUI</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API - Invoked to Coordinator URL" searchProperties="true" id="2b1909ec-dc6c-4c68-8778-b02210b97c30" discardOkResults="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings><con:setting id="HttpSettings@socket_timeout">5000</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties" id="f970e492-d697-43b3-bafe-6a7377600f47"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionROW",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("stsAction",null);
tC.setPropertyValue("stsRequestBodyNULL",null);
tC.setPropertyValue("stsRequestUserNameFlag",null);
tC.setPropertyValue("expectErrType",null);
tC.setPropertyValue("deviceAuthToken",null);
tC.setPropertyValue("stsExpire",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("stsaudience",null);</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case" id="c6a6e90a-0fe6-4b00-8a85-c5c64fc682ac"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("deviceAuthToken",callTC.getPropertyValue("deviceAuthToken"));
tC.setPropertyValue("expectErrType",callTC.getPropertyValue("expectErrType"));
tC.setPropertyValue("stsRequestBodyNULL",callTC.getPropertyValue("stsRequestBodyNULL"));
tC.setPropertyValue("stsRequestUserNameFlag",callTC.getPropertyValue("stsRequestUserNameFlag"));
tC.setPropertyValue("stsAction",callTC.getPropertyValue("stsAction"));
tC.setPropertyValue("stsExpire",callTC.getPropertyValue("stsExpire"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("stsaudience",tP.getPropertyValue("stsaudience"));

if (tC.getPropertyValue("stsRequestUserNameFlag") == null ||
	tC.getPropertyValue("stsRequestUserNameFlag") == "") {
		tC.setPropertyValue("stsRequestUserNameFlag",null);
}
if (tC.getPropertyValue("stsAction") == null ||
	tC.getPropertyValue("stsAction") == "") {
		tC.setPropertyValue("stsAction",null);
}
if (tC.getPropertyValue("stsExpire") == null ||
	tC.getPropertyValue("stsExpire") == "") {		
		tC.setPropertyValue("stsExpire","2012-06-30T09:40:39.0Z");
}
if (tC.getPropertyValue("tokentype") == null ||
	tC.getPropertyValue("tokentype") == "") {
		tC.setPropertyValue("tokentype",tP.getPropertyValue("tokentypeUsernamepassword"));
}</script></con:config></con:testStep><con:testStep type="groovy" name="Construct STS Request Body" disabled="true" id="426325ac-9436-4d11-ac5a-149e804a00a2"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = tP.getPropertyValue("coordinatorSchema").toString();
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String requestBody = "";
String tokentype = tC.getPropertyValue("tokentype").toString();
String deviceAuthToken = tC.getPropertyValue("deviceAuthToken").toString();
String deviceAuthExpires = tC.getPropertyValue("stsExpire").toString();

def username = tC.getPropertyValue("username").toString();
def password = tC.getPropertyValue("password").toString();


/*
*  Elements
*/
Element root;
Element userName;
Element passWord;
Element devicecode;
Element expires;

/*
*  Create an nice clean dom
*/
try	{
	//Create instance of DocumentBuilderFactory
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	//Get the DocumentBuilder
	DocumentBuilder parser = factory.newDocumentBuilder();
	//Create blank DOM Document
	doc = parser.newDocument();
}
catch(Exception e) {
	log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
}
finally {
	if (tokentype == tP.getPropertyValue("urntokenType_deviceauthtoken").toString()) {
		root = doc.createElementNS(deceNS, "DeviceAuthToken");

		/*
		*  DeviceAuthCode element
		*/
		switch (tC.getPropertyValue("stsAction").toString()) {
			case "nullDeviceToken":
				devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
				Text textdcode = doc.createTextNode("");
				devicecode.appendChild(textdcode);			
				break;
			default:
				devicecode = doc.createElementNS(deceNS,"DeviceAuthCode");
				Text textdcode = doc.createTextNode(deviceAuthToken);
				devicecode.appendChild(textdcode);
				break;
		}

		/*
		*  Expires
		*/
		switch (tC.getPropertyValue("stsAction").toString()) {
			case "nullExpires":
				expires = doc.createElementNS(deceNS,"Expires");
				Text textdexpire = doc.createTextNode("");
				expires.appendChild(textdexpire);
				break;
			case "tagTerminatedExpires":
				expires = doc.createElementNS(deceNS,"Expires");
				Text textdexpire = doc.createTextNode();
				expires.appendChild(textdexpire);
				break;
			default:
				expires = doc.createElementNS(deceNS,"Expires");
				Text textdexpire = doc.createTextNode(deviceAuthExpires);
				expires.appendChild(textdexpire);
				break;
		}

		/*
		* Add DeviceAuthCode element to tree.
		*/
		if (tC.getPropertyValue("stsAction").toString() != "tagMissingDeviceToken") {
			root.appendChild(devicecode);
		}

		/*
		* Add Expires element to tree.
		*/
		if (tC.getPropertyValue("stsAction").toString() != "tagMissingExpires") {
			root.appendChild(expires);
		}
	} else {
		root = doc.createElementNS(deceNS, "Credentials");
		
		/*
		*  Username
		*/
		switch (tC.getPropertyValue("stsRequestUserNameFlag").toString()) {
			case "stsRequestUserNameFlag":
				userName = doc.createElementNS(deceNS,"Username");
				break;
			case "EMPTY_TAG":
				userName = doc.createElementNS(deceNS,"Username");
				break;
			default:
				userName = doc.createElementNS(deceNS,"Username");
				Text textusername = doc.createTextNode(username);
				userName.appendChild(textusername);
				break;
		};

		/*
		*  Password
		*/
		switch (tC.getPropertyValue("stsAction").toString()) {
			case "EMPTY_TAG":
				passWord = doc.createElementNS(deceNS,"Password");
				break;
			default:
				passWord = doc.createElementNS(deceNS,"Password");
				Text textpassword = doc.createTextNode(password);
				passWord.appendChild(textpassword);
				break;
		}

		/*
		* Add Username element to tree.
		*/
		if (tC.getPropertyValue("stsRequestUserNameFlag").toString() != "excluded") {
			root.appendChild(userName);
		}

		/*
		* Add Password element to tree.
		*/
		if (tC.getPropertyValue("stsAction").toString() != "PASSWD_EXCLUDE") {
			root.appendChild(passWord);
		}
	}
	
	/*
	* Add Credentials element to tree.
	*/
	doc.appendChild(root);
}

/*
* Turn the DOM into a String to display here...
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
transformer.setOutputProperty(OutputKeys.INDENT, "yes");
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
requestBody = writer.toString();
this.log.info requestBody;

tC.setPropertyValue("stsRequestBody", requestBody);

/*
*  Override the Property if desired
*/
if (tC.getPropertyValue("stsRequestBodyNULL") == "true") {
	tC.setPropertyValue("stsRequestBody", null);
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Establish STS URL" id="e02d1dc3-5ee7-4327-a5e4-b5c6352e9089" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def urlEndPoint = tC.getPropertyValue("urlEndPoint");

String url = "";

switch (urlEndPoint) {
	default:
		url = "https://" + tP.getPropertyValue("targetHost").toString() + ":" + 
			tP.getPropertyValue("targetPort").toString();
	break;
}

log.info "url[$url]";

testRunner.testCase.getTestStepByName('POST - STS').httpRequest.setEndpoint(url)
</script></con:config></con:testStep><con:testStep type="groovy" name="Old_Establish audience parameter" id="700db5bd-73af-41b3-a436-aaee2c7f2843" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audiencelist",null);

if (tC.getPropertyValue("stsaudience").toString() != 'null') {
	tC.setPropertyValue("audiencelist","&amp;audience=" + tC.getPropertyValue("stsaudience").toString());
}</script></con:config></con:testStep><con:testStep type="groovy" name="Establish audience parameter" id="a3fab669-50cf-4e85-b715-f644b47d0244"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("audiencelist",null);

/*if (tC.getPropertyValue("stsaudience").toString() != 'null') {
	tC.setPropertyValue("audiencelist","&audience=" + tC.getPropertyValue("stsaudience").toString());
}*/

//Added this for R2 and R3
def versionMinor = context.expand( '${#Project#versionMinor}' )

if (tC.getPropertyValue("stsaudience").toString() != 'null' && versionMinor == '07' ) 
{
	tC.setPropertyValue("audiencelist","&audience=" + tC.getPropertyValue("stsaudience").toString());
	tC.setPropertyValue("tokentype", "urn:dece:type:tokentype:usernamepassword");
}
else if (tC.getPropertyValue("stsaudience").toString() != 'null' && versionMinor == '06' ) 
{
	tC.setPropertyValue("audiencelist","&audience=" + URLEncoder.encode(tC.getPropertyValue("stsaudience").toString(), "UTF-8"));
	tC.setPropertyValue("tokentype", URLEncoder.encode("urn:dece:type:tokentype:usernamepassword", "UTF-8"));
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Establish pem for STS" id="95665a82-5e5b-4703-a4b2-bad7dfc488b9"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("POST - STS");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - STS" id="6ed7afbf-cac1-40e3-b62f-180db1b82c93"><con:settings/><con:config service="STS" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/SecurityTokenExchange?tokentype=${#TestCase#tokentype}${#TestCase#audiencelist}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - STS" mediaType="application/xml" postQueryString="false" sslKeystore="RET_2.jks" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetpHost}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="${#Project#schemaCoordinator}">
   <Username>${#TestCase#username}</Username>
   <Password>${#TestCase#password}</Password>
</Credentials>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tokentype" value="${#TestCase#tokentype}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers for STS" id="63887d9b-bd35-4dd4-b3a4-18f1e1097bc7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('POST - STS');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

if (contentLength.toInteger() != 0) {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}


assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	//assert b.getPath().matches("/rest/1/07/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);

log.info "assertionUUID......." + tC.getPropertyValue("assertionUUID");</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STS Success" id="e7b0ccdf-6526-4550-8bb6-110b647d4194"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String e_Status = "HTTP/1.1 201 Created";


assert tC.getPropertyValue("status").toString() == e_Status;</script></con:config></con:testStep><con:testStep type="delay" name="Delay" id="92539098-41b0-451a-b7e8-a1625a85c355"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish STS Get URL" id="61ef4d23-c059-4817-a0fb-d3399dfb184b" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def urlEndPoint = tC.getPropertyValue("contentLocation").toString();


assert urlEndPoint.length() > 0 &amp;&amp; urlEndPoint != null;

log.info "urlEndPoint[$urlEndPoint]";

testRunner.testCase.getTestStepByName('GET - STSGet').httpRequest.setEndpoint(urlEndPoint);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish pem for STSGet" id="0e66ac20-f74a-4d5b-95bb-6518fb358547"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("GET - STSGet");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET - STSGet" id="1cc18ef1-0080-4ae1-bf8e-50d132049428"><con:settings/><con:config service="STSGet" resourcePath="/rest/{MAJOR}/{MINOR}/SecurityToken/Assertion/${assertionUUID}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET - STSGet" mediaType="application/xml" sslKeystore="RET_2.jks" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetqHost}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="assertionUUID" value="${#TestCase#assertionUUID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers for STSGet" id="50ba6d4d-fe20-4f44-bfc6-1fc30e653296"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep = tC.getTestStepByName('GET - STSGet');

def expXML = tStep.httpRequest.response.getResponseContent();

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);
tC.setPropertyValue("XMLbody", null);

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";

     
	tC.setPropertyValue("XMLbody", expXML);
</script></con:config></con:testStep><con:testStep type="groovy" name="Verify STSGet Success" id="ac33ae55-beb8-4945-808e-0b4f21e3a813"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String e_Status = "HTTP/1.1 200 OK";


assert tC.getPropertyValue("status").toString() == e_Status;</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Assertion" id="c39fd1d3-d207-4da2-b3ef-281fd272c319"><con:settings/><con:config><script>import urlFunctions.urlFunctions; 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def testStep = testCase.getTestStepByName('GET - STSGet');
rawResponse = testStep.httpRequest.response.getRawResponseData();
strRawResponse  = new String(rawResponse);

//startAssert = strRawResponse.indexOf("&lt;?xml version=\"1.0\" ");
//String httpBody = strRawResponse.substring(startAssert, strRawResponse.length());

int startAssert = strRawResponse.indexOf("&lt;saml2:Assertion ");
int endAssert = strRawResponse.indexOf("&lt;/saml2:Assertion>");

String samlAssertion = strRawResponse.substring(startAssert, endAssert + 18).trim();

myURLFunctions = new urlFunctions(log);
samlAssertion = myURLFunctions.deflateBase64Encode(samlAssertion);

testCase.setPropertyValue("samlAssertion", samlAssertion);
</script></con:config></con:testStep><con:testStep type="groovy" name="Return the assertion to the Calling Test Case" id="614dab68-e4a6-43fe-b745-ec2ff971caa3"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
log.info 'callTSname=='+callTSname
log.info 'callTCname=='+callTCname

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));
log.info 'tC.getPropertyValue("assertionUUID")=='+tC.getPropertyValue("assertionUUID")
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertionUUID"));
callTC.setPropertyValue("assertionXML",tC.getPropertyValue("XMLbody"));

callTC.setPropertyValue("samlAssertion",tC.getPropertyValue("samlAssertion"));

log.info "xml" + tC.getPropertyValue("XMLbody")</script></con:config></con:testStep><con:properties><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionROW</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</con:value></con:property><con:property><con:name>assertXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>audiencelist</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>connection</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml; charset=UTF-8</con:value></con:property><con:property><con:name>dbassertionNodeaccountid</con:name><con:value>urn:dece:accountid:org:dece:AB6BB47D25F63538E0401F0A05993E27</con:value></con:property><con:property><con:name>dbassertionNodeuserid</con:name><con:value>urn:dece:userid:org:dece:AB6BB47D25F83538E0401F0A05993E27</con:value></con:property><con:property><con:name>deviceAuthToken</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>errorID</con:name><con:value/></con:property><con:property><con:name>errorReason</con:name><con:value/></con:property><con:property><con:name>errorStatusCode</con:name><con:value/></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeRightsTokenCreate</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>sName</con:name><con:value>TestSuite Utility Test Cases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>stsAction</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsaudience</con:name><con:value/></con:property><con:property><con:name>stsExpire</con:name><con:value>2012-06-30T09:40:39.0Z</con:value></con:property><con:property><con:name>stsRequestBodyNULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>stsRequestUserNameFlag</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tName</con:name><con:value>SoapUI-based IDP SAMLResponse Login</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>RSAML_UserName20150612_1434107726596</con:value></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<saml2:Assertion ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces PrefixList="xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion>]]></con:value></con:property><con:property><con:name>samlAssertion</con:name><con:value>nVbZcuo4EP0VyvcxZbywGVegigkwITcJhCXbyy1FbkDESEaSWfL1IxlwMAkZZp5care6T3cfHelSoHno+g0hgEvCaG49D6nwE2vNiDn1GRJE+BTNQfgS+4PG3a3v5m0f7bcYuU6zZvzxysVqNbCrJkbVglnElZKJkGebb5W3UmX8VgYclJSrEDF0qJCIyprh2k7JtMum4w4dx3dc3y3nq+Xiq5F7BC5UbOWSt40dqLWoGVMpI9+yVqtVflXIMz6xXNt2rOe72wGewhwZ9cttRUkiXt/543wAGMIQ5zGbW5dWxucyEP6ATCiSMYddruBULtuyq5byCQSZ/DLSvRB06JglyytEGSUYheQD6f7cgZyyINcIJ4wTOZ2fLMKxdWAT1tjETpH+MqwstDMDZRBygUwxRc4uVh/GwIFiyI36nZrx67ypJVuHHFExZnwussv/hgfoEkIWQWCKfVk7aOcH/KZT9UvAfofiMBZkCfearBHCIHbTBHx+qFyPw5isb4lQBF0Ljc46hHe03HajSSYg5P8Z0MFwtkEeURhDfYNW06vXCqfr0TPySKHUve6NrPULsh5qCYBD58SQjna7PCJlSqLtjqkTFRdLl5IOTKdPfAXt7lN7/MbaF8OPu5vxQHqrahCs4u6A9if92HsXCJ6C7ktUiuyP6l17cx9s4sLN8+TiqRo/Q783D8lMuGLx8jjreg4fvf79yEfsdXGz7GxmcetF0vtGqf/7evYgB8PyxdPzaHR98dDynmBwM0LXxZE97j2ver+H8ag7nFmFUSVs962HcZnV0nIO8Gdt+zM/iN9mgOV+qWnQaebaakpI/ixm2kICc5y4+pEWHyGBSqOud2nt8GMldyTw1Qy3a8cr2a1Wq12oNKqFZqvcsksFu1KtOm27USy3m3uR2aI4gnjF6JjoXFpyt7T5GSCe+wJoANxcslgpnTB+iNhEEuU6tK8OAaMChkzJcwXxgE2i9w9v6RXKLkzKM0ewlRLXeya7tMsbYwk8K8nFjCT3AZOIgNZtTWuheC2kasUCLWMZOvklylOIlbJzLbK+W/RKliDzKAQN1JqzIA4hH02jpDGW2H5dE2GRWPut4R83OW4nCzv+t++B8gmIdhC6mr9AzRG+uV2cfSmnS64clrwP34gDok+WaqjkBG+RZH998kQTJCVJUtMedOp7bMjEtY5LSlMFS4JTrqc3thJydfTr+5EskJtf5OPlMk6uOq5CW7pAy3atAeBYCdNmyN6BWmkE66xbIAV9lDi1Z+HFckoHEkmYK8bkkuUZ1/4AhL72O4rp63PfFJmUqm0S1vI721Woniwa8Y+vGuxj7afMPfVZMR58TuubWAd5VJ3q1peETvRK3wCbE6zATIUlSrsYPwz+XYDvkmeNaZNTLFKR6S2WcPpPTotSzUAYs5jKTtNIDIdCmeCUmwj8T6cvYRItTh9n5N9fZyZJKIBBPekESeLrO9bX9KeTA7HdJT2ht95PeptFV/9i/mo56NMxx+v/AA==</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>700db5bd-73af-41b3-a436-aaee2c7f2843</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="TestSuite Utility Test Cases" id="dabdf466-db92-481f-b59f-53b4a519a082"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Project_Setup" searchProperties="true" id="3d67c6af-671d-4bce-809f-a01d423ceaa2"><con:settings/><con:testStep type="groovy" name="LP1 Setup" id="9ca016c0-5935-4ecd-b84a-e7fe28daf0bb"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

// Setting Environment Details //
tP.setPropertyValue("targetSystem","LP1");
tP.setPropertyValue("versionMajor","1");
tP.setPropertyValue("versionMinor","11");
tP.setPropertyValue("schemaCoordinator","http://www.decellc.org/schema/2013/10/coordinator");
tP.setPropertyValue("targetHost","qa1.p.uvvu.com");
tP.setPropertyValue("targetPHost","qa1.p.uvvu.com");
tP.setPropertyValue("targetQHost","qa1.q.uvvu.com");
tP.setPropertyValue("targetHostportal","qa1.s.uvvu.com");
tP.setPropertyValue("targetPort","443");
tP.setPropertyValue("targetPortportal","443");
tP.setPropertyValue("targetURL","qa1.p.uvvu.com");
//tP.setPropertyValue("fileSamlResponseXML","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\samlresponse.xml");
//tP.setPropertyValue("fileSamlResponseSigned","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\samlresponsesigned.xml");
tP.setPropertyValue("fileSamlResponseXML","C:\\RSAML\\samlresponse.xml");
tP.setPropertyValue("fileSamlResponseSigned","C:\\RSAML\\samlresponsesigned.xml");


//Setting Node Details //
tP.setPropertyValue("nodeid","RET");
tP.setPropertyValue("stsaudience","urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP");

//Setting truststore details //
//tP.setPropertyValue("fileNameKeystore","C:\\Shikha\\RSAML\\RET_concat.jks");
tP.setPropertyValue("fileNameKeystore","C:\\Certs\\RET.jks");
tP.setPropertyValue("KeyStoreAlias","qalp1");
tP.setPropertyValue("KeyStorePassword","testing");

//Setting RSAML Path details //
//tP.setPropertyValue("fileReverseSamlPage","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\reverseSAML.html");//C:\\Shikha\\RSAML\\reverseSAML.html");
tP.setPropertyValue("fileReverseSamlPage","C:\\RSAML\\reverseSAML.html");
tP.setPropertyValue("fileKeyStorePath","C:\\Certs\\");//C:\\Shikha\\RSAML\\");




</script></con:config></con:testStep><con:testStep type="groovy" name="LP2 SetUp" disabled="true"><con:settings/><con:config><script>
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

// Setting Environment Details //
def nodeid = "RET_2"
tP.setPropertyValue("targetSystem","LP2");
tP.setPropertyValue("versionMajor","1");
tP.setPropertyValue("versionMinor","11");
tP.setPropertyValue("schemaCoordinator","http://www.decellc.org/schema/2013/10/coordinator");
tP.setPropertyValue("targetHost","qa2.p.uvvu.com");
tP.setPropertyValue("targetPHost","qa2.p.uvvu.com");
tP.setPropertyValue("targetQHost","qa2.q.uvvu.com");
tP.setPropertyValue("targetHostportal","qa2.s.uvvu.com");
tP.setPropertyValue("targetPort","443");
tP.setPropertyValue("targetPortportal","443");
tP.setPropertyValue("targetURL","qa2.p.uvvu.com");
//tP.setPropertyValue("fileSamlResponseXML","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\samlresponse.xml");
//tP.setPropertyValue("fileSamlResponseSigned","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\samlresponsesigned.xml");
tP.setPropertyValue("fileSamlResponseXML","C:\\RSAML\\samlresponse.xml");
tP.setPropertyValue("fileSamlResponseSigned","C:\\RSAML\\samlresponsesigned.xml");


//Setting Node Details //
tP.setPropertyValue("nodeid",nodeid);
tP.setPropertyValue("stsaudience","");
//tP.setPropertyValue("stsaudience","urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP");

//Setting truststore details //
//tP.setPropertyValue("fileNameKeystore","C:\\Shikha\\RSAML\\RET_concat.jks");
tP.setPropertyValue("fileNameKeystore","C:\\Certs\\"+nodeid+".jks");

tP.setPropertyValue("KeyStoreAlias","qalp1");
tP.setPropertyValue("KeyStorePassword","testing");

//Setting RSAML Path details //
//tP.setPropertyValue("fileReverseSamlPage","C:\\Documents and Settings\\spemmasa\\Desktop\\SOAP\\Project\\ShikhaProject\\RSAML\\reverseSAML.html");//C:\\Shikha\\RSAML\\reverseSAML.html");
tP.setPropertyValue("fileReverseSamlPage","C:\\RSAML\\reverseSAML.html");
tP.setPropertyValue("fileKeyStorePath","C:\\Certs\\QALP2");




</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a941b69d-64f2-4f12-b6c2-94a442e5b0ac</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2112bd00-fa7c-4110-9fd0-ea3dbff994e9"><con:settings/><con:testStep type="groovy" name="Set_TLS" id="a941b69d-64f2-4f12-b6c2-94a442e5b0ac"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

//RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

//this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
//soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Proj Property" id="ee30af47-50af-46fb-912b-bfd068035805"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("assertionXMLnode",tP.getPropertyValue("assertionXMLnode_NewVersion"));

log.info tP.getPropertyValue("assertionXMLnode")

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Account Name and User Name" id="55bbb972-b919-4229-9558-d967c5d0329e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def AccountName= "RSAML_AccountName"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

def UserName= "RSAML_UserName"+new Date().format( 'yyyyMMdd') + "_" + System.currentTimeMillis();

tP.setPropertyValue("AccountDisplayName",AccountName);
tP.setPropertyValue("UserName",UserName);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="ff8a96c3-81a8-4032-8089-c9ea813f4484"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_2.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
<UserList>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
		<SurName>surname</SurName>
	</Name>		    
	<ContactInfo>
        <PrimaryEmail>
	 <Value>testing@uvvutesting.biz</Value>
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	</ContactInfo>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
             	</Credentials>
</User>
</UserList>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1" id="30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1" id="377c947e-59f4-4d30-8da5-0e688ae57897"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	def arrayString = urlStr.split("Account/");
      arrayString= arrayString[1].split("/User/");
      log.info "Node_User_ID=="+arrayString[1]
      log.info "Node_Account_ID=="+arrayString[0]

       def useridfull = arrayString[1];    
       def accountidfull = arrayString[0];       

//	int lastSlash = urlStr.lastIndexOf('/');
//    	userid = urlStr.substring(lastSlash + 1);
   
   tP.setPropertyValue("NODEACCID",accountidfull);
    tP.setPropertyValue("NODEUSERID",useridfull);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}


//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="56ca4b95-83fa-47b0-8b9f-5af7de663ad0"><con:settings/><con:config><script>//Note if there is change in the namespace we need to change in the project property value of assertionXMLnote(Replace only the namespace)
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def targetPort = context.expand( '${#Project#targetPort}' )

//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:home");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:account");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library:urn:dece:rightstokenid:org:dece:C752EB964745B107E0401F0A07997A92");//C752EB964758B107E0401F0A07997A92");//{rightsTokenID}");
//urn:dece:rightstokenid:org:dece:D4C4ED3C220C8F0FE0401F0A07992649
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:device");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:tou");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA");//urn:dece:userid:org:dece:D6BB14AF2AAFCA3BE0401F0A059911B6
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:D4C4087DA00D3419E0401F0A079907D0");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:EA6030364B7B5437E0401F0A07997962");//urn:dece:portal:user:D4C4087DA00D3419E0401F0A079907D0"); //Passes

//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/userProfilePage.jsf");
tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:7002"+"/ssp/views/mediaPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/accountDashboardPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/touPage.jsf");
//tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");*/

def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tP.getPropertyValue("nodeid"));
//tC.setPropertyValue("username","pjgrevsamlstandard1");
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);

//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:500500");
//tC.setPropertyValue("stsaudience",null);
//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:4042");
/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);


/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" id="ee442ff8-b8dd-4f25-8007-91037efc679d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" id="dd127637-99a9-451f-8928-145ffad968a8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML" id="351c3f10-9ebb-4fca-8dee-a8539e8c9ac1"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();

log.info 'assertionIDPXML = ' +tP.getPropertyValue("assertionXMLnode").toString();
log.info 'assertionDECEXML = ' +tC.getPropertyValue("assertionXMLuser").toString();
log.info 'assertionURIXML ='+ tP.getPropertyValue("assertionURIXML").toString();
log.info 'outFile ='+ tP.getPropertyValue("fileSamlResponseXML").toString();
log.info 'rsamlTargetURL ='+  tC.getPropertyValue("rsamlTargetURL").toString();
log.info 'rsamlReturnToURL ='+ tC.getPropertyValue("rsamlReturnToURL").toString();

String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

log.info 'deceroot=='+deceroot

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	log.info 'HAS ATTRIBUTE ID'
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		log.info 'NOTNULL rsamlSPID'
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
				
//////Adding this R2/////////////////////
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);						
//Added This: If We need To give the Invalid NameId in the RSaml Response

						//subjectNameid.setTextContent("urn:dece:userid:org:dece:BBBBBBBBBBBBBBB");
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotBefore","2013-03-13T01:52:52.741Z");
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);	
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotOnOrAfter","2013-03-27T01:52:52.741Z");							
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}

log.info xml3.toString();








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="5544fbc9-65ae-4446-b315-0478599b4f88"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;


def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String signedsamlResponseFile = tP.getPropertyValue("fileSamlResponseSigned").toString();

log.info "samlResponseFile[$samlResponseFile]";
log.info "signedsamlResponseFile[$signedsamlResponseFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

  
// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());

KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing

X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
log.info "DocumentBuilderFactory -- samlResponseFile[$samlResponseFile]";
Document doc = dbf.newDocumentBuilder().parse(samlResponseFile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlResponseFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml" id="6ea68e7f-e5d5-44a8-83f7-274c18554dc1"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseJustBase64", null);

String signedSamlResponse = tP.getPropertyValue("fileSamlResponseSigned");

file = new File(signedSamlResponse);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();



//String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));
String base64Str = Base64.encodeBytes(bytes);
String samlResponseurlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlResponse", samlResponseurlencoded);
tC.setPropertyValue("samlResponseJustBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="66baf7b7-c306-45cb-8d47-e6737d710db4"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
String token = tC.getPropertyValue("samlResponseJustBase64").toString();

//////Added this for the shost////////

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://""" + tP.getPropertyValue("targetHostportal") + ":"  + """/security/federation/saml/acs" method="post"> <input name="SAMLResponse" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:properties><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value>_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value>_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</con:value></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<saml2:Assertion ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces PrefixList="xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa2.s.uvvu.com:443/security/federation/saml/acs" ID="918565c1-fe31-4841-bd6d-341c9c94547c" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET_2</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://qa.uvvu.com:7002/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2015-06-12T17:12:26.964Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="6E13434DB986C473D33CF5B287F1C69AD14" SessionNotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value><![CDATA[<saml2:Assertion ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces PrefixList="xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion>]]></con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml; charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa2.q.uvvu.com/rest/2015/02/Account/urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD/User/urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa2.s.uvvu.com:443/security/federation/saml/acs" ID="918565c1-fe31-4841-bd6d-341c9c94547c" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET_2</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://qa.uvvu.com:7002/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2015-06-12T17:12:26.964Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="6E13434DB986C473D33CF5B287F1C69AD14" SessionNotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET_2</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>https://qa.uvvu.com:7002/ssp/views/mediaPage.jsf</con:value></con:property><con:property><con:name>samlAssertion</con:name><con:value>nVbZcuo4EP0VyvcxZbywGVegigkwITcJhCXbyy1FbkDESEaSWfL1IxlwMAkZZp5care6T3cfHelSoHno+g0hgEvCaG49D6nwE2vNiDn1GRJE+BTNQfgS+4PG3a3v5m0f7bcYuU6zZvzxysVqNbCrJkbVglnElZKJkGebb5W3UmX8VgYclJSrEDF0qJCIyprh2k7JtMum4w4dx3dc3y3nq+Xiq5F7BC5UbOWSt40dqLWoGVMpI9+yVqtVflXIMz6xXNt2rOe72wGewhwZ9cttRUkiXt/543wAGMIQ5zGbW5dWxucyEP6ATCiSMYddruBULtuyq5byCQSZ/DLSvRB06JglyytEGSUYheQD6f7cgZyyINcIJ4wTOZ2fLMKxdWAT1tjETpH+MqwstDMDZRBygUwxRc4uVh/GwIFiyI36nZrx67ypJVuHHFExZnwussv/hgfoEkIWQWCKfVk7aOcH/KZT9UvAfofiMBZkCfearBHCIHbTBHx+qFyPw5isb4lQBF0Ljc46hHe03HajSSYg5P8Z0MFwtkEeURhDfYNW06vXCqfr0TPySKHUve6NrPULsh5qCYBD58SQjna7PCJlSqLtjqkTFRdLl5IOTKdPfAXt7lN7/MbaF8OPu5vxQHqrahCs4u6A9if92HsXCJ6C7ktUiuyP6l17cx9s4sLN8+TiqRo/Q783D8lMuGLx8jjreg4fvf79yEfsdXGz7GxmcetF0vtGqf/7evYgB8PyxdPzaHR98dDynmBwM0LXxZE97j2ver+H8ag7nFmFUSVs962HcZnV0nIO8Gdt+zM/iN9mgOV+qWnQaebaakpI/ixm2kICc5y4+pEWHyGBSqOud2nt8GMldyTw1Qy3a8cr2a1Wq12oNKqFZqvcsksFu1KtOm27USy3m3uR2aI4gnjF6JjoXFpyt7T5GSCe+wJoANxcslgpnTB+iNhEEuU6tK8OAaMChkzJcwXxgE2i9w9v6RXKLkzKM0ewlRLXeya7tMsbYwk8K8nFjCT3AZOIgNZtTWuheC2kasUCLWMZOvklylOIlbJzLbK+W/RKliDzKAQN1JqzIA4hH02jpDGW2H5dE2GRWPut4R83OW4nCzv+t++B8gmIdhC6mr9AzRG+uV2cfSmnS64clrwP34gDok+WaqjkBG+RZH998kQTJCVJUtMedOp7bMjEtY5LSlMFS4JTrqc3thJydfTr+5EskJtf5OPlMk6uOq5CW7pAy3atAeBYCdNmyN6BWmkE66xbIAV9lDi1Z+HFckoHEkmYK8bkkuUZ1/4AhL72O4rp63PfFJmUqm0S1vI721Woniwa8Y+vGuxj7afMPfVZMR58TuubWAd5VJ3q1peETvRK3wCbE6zATIUlSrsYPwz+XYDvkmeNaZNTLFKR6S2WcPpPTotSzUAYs5jKTtNIDIdCmeCUmwj8T6cvYRItTh9n5N9fZyZJKIBBPekESeLrO9bX9KeTA7HdJT2ht95PeptFV/9i/mo56NMxx+v/AA==</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht%0AbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50%0APSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249%0AImh0dHBzOi8vcWEyLnMudXZ2dS5jb206NDQzL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi%0AIElEPSI5MTg1NjVjMS1mZTMxLTQ4NDEtYmQ2ZC0zNDFjOWM5NDU0N2MiIElzc3VlSW5zdGFudD0i%0AMjAxNS0wNi0xMlQxMToxMjoyNi45NjRaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg%0AeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk%0AZWNlOm9yZzpvcmc6ZGVjZTpSRVRfMjwvc2FtbDI6SXNzdWVyPiAgIDxzYW1sMnA6RXh0ZW5zaW9u%0Acz4gICAgICAgICA8ZGVjZTpSZXR1cm5Ub1VSSSB4bWxuczpkZWNlPSJodHRwOi8vd3d3LmRlY2Vs%0AbGMub3JnL3NjaGVtYS8yMDE1LzAzL2Nvb3JkaW5hdG9yIj5odHRwczovL3d3dy53ZWxsc2Zhcmdv%0ALmNvbS88L2RlY2U6UmV0dXJuVG9VUkk%2BICAgICA8ZGVjZTpUYXJnZXRVUkwgeG1sbnM6ZGVjZT0i%0AaHR0cDovL3d3dy5kZWNlbGxjLm9yZy9zY2hlbWEvMjAxNS8wMy9jb29yZGluYXRvciI%2BaHR0cHM6%0ALy9xYS51dnZ1LmNvbTo3MDAyL3NzcC92aWV3cy9tZWRpYVBhZ2UuanNmPC9kZWNlOlRhcmdldFVS%0ATD4gICA8L3NhbWwycDpFeHRlbnNpb25zPiAgIDxzYW1sMnA6U3RhdHVzPiAgICAgPHNhbWwycDpT%0AdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nl%0Ac3MiLz4gICA8L3NhbWwycDpTdGF0dXM%2BICAgPHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0i%0AdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IjZiYTE2N2ZjLWFhZTMt%0ANDhlZi04ZjYxLWZiNTJiYTNmMWYxYSIgSXNzdWVJbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2%0ALjk2NFoiIFZlcnNpb249IjIuMCI%2BICAgICA8c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMu%0AY29tLzwvc2FtbDI6SXNzdWVyPiAgICAgPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3%0Ady53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BICAgICAgIDxkczpTaWduZWRJbmZvPiAgICAgICAg%0AIDxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcv%0AMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BICAgICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdv%0Acml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPiAgICAg%0AICAgIDxkczpSZWZlcmVuY2UgVVJJPSIjNmJhMTY3ZmMtYWFlMy00OGVmLThmNjEtZmI1MmJhM2Yx%0AZjFhIj4gICAgICAgICAgIDxkczpUcmFuc2Zvcm1zPiAgICAgICAgICAgICA8ZHM6VHJhbnNmb3Jt%0AIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1z%0AaWduYXR1cmUiLz4gICAgICAgICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93%0Ad3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI%2BICAgICAgICAgICAgICAgPGVjOkluY2x1%0Ac2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4%0AYy1jMTRuIyIgUHJlZml4TGlzdD0iZHMgc2FtbDIgeHMgeHNpIi8%2BICAgICAgICAgICAgIDwvZHM6%0AVHJhbnNmb3JtPiAgICAgICAgICAgPC9kczpUcmFuc2Zvcm1zPiAgICAgICAgICAgPGRzOkRpZ2Vz%0AdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGEx%0AIi8%2BICAgICAgICAgICA8ZHM6RGlnZXN0VmFsdWU%2BMlQ1dUI0NHNqSXFKSVpKSVV0ZVc1Lzczc2Qw%0APTwvZHM6RGlnZXN0VmFsdWU%2BICAgICAgICAgPC9kczpSZWZlcmVuY2U%2BICAgICAgIDwvZHM6U2ln%0AbmVkSW5mbz4gICAgICAgPGRzOlNpZ25hdHVyZVZhbHVlPkllWFpHMW8zVHd2bmxqOVBqVzRZTG1s%0AOXF3STlCTDdjaDJ1eitENG5uTit2Z3VqZFBlS0lRWk9LbHVjTnVCdjk4bEcwcm10Rkpobzcgc0N6%0AM1JmTXFhSnN6MmNRSHN2SUVGNzVvUjJOc3c0Q2x4T2F0MjZlMWpvYlR5TVJwOGNvVXBML2x1bGdo%0ARlZzYTFpMmVpaUxaU1RYRyBpSzhEeThNSEVLK3NrM0ZtL1B3PTwvZHM6U2lnbmF0dXJlVmFsdWU%2B%0AICAgICAgIDxkczpLZXlJbmZvPiAgICAgICAgIDxkczpYNTA5RGF0YT4gICAgICAgICAgIDxkczpY%0ANTA5Q2VydGlmaWNhdGU%2BTUlJRDBEQ0NBemtDQWdERE1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEN6%0AQUpCZ05WQkFZVEFsVlRNUkV3RHdZRFZRUUlFd2hXYVhKbmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNS%0AbGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXdGQVlE%0AVlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0WERURXlNRGt3TmpJd05EYzFNVm9YRFRFek1Ea3dO%0Aakl3TkRjMU1Wb3djakVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZR%0AUUhFd2hUZEdWeWJHbHVaekVqTUNFR0ExVUVBeE1hZFhKdU9tUmxZMlU2YjNKbk9tOXlaenBrWldO%0AbE9qUXdOREF4SGpBY0Jna3Foa2lHOXcwQkNRRVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0NBaUl3%0ARFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxNRXhzdWVoaUlEaWdrVmtUVUpV%0AclRCZ0tRekQ5eFNNYitnZ1RVN2ZQb2hZYlpLYzZlVzFXY0J5UEd3R1JEZmlRbTc4WUp0eVUwclp5%0AdUQxRzJmUHVuUU5NWTBmUnhqQU9vVHlpeVBpSWNrNnQ1aFRYZnpseFVmN3ZUOHl6czBabDFWR0hs%0AVENUZU1EaXlOUjlBai81bENXNTFiWmFZQ1UyR1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd21qYVBX%0AYzlEOXEzWktuRkpZbFJJSU4rQTk0amQrNnNueDNPOW5CK2FBUmIvQURsNjRYV1RDMTRQSFhMUzNp%0Ad0hNOUEra2tiWHVFTUFZR0hyTi9nampwZzZxWDJCNjJKdWYwK1NOSXpQWTZTcHR2eExhQm5UK2VX%0AeDZ6WmVOaWYwQ0xZTTVlbDB0MC81WExyVW1aVmFXZ0tEQXRQZUtUWVRqcDRKVzdMVHVUSWc3UXhx%0AQkQxaVR1YUVPejBIWE40bVM5ZTRjOFJBamU4QURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0swbGdn%0AVmU4RHZwYmRSTkU3S3d2dVkyVWZuRlRhclI4WVZLcS9IMXlaWUQ5TlpiRXRhRFp6WkI3aVluWWZW%0AUjh4Qnhxa3ZQSFRsZXpWZjYyTVd2VGFzRjJCVHFWdWtHcm9BOGpNMmVLWDNyTEVnbVQrTUFBaWFy%0AK1VFM2NmUlpBczJCVnZtdzk3U3QyVU53WnBWaVl4TUJvN1B2L09hOC9rNUJrbVB0N0ZlcVlZTkov%0AVjhWYTJSanNGM01uR2pCNWV5M2VIb2pKMjFtcEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTNZbm1B%0AbXVPY0hUV1lOdGNoS0FOcEd1dmZ1OVFicDVScTNvNTZFWEJsQWdNQkFBRXdEUVlKS29aSWh2Y05B%0AUUVGQlFBRGdZRUFsWEtJV29TRWh0WDFjYmNlSVJTVERha3pxVkxKVHpQWHlubnNtcVZTOWNrci90%0AK0JhM2w0Ym1QM3Z3SlR3K0N6UStIV2JVR0JVaktCeU8vbDF0QUhpWTF4MExqVWxiRCtLSWZRUHl3%0AaDJmWXVrcWJiWEdJN2pJMUdBWjRJTDhXMXgvUDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWpNMVJ4%0AVEdDWUhyODh4U2c9PC9kczpYNTA5Q2VydGlmaWNhdGU%2BICAgICAgICAgPC9kczpYNTA5RGF0YT4g%0AICAgICAgPC9kczpLZXlJbmZvPiAgICAgPC9kczpTaWduYXR1cmU%2BICAgICA8c2FtbDI6U3ViamVj%0AdD4gICAgICAgPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIu%0AMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZToxODUw%0ARUVFRjM3QTkzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6TmFtZUlEPiAgICAgICA8c2FtbDI6%0AU3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpj%0AbTpiZWFyZXIiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNzoxMjoyNi45NjRaIj4gICAgICAg%0AICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDExLTA4LTE4%0AVDE1OjMyOjE4LjExOVoiLz4gICAgICAgPC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPiAgICAg%0APC9zYW1sMjpTdWJqZWN0PiAgICAgPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE1LTA2%0ALTEyVDExOjEyOjE2Ljk2NFoiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNzoxMjoyNi45NjRa%0AIj4gICAgICAgPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BICAgICAgICAgPHNhbWwyOkF1ZGll%0AbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZToxMjQ8L3NhbWwyOkF1ZGllbmNlPiAgICAgICA8L3Nh%0AbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BICAgICA8L3NhbWwyOkNvbmRpdGlvbnM%2BICAgICA8c2Ft%0AbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIw%0AMDEvWE1MU2NoZW1hIiBJRD0iXzg2NDk5ZDA5LWNhOTMtNGM3NS1hYTgwLWI3YjU3ZmI2ZWNkNSIg%0ASXNzdWVJbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2Ljk2NFoiIFZlcnNpb249IjIuMCI%2BCiAg%0AIDxzYW1sMjpJc3N1ZXI%2BaHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI%2BCiAgIDxk%0AczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMi%0APgogICAgICA8ZHM6U2lnbmVkSW5mbz4KICAgICAgICAgPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRo%0Ab2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4K%0AICAgICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn%0ALzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgogICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0i%0AI184NjQ5OWQwOS1jYTkzLTRjNzUtYWE4MC1iN2I1N2ZiNmVjZDUiPgogICAgICAgICAgICA8ZHM6%0AVHJhbnNmb3Jtcz4KICAgICAgICAgICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6%0ALy93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BCiAgICAg%0AICAgICAgICAgIDxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx%0ALzEwL3htbC1leGMtYzE0biMiPgogICAgICAgICAgICAgICAgICA8ZWM6SW5jbHVzaXZlTmFtZXNw%0AYWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQ%0AcmVmaXhMaXN0PSJ4cyIvPgogICAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4KICAgICAgICAg%0AICAgPC9kczpUcmFuc2Zvcm1zPgogICAgICAgICAgICA8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRo%0AbT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KICAgICAgICAgICAg%0APGRzOkRpZ2VzdFZhbHVlPnlhd2hDWjdybnhVWGE4aTM1T0hQVS94WWEvUT08L2RzOkRpZ2VzdFZh%0AbHVlPgogICAgICAgICA8L2RzOlJlZmVyZW5jZT4KICAgICAgPC9kczpTaWduZWRJbmZvPgogICAg%0AICA8ZHM6U2lnbmF0dXJlVmFsdWU%2BaDFwNHF2Mm5pSWVoaFdyd2VGT1dGZmJvRitUek1KZlN0OHc5%0AZGR3dU9TblJnUnU4a3NhZVdkT1lwNXAwejlNRnlOZHl1M0pYZytXOXVYZVJQbWxpanMyc3FZVmpP%0AODFyVVpHVnJVb1pxSnZJeWp1RVl0bk5BNVJLSGpRdFNUNitXWFVVSCtRRThXZVNKVWFINFUwZlBY%0Ad1BLVHVVT1RqLzNVN2xGUi9RZjZvPTwvZHM6U2lnbmF0dXJlVmFsdWU%2BCiAgIDwvZHM6U2lnbmF0%0AdXJlPgogICA8c2FtbDI6U3ViamVjdD4KICAgICAgPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpv%0AYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNl%0AOnVzZXJpZDpvcmc6ZGVjZToxODUwRUVFRjM3QTkzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6%0ATmFtZUlEPgogICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNp%0AczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI%2BCiAgICAgICAgIDxzYW1sMjpT%0AdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il83YXJkb2dwa3o4djgzNjJlZzZq%0AMXNvdzAiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNDoxMjoyNi45NjRaIiBSZWNpcGllbnQ9%0AImh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1%0AbGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVRfMiIvPgogICAgICA8L3NhbWwyOlN1Ympl%0AY3RDb25maXJtYXRpb24%2BCiAgIDwvc2FtbDI6U3ViamVjdD4KICAgPHNhbWwyOkNvbmRpdGlvbnMg%0ATm90QmVmb3JlPSIyMDE1LTA2LTEyVDExOjEyOjE2Ljk2NFoiIE5vdE9uT3JBZnRlcj0iMjAxNS0w%0ANi0xMlQxNzoxMjoyNi45NjRaIj4KICAgICAgPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BCiAg%0AICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUXzI8L3NhbWwy%0AOkF1ZGllbmNlPgogICAgICA8L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BCiAgIDwvc2FtbDI6%0AQ29uZGl0aW9ucz4KICAgPHNhbWwyOkFkdmljZT4KICAgICAgPHNhbWwyOkFzc2VydGlvblVSSVJl%0AZj5odHRwczovL3FhMi5xLnV2dnUuY29tL3Jlc3QvMjAxNS8wMi9TZWN1cml0eVRva2VuL0Fzc2Vy%0AdGlvbi9fODY0OTlkMDktY2E5My00Yzc1LWFhODAtYjdiNTdmYjZlY2Q1PC9zYW1sMjpBc3NlcnRp%0Ab25VUklSZWY%2BCiAgIDwvc2FtbDI6QWR2aWNlPgogICA8c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0%0AaG5JbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2Ljk2NFoiIFNlc3Npb25JbmRleD0iXzg2NDk5%0AZDA5LWNhOTMtNGM3NS1hYTgwLWI3YjU3ZmI2ZWNkNSI%2BCiAgICAgIDxzYW1sMjpBdXRobkNvbnRl%0AeHQ%2BCiAgICAgICAgIDxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6%0AdGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NS%0AZWY%2BCiAgICAgICAgIDxzYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6%0Ab3JnOmRlY2U6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PgogICAg%0AICA8L3NhbWwyOkF1dGhuQ29udGV4dD4KICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4KICAgPHNh%0AbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD4KICAgICAgPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2Nv%0AdW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj4KICAgICAgICAgPHNh%0AbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT%0AY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpv%0Acmc6ZGVjZToxODUwRUVFRjM3QTgzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6QXR0cmlidXRl%0AVmFsdWU%2BCiAgICAgIDwvc2FtbDI6QXR0cmlidXRlPgogICA8L3NhbWwyOkF0dHJpYnV0ZVN0YXRl%0AbWVudD4KPC9zYW1sMjpBc3NlcnRpb24%2BPC9zYW1sMjpBZHZpY2U%2BICAgICA8c2FtbDI6QXV0aG5T%0AdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDExLTA4LTE3VDE1OjMyOjE4LjExOVoiIFNlc3Npb25J%0AbmRleD0iNkUxMzQzNERCOTg2QzQ3M0QzM0NGNUIyODdGMUM2OUFEMTQiIFNlc3Npb25Ob3RPbk9y%0AQWZ0ZXI9IjIwMTUtMDYtMTJUMTc6MTI6MjYuOTY0WiI%2BICAgICAgIDxzYW1sMjpBdXRobkNvbnRl%0AeHQ%2BICAgICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0%0AYzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1Jl%0AZj4gICAgICAgICA8c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BdXJuOmRlY2U6b3JnOm5l%0AdXN0YXI6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PiAgICAgICA8%0AL3NhbWwyOkF1dGhuQ29udGV4dD4gICAgIDwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BICAgPC9zYW1s%0AMjpBc3NlcnRpb24%2BIDxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv%0AeG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0i%0AaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0%0AdXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3Jz%0AYS1zaGExIi8%2BPFJlZmVyZW5jZSBVUkk9IiI%2BPFRyYW5zZm9ybXM%2BPFRyYW5zZm9ybSBBbGdvcml0%0AaG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJl%0AIi8%2BPC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y%0AZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT5LMndmWS9DZ3lRbXVmangydXhw%0AdWRFR3dIdHc9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8%2BPFNpZ25hdHVy%0AZVZhbHVlPm0wamlQTVE4TlJNUHJ5Z2RDV2lSUmN3V3FuZDZYSHFYeGcrRnRvMmVUZVJBaDVCRDZY%0Ad3JsUmZRNi9PcVF1TDNsTms2MEVxakR2eUgKSlZhNkkwOW85emFXRHprY3MwZFJhU1lkRWRwYTZV%0ATzJVV09tWWljblUra2NvekZwb3NZdm43eVZVai85S0ZuUzU0V3lkVkVLUmhVVgpXbXZsMnE0bXY0%0ALytVVDdCZ2NoaG9rM01IcHp2MnBIV0x6alBycGkvd1kwSmV2UGdJTEFvdGY4VEZQNEFsSFBaTEVJ%0AYTF0OXJjOStMCks1ZUdqMEt1NEo4cWptdmpqNXZnU1FrNFhzNjhKUExGREJjR0I3b2lDbGdlTTZJ%0AYlNGcmhkd2MxNDNpaWt0YlllT3ZJbGRHVmFjdEgKdVkycU9LaVlhM1k2YTdpMW5pOVVrYy9nUHFv%0AUEJRYXVJL3o0Znc9PTwvU2lnbmF0dXJlVmFsdWU%2BPEtleUluZm8%2BPFg1MDlEYXRhPjxYNTA5U3Vi%0AamVjdE5hbWU%2BMS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTczNzQ2MTcy%0AMmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOlJFVF8yLEw9U3RlcmxpbmcsU1Q9VkEs%0AQz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU%2BTUlJQzBUQ0NBam9DQWdXTU1B%0AMEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFz%0AVApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdBMVVFQ0JNSVZtbHlaMmx1YVdF%0AeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpkR0Z5TG5GaExtTmhNQjRYRFRF%0Aek1Ea3dNekUwTVRnek1Wb1hEVEU0TURrd01qRTBNVGd6TVZvd2N6RUwKTUFrR0ExVUVCaE1DVlZN%0AeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVrTUNJR0ExVUVBeFFi%0AZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkY4eU1SNHdIQVlKS29aSWh2Y05BUWtC%0ARmc5bWIyOUFibVYxYzNSaGNpNWpiMjB3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3%0AZ2dFS0FvSUJBUUM0U0ovM05nbTVSY2xKMVNXVStTeUxVakdsWlgzQjhDeFgKUmwvSUEvN0xlVWlV%0AUnh6SEUrMXFEbnVjMWxLU2ovN1g2Y1NhSFhwa3NLZnhlMzIremxvalBPaGdBaE90cCtvUFliRzRX%0ASWJvdFpqaApqbi94a25nU0JQaVFxNHlwQjdkS21YVFBjTHUySWlhVnZVVG5aSXc4RmZWNncrNkI0%0AWkFGZ21oQ0kvWG80TDFDeEJnUHdTMC9xWTExCmJscGtXRHdJd0VFSmJydWoyY0xNZS9kZWJIZGtq%0ATHFmd2FCNHVpN3ppQ0t4cjJmaDI1by9ha0VvWGUyZTVhMlVBU0JNWVA0ckN1M3YKZXJ2VmVpYitG%0AbnJiZk40RVlPWFpoYVVjMG55aFkrR0xjRTJoQnV4VEd5dGN3ZERPaDdCMUFRMXRWYzRRNklzTksy%0ATCtDbU54MEpqQwpyTVVmQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdZRUFnaitlTjd0U1Mr%0ANXBzUngrUUtTby9zSkNRdFA4VzNZZXFBU2Rnd1UrCndSdCtOYzMyYzdUQXNndU5USkg0cXF0cE1y%0AVE13aWJDbzg5bTRHVDBMWTR6Y21lSStGQWhiUjZGZWR2MmZwQTJLUEdXK2JKaGlLT2MKbE5CRjha%0AVTdqd2RGVnZmMzBKT0VxWW5iMTFJUWZwR0hOdmZBRSt6TnZXR3BGdm5YVzBXRm8wOD08L1g1MDlD%0AZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L3NhbWwycDpSZXNw%0Ab25zZT4%3D</con:value></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht
bG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50
PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249
Imh0dHBzOi8vcWEyLnMudXZ2dS5jb206NDQzL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi
IElEPSI5MTg1NjVjMS1mZTMxLTQ4NDEtYmQ2ZC0zNDFjOWM5NDU0N2MiIElzc3VlSW5zdGFudD0i
MjAxNS0wNi0xMlQxMToxMjoyNi45NjRaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg
eG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk
ZWNlOm9yZzpvcmc6ZGVjZTpSRVRfMjwvc2FtbDI6SXNzdWVyPiAgIDxzYW1sMnA6RXh0ZW5zaW9u
cz4gICAgICAgICA8ZGVjZTpSZXR1cm5Ub1VSSSB4bWxuczpkZWNlPSJodHRwOi8vd3d3LmRlY2Vs
bGMub3JnL3NjaGVtYS8yMDE1LzAzL2Nvb3JkaW5hdG9yIj5odHRwczovL3d3dy53ZWxsc2Zhcmdv
LmNvbS88L2RlY2U6UmV0dXJuVG9VUkk+ICAgICA8ZGVjZTpUYXJnZXRVUkwgeG1sbnM6ZGVjZT0i
aHR0cDovL3d3dy5kZWNlbGxjLm9yZy9zY2hlbWEvMjAxNS8wMy9jb29yZGluYXRvciI+aHR0cHM6
Ly9xYS51dnZ1LmNvbTo3MDAyL3NzcC92aWV3cy9tZWRpYVBhZ2UuanNmPC9kZWNlOlRhcmdldFVS
TD4gICA8L3NhbWwycDpFeHRlbnNpb25zPiAgIDxzYW1sMnA6U3RhdHVzPiAgICAgPHNhbWwycDpT
dGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nl
c3MiLz4gICA8L3NhbWwycDpTdGF0dXM+ICAgPHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0i
dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9IjZiYTE2N2ZjLWFhZTMt
NDhlZi04ZjYxLWZiNTJiYTNmMWYxYSIgSXNzdWVJbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2
Ljk2NFoiIFZlcnNpb249IjIuMCI+ICAgICA8c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMu
Y29tLzwvc2FtbDI6SXNzdWVyPiAgICAgPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3
dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+ICAgICAgIDxkczpTaWduZWRJbmZvPiAgICAgICAg
IDxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcv
MjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+ICAgICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdv
cml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPiAgICAg
ICAgIDxkczpSZWZlcmVuY2UgVVJJPSIjNmJhMTY3ZmMtYWFlMy00OGVmLThmNjEtZmI1MmJhM2Yx
ZjFhIj4gICAgICAgICAgIDxkczpUcmFuc2Zvcm1zPiAgICAgICAgICAgICA8ZHM6VHJhbnNmb3Jt
IEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1z
aWduYXR1cmUiLz4gICAgICAgICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+ICAgICAgICAgICAgICAgPGVjOkluY2x1
c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4
Yy1jMTRuIyIgUHJlZml4TGlzdD0iZHMgc2FtbDIgeHMgeHNpIi8+ICAgICAgICAgICAgIDwvZHM6
VHJhbnNmb3JtPiAgICAgICAgICAgPC9kczpUcmFuc2Zvcm1zPiAgICAgICAgICAgPGRzOkRpZ2Vz
dE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGEx
Ii8+ICAgICAgICAgICA8ZHM6RGlnZXN0VmFsdWU+MlQ1dUI0NHNqSXFKSVpKSVV0ZVc1Lzczc2Qw
PTwvZHM6RGlnZXN0VmFsdWU+ICAgICAgICAgPC9kczpSZWZlcmVuY2U+ICAgICAgIDwvZHM6U2ln
bmVkSW5mbz4gICAgICAgPGRzOlNpZ25hdHVyZVZhbHVlPkllWFpHMW8zVHd2bmxqOVBqVzRZTG1s
OXF3STlCTDdjaDJ1eitENG5uTit2Z3VqZFBlS0lRWk9LbHVjTnVCdjk4bEcwcm10Rkpobzcgc0N6
M1JmTXFhSnN6MmNRSHN2SUVGNzVvUjJOc3c0Q2x4T2F0MjZlMWpvYlR5TVJwOGNvVXBML2x1bGdo
RlZzYTFpMmVpaUxaU1RYRyBpSzhEeThNSEVLK3NrM0ZtL1B3PTwvZHM6U2lnbmF0dXJlVmFsdWU+
ICAgICAgIDxkczpLZXlJbmZvPiAgICAgICAgIDxkczpYNTA5RGF0YT4gICAgICAgICAgIDxkczpY
NTA5Q2VydGlmaWNhdGU+TUlJRDBEQ0NBemtDQWdERE1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEN6
QUpCZ05WQkFZVEFsVlRNUkV3RHdZRFZRUUlFd2hXYVhKbmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNS
bGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXdGQVlE
VlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0WERURXlNRGt3TmpJd05EYzFNVm9YRFRFek1Ea3dO
akl3TkRjMU1Wb3djakVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZR
UUhFd2hUZEdWeWJHbHVaekVqTUNFR0ExVUVBeE1hZFhKdU9tUmxZMlU2YjNKbk9tOXlaenBrWldO
bE9qUXdOREF4SGpBY0Jna3Foa2lHOXcwQkNRRVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0NBaUl3
RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxNRXhzdWVoaUlEaWdrVmtUVUpV
clRCZ0tRekQ5eFNNYitnZ1RVN2ZQb2hZYlpLYzZlVzFXY0J5UEd3R1JEZmlRbTc4WUp0eVUwclp5
dUQxRzJmUHVuUU5NWTBmUnhqQU9vVHlpeVBpSWNrNnQ1aFRYZnpseFVmN3ZUOHl6czBabDFWR0hs
VENUZU1EaXlOUjlBai81bENXNTFiWmFZQ1UyR1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd21qYVBX
YzlEOXEzWktuRkpZbFJJSU4rQTk0amQrNnNueDNPOW5CK2FBUmIvQURsNjRYV1RDMTRQSFhMUzNp
d0hNOUEra2tiWHVFTUFZR0hyTi9nampwZzZxWDJCNjJKdWYwK1NOSXpQWTZTcHR2eExhQm5UK2VX
eDZ6WmVOaWYwQ0xZTTVlbDB0MC81WExyVW1aVmFXZ0tEQXRQZUtUWVRqcDRKVzdMVHVUSWc3UXhx
QkQxaVR1YUVPejBIWE40bVM5ZTRjOFJBamU4QURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0swbGdn
VmU4RHZwYmRSTkU3S3d2dVkyVWZuRlRhclI4WVZLcS9IMXlaWUQ5TlpiRXRhRFp6WkI3aVluWWZW
Ujh4Qnhxa3ZQSFRsZXpWZjYyTVd2VGFzRjJCVHFWdWtHcm9BOGpNMmVLWDNyTEVnbVQrTUFBaWFy
K1VFM2NmUlpBczJCVnZtdzk3U3QyVU53WnBWaVl4TUJvN1B2L09hOC9rNUJrbVB0N0ZlcVlZTkov
VjhWYTJSanNGM01uR2pCNWV5M2VIb2pKMjFtcEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTNZbm1B
bXVPY0hUV1lOdGNoS0FOcEd1dmZ1OVFicDVScTNvNTZFWEJsQWdNQkFBRXdEUVlKS29aSWh2Y05B
UUVGQlFBRGdZRUFsWEtJV29TRWh0WDFjYmNlSVJTVERha3pxVkxKVHpQWHlubnNtcVZTOWNrci90
K0JhM2w0Ym1QM3Z3SlR3K0N6UStIV2JVR0JVaktCeU8vbDF0QUhpWTF4MExqVWxiRCtLSWZRUHl3
aDJmWXVrcWJiWEdJN2pJMUdBWjRJTDhXMXgvUDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWpNMVJ4
VEdDWUhyODh4U2c9PC9kczpYNTA5Q2VydGlmaWNhdGU+ICAgICAgICAgPC9kczpYNTA5RGF0YT4g
ICAgICAgPC9kczpLZXlJbmZvPiAgICAgPC9kczpTaWduYXR1cmU+ICAgICA8c2FtbDI6U3ViamVj
dD4gICAgICAgPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIu
MDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZToxODUw
RUVFRjM3QTkzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6TmFtZUlEPiAgICAgICA8c2FtbDI6
U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpj
bTpiZWFyZXIiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNzoxMjoyNi45NjRaIj4gICAgICAg
ICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgTm90T25PckFmdGVyPSIyMDExLTA4LTE4
VDE1OjMyOjE4LjExOVoiLz4gICAgICAgPC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPiAgICAg
PC9zYW1sMjpTdWJqZWN0PiAgICAgPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE1LTA2
LTEyVDExOjEyOjE2Ljk2NFoiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNzoxMjoyNi45NjRa
Ij4gICAgICAgPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+ICAgICAgICAgPHNhbWwyOkF1ZGll
bmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZToxMjQ8L3NhbWwyOkF1ZGllbmNlPiAgICAgICA8L3Nh
bWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+ICAgICA8L3NhbWwyOkNvbmRpdGlvbnM+ICAgICA8c2Ft
bDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb24geG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hIiBJRD0iXzg2NDk5ZDA5LWNhOTMtNGM3NS1hYTgwLWI3YjU3ZmI2ZWNkNSIg
SXNzdWVJbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2Ljk2NFoiIFZlcnNpb249IjIuMCI+CiAg
IDxzYW1sMjpJc3N1ZXI+aHR0cDovL2MuZGVjZWxsYy5jb20vPC9zYW1sMjpJc3N1ZXI+CiAgIDxk
czpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMi
PgogICAgICA8ZHM6U2lnbmVkSW5mbz4KICAgICAgICAgPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRo
b2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4K
ICAgICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn
LzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgogICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0i
I184NjQ5OWQwOS1jYTkzLTRjNzUtYWE4MC1iN2I1N2ZiNmVjZDUiPgogICAgICAgICAgICA8ZHM6
VHJhbnNmb3Jtcz4KICAgICAgICAgICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6
Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+CiAgICAg
ICAgICAgICAgIDxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx
LzEwL3htbC1leGMtYzE0biMiPgogICAgICAgICAgICAgICAgICA8ZWM6SW5jbHVzaXZlTmFtZXNw
YWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQ
cmVmaXhMaXN0PSJ4cyIvPgogICAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4KICAgICAgICAg
ICAgPC9kczpUcmFuc2Zvcm1zPgogICAgICAgICAgICA8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRo
bT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4KICAgICAgICAgICAg
PGRzOkRpZ2VzdFZhbHVlPnlhd2hDWjdybnhVWGE4aTM1T0hQVS94WWEvUT08L2RzOkRpZ2VzdFZh
bHVlPgogICAgICAgICA8L2RzOlJlZmVyZW5jZT4KICAgICAgPC9kczpTaWduZWRJbmZvPgogICAg
ICA8ZHM6U2lnbmF0dXJlVmFsdWU+aDFwNHF2Mm5pSWVoaFdyd2VGT1dGZmJvRitUek1KZlN0OHc5
ZGR3dU9TblJnUnU4a3NhZVdkT1lwNXAwejlNRnlOZHl1M0pYZytXOXVYZVJQbWxpanMyc3FZVmpP
ODFyVVpHVnJVb1pxSnZJeWp1RVl0bk5BNVJLSGpRdFNUNitXWFVVSCtRRThXZVNKVWFINFUwZlBY
d1BLVHVVT1RqLzNVN2xGUi9RZjZvPTwvZHM6U2lnbmF0dXJlVmFsdWU+CiAgIDwvZHM6U2lnbmF0
dXJlPgogICA8c2FtbDI6U3ViamVjdD4KICAgICAgPHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpv
YXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNl
OnVzZXJpZDpvcmc6ZGVjZToxODUwRUVFRjM3QTkzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6
TmFtZUlEPgogICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNp
czpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+CiAgICAgICAgIDxzYW1sMjpT
dWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il83YXJkb2dwa3o4djgzNjJlZzZq
MXNvdzAiIE5vdE9uT3JBZnRlcj0iMjAxNS0wNi0xMlQxNDoxMjoyNi45NjRaIiBSZWNpcGllbnQ9
Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0ODUvc2ltcGxlc2FtbC9tb2R1
bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVRfMiIvPgogICAgICA8L3NhbWwyOlN1Ympl
Y3RDb25maXJtYXRpb24+CiAgIDwvc2FtbDI6U3ViamVjdD4KICAgPHNhbWwyOkNvbmRpdGlvbnMg
Tm90QmVmb3JlPSIyMDE1LTA2LTEyVDExOjEyOjE2Ljk2NFoiIE5vdE9uT3JBZnRlcj0iMjAxNS0w
Ni0xMlQxNzoxMjoyNi45NjRaIj4KICAgICAgPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+CiAg
ICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUXzI8L3NhbWwy
OkF1ZGllbmNlPgogICAgICA8L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+CiAgIDwvc2FtbDI6
Q29uZGl0aW9ucz4KICAgPHNhbWwyOkFkdmljZT4KICAgICAgPHNhbWwyOkFzc2VydGlvblVSSVJl
Zj5odHRwczovL3FhMi5xLnV2dnUuY29tL3Jlc3QvMjAxNS8wMi9TZWN1cml0eVRva2VuL0Fzc2Vy
dGlvbi9fODY0OTlkMDktY2E5My00Yzc1LWFhODAtYjdiNTdmYjZlY2Q1PC9zYW1sMjpBc3NlcnRp
b25VUklSZWY+CiAgIDwvc2FtbDI6QWR2aWNlPgogICA8c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0
aG5JbnN0YW50PSIyMDE1LTA2LTEyVDExOjEyOjI2Ljk2NFoiIFNlc3Npb25JbmRleD0iXzg2NDk5
ZDA5LWNhOTMtNGM3NS1hYTgwLWI3YjU3ZmI2ZWNkNSI+CiAgICAgIDxzYW1sMjpBdXRobkNvbnRl
eHQ+CiAgICAgICAgIDxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6
dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NS
ZWY+CiAgICAgICAgIDxzYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6
b3JnOmRlY2U6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PgogICAg
ICA8L3NhbWwyOkF1dGhuQ29udGV4dD4KICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4KICAgPHNh
bWwyOkF0dHJpYnV0ZVN0YXRlbWVudD4KICAgICAgPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY2Nv
dW50SUQiIE5hbWVGb3JtYXQ9InVybjpkZWNlOnR5cGU6YWNjb3VudElEIj4KICAgICAgICAgPHNh
bWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpv
cmc6ZGVjZToxODUwRUVFRjM3QTgzREU2RTA1MzA3OTkxRjBBNDZGRDwvc2FtbDI6QXR0cmlidXRl
VmFsdWU+CiAgICAgIDwvc2FtbDI6QXR0cmlidXRlPgogICA8L3NhbWwyOkF0dHJpYnV0ZVN0YXRl
bWVudD4KPC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMjpBZHZpY2U+ICAgICA8c2FtbDI6QXV0aG5T
dGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDExLTA4LTE3VDE1OjMyOjE4LjExOVoiIFNlc3Npb25J
bmRleD0iNkUxMzQzNERCOTg2QzQ3M0QzM0NGNUIyODdGMUM2OUFEMTQiIFNlc3Npb25Ob3RPbk9y
QWZ0ZXI9IjIwMTUtMDYtMTJUMTc6MTI6MjYuOTY0WiI+ICAgICAgIDxzYW1sMjpBdXRobkNvbnRl
eHQ+ICAgICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0
YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1Jl
Zj4gICAgICAgICA8c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+dXJuOmRlY2U6b3JnOm5l
dXN0YXI6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PiAgICAgICA8
L3NhbWwyOkF1dGhuQ29udGV4dD4gICAgIDwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ+ICAgPC9zYW1s
MjpBc3NlcnRpb24+IDxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv
eG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0i
aHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0
dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3Jz
YS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0
aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJl
Ii8+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT5LMndmWS9DZ3lRbXVmangydXhw
dWRFR3dIdHc9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVy
ZVZhbHVlPm0wamlQTVE4TlJNUHJ5Z2RDV2lSUmN3V3FuZDZYSHFYeGcrRnRvMmVUZVJBaDVCRDZY
d3JsUmZRNi9PcVF1TDNsTms2MEVxakR2eUgKSlZhNkkwOW85emFXRHprY3MwZFJhU1lkRWRwYTZV
TzJVV09tWWljblUra2NvekZwb3NZdm43eVZVai85S0ZuUzU0V3lkVkVLUmhVVgpXbXZsMnE0bXY0
LytVVDdCZ2NoaG9rM01IcHp2MnBIV0x6alBycGkvd1kwSmV2UGdJTEFvdGY4VEZQNEFsSFBaTEVJ
YTF0OXJjOStMCks1ZUdqMEt1NEo4cWptdmpqNXZnU1FrNFhzNjhKUExGREJjR0I3b2lDbGdlTTZJ
YlNGcmhkd2MxNDNpaWt0YlllT3ZJbGRHVmFjdEgKdVkycU9LaVlhM1k2YTdpMW5pOVVrYy9nUHFv
UEJRYXVJL3o0Znc9PTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5U3Vi
amVjdE5hbWU+MS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTczNzQ2MTcy
MmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOlJFVF8yLEw9U3RlcmxpbmcsU1Q9VkEs
Qz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU+TUlJQzBUQ0NBam9DQWdXTU1B
MEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFz
VApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdBMVVFQ0JNSVZtbHlaMmx1YVdF
eEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpkR0Z5TG5GaExtTmhNQjRYRFRF
ek1Ea3dNekUwTVRnek1Wb1hEVEU0TURrd01qRTBNVGd6TVZvd2N6RUwKTUFrR0ExVUVCaE1DVlZN
eEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVrTUNJR0ExVUVBeFFi
ZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkY4eU1SNHdIQVlKS29aSWh2Y05BUWtC
Rmc5bWIyOUFibVYxYzNSaGNpNWpiMjB3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3
Z2dFS0FvSUJBUUM0U0ovM05nbTVSY2xKMVNXVStTeUxVakdsWlgzQjhDeFgKUmwvSUEvN0xlVWlV
Unh6SEUrMXFEbnVjMWxLU2ovN1g2Y1NhSFhwa3NLZnhlMzIremxvalBPaGdBaE90cCtvUFliRzRX
SWJvdFpqaApqbi94a25nU0JQaVFxNHlwQjdkS21YVFBjTHUySWlhVnZVVG5aSXc4RmZWNncrNkI0
WkFGZ21oQ0kvWG80TDFDeEJnUHdTMC9xWTExCmJscGtXRHdJd0VFSmJydWoyY0xNZS9kZWJIZGtq
THFmd2FCNHVpN3ppQ0t4cjJmaDI1by9ha0VvWGUyZTVhMlVBU0JNWVA0ckN1M3YKZXJ2VmVpYitG
bnJiZk40RVlPWFpoYVVjMG55aFkrR0xjRTJoQnV4VEd5dGN3ZERPaDdCMUFRMXRWYzRRNklzTksy
TCtDbU54MEpqQwpyTVVmQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdZRUFnaitlTjd0U1Mr
NXBzUngrUUtTby9zSkNRdFA4VzNZZXFBU2Rnd1UrCndSdCtOYzMyYzdUQXNndU5USkg0cXF0cE1y
VE13aWJDbzg5bTRHVDBMWTR6Y21lSStGQWhiUjZGZWR2MmZwQTJLUEdXK2JKaGlLT2MKbE5CRjha
VTdqd2RGVnZmMzBKT0VxWW5iMTFJUWZwR0hOdmZBRSt6TnZXR3BGdm5YVzBXRm8wOD08L1g1MDlD
ZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L3NhbWwycDpSZXNw
b25zZT4=</con:value></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa2.s.uvvu.com:443/security/federation/saml/acs" ID="918565c1-fe31-4841-bd6d-341c9c94547c" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET_2</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://qa.uvvu.com:7002/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2015-06-12T17:12:26.964Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5" IssueInstant="2015-06-12T11:12:26.964Z" Version="2.0">
   <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:SignedInfo>
         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
         <ds:Reference URI="#_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
            <ds:Transforms>
               <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
               <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/>
               </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>yawhCZ7rnxUXa8i35OHPU/xYa/Q=</ds:DigestValue>
         </ds:Reference>
      </ds:SignedInfo>
      <ds:SignatureValue>h1p4qv2niIehhWrweFOWFfboF+TzMJfSt8w9ddwuOSnRgRu8ksaeWdOYp5p0z9MFyNdyu3JXg+W9uXeRPmlijs2sqYVjO81rUZGVrUoZqJvIyjuEYtnNA5RKHjQtST6+WXUUH+QE8WeSJUaH4U0fPXwPKTuUOTj/3U7lFR/Qf6o=</ds:SignatureValue>
   </ds:Signature>
   <saml2:Subject>
      <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</saml2:NameID>
      <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches">
         <saml2:SubjectConfirmationData InResponseTo="_7ardogpkz8v8362eg6j1sow0" NotOnOrAfter="2015-06-12T14:12:26.964Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET_2"/>
      </saml2:SubjectConfirmation>
   </saml2:Subject>
   <saml2:Conditions NotBefore="2015-06-12T11:12:16.964Z" NotOnOrAfter="2015-06-12T17:12:26.964Z">
      <saml2:AudienceRestriction>
         <saml2:Audience>urn:dece:org:org:dece:RET_2</saml2:Audience>
      </saml2:AudienceRestriction>
   </saml2:Conditions>
   <saml2:Advice>
      <saml2:AssertionURIRef>https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5</saml2:AssertionURIRef>
   </saml2:Advice>
   <saml2:AuthnStatement AuthnInstant="2015-06-12T11:12:26.964Z" SessionIndex="_86499d09-ca93-4c75-aa80-b7b57fb6ecd5">
      <saml2:AuthnContext>
         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>
         <saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority>
      </saml2:AuthnContext>
   </saml2:AuthnStatement>
   <saml2:AttributeStatement>
      <saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID">
         <saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</saml2:AttributeValue>
      </saml2:Attribute>
   </saml2:AttributeStatement>
</saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="6E13434DB986C473D33CF5B287F1C69AD14" SessionNotOnOrAfter="2015-06-12T17:12:26.964Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>6E13434DB986C473D33CF5B287F1C69AD14</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa2.q.uvvu.com/rest/2015/02/SecurityToken/Assertion/_86499d09-ca93-4c75-aa80-b7b57fb6ecd5&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>username</con:name><con:value>RSAML_UserName20150612_1434107726596</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>377c947e-59f4-4d30-8da5-0e688ae57897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56ca4b95-83fa-47b0-8b9f-5af7de663ad0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff8a96c3-81a8-4032-8089-c9ea813f4484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login_MediaPage" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="7ee538bc-a346-4a19-9168-c01d2ec51a1e"><con:settings/><con:testStep type="groovy" name="Set_TLS" id="5eef1daa-56cf-44ff-9bad-41f23facda5e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Proj Property" id="1d391d75-7fa7-4798-af27-8d22b499b05d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("assertionXMLnode",tP.getPropertyValue("assertionXMLnode_NewVersion"));

log.info tP.getPropertyValue("assertionXMLnode")

</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName" id="39359733-c6df-405e-93c1-afc99f59867c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>21ddf1dc-dc3b-4942-b6ac-34c838187b31</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="b663e7ad-64e3-4a49-9269-140989e589cf"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="0417f055-988f-4f75-ace8-cddc6085d686"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="a6d33431-5656-41d2-aa2f-d41d8fdd0723"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() ==0 ;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     int lastSlash = urlStr.lastIndexOf('/');
    	accountid     = urlStr.substring(lastSlash + 1);
   
	tP.setPropertyValue("NODEACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="9494361a-8ae8-463a-9e25-9456a75f4dea"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1508bdfb-ae39-4c07-8d58-884b5ae61d0b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="23e5cdda-f60b-4f5c-8a93-6f6537803e47"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
        	<!--<GivenName>UVTC_AltEmail</GivenName>-->
		<SurName>Gupta</SurName>
	</Name>	
	       <DisplayImage>
	       <DisplayImageURL>https://qa.uvvu.com:7001/static/images/Image_IPT.jpg</DisplayImageURL>
        <!--DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData-->
    </DisplayImage>
	<ContactInfo>
        <!--PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#Project#Node_OID}" VerificationStatus="urn:dece:type:status:success"-->			
        <PrimaryEmail>
	 <Value>shikha82@gmail.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>sunitha.pemmasani@neustar.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
       <TelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </TelephoneNumber>
        <MobileTelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
        </MobileTelephoneNumber>
	</ContactInfo>
        <Languages>
		<Language primary="true">en-GB</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1930-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
                <!--Password IsRandom="false"></Password-->
               <!--Password>password&#x20ac;</Password-->
             	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1" id="a0ac519c-9160-4480-8434-9c015985a449"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1" id="731a88e1-7675-4fe2-a9d5-b78a8d0fe5a7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	int lastSlash = urlStr.lastIndexOf('/');
    	userid = urlStr.substring(lastSlash + 1);
   
    tP.setPropertyValue("NODEUSERID",userid);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="471c8964-6453-486f-aad4-584ab64af4f4"><con:settings/><con:config><script>//Note if there is change in the namespace we need to change in the project property value of assertionXMLnote(Replace only the namespace)
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def targetPort = context.expand( '${#Project#targetPort}' )

//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:home");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:account");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library:urn:dece:rightstokenid:org:dece:C752EB964745B107E0401F0A07997A92");//C752EB964758B107E0401F0A07997A92");//{rightsTokenID}");
//urn:dece:rightstokenid:org:dece:D4C4ED3C220C8F0FE0401F0A07992649
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:device");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:tou");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA");//urn:dece:userid:org:dece:D6BB14AF2AAFCA3BE0401F0A059911B6
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:D4C4087DA00D3419E0401F0A079907D0");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:EA6030364B7B5437E0401F0A07997962");//urn:dece:portal:user:D4C4087DA00D3419E0401F0A079907D0"); //Passes

//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/userProfilePage.jsf");
tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/mediaPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/accountDashboardPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/touPage.jsf");
//tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");*/

def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tP.getPropertyValue("nodeid"));
//tC.setPropertyValue("username","pjgrevsamlstandard1");
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);

//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:500500");
//tC.setPropertyValue("stsaudience",null);
//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:4042");
/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);


/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" id="84af8839-5cef-4eb3-9c66-5ea04e0b8005"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" id="3d5edf81-32fc-4fb2-b7f4-dd5f5838eb2b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML" id="f7212bd5-bd14-413a-b23f-7e4b682b64f3"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();

log.info 'assertionIDPXML = ' +tP.getPropertyValue("assertionXMLnode").toString();
log.info 'assertionDECEXML = ' +tC.getPropertyValue("assertionXMLuser").toString();
log.info 'assertionURIXML ='+ tP.getPropertyValue("assertionURIXML").toString();
log.info 'outFile ='+ tP.getPropertyValue("fileSamlResponseXML").toString();
log.info 'rsamlTargetURL ='+  tC.getPropertyValue("rsamlTargetURL").toString();
log.info 'rsamlReturnToURL ='+ tC.getPropertyValue("rsamlReturnToURL").toString();

String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

log.info 'deceroot=='+deceroot

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	log.info 'HAS ATTRIBUTE ID'
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		log.info 'NOTNULL rsamlSPID'
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
				
//////Adding this R2/////////////////////
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);						
//Added This: If We need To give the Invalid NameId in the RSaml Response

						//subjectNameid.setTextContent("urn:dece:userid:org:dece:BBBBBBBBBBBBBBB");
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotBefore","2013-03-13T01:52:52.741Z");
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);	
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotOnOrAfter","2013-03-27T01:52:52.741Z");							
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}

log.info xml3.toString();








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="25b779c7-c147-4241-98d6-b06cc036d492"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;


def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String signedsamlResponseFile = tP.getPropertyValue("fileSamlResponseSigned").toString();

log.info "samlResponseFile[$samlResponseFile]";
log.info "signedsamlResponseFile[$signedsamlResponseFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

  
// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());

KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing

X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
log.info "DocumentBuilderFactory -- samlResponseFile[$samlResponseFile]";
Document doc = dbf.newDocumentBuilder().parse(samlResponseFile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlResponseFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml" id="19e70ed4-7403-401c-a74e-85075b88683d"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseJustBase64", null);

String signedSamlResponse = tP.getPropertyValue("fileSamlResponseSigned");

file = new File(signedSamlResponse);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();



//String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));
String base64Str = Base64.encodeBytes(bytes);
String samlResponseurlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlResponse", samlResponseurlencoded);
tC.setPropertyValue("samlResponseJustBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="1903db50-4bbb-4ebe-8dfb-9c4fce54e19f"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
String token = tC.getPropertyValue("samlResponseJustBase64").toString();

//////Added this for the shost////////

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://""" + tP.getPropertyValue("targetHostportal") + ":" + tP.getPropertyValue("targetPortportal") + """/security/federation/saml/acs" method="post"> <input name="SAMLResponse" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RSAML_POST" disabled="true" id="0b390e86-23bc-4b64-9b1e-65ef1ebb9a86"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RSAML_POST" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>SAMLResponse=${#TestCase#samlResponseJustBase64}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>shikha_user_create_accp_test_20140324_01427</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>FFD7D5E9C398ED862E386A86624267283B6</con:value></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="f406ce4c-2741-4daf-82ea-08516c0d18b0" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7001/ssp/views/userProfilePage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-03-24T23:42:09.054Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_16591033-5911-4315-ae47-4bcba6055a4e" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_16591033-5911-4315-ae47-4bcba6055a4e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tYSv+KZ7YOAX2DaeyqHEY1v6p7k=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
y3FEitRqpABPQb7xZANNj4ghYqaamyLK/MSyOI8uxqnO3lhDHifX/k4ZGC6MIxuXsoBWpFLgnNkw
4wOP4Lf2PWwdEFDr4T9UYjLbpECgHxMqgCpHIWav2RpCi9/bQrFEEExbeBK2pfDdQFgi9SdbZPqw
PksgfnjoS7w5ez4O4lA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C90177DB6401C7D450771EB4E176ADEC" NotOnOrAfter="2014-03-24T20:42:09.054Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-24T17:42:09.054Z" SessionIndex="_16591033-5911-4315-ae47-4bcba6055a4e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="FFD7D5E9C398ED862E386A86624267283B6" SessionNotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht
bG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50
PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249
Imh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi
IElEPSJmNDA2Y2U0Yy0yNzQxLTRkYWYtODJlYS0wODUxNmMwZDE4YjAiIElzc3VlSW5zdGFudD0i
MjAxNC0wMy0yNFQxNzo0MjowOS4wNTRaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg
eG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk
ZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM+
ICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj
Lm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI+aHR0cHM6Ly93d3cud2VsbHNmYXJnby5j
b20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0
dHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPmh0dHBzOi8v
cWEudXZ2dS5jb206NzAwMS9zc3Avdmlld3MvdXNlclByb2ZpbGVQYWdlLmpzZjwvZGVjZTpUYXJn
ZXRVUkw+ICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0YXR1cz4gICAgIDxzYW1s
MnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpT
dWNjZXNzIi8+ICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2Ft
bDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSI2YmExNjdmYy1h
YWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0iMjAxNC0wMy0yNFQxNzo0
MjowOS4wNTRaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNl
bGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6U2lnbmVkSW5mbz4gICAg
ICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMu
b3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpTaWduYXR1cmVNZXRob2Qg
QWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4g
ICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMtNDhlZi04ZjYxLWZiNTJi
YTNmMWYxYSI+ICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAgICAgICAgPGRzOlRyYW5z
Zm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w
ZWQtc2lnbmF0dXJlIi8+ICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAgICAgICAgICAgIDxlYzpJ
bmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3ht
bC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIvPiAgICAgICAgICAgICA8
L2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4gICAgICAgICAgIDxkczpE
aWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcj
c2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRzaklxSklaSklVdGVXNS83
M3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJlbmNlPiAgICAgICA8L2Rz
OlNpZ25lZEluZm8+ICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVhaRzFvM1R3dm5sajlQalc0
WUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051QnY5OGxHMHJtdEZKaG83
IHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFqb2JUeU1ScDhjb1VwTC9s
dWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08L2RzOlNpZ25hdHVyZVZh
bHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURhdGE+ICAgICAgICAgICA8
ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1NxR1NJYjNEUUVCQlFVQU1H
b3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVwWVRFUk1BOEdBMVVFQnhN
SVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFzVEFsRkJNUll3
RkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05qSXdORGMxTVZvWERURXpN
RGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBbFpCTVJFd0R3
WURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJsWTJVNmIzSm5PbTl5Wnpw
a1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVaWFZ6ZEdGeUxtTnZiVEND
QWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTUV4c3VlaGlJRGlna1Zr
VFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBHd0dSRGZpUW03OFlKdHlV
MHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6bHhVZjd2VDh5enMwWmwx
VkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFSOXFjVmMvZkdTVDZCQndt
amFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJiL0FEbDY0WFdUQzE0UEhY
TFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtTTkl6UFk2U3B0dnhMYUJu
VCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVLVFlUanA0Slc3TFR1VEln
N1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hVQStrQUNDZk9BK3BpWGdL
MGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllEOU5aYkV0YURaelpCN2lZ
bllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThqTTJlS1gzckxFZ21UK01B
QWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9PYTgvazVCa21QdDdGZXFZ
WU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMyK0RrNkgxR3RMVGVPVkkz
WW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFnTUJBQUV3RFFZSktvWklo
dmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZMSlR6UFh5bm5zbXFWUzlj
a3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFIaVkxeDBMalVsYkQrS0lm
UVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2TkpVWkhXNHNaMFEwWUFq
TTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAgICAgIDwvZHM6WDUwOURh
dGE+ICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJlPiAgICAgPHNhbWwyOlN1
YmplY3Q+ICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FN
TDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6
QkVDNEE3NTZGMjVGNDQxMDlDRjU0RjQ0OTQ4MUY5QTg8L3NhbWwyOk5hbWVJRD4gICAgICAgPHNh
bWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoy
LjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjM6NDI6MDkuMDU0WiI+ICAg
ICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxMS0w
OC0xOFQxNTozMjoxOC4xMTlaIi8+ICAgICAgIDwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj4g
ICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAx
NC0wMy0yNFQxNzo0MTo1OS4wNTRaIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjM6NDI6MDku
MDU0WiI+ICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgICAgIDxzYW1sMjpB
dWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpBdWRpZW5jZT4gICAgICAg
PC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpDb25kaXRpb25zPiAgICAg
PHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMTY1OTEwMzMtNTkxMS00MzE1LWFl
NDctNGJjYmE2MDU1YTRlIiBJc3N1ZUluc3RhbnQ9IjIwMTQtMDMtMjRUMTc6NDI6MDkuMDU0WiIg
VmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6
SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv
eG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNp
Z25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNp
ZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI18xNjU5MTAzMy01OTExLTQzMTUtYWU0
Ny00YmNiYTYwNTVhNGUiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09
Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+
CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1l
eGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv
PjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3Jp
dGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0
VmFsdWU+dFlTditLWjdZT0FYMkRhZXlxSEVZMXY2cDdrPTwvZHM6RGlnZXN0VmFsdWU+CjwvZHM6
UmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8+CjxkczpTaWduYXR1cmVWYWx1ZT4KeTNGRWl0UnFw
QUJQUWI3eFpBTk5qNGdoWXFhYW15TEsvTVN5T0k4dXhxbk8zbGhESGlmWC9rNFpHQzZNSXh1WHNv
QldwRkxnbk5rdwo0d09QNExmMlBXd2RFRkRyNFQ5VVlqTGJwRUNnSHhNcWdDcEhJV2F2MlJwQ2k5
L2JRckZFRUV4YmVCSzJwZkRkUUZnaTlTZGJaUHF3ClBrc2dmbmpvUzd3NWV6NE80bEE9CjwvZHM6
U2lnbmF0dXJlVmFsdWU+CjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1l
SUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJz
aXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6QkVDNEE3NTZGMjVGNDQxMDlDRjU0RjQ0
OTQ4MUY5QTg8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9
InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1
YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iX0M5MDE3N0RCNjQwMUM3RDQ1MDc3
MUVCNEUxNzZBREVDIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjA6NDI6MDkuMDU0WiIgUmVj
aXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNh
bWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvUkVUIi8+PC9zYW1sMjpTdWJqZWN0
Q29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9
IjIwMTQtMDMtMjRUMTc6NDE6NTkuMDU0WiIgTm90T25PckFmdGVyPSIyMDE0LTAzLTI0VDIzOjQy
OjA5LjA1NFoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46
ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVz
dHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U+PHNhbWwyOkFzc2VydGlv
blVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEvMTEvU2VjdXJpdHlUb2tl
bi9Bc3NlcnRpb24vXzE2NTkxMDMzLTU5MTEtNDMxNS1hZTQ3LTRiY2JhNjA1NWE0ZTwvc2FtbDI6
QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo
bkluc3RhbnQ9IjIwMTQtMDMtMjRUMTc6NDI6MDkuMDU0WiIgU2Vzc2lvbkluZGV4PSJfMTY1OTEw
MzMtNTkxMS00MzE1LWFlNDctNGJjYmE2MDU1YTRlIj48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1s
MjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xh
c3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PHNhbWwyOkF1dGhlbnRp
Y2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6
QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRo
blN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFt
ZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI+PHNhbWwy
OkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVt
YSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIg
eHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9yZzpkZWNlOkFDQzQyNjI2
RjI1RjQ0MTA5Q0Y1NEY0NDk0ODFGOUE4PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0
dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3Nh
bWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTEt
MDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSJGRkQ3RDVFOUMzOThFRDg2MkUzODZB
ODY2MjQyNjcyODNCNiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxNC0wMy0yNFQyMzo0MjowOS4w
NTRaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8c2FtbDI6QXV0aG5Db250
ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dv
cmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxzYW1sMjpBdXRoZW50aWNh
dGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGluYXRvcjwvc2FtbDI6QXV0
aGVudGljYXRpbmdBdXRob3JpdHk+ICAgICAgIDwvc2FtbDI6QXV0aG5Db250ZXh0PiAgICAgPC9z
YW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4gPFNpZ25hdHVyZSB4bWxu
cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNpZ25lZEluZm8+PENhbm9u
aWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JF
Qy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVmZXJlbmNlIFVSST0iIj48
VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8w
OS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9ybXM+PERpZ2VzdE1ldGhv
ZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+PERp
Z2VzdFZhbHVlPjNjMDFjcnJ6TS9qMGtEY29IRU16MTYwa3pPZz08L0RpZ2VzdFZhbHVlPjwvUmVm
ZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+Q0JHWEN4MkRaRUoxQ0dmblVPSkc4
M000b1E0TW1CVTFDcllNeFJraTRXTGhpdHkwVkkrTFVKc2pSNHE3ZVgyckJnbVZMNXZEUUZuKwpi
QjFLanRCNzBSNU8xcHU1RWI5Q2RUTFM3NnJMNzIrYzFRLzVmNmx3dFNXY1djcEtjV0dIa2N6a2lo
Sm1lZkdTZmV6STk3NnQ1ZjQ3Ci9UQTVTN1NCT3l5WitjRC9EZmcrMUhQWmNmcmdEQUxOYi9iQ3N1
K2ZRZWg1VmsrY2hQVHRjYVR5dnNoNUUrZldXYi9CRzNVZklIZGIKa0tKTCtSTVpBVVFBTDk3bGNL
RlcyeEtLZVZDU0owUzNPUXJualE3WUNndGV3VnBScFZnbVF5Z0g0a0RRVUdVQk5IVU1ZTllVdk8y
UApTYnZjWWJ4UzVvcytzakJMZDU4N1lMczl3UW5HRDRPV1c5OXlxM0FIL3RqVVpIMTVtVjVPTWxr
b0h2c3E2WmM4N0F1QmhKU3M1UHlPCnJSRndkdzBwRDJZR0lDendoUFdBeFlGUXNURXRQNUdWeGpT
M3VrUkpHNHh0WVl1aU0yL0R5Y014UzhCWVdHSy9ZOEtOWDdkamZEMmoKdnhRZERodXRGS3huVEJI
NFVCRUZSVXQ2Umorb0Z6ODdCSUcvWjdiZGdTaXB1TTNHVUxFZE5IUzRyeGQyNnd2eEg3aEsralBK
a3dNSAp0TWZWZUpWcWdldVdHdjNDT21jeTBueko5REdNQmxNUXJKMEphUG9QR1paTkFsaUFlQzFL
dlZyZGI5MDdVMjFuRnpyMGN2YWJ5bFU4Cm1lNFJSc2xBTm9kc1BFNklsbWRqbjRORzNPS2gwYzVW
L2pzbCt5SFdBTzFiK29Ld1duTGRuRDRCVG9iSGcwakxDV2xUZndlVUJPQT08L1NpZ25hdHVyZVZh
bHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEuMi44NDAuMTEzNTQ5LjEu
OS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENOPXVybjpkZWNlOm9yZzpv
cmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3ViamVjdE5hbWU+PFg1MDlD
ZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFFQkJRVUFNR294RURBT0Jn
TlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJH
bHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlUQWxWVE1SWXcKRkFZRFZR
UURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5TUZvWERURTRNRFV5T1RF
ME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdUQWxaQk1SRXdEd1lEVlFR
SEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2YjNKbk9tOXlaenBrWldO
bE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZWEl1WTI5dE1JSUMKSWpB
TkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYrbE5UUVJZZGx2VFNCeEVa
eFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2VkV25KZUFoQlZ5TXh1SWJn
M1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJzNm4yQXBKc3BIRTc5b0FN
SDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBjeXNoczF2SERYWmE2T2wK
Sy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZDSEtyeGNIb2JzMmx1aTlx
b2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtEbnB6ZHZMR1VLaisvbXJO
c1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUyeWMrLzFTYWpsZlpKRGpE
a1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZPWUZzTVhVeGJpUk5Zd0p5
QncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdUclBtN0kxY3MyR1BBOTZj
UzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNFbkZTcDZEQmp2cEVZbUt3
cldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hOCkxlT2t2ZlF3QTU0QWJ3
bS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0cWllTHgvVnZjMW9tdUxi
TGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFSWXEwQ0F3RUFBVEFOQmdr
cWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCswNnpnTkpmUFhwRGQ1dFBX
RmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhFM2RhClViL2pYNjFOUkFH
eE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtuUlBkV2kyQ0FrOVRoaFZ2
OCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9L
ZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg==</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht%0AbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50%0APSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249%0AImh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi%0AIElEPSJmNDA2Y2U0Yy0yNzQxLTRkYWYtODJlYS0wODUxNmMwZDE4YjAiIElzc3VlSW5zdGFudD0i%0AMjAxNC0wMy0yNFQxNzo0MjowOS4wNTRaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg%0AeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk%0AZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM%2B%0AICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj%0ALm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI%2BaHR0cHM6Ly93d3cud2VsbHNmYXJnby5j%0Ab20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0%0AdHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPmh0dHBzOi8v%0AcWEudXZ2dS5jb206NzAwMS9zc3Avdmlld3MvdXNlclByb2ZpbGVQYWdlLmpzZjwvZGVjZTpUYXJn%0AZXRVUkw%2BICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0YXR1cz4gICAgIDxzYW1s%0AMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpT%0AdWNjZXNzIi8%2BICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3NlcnRpb24geG1sbnM6c2Ft%0AbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iIElEPSI2YmExNjdmYy1h%0AYWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0iMjAxNC0wMy0yNFQxNzo0%0AMjowOS4wNTRaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNl%0AbGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6%0ALy93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6U2lnbmVkSW5mbz4gICAg%0AICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMu%0Ab3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpTaWduYXR1cmVNZXRob2Qg%0AQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz4g%0AICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMtNDhlZi04ZjYxLWZiNTJi%0AYTNmMWYxYSI%2BICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAgICAgICAgPGRzOlRyYW5z%0AZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w%0AZWQtc2lnbmF0dXJlIi8%2BICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRw%0AOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAgICAgICAgICAgIDxlYzpJ%0AbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3ht%0AbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIvPiAgICAgICAgICAgICA8%0AL2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4gICAgICAgICAgIDxkczpE%0AaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcj%0Ac2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRzaklxSklaSklVdGVXNS83%0AM3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJlbmNlPiAgICAgICA8L2Rz%0AOlNpZ25lZEluZm8%2BICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVhaRzFvM1R3dm5sajlQalc0%0AWUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051QnY5OGxHMHJtdEZKaG83%0AIHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFqb2JUeU1ScDhjb1VwTC9s%0AdWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08L2RzOlNpZ25hdHVyZVZh%0AbHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURhdGE%2BICAgICAgICAgICA8%0AZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1NxR1NJYjNEUUVCQlFVQU1H%0Ab3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVwWVRFUk1BOEdBMVVFQnhN%0ASVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpCZ05WQkFzVEFsRkJNUll3%0ARkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05qSXdORGMxTVZvWERURXpN%0ARGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBbFpCTVJFd0R3%0AWURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJsWTJVNmIzSm5PbTl5Wnpw%0Aa1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVaWFZ6ZEdGeUxtTnZiVEND%0AQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFMTUV4c3VlaGlJRGlna1Zr%0AVFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBHd0dSRGZpUW03OFlKdHlV%0AMHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6bHhVZjd2VDh5enMwWmwx%0AVkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFSOXFjVmMvZkdTVDZCQndt%0AamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJiL0FEbDY0WFdUQzE0UEhY%0ATFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtTTkl6UFk2U3B0dnhMYUJu%0AVCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVLVFlUanA0Slc3TFR1VEln%0AN1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hVQStrQUNDZk9BK3BpWGdL%0AMGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllEOU5aYkV0YURaelpCN2lZ%0AbllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThqTTJlS1gzckxFZ21UK01B%0AQWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9PYTgvazVCa21QdDdGZXFZ%0AWU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMyK0RrNkgxR3RMVGVPVkkz%0AWW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFnTUJBQUV3RFFZSktvWklo%0AdmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZMSlR6UFh5bm5zbXFWUzlj%0Aa3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFIaVkxeDBMalVsYkQrS0lm%0AUVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2TkpVWkhXNHNaMFEwWUFq%0ATTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAgICAgIDwvZHM6WDUwOURh%0AdGE%2BICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJlPiAgICAgPHNhbWwyOlN1%0AYmplY3Q%2BICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FN%0ATDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6%0AQkVDNEE3NTZGMjVGNDQxMDlDRjU0RjQ0OTQ4MUY5QTg8L3NhbWwyOk5hbWVJRD4gICAgICAgPHNh%0AbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoy%0ALjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjM6NDI6MDkuMDU0WiI%2BICAg%0AICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxMS0w%0AOC0xOFQxNTozMjoxOC4xMTlaIi8%2BICAgICAgIDwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj4g%0AICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAx%0ANC0wMy0yNFQxNzo0MTo1OS4wNTRaIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjM6NDI6MDku%0AMDU0WiI%2BICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgICAgIDxzYW1sMjpB%0AdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpBdWRpZW5jZT4gICAgICAg%0APC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpDb25kaXRpb25zPiAgICAg%0APHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMTY1OTEwMzMtNTkxMS00MzE1LWFl%0ANDctNGJjYmE2MDU1YTRlIiBJc3N1ZUluc3RhbnQ9IjIwMTQtMDMtMjRUMTc6NDI6MDkuMDU0WiIg%0AVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6%0ASXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv%0AeG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxn%0Ab3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNp%0AZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNp%0AZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI18xNjU5MTAzMy01OTExLTQzMTUtYWU0%0ANy00YmNiYTYwNTVhNGUiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09%0AImh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2B%0ACjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1l%0AeGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz%0ALm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv%0APjwvZHM6VHJhbnNmb3JtPgo8L2RzOlRyYW5zZm9ybXM%2BCjxkczpEaWdlc3RNZXRob2QgQWxnb3Jp%0AdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPgo8ZHM6RGlnZXN0%0AVmFsdWU%2BdFlTditLWjdZT0FYMkRhZXlxSEVZMXY2cDdrPTwvZHM6RGlnZXN0VmFsdWU%2BCjwvZHM6%0AUmVmZXJlbmNlPgo8L2RzOlNpZ25lZEluZm8%2BCjxkczpTaWduYXR1cmVWYWx1ZT4KeTNGRWl0UnFw%0AQUJQUWI3eFpBTk5qNGdoWXFhYW15TEsvTVN5T0k4dXhxbk8zbGhESGlmWC9rNFpHQzZNSXh1WHNv%0AQldwRkxnbk5rdwo0d09QNExmMlBXd2RFRkRyNFQ5VVlqTGJwRUNnSHhNcWdDcEhJV2F2MlJwQ2k5%0AL2JRckZFRUV4YmVCSzJwZkRkUUZnaTlTZGJaUHF3ClBrc2dmbmpvUzd3NWV6NE80bEE9CjwvZHM6%0AU2lnbmF0dXJlVmFsdWU%2BCjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1l%0ASUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJz%0AaXN0ZW50Ij51cm46ZGVjZTp1c2VyaWQ6b3JnOmRlY2U6QkVDNEE3NTZGMjVGNDQxMDlDRjU0RjQ0%0AOTQ4MUY5QTg8L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9%0AInVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI%2BPHNhbWwyOlN1%0AYmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iX0M5MDE3N0RCNjQwMUM3RDQ1MDc3%0AMUVCNEUxNzZBREVDIiBOb3RPbk9yQWZ0ZXI9IjIwMTQtMDMtMjRUMjA6NDI6MDkuMDU0WiIgUmVj%0AaXBpZW50PSJodHRwczovL3N0ZGVjcWF2dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNh%0AbWwvbW9kdWxlLnBocC9zYW1sL3NwL3NhbWwyLWFjcy5waHAvUkVUIi8%2BPC9zYW1sMjpTdWJqZWN0%0AQ29uZmlybWF0aW9uPjwvc2FtbDI6U3ViamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9%0AIjIwMTQtMDMtMjRUMTc6NDE6NTkuMDU0WiIgTm90T25PckFmdGVyPSIyMDE0LTAzLTI0VDIzOjQy%0AOjA5LjA1NFoiPjxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46%0AZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVz%0AdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U%2BPHNhbWwyOkFzc2VydGlv%0AblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEvMTEvU2VjdXJpdHlUb2tl%0Abi9Bc3NlcnRpb24vXzE2NTkxMDMzLTU5MTEtNDMxNS1hZTQ3LTRiY2JhNjA1NWE0ZTwvc2FtbDI6%0AQXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo%0Abkluc3RhbnQ9IjIwMTQtMDMtMjRUMTc6NDI6MDkuMDU0WiIgU2Vzc2lvbkluZGV4PSJfMTY1OTEw%0AMzMtNTkxMS00MzE1LWFlNDctNGJjYmE2MDU1YTRlIj48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1s%0AMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xh%0Ac3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BPHNhbWwyOkF1dGhlbnRp%0AY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6%0AQXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BPC9zYW1sMjpBdXRobkNvbnRleHQ%2BPC9zYW1sMjpBdXRo%0AblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFt%0AZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI%2BPHNhbWwy%0AOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVt%0AYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIg%0AeHNpOnR5cGU9InhzOnN0cmluZyI%2BdXJuOmRlY2U6YWNjb3VudGlkOm9yZzpkZWNlOkFDQzQyNjI2%0ARjI1RjQ0MTA5Q0Y1NEY0NDk0ODFGOUE4PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0%0AdHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3Nh%0AbWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTEt%0AMDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSJGRkQ3RDVFOUMzOThFRDg2MkUzODZB%0AODY2MjQyNjcyODNCNiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxNC0wMy0yNFQyMzo0MjowOS4w%0ANTRaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8c2FtbDI6QXV0aG5Db250%0AZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dv%0AcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxzYW1sMjpBdXRoZW50aWNh%0AdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGluYXRvcjwvc2FtbDI6QXV0%0AaGVudGljYXRpbmdBdXRob3JpdHk%2BICAgICAgIDwvc2FtbDI6QXV0aG5Db250ZXh0PiAgICAgPC9z%0AYW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4gPFNpZ25hdHVyZSB4bWxu%0Acz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPFNpZ25lZEluZm8%2BPENhbm9u%0AaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JF%0AQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8v%0Ad3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVmZXJlbmNlIFVSST0iIj48%0AVHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8w%0AOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9ybXM%2BPERpZ2VzdE1ldGhv%0AZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPERp%0AZ2VzdFZhbHVlPjNjMDFjcnJ6TS9qMGtEY29IRU16MTYwa3pPZz08L0RpZ2VzdFZhbHVlPjwvUmVm%0AZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU%2BQ0JHWEN4MkRaRUoxQ0dmblVPSkc4%0AM000b1E0TW1CVTFDcllNeFJraTRXTGhpdHkwVkkrTFVKc2pSNHE3ZVgyckJnbVZMNXZEUUZuKwpi%0AQjFLanRCNzBSNU8xcHU1RWI5Q2RUTFM3NnJMNzIrYzFRLzVmNmx3dFNXY1djcEtjV0dIa2N6a2lo%0ASm1lZkdTZmV6STk3NnQ1ZjQ3Ci9UQTVTN1NCT3l5WitjRC9EZmcrMUhQWmNmcmdEQUxOYi9iQ3N1%0AK2ZRZWg1VmsrY2hQVHRjYVR5dnNoNUUrZldXYi9CRzNVZklIZGIKa0tKTCtSTVpBVVFBTDk3bGNL%0ARlcyeEtLZVZDU0owUzNPUXJualE3WUNndGV3VnBScFZnbVF5Z0g0a0RRVUdVQk5IVU1ZTllVdk8y%0AUApTYnZjWWJ4UzVvcytzakJMZDU4N1lMczl3UW5HRDRPV1c5OXlxM0FIL3RqVVpIMTVtVjVPTWxr%0Ab0h2c3E2WmM4N0F1QmhKU3M1UHlPCnJSRndkdzBwRDJZR0lDendoUFdBeFlGUXNURXRQNUdWeGpT%0AM3VrUkpHNHh0WVl1aU0yL0R5Y014UzhCWVdHSy9ZOEtOWDdkamZEMmoKdnhRZERodXRGS3huVEJI%0ANFVCRUZSVXQ2Umorb0Z6ODdCSUcvWjdiZGdTaXB1TTNHVUxFZE5IUzRyeGQyNnd2eEg3aEsralBK%0Aa3dNSAp0TWZWZUpWcWdldVdHdjNDT21jeTBueko5REdNQmxNUXJKMEphUG9QR1paTkFsaUFlQzFL%0AdlZyZGI5MDdVMjFuRnpyMGN2YWJ5bFU4Cm1lNFJSc2xBTm9kc1BFNklsbWRqbjRORzNPS2gwYzVW%0AL2pzbCt5SFdBTzFiK29Ld1duTGRuRDRCVG9iSGcwakxDV2xUZndlVUJPQT08L1NpZ25hdHVyZVZh%0AbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEuMi44NDAuMTEzNTQ5LjEu%0AOS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENOPXVybjpkZWNlOm9yZzpv%0Acmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3ViamVjdE5hbWU%2BPFg1MDlD%0AZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFFQkJRVUFNR294RURBT0Jn%0ATlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJH%0AbHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlUQWxWVE1SWXcKRkFZRFZR%0AUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5TUZvWERURTRNRFV5T1RF%0AME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdUQWxaQk1SRXdEd1lEVlFR%0ASEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2YjNKbk9tOXlaenBrWldO%0AbE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZWEl1WTI5dE1JSUMKSWpB%0ATkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYrbE5UUVJZZGx2VFNCeEVa%0AeFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2VkV25KZUFoQlZ5TXh1SWJn%0AM1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJzNm4yQXBKc3BIRTc5b0FN%0ASDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBjeXNoczF2SERYWmE2T2wK%0ASy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZDSEtyeGNIb2JzMmx1aTlx%0Ab2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtEbnB6ZHZMR1VLaisvbXJO%0Ac1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUyeWMrLzFTYWpsZlpKRGpE%0Aa1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZPWUZzTVhVeGJpUk5Zd0p5%0AQncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdUclBtN0kxY3MyR1BBOTZj%0AUzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNFbkZTcDZEQmp2cEVZbUt3%0AcldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hOCkxlT2t2ZlF3QTU0QWJ3%0AbS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0cWllTHgvVnZjMW9tdUxi%0ATGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFSWXEwQ0F3RUFBVEFOQmdr%0AcWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCswNnpnTkpmUFhwRGQ1dFBX%0ARmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhFM2RhClViL2pYNjFOUkFH%0AeE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtuUlBkV2kyQ0FrOVRoaFZ2%0AOCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE%2BPC9L%0AZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg%3D%3D</con:value></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>https://qa.uvvu.com:7001/ssp/views/userProfilePage.jsf</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="f406ce4c-2741-4daf-82ea-08516c0d18b0" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7001/ssp/views/userProfilePage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-03-24T23:42:09.054Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="FFD7D5E9C398ED862E386A86624267283B6" SessionNotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8/User/urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_16591033-5911-4315-ae47-4bcba6055a4e" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_16591033-5911-4315-ae47-4bcba6055a4e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tYSv+KZ7YOAX2DaeyqHEY1v6p7k=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
y3FEitRqpABPQb7xZANNj4ghYqaamyLK/MSyOI8uxqnO3lhDHifX/k4ZGC6MIxuXsoBWpFLgnNkw
4wOP4Lf2PWwdEFDr4T9UYjLbpECgHxMqgCpHIWav2RpCi9/bQrFEEExbeBK2pfDdQFgi9SdbZPqw
PksgfnjoS7w5ez4O4lA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C90177DB6401C7D450771EB4E176ADEC" NotOnOrAfter="2014-03-24T20:42:09.054Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-24T17:42:09.054Z" SessionIndex="_16591033-5911-4315-ae47-4bcba6055a4e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_16591033-5911-4315-ae47-4bcba6055a4e" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_16591033-5911-4315-ae47-4bcba6055a4e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tYSv+KZ7YOAX2DaeyqHEY1v6p7k=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
y3FEitRqpABPQb7xZANNj4ghYqaamyLK/MSyOI8uxqnO3lhDHifX/k4ZGC6MIxuXsoBWpFLgnNkw
4wOP4Lf2PWwdEFDr4T9UYjLbpECgHxMqgCpHIWav2RpCi9/bQrFEEExbeBK2pfDdQFgi9SdbZPqw
PksgfnjoS7w5ez4O4lA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C90177DB6401C7D450771EB4E176ADEC" NotOnOrAfter="2014-03-24T20:42:09.054Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-24T17:42:09.054Z" SessionIndex="_16591033-5911-4315-ae47-4bcba6055a4e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="f406ce4c-2741-4daf-82ea-08516c0d18b0" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7001/ssp/views/userProfilePage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-03-24T23:42:09.054Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_16591033-5911-4315-ae47-4bcba6055a4e" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_16591033-5911-4315-ae47-4bcba6055a4e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tYSv+KZ7YOAX2DaeyqHEY1v6p7k=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
y3FEitRqpABPQb7xZANNj4ghYqaamyLK/MSyOI8uxqnO3lhDHifX/k4ZGC6MIxuXsoBWpFLgnNkw
4wOP4Lf2PWwdEFDr4T9UYjLbpECgHxMqgCpHIWav2RpCi9/bQrFEEExbeBK2pfDdQFgi9SdbZPqw
PksgfnjoS7w5ez4O4lA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C90177DB6401C7D450771EB4E176ADEC" NotOnOrAfter="2014-03-24T20:42:09.054Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-24T17:42:09.054Z" SessionIndex="_16591033-5911-4315-ae47-4bcba6055a4e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="FFD7D5E9C398ED862E386A86624267283B6" SessionNotOnOrAfter="2014-03-24T23:42:09.054Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_16591033-5911-4315-ae47-4bcba6055a4e" IssueInstant="2014-03-24T17:42:09.054Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_16591033-5911-4315-ae47-4bcba6055a4e">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tYSv+KZ7YOAX2DaeyqHEY1v6p7k=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
y3FEitRqpABPQb7xZANNj4ghYqaamyLK/MSyOI8uxqnO3lhDHifX/k4ZGC6MIxuXsoBWpFLgnNkw
4wOP4Lf2PWwdEFDr4T9UYjLbpECgHxMqgCpHIWav2RpCi9/bQrFEEExbeBK2pfDdQFgi9SdbZPqw
PksgfnjoS7w5ez4O4lA=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:BEC4A756F25F44109CF54F449481F9A8</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C90177DB6401C7D450771EB4E176ADEC" NotOnOrAfter="2014-03-24T20:42:09.054Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-03-24T17:41:59.054Z" NotOnOrAfter="2014-03-24T23:42:09.054Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_16591033-5911-4315-ae47-4bcba6055a4e</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-03-24T17:42:09.054Z" SessionIndex="_16591033-5911-4315-ae47-4bcba6055a4e"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:ACC42626F25F44109CF54F449481F9A8</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>89d6fbbc-d9ec-4088-8168-f6e89f1a2f87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e164b0b3-5b85-42a1-9128-95f6f38067e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfed714e-5455-441b-afaa-598623bf33fb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d36a6ef7-3c53-4e9e-94fe-21d306f923b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>377c947e-59f4-4d30-8da5-0e688ae57897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56ca4b95-83fa-47b0-8b9f-5af7de663ad0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79fd1309-17de-4708-b5ec-fd6f35921c3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff8a96c3-81a8-4032-8089-c9ea813f4484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login_URNMediaPage" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2026bbf4-a71d-4dfd-99c7-12f81cb7506f"><con:settings/><con:testStep type="groovy" name="Set_TLS" id="130b68c5-332d-4680-9b72-105f078ef24a"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Proj Property" id="2a018c22-839d-44e1-95ca-8733234d10c8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("assertionXMLnode",tP.getPropertyValue("assertionXMLnode_NewVersion"));

log.info tP.getPropertyValue("assertionXMLnode")

</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName" id="88adcec5-5b11-43fd-ba45-be4da13941ea"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>21ddf1dc-dc3b-4942-b6ac-34c838187b31</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="eb6d0cf5-d93b-4543-b6be-e0d1cf63d328"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="c8012ec3-7f8d-4069-a450-c5daac8ef72e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="bf075cdf-adf5-409c-a122-23b68cae8453"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() ==0 ;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     int lastSlash = urlStr.lastIndexOf('/');
    	accountid     = urlStr.substring(lastSlash + 1);
   
	tP.setPropertyValue("NODEACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="bbacb18c-d98a-4a59-8932-8abb8eabd5d2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1508bdfb-ae39-4c07-8d58-884b5ae61d0b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="983ea105-0989-44a5-8c2a-2fb32bac27d9"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
        	<!--<GivenName>UVTC_AltEmail</GivenName>-->
		<SurName>Gupta</SurName>
	</Name>	
	       <DisplayImage>
	       <DisplayImageURL>https://qa.uvvu.com:7001/static/images/Image_IPT.jpg</DisplayImageURL>
        <!--DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData-->
    </DisplayImage>
	<ContactInfo>
        <!--PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#Project#Node_OID}" VerificationStatus="urn:dece:type:status:success"-->			
        <PrimaryEmail>
	 <Value>shikha82@gmail.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>sunitha.pemmasani@neustar.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
       <TelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </TelephoneNumber>
        <MobileTelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
        </MobileTelephoneNumber>
	</ContactInfo>
        <Languages>
		<Language primary="true">en-GB</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1930-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
                <!--Password IsRandom="false"></Password-->
               <!--Password>password&#x20ac;</Password-->
             	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1" id="ed06fc13-cfac-4de1-b901-5871be18871a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1" id="21ba9aca-a88e-4060-a58d-9713796a4a69"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	int lastSlash = urlStr.lastIndexOf('/');
    	userid = urlStr.substring(lastSlash + 1);
   
    tP.setPropertyValue("NODEUSERID",userid);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="ab9a8689-5294-4d69-9257-acee5d96b3cd"><con:settings/><con:config><script>//Note if there is change in the namespace we need to change in the project property value of assertionXMLnote(Replace only the namespace)
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def targetPort = context.expand( '${#Project#targetPort}' )

tC.setPropertyValue("rsamlTargetURL",tP.getPropertyValue("rsamlTargetURNMediaProfile"));

log.info 'RSAML='+tC.getPropertyValue("rsamlTargetURL");

def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tP.getPropertyValue("nodeid"));
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);


/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);


/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" id="bbdabfa1-9cd5-4a7a-b35a-058d47cd2617"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" id="3d4de11f-6e99-4c8a-802e-cbb036c0f90b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML" id="43b3aa2c-155a-4b2e-9268-e9f10f9c8989"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();

log.info 'assertionIDPXML = ' +tP.getPropertyValue("assertionXMLnode").toString();
log.info 'assertionDECEXML = ' +tC.getPropertyValue("assertionXMLuser").toString();
log.info 'assertionURIXML ='+ tP.getPropertyValue("assertionURIXML").toString();
log.info 'outFile ='+ tP.getPropertyValue("fileSamlResponseXML").toString();
log.info 'rsamlTargetURL ='+  tC.getPropertyValue("rsamlTargetURL").toString();
log.info 'rsamlReturnToURL ='+ tC.getPropertyValue("rsamlReturnToURL").toString();

String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

log.info 'deceroot=='+deceroot

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	log.info 'HAS ATTRIBUTE ID'
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		log.info 'NOTNULL rsamlSPID'
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
				
//////Adding this R2/////////////////////
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);						
//Added This: If We need To give the Invalid NameId in the RSaml Response

						//subjectNameid.setTextContent("urn:dece:userid:org:dece:BBBBBBBBBBBBBBB");
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotBefore","2013-03-13T01:52:52.741Z");
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);	
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotOnOrAfter","2013-03-27T01:52:52.741Z");							
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}

log.info xml3.toString();








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="65dd95ae-57e2-42c9-8334-06f17b51bd5e"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;


def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String signedsamlResponseFile = tP.getPropertyValue("fileSamlResponseSigned").toString();

log.info "samlResponseFile[$samlResponseFile]";
log.info "signedsamlResponseFile[$signedsamlResponseFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

  
// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());

KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing

X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
log.info "DocumentBuilderFactory -- samlResponseFile[$samlResponseFile]";
Document doc = dbf.newDocumentBuilder().parse(samlResponseFile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlResponseFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml" id="6cbebba4-edc0-42c1-91c6-dff1cfe1dc6b"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseJustBase64", null);

String signedSamlResponse = tP.getPropertyValue("fileSamlResponseSigned");

file = new File(signedSamlResponse);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();



//String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));
String base64Str = Base64.encodeBytes(bytes);
String samlResponseurlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlResponse", samlResponseurlencoded);
tC.setPropertyValue("samlResponseJustBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="09502bb4-ab32-473b-9c60-cd76f5d35357"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
String token = tC.getPropertyValue("samlResponseJustBase64").toString();

//////Added this for the shost////////

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://""" + tP.getPropertyValue("targetHostportal") + ":" + tP.getPropertyValue("targetPortportal") + """/security/federation/saml/acs" method="post"> <input name="SAMLResponse" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RSAML_POST" disabled="true" id="b2fa697d-120a-425a-8d8d-604405f4d787"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RSAML_POST" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>SAMLResponse=${#TestCase#samlResponseJustBase64}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>shikha_user_create_accp_test_20141113_102246</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>36E8994892316A833C794EB81233A38A2F5</con:value></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="edb17f28-862e-466d-bccd-693cc9c3dacf" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:library</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-11-13T21:22:47.755Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_18c8ea9e-a009-4cbf-80f8-2b486bec2695" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>pNaUU/EkJhcCjhh7/5yoUekNDaY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8lgRRG+Ebdu0GB5vlHbfnQyDrhLb4sAFKR8EFl9iqFAhrzyR+ITNDyMNAd1lbrUvM7rc3ZAtHXfkRHkB9galVBwP0KibpA7hjgrehTL26bxoYdKrPoMhMvAuQLH6Kc9zWTNeG9R7lfManY/wyhUqJbrgbEMg89jf1Aqo6wJbCg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_16ipa31x3wbfg1bnbigxemq2kl" NotOnOrAfter="2014-11-13T18:22:47.755Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-11-13T15:22:47.755Z" SessionIndex="_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="36E8994892316A833C794EB81233A38A2F5" SessionNotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht
bG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50
PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249
Imh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi
IElEPSJlZGIxN2YyOC04NjJlLTQ2NmQtYmNjZC02OTNjYzljM2RhY2YiIElzc3VlSW5zdGFudD0i
MjAxNC0xMS0xM1QxNToyMjo0Ny43NTVaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg
eG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk
ZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM+
ICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj
Lm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI+aHR0cHM6Ly93d3cud2VsbHNmYXJnby5j
b20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0
dHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPnVybjpkZWNl
OnBvcnRhbDpsaWJyYXJ5PC9kZWNlOlRhcmdldFVSTD4gICA8L3NhbWwycDpFeHRlbnNpb25zPiAg
IDxzYW1sMnA6U3RhdHVzPiAgICAgPHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6
bmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz4gICA8L3NhbWwycDpTdGF0dXM+ICAg
PHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4w
OmFzc2VydGlvbiIgSUQ9IjZiYTE2N2ZjLWFhZTMtNDhlZi04ZjYxLWZiNTJiYTNmMWYxYSIgSXNz
dWVJbnN0YW50PSIyMDE0LTExLTEzVDE1OjIyOjQ3Ljc1NVoiIFZlcnNpb249IjIuMCI+ICAgICA8
c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPiAgICAgPGRz
OlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+
ICAgICAgIDxkczpTaWduZWRJbmZvPiAgICAgICAgIDxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9k
IEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+ICAg
ICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIw
MDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPiAgICAgICAgIDxkczpSZWZlcmVuY2UgVVJJPSIjNmJh
MTY3ZmMtYWFlMy00OGVmLThmNjEtZmI1MmJhM2YxZjFhIj4gICAgICAgICAgIDxkczpUcmFuc2Zv
cm1zPiAgICAgICAgICAgICA8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5v
cmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4gICAgICAgICAgICAgPGRz
OlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1j
MTRuIyI+ICAgICAgICAgICAgICAgPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0iZHMgc2Ft
bDIgeHMgeHNpIi8+ICAgICAgICAgICAgIDwvZHM6VHJhbnNmb3JtPiAgICAgICAgICAgPC9kczpU
cmFuc2Zvcm1zPiAgICAgICAgICAgPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93
d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+ICAgICAgICAgICA8ZHM6RGlnZXN0VmFs
dWU+MlQ1dUI0NHNqSXFKSVpKSVV0ZVc1Lzczc2QwPTwvZHM6RGlnZXN0VmFsdWU+ICAgICAgICAg
PC9kczpSZWZlcmVuY2U+ICAgICAgIDwvZHM6U2lnbmVkSW5mbz4gICAgICAgPGRzOlNpZ25hdHVy
ZVZhbHVlPkllWFpHMW8zVHd2bmxqOVBqVzRZTG1sOXF3STlCTDdjaDJ1eitENG5uTit2Z3VqZFBl
S0lRWk9LbHVjTnVCdjk4bEcwcm10Rkpobzcgc0N6M1JmTXFhSnN6MmNRSHN2SUVGNzVvUjJOc3c0
Q2x4T2F0MjZlMWpvYlR5TVJwOGNvVXBML2x1bGdoRlZzYTFpMmVpaUxaU1RYRyBpSzhEeThNSEVL
K3NrM0ZtL1B3PTwvZHM6U2lnbmF0dXJlVmFsdWU+ICAgICAgIDxkczpLZXlJbmZvPiAgICAgICAg
IDxkczpYNTA5RGF0YT4gICAgICAgICAgIDxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRDBEQ0NBemtD
QWdERE1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEN6QUpCZ05WQkFZVEFsVlRNUkV3RHdZRFZRUUlF
d2hXYVhKbmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNSbGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRY
TjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXdGQVlEVlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0
WERURXlNRGt3TmpJd05EYzFNVm9YRFRFek1Ea3dOakl3TkRjMU1Wb3djakVMTUFrR0ExVUVCaE1D
VlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVqTUNFR0ExVUVB
eE1hZFhKdU9tUmxZMlU2YjNKbk9tOXlaenBrWldObE9qUXdOREF4SGpBY0Jna3Foa2lHOXcwQkNR
RVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURD
Q0Fnb0NnZ0lCQUxNRXhzdWVoaUlEaWdrVmtUVUpVclRCZ0tRekQ5eFNNYitnZ1RVN2ZQb2hZYlpL
YzZlVzFXY0J5UEd3R1JEZmlRbTc4WUp0eVUwclp5dUQxRzJmUHVuUU5NWTBmUnhqQU9vVHlpeVBp
SWNrNnQ1aFRYZnpseFVmN3ZUOHl6czBabDFWR0hsVENUZU1EaXlOUjlBai81bENXNTFiWmFZQ1Uy
R1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd21qYVBXYzlEOXEzWktuRkpZbFJJSU4rQTk0amQrNnNu
eDNPOW5CK2FBUmIvQURsNjRYV1RDMTRQSFhMUzNpd0hNOUEra2tiWHVFTUFZR0hyTi9nampwZzZx
WDJCNjJKdWYwK1NOSXpQWTZTcHR2eExhQm5UK2VXeDZ6WmVOaWYwQ0xZTTVlbDB0MC81WExyVW1a
VmFXZ0tEQXRQZUtUWVRqcDRKVzdMVHVUSWc3UXhxQkQxaVR1YUVPejBIWE40bVM5ZTRjOFJBamU4
QURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0swbGdnVmU4RHZwYmRSTkU3S3d2dVkyVWZuRlRhclI4
WVZLcS9IMXlaWUQ5TlpiRXRhRFp6WkI3aVluWWZWUjh4Qnhxa3ZQSFRsZXpWZjYyTVd2VGFzRjJC
VHFWdWtHcm9BOGpNMmVLWDNyTEVnbVQrTUFBaWFyK1VFM2NmUlpBczJCVnZtdzk3U3QyVU53WnBW
aVl4TUJvN1B2L09hOC9rNUJrbVB0N0ZlcVlZTkovVjhWYTJSanNGM01uR2pCNWV5M2VIb2pKMjFt
cEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTNZbm1BbXVPY0hUV1lOdGNoS0FOcEd1dmZ1OVFicDVS
cTNvNTZFWEJsQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdZRUFsWEtJV29TRWh0WDFjYmNl
SVJTVERha3pxVkxKVHpQWHlubnNtcVZTOWNrci90K0JhM2w0Ym1QM3Z3SlR3K0N6UStIV2JVR0JV
aktCeU8vbDF0QUhpWTF4MExqVWxiRCtLSWZRUHl3aDJmWXVrcWJiWEdJN2pJMUdBWjRJTDhXMXgv
UDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWpNMVJ4VEdDWUhyODh4U2c9PC9kczpYNTA5Q2VydGlm
aWNhdGU+ICAgICAgICAgPC9kczpYNTA5RGF0YT4gICAgICAgPC9kczpLZXlJbmZvPiAgICAgPC9k
czpTaWduYXR1cmU+ICAgICA8c2FtbDI6U3ViamVjdD4gICAgICAgPHNhbWwyOk5hbWVJRCBGb3Jt
YXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQi
PnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTowN0JGQzJENUM0OTY2QzYxRTA1MzA1OTkxRjBBMTE4
QTwvc2FtbDI6TmFtZUlEPiAgICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9
InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiIE5vdE9uT3JBZnRlcj0iMjAx
NC0xMS0xM1QyMToyMjo0Ny43NTVaIj4gICAgICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlv
bkRhdGEgTm90T25PckFmdGVyPSIyMDExLTA4LTE4VDE1OjMyOjE4LjExOVoiLz4gICAgICAgPC9z
YW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPiAgICAgPC9zYW1sMjpTdWJqZWN0PiAgICAgPHNhbWwy
OkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE0LTExLTEzVDE1OjIyOjM3Ljc1NVoiIE5vdE9uT3JB
ZnRlcj0iMjAxNC0xMS0xM1QyMToyMjo0Ny43NTVaIj4gICAgICAgPHNhbWwyOkF1ZGllbmNlUmVz
dHJpY3Rpb24+ICAgICAgICAgPHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTox
MjQ8L3NhbWwyOkF1ZGllbmNlPiAgICAgICA8L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+ICAg
ICA8L3NhbWwyOkNvbmRpdGlvbnM+ICAgICA8c2FtbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb24g
eG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiBJRD0iXzE4YzhlYTll
LWEwMDktNGNiZi04MGY4LTJiNDg2YmVjMjY5NSIgSXNzdWVJbnN0YW50PSIyMDE0LTExLTEzVDE1
OjIyOjQ3Ljc1NVoiIFZlcnNpb249IjIuMCI+PHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxj
LmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlv
bk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRu
IyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAw
LzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI18xOGM4ZWE5ZS1hMDA5
LTRjYmYtODBmOC0yYjQ4NmJlYzI2OTUiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25h
dHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEw
L3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9InhzIi8+PC9kczpU
cmFuc2Zvcm0+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5wTmFV
VS9Fa0poY0NqaGg3LzV5b1Vla05EYVk9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48
L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPlE4bGdSUkcrRWJkdTBHQjV2bEhiZm5R
eURyaExiNHNBRktSOEVGbDlpcUZBaHJ6eVIrSVRORHlNTkFkMWxiclV2TTdyYzNaQXRIWGZrUkhr
QjlnYWxWQndQMEtpYnBBN2hqZ3JlaFRMMjZieG9ZZEtyUG9NaE12QXVRTEg2S2M5eldUTmVHOVI3
bGZNYW5ZL3d5aFVxSmJyZ2JFTWc4OWpmMUFxbzZ3SmJDZz08L2RzOlNpZ25hdHVyZVZhbHVlPjwv
ZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz
aXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1
c2VyaWQ6b3JnOmRlY2U6MDdCRkMyRDVDNDk2NkM2MUUwNTMwNTk5MUYwQTExOEE8L3NhbWwyOk5h
bWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0
YzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25E
YXRhIEluUmVzcG9uc2VUbz0iXzE2aXBhMzF4M3diZmcxYm5iaWd4ZW1xMmtsIiBOb3RPbk9yQWZ0
ZXI9IjIwMTQtMTEtMTNUMTg6MjI6NDcuNzU1WiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2
dXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3Nh
bWwyLWFjcy5waHAvUkVUIi8+PC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3Vi
amVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTQtMTEtMTNUMTU6MjI6MzcuNzU1
WiIgTm90T25PckFmdGVyPSIyMDE0LTExLTEzVDIxOjIyOjQ3Ljc1NVoiPjxzYW1sMjpBdWRpZW5j
ZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9z
YW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRp
b25zPjxzYW1sMjpBZHZpY2U+PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2
dS5jb206NzAwMS9yZXN0LzEvMTEvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vXzE4YzhlYTllLWEw
MDktNGNiZi04MGY4LTJiNDg2YmVjMjY5NTwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6
QWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTQtMTEtMTNUMTU6
MjI6NDcuNzU1WiIgU2Vzc2lvbkluZGV4PSJfMThjOGVhOWUtYTAwOS00Y2JmLTgwZjgtMmI0ODZi
ZWMyNjk1Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51
cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0
aG5Db250ZXh0Q2xhc3NSZWY+PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNl
Om9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+
PC9zYW1sMjpBdXRobkNvbnRleHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmli
dXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0
PSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhz
aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4
czpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTowN0JGQzI0NjdDQTI2N0FGRTA1
MzA1OTkxRjBBRUM4RDwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PC9z
YW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+PC9zYW1sMjpBZHZpY2U+
ICAgICA8c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDExLTA4LTE3VDE1OjMy
OjE4LjExOVoiIFNlc3Npb25JbmRleD0iMzZFODk5NDg5MjMxNkE4MzNDNzk0RUI4MTIzM0EzOEEy
RjUiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMTQtMTEtMTNUMjE6MjI6NDcuNzU1WiI+ICAgICAg
IDxzYW1sMjpBdXRobkNvbnRleHQ+ICAgICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVm
PnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpB
dXRobkNvbnRleHRDbGFzc1JlZj4gICAgICAgICA8c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3Jp
dHk+dXJuOmRlY2U6b3JnOm5ldXN0YXI6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5n
QXV0aG9yaXR5PiAgICAgICA8L3NhbWwyOkF1dGhuQ29udGV4dD4gICAgIDwvc2FtbDI6QXV0aG5T
dGF0ZW1lbnQ+ICAgPC9zYW1sMjpBc3NlcnRpb24+IDxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9u
TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4t
MjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcv
MjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiI+PFRyYW5zZm9ybXM+
PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNl
bnZlbG9wZWQtc2lnbmF0dXJlIi8+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGht
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT5m
Uk8ydzBaUGpza3dQTHdudS96KzdxYmRxdG89PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1Np
Z25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPnk2VlpxRGVjdlZFMEpidWY0MExuKy9CWk9lVm5rSUJR
citKZU5VR25vU3BzQ0R6ZGZMVUNhdWZGRmJhVm5tUDV4N2NGNEVzWEVKRDQKaE0waWw5bmdobmZ5
MjRHWGVMVUtId0ZTOGxrYWI5KzlIV3VYYTR0Tmcway9ybFBOWXJPc2dKOFI2K2FDYlhDaGtsMkZX
STEwRVdYUgpjM0dIMjFDOXdjSWdtWGgvOHZDQnNjUFhka0FnaExjVm5HNEtuR0NNbnBYQWUvb1lL
QmYrRWtYbm1aY3V2Tmk4ZWNFa1kyQnh0d1R5Cis0RlZ4QWRpbUZGYS91Q3JGelY2MnUzelJUSEJ2
Y0luSmZ2eHFycmxDVWVzOEQxb2dQV0V1bTE2bVdFYlhJcDJPNEREOGNGaW9lVTIKOVMzQ3l6YkVz
TEh3VTBYVjV4dGtCbEdoY2FNWU83d0p2b3p3ZEVPNmR3R21VQ1d6NUw0YzRDU21kSUIrS1lVblk1
WTdCM3FHZ09kOApXOUFhQzFySVVuYWQyZEpNR3FNb1M4UHgvY21QUWkrN05DZFYxbDVzUGZVYVVx
L0V6TEljZCswcmd1aVYxblpzQVlndnJBWVBQazBnCjA5YVpHdnU0dk5nWG5xZlZjYTNMY015YkNV
UDNXTTgzNlpqcXRXdEJDV01waEpVNnhES2tsQXBLTGpxeWtkVldyeVJHbyttNWpMakMKZGUvMjda
R2RJM2MwL0RCSFJwemxjdko5c0JsSG10OFpZUGRWV1hHcXdzb3o4aVhPNytDVzBHTUlwaVVCVTRB
aGpra01IWVZCWU0zbwpLdnBWdGJFSlJDamxPTjNmRmdWTkI5eG0vVTBOclRYdWpvSU1SbFN4SXJw
NGdNdU4xeGZ1UzA2K2NEUUFxZnJrUlR2QnR3b2ttaWc9PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5m
bz48WDUwOURhdGE+PFg1MDlTdWJqZWN0TmFtZT4xLjIuODQwLjExMzU0OS4xLjkuMT0jMTYwZjY2
NmY2ZjQwNmU2NTc1NzM3NDYxNzIyZTYzNmY2ZCxDTj11cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVU
LEw9U3RlcmxpbmcsU1Q9VkEsQz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU+
TUlJRHp6Q0NBemdDQWdWaU1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxk
WE4wWVhJeEN6QUpCZ05WQkFzVApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdB
MVVFQ0JNSVZtbHlaMmx1YVdFeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpk
R0Z5TG5GaExtTmhNQjRYRFRFek1EVXpNREUwTXpjeU1Gb1hEVEU0TURVeU9URTBNemN5TUZvd2NU
RUwKTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJH
bHVaekVpTUNBR0ExVUVBeE1aZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkRFZU1C
d0dDU3FHU0liM0RRRUpBUllQWm05dlFHNWxkWE4wWVhJdVkyOXRNSUlDCklqQU5CZ2txaGtpRzl3
MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF6djVWK2xOVFFSWWRsdlRTQnhFWnhXdmp6bmlna1Ur
NnNrWUQKRzc4OTJQMGxsb3R0aURKMmpZSlFDQldlZFduSmVBaEJWeU14dUliZzNXeGJLV1hoTVBY
K2xiT1JhTGJiZnRlMkcwSXZDSXpUdU5iVwpJRGpSczZuMkFwSnNwSEU3OW9BTUgxMngrWndYRzhZ
b1IvVFZjVTIvYWI0T3dDTmtzMC9oZjM5U29zM3owY3lzaHMxdkhEWFphNk9sCksvTTZ5aFdHcnZk
WXJRdlVFaUszbjB5aUtFSGdxZ0RaMkZRWTNxUDVmQ0hLcnhjSG9iczJsdWk5cW9qUy8zb1NXQXlp
d1U4eDVLVjEKa1RodlRPbmdGUjJxTnoycExJYWlLRG5wemR2TEdVS2orL21yTnNUaVVNYzBTVnFU
Wk95WHVlOFUyNEw5ZlRQbkNEVS81UkhPZzA5RQp1MnljKy8xU2FqbGZaSkRqRGtSZ2lyU2xBdHZF
S25HZFc5VWJDQ1NaOVVMTEVqcnR4cyt4L1FTRE52T1lGc01YVXhiaVJOWXdKeUJ3CnQ2RDNBT0tD
R1BlZUhUWURLcEREeDZoQTFEMkZvdTd6Y1RiZ0RnVHJQbTdJMWNzMkdQQTk2Y1M2SEdEblpRTTdo
eUJhZWs2Ylh6b2sKNkltTkJJVXZ0WElXQUtyMUgzRW5GU3A2REJqdnBFWW1Ld3JXYVNnVWxTNlF0
eTBUclEyOEEveE9hMW1LNms0ajF0SThVRHJINzdoTgpMZU9rdmZRd0E1NEFid20vU2kwVnZsYWIy
ZUdYU25MSUhjKzhHckNTUUJNTlRTcFBWMWJzTjVWNHFpZUx4L1Z2YzFvbXVMYkxpOFkzCnhwaWM5
ODlqZ0RSTDV6ZUl2bVk2T3pNZEhiS2FsYjVOT3BhUllxMENBd0VBQVRBTkJna3Foa2lHOXcwQkFR
VUZBQU9CZ1FDMFVEalUKODh5TXlBNlhveWpYSEQrMDZ6Z05KZlBYcERkNXRQV0Zqb2Z0WHE2dUFk
SzFoenBEYlhTTGg1aDFNL2VnSkJGNGhHY09EZlZYRTNkYQpVYi9qWDYxTlJBR3hOU0NYUkJCbWhB
OCtvcEx0eVlWVmNOdE1iUE5ScjJvb2h4Z3dzbHRLblJQZFdpMkNBazlUaGhWdjgrayt5dmM0CnpB
VWxmckJqNjMyQ1V3PT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1Np
Z25hdHVyZT48L3NhbWwycDpSZXNwb25zZT4=</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht%0AbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50%0APSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249%0AImh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi%0AIElEPSJlZGIxN2YyOC04NjJlLTQ2NmQtYmNjZC02OTNjYzljM2RhY2YiIElzc3VlSW5zdGFudD0i%0AMjAxNC0xMS0xM1QxNToyMjo0Ny43NTVaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg%0AeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk%0AZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM%2B%0AICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj%0ALm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI%2BaHR0cHM6Ly93d3cud2VsbHNmYXJnby5j%0Ab20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0%0AdHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPnVybjpkZWNl%0AOnBvcnRhbDpsaWJyYXJ5PC9kZWNlOlRhcmdldFVSTD4gICA8L3NhbWwycDpFeHRlbnNpb25zPiAg%0AIDxzYW1sMnA6U3RhdHVzPiAgICAgPHNhbWwycDpTdGF0dXNDb2RlIFZhbHVlPSJ1cm46b2FzaXM6%0AbmFtZXM6dGM6U0FNTDoyLjA6c3RhdHVzOlN1Y2Nlc3MiLz4gICA8L3NhbWwycDpTdGF0dXM%2BICAg%0APHNhbWwyOkFzc2VydGlvbiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4w%0AOmFzc2VydGlvbiIgSUQ9IjZiYTE2N2ZjLWFhZTMtNDhlZi04ZjYxLWZiNTJiYTNmMWYxYSIgSXNz%0AdWVJbnN0YW50PSIyMDE0LTExLTEzVDE1OjIyOjQ3Ljc1NVoiIFZlcnNpb249IjIuMCI%2BICAgICA8%0Ac2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2VsbGMuY29tLzwvc2FtbDI6SXNzdWVyPiAgICAgPGRz%0AOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2B%0AICAgICAgIDxkczpTaWduZWRJbmZvPiAgICAgICAgIDxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9k%0AIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BICAg%0AICAgICAgPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIw%0AMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPiAgICAgICAgIDxkczpSZWZlcmVuY2UgVVJJPSIjNmJh%0AMTY3ZmMtYWFlMy00OGVmLThmNjEtZmI1MmJhM2YxZjFhIj4gICAgICAgICAgIDxkczpUcmFuc2Zv%0Acm1zPiAgICAgICAgICAgICA8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5v%0AcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4gICAgICAgICAgICAgPGRz%0AOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1j%0AMTRuIyI%2BICAgICAgICAgICAgICAgPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0%0AdHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0iZHMgc2Ft%0AbDIgeHMgeHNpIi8%2BICAgICAgICAgICAgIDwvZHM6VHJhbnNmb3JtPiAgICAgICAgICAgPC9kczpU%0AcmFuc2Zvcm1zPiAgICAgICAgICAgPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93%0Ad3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BICAgICAgICAgICA8ZHM6RGlnZXN0VmFs%0AdWU%2BMlQ1dUI0NHNqSXFKSVpKSVV0ZVc1Lzczc2QwPTwvZHM6RGlnZXN0VmFsdWU%2BICAgICAgICAg%0APC9kczpSZWZlcmVuY2U%2BICAgICAgIDwvZHM6U2lnbmVkSW5mbz4gICAgICAgPGRzOlNpZ25hdHVy%0AZVZhbHVlPkllWFpHMW8zVHd2bmxqOVBqVzRZTG1sOXF3STlCTDdjaDJ1eitENG5uTit2Z3VqZFBl%0AS0lRWk9LbHVjTnVCdjk4bEcwcm10Rkpobzcgc0N6M1JmTXFhSnN6MmNRSHN2SUVGNzVvUjJOc3c0%0AQ2x4T2F0MjZlMWpvYlR5TVJwOGNvVXBML2x1bGdoRlZzYTFpMmVpaUxaU1RYRyBpSzhEeThNSEVL%0AK3NrM0ZtL1B3PTwvZHM6U2lnbmF0dXJlVmFsdWU%2BICAgICAgIDxkczpLZXlJbmZvPiAgICAgICAg%0AIDxkczpYNTA5RGF0YT4gICAgICAgICAgIDxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJRDBEQ0NBemtD%0AQWdERE1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEN6QUpCZ05WQkFZVEFsVlRNUkV3RHdZRFZRUUlF%0Ad2hXYVhKbmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNSbGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRY%0ATjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXdGQVlEVlFRREV3MXVaWFZ6ZEdGeUxuRmhMbU5oTUI0%0AWERURXlNRGt3TmpJd05EYzFNVm9YRFRFek1Ea3dOakl3TkRjMU1Wb3djakVMTUFrR0ExVUVCaE1D%0AVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJHbHVaekVqTUNFR0ExVUVB%0AeE1hZFhKdU9tUmxZMlU2YjNKbk9tOXlaenBrWldObE9qUXdOREF4SGpBY0Jna3Foa2lHOXcwQkNR%0ARVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURD%0AQ0Fnb0NnZ0lCQUxNRXhzdWVoaUlEaWdrVmtUVUpVclRCZ0tRekQ5eFNNYitnZ1RVN2ZQb2hZYlpL%0AYzZlVzFXY0J5UEd3R1JEZmlRbTc4WUp0eVUwclp5dUQxRzJmUHVuUU5NWTBmUnhqQU9vVHlpeVBp%0ASWNrNnQ1aFRYZnpseFVmN3ZUOHl6czBabDFWR0hsVENUZU1EaXlOUjlBai81bENXNTFiWmFZQ1Uy%0AR1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd21qYVBXYzlEOXEzWktuRkpZbFJJSU4rQTk0amQrNnNu%0AeDNPOW5CK2FBUmIvQURsNjRYV1RDMTRQSFhMUzNpd0hNOUEra2tiWHVFTUFZR0hyTi9nampwZzZx%0AWDJCNjJKdWYwK1NOSXpQWTZTcHR2eExhQm5UK2VXeDZ6WmVOaWYwQ0xZTTVlbDB0MC81WExyVW1a%0AVmFXZ0tEQXRQZUtUWVRqcDRKVzdMVHVUSWc3UXhxQkQxaVR1YUVPejBIWE40bVM5ZTRjOFJBamU4%0AQURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0swbGdnVmU4RHZwYmRSTkU3S3d2dVkyVWZuRlRhclI4%0AWVZLcS9IMXlaWUQ5TlpiRXRhRFp6WkI3aVluWWZWUjh4Qnhxa3ZQSFRsZXpWZjYyTVd2VGFzRjJC%0AVHFWdWtHcm9BOGpNMmVLWDNyTEVnbVQrTUFBaWFyK1VFM2NmUlpBczJCVnZtdzk3U3QyVU53WnBW%0AaVl4TUJvN1B2L09hOC9rNUJrbVB0N0ZlcVlZTkovVjhWYTJSanNGM01uR2pCNWV5M2VIb2pKMjFt%0AcEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTNZbm1BbXVPY0hUV1lOdGNoS0FOcEd1dmZ1OVFicDVS%0AcTNvNTZFWEJsQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdZRUFsWEtJV29TRWh0WDFjYmNl%0ASVJTVERha3pxVkxKVHpQWHlubnNtcVZTOWNrci90K0JhM2w0Ym1QM3Z3SlR3K0N6UStIV2JVR0JV%0AaktCeU8vbDF0QUhpWTF4MExqVWxiRCtLSWZRUHl3aDJmWXVrcWJiWEdJN2pJMUdBWjRJTDhXMXgv%0AUDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWpNMVJ4VEdDWUhyODh4U2c9PC9kczpYNTA5Q2VydGlm%0AaWNhdGU%2BICAgICAgICAgPC9kczpYNTA5RGF0YT4gICAgICAgPC9kczpLZXlJbmZvPiAgICAgPC9k%0AczpTaWduYXR1cmU%2BICAgICA8c2FtbDI6U3ViamVjdD4gICAgICAgPHNhbWwyOk5hbWVJRCBGb3Jt%0AYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQi%0APnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTowN0JGQzJENUM0OTY2QzYxRTA1MzA1OTkxRjBBMTE4%0AQTwvc2FtbDI6TmFtZUlEPiAgICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9%0AInVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiIE5vdE9uT3JBZnRlcj0iMjAx%0ANC0xMS0xM1QyMToyMjo0Ny43NTVaIj4gICAgICAgICA8c2FtbDI6U3ViamVjdENvbmZpcm1hdGlv%0AbkRhdGEgTm90T25PckFmdGVyPSIyMDExLTA4LTE4VDE1OjMyOjE4LjExOVoiLz4gICAgICAgPC9z%0AYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPiAgICAgPC9zYW1sMjpTdWJqZWN0PiAgICAgPHNhbWwy%0AOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE0LTExLTEzVDE1OjIyOjM3Ljc1NVoiIE5vdE9uT3JB%0AZnRlcj0iMjAxNC0xMS0xM1QyMToyMjo0Ny43NTVaIj4gICAgICAgPHNhbWwyOkF1ZGllbmNlUmVz%0AdHJpY3Rpb24%2BICAgICAgICAgPHNhbWwyOkF1ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTox%0AMjQ8L3NhbWwyOkF1ZGllbmNlPiAgICAgICA8L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BICAg%0AICA8L3NhbWwyOkNvbmRpdGlvbnM%2BICAgICA8c2FtbDI6QWR2aWNlPjxzYW1sMjpBc3NlcnRpb24g%0AeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiBJRD0iXzE4YzhlYTll%0ALWEwMDktNGNiZi04MGY4LTJiNDg2YmVjMjY5NSIgSXNzdWVJbnN0YW50PSIyMDE0LTExLTEzVDE1%0AOjIyOjQ3Ljc1NVoiIFZlcnNpb249IjIuMCI%2BPHNhbWwyOklzc3Vlcj5odHRwOi8vYy5kZWNlbGxj%0ALmNvbS88L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3Lncz%0ALm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlv%0Abk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRu%0AIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAw%0ALzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI18xOGM4ZWE5ZS1hMDA5%0ALTRjYmYtODBmOC0yYjQ4NmJlYzI2OTUiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxn%0Ab3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25h%0AdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEw%0AL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8v%0Ad3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9InhzIi8%2BPC9kczpU%0AcmFuc2Zvcm0%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRw%0AOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT5wTmFV%0AVS9Fa0poY0NqaGg3LzV5b1Vla05EYVk9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48%0AL2RzOlNpZ25lZEluZm8%2BPGRzOlNpZ25hdHVyZVZhbHVlPlE4bGdSUkcrRWJkdTBHQjV2bEhiZm5R%0AeURyaExiNHNBRktSOEVGbDlpcUZBaHJ6eVIrSVRORHlNTkFkMWxiclV2TTdyYzNaQXRIWGZrUkhr%0AQjlnYWxWQndQMEtpYnBBN2hqZ3JlaFRMMjZieG9ZZEtyUG9NaE12QXVRTEg2S2M5eldUTmVHOVI3%0AbGZNYW5ZL3d5aFVxSmJyZ2JFTWc4OWpmMUFxbzZ3SmJDZz08L2RzOlNpZ25hdHVyZVZhbHVlPjwv%0AZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0PjxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz%0AaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1%0Ac2VyaWQ6b3JnOmRlY2U6MDdCRkMyRDVDNDk2NkM2MUUwNTMwNTk5MUYwQTExOEE8L3NhbWwyOk5h%0AbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0%0AYzpTQU1MOjIuMDpjbTpzZW5kZXItdm91Y2hlcyI%2BPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25E%0AYXRhIEluUmVzcG9uc2VUbz0iXzE2aXBhMzF4M3diZmcxYm5iaWd4ZW1xMmtsIiBOb3RPbk9yQWZ0%0AZXI9IjIwMTQtMTEtMTNUMTg6MjI6NDcuNzU1WiIgUmVjaXBpZW50PSJodHRwczovL3N0ZGVjcWF2%0AdXRsMS52YS5uZXVzdGFyLmNvbToyNDg1L3NpbXBsZXNhbWwvbW9kdWxlLnBocC9zYW1sL3NwL3Nh%0AbWwyLWFjcy5waHAvUkVUIi8%2BPC9zYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uPjwvc2FtbDI6U3Vi%0AamVjdD48c2FtbDI6Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTQtMTEtMTNUMTU6MjI6MzcuNzU1%0AWiIgTm90T25PckFmdGVyPSIyMDE0LTExLTEzVDIxOjIyOjQ3Ljc1NVoiPjxzYW1sMjpBdWRpZW5j%0AZVJlc3RyaWN0aW9uPjxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9z%0AYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRp%0Ab25zPjxzYW1sMjpBZHZpY2U%2BPHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2%0AdS5jb206NzAwMS9yZXN0LzEvMTEvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vXzE4YzhlYTllLWEw%0AMDktNGNiZi04MGY4LTJiNDg2YmVjMjY5NTwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6%0AQWR2aWNlPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTQtMTEtMTNUMTU6%0AMjI6NDcuNzU1WiIgU2Vzc2lvbkluZGV4PSJfMThjOGVhOWUtYTAwOS00Y2JmLTgwZjgtMmI0ODZi%0AZWMyNjk1Ij48c2FtbDI6QXV0aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51%0Acm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0%0AaG5Db250ZXh0Q2xhc3NSZWY%2BPHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNl%0AOm9yZzpvcmc6ZGVjZTpjb29yZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2B%0APC9zYW1sMjpBdXRobkNvbnRleHQ%2BPC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmli%0AdXRlU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0%0APSJ1cm46ZGVjZTp0eXBlOmFjY291bnRJRCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhz%0AaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4%0AczpzdHJpbmciPnVybjpkZWNlOmFjY291bnRpZDpvcmc6ZGVjZTowN0JGQzI0NjdDQTI2N0FGRTA1%0AMzA1OTkxRjBBRUM4RDwvc2FtbDI6QXR0cmlidXRlVmFsdWU%2BPC9zYW1sMjpBdHRyaWJ1dGU%2BPC9z%0AYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPC9zYW1sMjpBc3NlcnRpb24%2BPC9zYW1sMjpBZHZpY2U%2B%0AICAgICA8c2FtbDI6QXV0aG5TdGF0ZW1lbnQgQXV0aG5JbnN0YW50PSIyMDExLTA4LTE3VDE1OjMy%0AOjE4LjExOVoiIFNlc3Npb25JbmRleD0iMzZFODk5NDg5MjMxNkE4MzNDNzk0RUI4MTIzM0EzOEEy%0ARjUiIFNlc3Npb25Ob3RPbk9yQWZ0ZXI9IjIwMTQtMTEtMTNUMjE6MjI6NDcuNzU1WiI%2BICAgICAg%0AIDxzYW1sMjpBdXRobkNvbnRleHQ%2BICAgICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVm%0APnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpB%0AdXRobkNvbnRleHRDbGFzc1JlZj4gICAgICAgICA8c2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3Jp%0AdHk%2BdXJuOmRlY2U6b3JnOm5ldXN0YXI6Y29vcmRpbmF0b3I8L3NhbWwyOkF1dGhlbnRpY2F0aW5n%0AQXV0aG9yaXR5PiAgICAgICA8L3NhbWwyOkF1dGhuQ29udGV4dD4gICAgIDwvc2FtbDI6QXV0aG5T%0AdGF0ZW1lbnQ%2BICAgPC9zYW1sMjpBc3NlcnRpb24%2BIDxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93%0Ad3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9u%0ATWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4t%0AMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcv%0AMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8%2BPFJlZmVyZW5jZSBVUkk9IiI%2BPFRyYW5zZm9ybXM%2B%0APFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNl%0AbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGht%0APSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxEaWdlc3RWYWx1ZT5m%0AUk8ydzBaUGpza3dQTHdudS96KzdxYmRxdG89PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1Np%0AZ25lZEluZm8%2BPFNpZ25hdHVyZVZhbHVlPnk2VlpxRGVjdlZFMEpidWY0MExuKy9CWk9lVm5rSUJR%0AcitKZU5VR25vU3BzQ0R6ZGZMVUNhdWZGRmJhVm5tUDV4N2NGNEVzWEVKRDQKaE0waWw5bmdobmZ5%0AMjRHWGVMVUtId0ZTOGxrYWI5KzlIV3VYYTR0Tmcway9ybFBOWXJPc2dKOFI2K2FDYlhDaGtsMkZX%0ASTEwRVdYUgpjM0dIMjFDOXdjSWdtWGgvOHZDQnNjUFhka0FnaExjVm5HNEtuR0NNbnBYQWUvb1lL%0AQmYrRWtYbm1aY3V2Tmk4ZWNFa1kyQnh0d1R5Cis0RlZ4QWRpbUZGYS91Q3JGelY2MnUzelJUSEJ2%0AY0luSmZ2eHFycmxDVWVzOEQxb2dQV0V1bTE2bVdFYlhJcDJPNEREOGNGaW9lVTIKOVMzQ3l6YkVz%0ATEh3VTBYVjV4dGtCbEdoY2FNWU83d0p2b3p3ZEVPNmR3R21VQ1d6NUw0YzRDU21kSUIrS1lVblk1%0AWTdCM3FHZ09kOApXOUFhQzFySVVuYWQyZEpNR3FNb1M4UHgvY21QUWkrN05DZFYxbDVzUGZVYVVx%0AL0V6TEljZCswcmd1aVYxblpzQVlndnJBWVBQazBnCjA5YVpHdnU0dk5nWG5xZlZjYTNMY015YkNV%0AUDNXTTgzNlpqcXRXdEJDV01waEpVNnhES2tsQXBLTGpxeWtkVldyeVJHbyttNWpMakMKZGUvMjda%0AR2RJM2MwL0RCSFJwemxjdko5c0JsSG10OFpZUGRWV1hHcXdzb3o4aVhPNytDVzBHTUlwaVVCVTRB%0AaGpra01IWVZCWU0zbwpLdnBWdGJFSlJDamxPTjNmRmdWTkI5eG0vVTBOclRYdWpvSU1SbFN4SXJw%0ANGdNdU4xeGZ1UzA2K2NEUUFxZnJrUlR2QnR3b2ttaWc9PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5m%0Abz48WDUwOURhdGE%2BPFg1MDlTdWJqZWN0TmFtZT4xLjIuODQwLjExMzU0OS4xLjkuMT0jMTYwZjY2%0ANmY2ZjQwNmU2NTc1NzM3NDYxNzIyZTYzNmY2ZCxDTj11cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVU%0ALEw9U3RlcmxpbmcsU1Q9VkEsQz1VUzwvWDUwOVN1YmplY3ROYW1lPjxYNTA5Q2VydGlmaWNhdGU%2B%0ATUlJRHp6Q0NBemdDQWdWaU1BMEdDU3FHU0liM0RRRUJCUVVBTUdveEVEQU9CZ05WQkFvVEIwNWxk%0AWE4wWVhJeEN6QUpCZ05WQkFzVApBbEZCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFUk1BOEdB%0AMVVFQ0JNSVZtbHlaMmx1YVdFeEN6QUpCZ05WQkFZVEFsVlRNUll3CkZBWURWUVFERXcxdVpYVnpk%0AR0Z5TG5GaExtTmhNQjRYRFRFek1EVXpNREUwTXpjeU1Gb1hEVEU0TURVeU9URTBNemN5TUZvd2NU%0ARUwKTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFsWkJNUkV3RHdZRFZRUUhFd2hUZEdWeWJH%0AbHVaekVpTUNBR0ExVUVBeE1aZFhKdQpPbVJsWTJVNmIzSm5PbTl5Wnpwa1pXTmxPbEpGVkRFZU1C%0Ad0dDU3FHU0liM0RRRUpBUllQWm05dlFHNWxkWE4wWVhJdVkyOXRNSUlDCklqQU5CZ2txaGtpRzl3%0AMEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF6djVWK2xOVFFSWWRsdlRTQnhFWnhXdmp6bmlna1Ur%0ANnNrWUQKRzc4OTJQMGxsb3R0aURKMmpZSlFDQldlZFduSmVBaEJWeU14dUliZzNXeGJLV1hoTVBY%0AK2xiT1JhTGJiZnRlMkcwSXZDSXpUdU5iVwpJRGpSczZuMkFwSnNwSEU3OW9BTUgxMngrWndYRzhZ%0Ab1IvVFZjVTIvYWI0T3dDTmtzMC9oZjM5U29zM3owY3lzaHMxdkhEWFphNk9sCksvTTZ5aFdHcnZk%0AWXJRdlVFaUszbjB5aUtFSGdxZ0RaMkZRWTNxUDVmQ0hLcnhjSG9iczJsdWk5cW9qUy8zb1NXQXlp%0Ad1U4eDVLVjEKa1RodlRPbmdGUjJxTnoycExJYWlLRG5wemR2TEdVS2orL21yTnNUaVVNYzBTVnFU%0AWk95WHVlOFUyNEw5ZlRQbkNEVS81UkhPZzA5RQp1MnljKy8xU2FqbGZaSkRqRGtSZ2lyU2xBdHZF%0AS25HZFc5VWJDQ1NaOVVMTEVqcnR4cyt4L1FTRE52T1lGc01YVXhiaVJOWXdKeUJ3CnQ2RDNBT0tD%0AR1BlZUhUWURLcEREeDZoQTFEMkZvdTd6Y1RiZ0RnVHJQbTdJMWNzMkdQQTk2Y1M2SEdEblpRTTdo%0AeUJhZWs2Ylh6b2sKNkltTkJJVXZ0WElXQUtyMUgzRW5GU3A2REJqdnBFWW1Ld3JXYVNnVWxTNlF0%0AeTBUclEyOEEveE9hMW1LNms0ajF0SThVRHJINzdoTgpMZU9rdmZRd0E1NEFid20vU2kwVnZsYWIy%0AZUdYU25MSUhjKzhHckNTUUJNTlRTcFBWMWJzTjVWNHFpZUx4L1Z2YzFvbXVMYkxpOFkzCnhwaWM5%0AODlqZ0RSTDV6ZUl2bVk2T3pNZEhiS2FsYjVOT3BhUllxMENBd0VBQVRBTkJna3Foa2lHOXcwQkFR%0AVUZBQU9CZ1FDMFVEalUKODh5TXlBNlhveWpYSEQrMDZ6Z05KZlBYcERkNXRQV0Zqb2Z0WHE2dUFk%0ASzFoenBEYlhTTGg1aDFNL2VnSkJGNGhHY09EZlZYRTNkYQpVYi9qWDYxTlJBR3hOU0NYUkJCbWhB%0AOCtvcEx0eVlWVmNOdE1iUE5ScjJvb2h4Z3dzbHRLblJQZFdpMkNBazlUaGhWdjgrayt5dmM0CnpB%0AVWxmckJqNjMyQ1V3PT08L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1Np%0AZ25hdHVyZT48L3NhbWwycDpSZXNwb25zZT4%3D</con:value></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>urn:dece:portal:library</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="edb17f28-862e-466d-bccd-693cc9c3dacf" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:library</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-11-13T21:22:47.755Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="36E8994892316A833C794EB81233A38A2F5" SessionNotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/11/Account/urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D/User/urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_18c8ea9e-a009-4cbf-80f8-2b486bec2695" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>pNaUU/EkJhcCjhh7/5yoUekNDaY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8lgRRG+Ebdu0GB5vlHbfnQyDrhLb4sAFKR8EFl9iqFAhrzyR+ITNDyMNAd1lbrUvM7rc3ZAtHXfkRHkB9galVBwP0KibpA7hjgrehTL26bxoYdKrPoMhMvAuQLH6Kc9zWTNeG9R7lfManY/wyhUqJbrgbEMg89jf1Aqo6wJbCg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_16ipa31x3wbfg1bnbigxemq2kl" NotOnOrAfter="2014-11-13T18:22:47.755Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-11-13T15:22:47.755Z" SessionIndex="_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_18c8ea9e-a009-4cbf-80f8-2b486bec2695" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>pNaUU/EkJhcCjhh7/5yoUekNDaY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8lgRRG+Ebdu0GB5vlHbfnQyDrhLb4sAFKR8EFl9iqFAhrzyR+ITNDyMNAd1lbrUvM7rc3ZAtHXfkRHkB9galVBwP0KibpA7hjgrehTL26bxoYdKrPoMhMvAuQLH6Kc9zWTNeG9R7lfManY/wyhUqJbrgbEMg89jf1Aqo6wJbCg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_16ipa31x3wbfg1bnbigxemq2kl" NotOnOrAfter="2014-11-13T18:22:47.755Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-11-13T15:22:47.755Z" SessionIndex="_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="edb17f28-862e-466d-bccd-693cc9c3dacf" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:library</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-11-13T21:22:47.755Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xs="http://www.w3.org/2001/XMLSchema" ID="_18c8ea9e-a009-4cbf-80f8-2b486bec2695" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>pNaUU/EkJhcCjhh7/5yoUekNDaY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8lgRRG+Ebdu0GB5vlHbfnQyDrhLb4sAFKR8EFl9iqFAhrzyR+ITNDyMNAd1lbrUvM7rc3ZAtHXfkRHkB9galVBwP0KibpA7hjgrehTL26bxoYdKrPoMhMvAuQLH6Kc9zWTNeG9R7lfManY/wyhUqJbrgbEMg89jf1Aqo6wJbCg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_16ipa31x3wbfg1bnbigxemq2kl" NotOnOrAfter="2014-11-13T18:22:47.755Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-11-13T15:22:47.755Z" SessionIndex="_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="36E8994892316A833C794EB81233A38A2F5" SessionNotOnOrAfter="2014-11-13T21:22:47.755Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_18c8ea9e-a009-4cbf-80f8-2b486bec2695" IssueInstant="2014-11-13T15:22:47.755Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>pNaUU/EkJhcCjhh7/5yoUekNDaY=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>Q8lgRRG+Ebdu0GB5vlHbfnQyDrhLb4sAFKR8EFl9iqFAhrzyR+ITNDyMNAd1lbrUvM7rc3ZAtHXfkRHkB9galVBwP0KibpA7hjgrehTL26bxoYdKrPoMhMvAuQLH6Kc9zWTNeG9R7lfManY/wyhUqJbrgbEMg89jf1Aqo6wJbCg=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:07BFC2D5C4966C61E05305991F0A118A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_16ipa31x3wbfg1bnbigxemq2kl" NotOnOrAfter="2014-11-13T18:22:47.755Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-11-13T15:22:37.755Z" NotOnOrAfter="2014-11-13T21:22:47.755Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/11/SecurityToken/Assertion/_18c8ea9e-a009-4cbf-80f8-2b486bec2695</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-11-13T15:22:47.755Z" SessionIndex="_18c8ea9e-a009-4cbf-80f8-2b486bec2695"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:07BFC2467CA267AFE05305991F0AEC8D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>89d6fbbc-d9ec-4088-8168-f6e89f1a2f87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e164b0b3-5b85-42a1-9128-95f6f38067e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfed714e-5455-441b-afaa-598623bf33fb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d36a6ef7-3c53-4e9e-94fe-21d306f923b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>377c947e-59f4-4d30-8da5-0e688ae57897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56ca4b95-83fa-47b0-8b9f-5af7de663ad0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79fd1309-17de-4708-b5ec-fd6f35921c3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff8a96c3-81a8-4032-8089-c9ea813f4484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login_HTTP_Redirect" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="aac60aa1-a63a-4481-a867-1a93f431eaf3" disabled="true"><con:settings/><con:testStep type="groovy" name="Set_TLS" id="23445963-b476-43ca-85dc-858cf0182ec3"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName" id="c4127eb8-8b5d-43c7-9281-06de0d110ef9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>21ddf1dc-dc3b-4942-b6ac-34c838187b31</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="962e44d9-f948-4f2d-8af4-53be2369471b"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>US</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="23df8b4e-fce1-4e5e-87be-22bc3c52c324"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="ec1b846a-cfb2-4e4e-bf6f-70ea107252e6"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() ==0 ;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     int lastSlash = urlStr.lastIndexOf('/');
    	accountid     = urlStr.substring(lastSlash + 1);
   
	tP.setPropertyValue("NODEACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="4a85a72f-261e-438c-892f-65f720024535"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1508bdfb-ae39-4c07-8d58-884b5ae61d0b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="d7a42b0e-dd3a-47b5-a8b4-b222510e3b9c"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
        	<!--<GivenName>UVTC_AltEmail</GivenName>-->
		<SurName>Gupta</SurName>
	</Name>	
	       <DisplayImage>
	       <DisplayImageURL>https://qa.uvvu.com:7001/static/images/Image_IPT.jpg</DisplayImageURL>
        <!--DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData-->
    </DisplayImage>
	<ContactInfo>
        <!--PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#Project#Node_OID}" VerificationStatus="urn:dece:type:status:success"-->			
        <PrimaryEmail>
	 <Value>shikha82@gmail.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>sunitha.pemmasani@neustar.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
       <TelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </TelephoneNumber>
        <MobileTelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
        </MobileTelephoneNumber>
	</ContactInfo>
        <Languages>
		<Language primary="true">en-GB</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1930-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
                <!--Password IsRandom="false"></Password-->
               <!--Password>password&#x20ac;</Password-->
             	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1" id="b86d5fd3-83ca-4fc4-8887-3b73cee42e74"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	int lastSlash = urlStr.lastIndexOf('/');
    	userid = urlStr.substring(lastSlash + 1);
   
    tP.setPropertyValue("NODEUSERID",userid);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1" id="7c113752-2c9e-4d34-bfa2-5b2866e0c55a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="8a0cddf8-775b-46f9-ad9c-d310d7e05432"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","RET");
def targetPort = context.expand( '${#Project#targetPort}' )
def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/ourDevicesPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/userProfilePage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/mediaPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/accountDashboardPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/touPage.jsf");
//tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP");
//tC.setPropertyValue("stsaudience",null);

/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);

tC.setPropertyValue("NonURLsamlResponseBase64Str",null);
tC.setPropertyValue("NonURLsamlResponseBase64Str",null);
tC.setPropertyValue("samlResponseBase64Str",null);
tC.setPropertyValue("samlSignatureBase64Str",null);
tC.setPropertyValue("NonURLsamlSignatureBase64Str",null);
/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" id="2190340f-ff04-465a-906a-855e253204b8"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" id="7889df94-a89c-4983-ab5d-93f92315d2df"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML" id="f8d98dd1-028f-49d1-80a1-f4627b9fcd5d"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();
String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
//Added this as the url changed				
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Deflate and Encode the &lt;Response> Query Parameter" id="d819f695-927c-47cb-a0b7-75d576598272"><con:settings/><con:config><script>import java.net.URLEncoder;
import java.util.zip.DeflaterOutputStream;
import java.util.zip.Deflater;
import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.*;
//import org.apache.commons.codec.binary.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseBase64Str", null);

// Perform Deflation

String Responsexmlbody = tC.getPropertyValue("samlResponseXML");

//log.info "Response XML to deflate:  " + Responsexmlbody;

byte[] input = Responsexmlbody.getBytes("UTF-8");

//log.info input.length;
/*
*  Compress
*/

Deflater compresser = new Deflater(9,true);

ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream, compresser);
deflaterOutputStream.write(input, 0, input.length);
deflaterOutputStream.close();


// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);

log.info base64EncodedMessage;

tC.setPropertyValue("NonURLsamlResponseBase64Str",base64EncodedMessage);

</script></con:config></con:testStep><con:testStep type="groovy" name="Create Signature Query Parameter" id="3f08d640-874b-4019-bbd2-ae1530db6e08"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import java.security.Signature;
import java.security.PrivateKey;
import org.opensaml.xml.util.Base64;
import javax.xml.crypto.dsig.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');


tC.setPropertyValue("samlSignatureBase64Str",null);

String DSA_SHA1_SIGNATURE = "http://www.w3.org/2000/09/xmldsig#rsa-sha1";
String querySignature = "";

String myKeyStore = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseBase64Str = "";
String SigAlg = "";
String urnEncodedSignature = "";

//
//  First URL encode and save our samlrequest and sigalg
//
try {
	samlResponseBase64Str = URLEncoder.encode(tC.getPropertyValue("NonURLsamlResponseBase64Str").toString(), "UTF-8");
	SigAlg = URLEncoder.encode(tC.getPropertyValue("DSA_SHA1_SIGNATURE").toString(), "UTF-8");
	log.info "Sig Alg is: " + SigAlg;
} catch (UnsupportedEncodingException e) {
	this.log "URLEncoding Error! - $e";
} finally 
 {
	tC.setPropertyValue("samlResponseBase64Str", samlResponseBase64Str);
	tC.setPropertyValue("SigAlg", SigAlg);
}

//  Constructed the Query String against which we will generate
//  the signature.
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
String strDataToEncrypt = "SAMLResponse=" + samlResponseBase64Str + "&amp;SigAlg=" + SigAlg;
byte[] byteDataToSign = strDataToEncrypt.getBytes();
log.info "strDataToEncrypt[$strDataToEncrypt]";
log.info "byteDataToSign[" + byteDataToSign.toString() + "]";


// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

log.info "PATTY " + cert.toString();

/*
*  Get my keystore Private Key
*/
PrivateKey myPrivateKey = keyEntry.getPrivateKey();

Signature signature;
signature = Signature.getInstance("SHA1withRSA");
signature.initSign(myPrivateKey);
signature.update(byteDataToSign);

byte[] rawSignature = signature.sign();

querySignature = Base64.encodeBytes(rawSignature);

tC.setPropertyValue("NonURLsamlSignatureBase64Str",querySignature);

log.info "querySignature[$querySignature]";


//
//  URL encode and save our signature
//
try {
	urnEncodedSignature = URLEncoder.encode(querySignature, "UTF-8");
} catch (UnsupportedEncodingException e) {
	this.log "Signature URLEncoding Error! - $e";
} finally {
	tC.setPropertyValue("samlSignatureBase64Str",urnEncodedSignature);
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="5628cbcf-5c80-4baa-883c-7123e6c5d9b6"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
//String SAMLResponse = tC.getPropertyValue("NonURLsamlResponseBase64Str").toString();
String SAMLResponse = tC.getPropertyValue("NonURLsamlResponseBase64Str").toString();
String SigAlgo = tC.getPropertyValue("DSA_SHA1_SIGNATURE").toString();
//String SignatureVal = tC.getPropertyValue("NonURLsamlSignatureBase64Str").toString();
String SignatureVal = tC.getPropertyValue("samlSignatureBase64Str").toString();

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://"""+ tP.getPropertyValue("targetHostportal") + ":" + tP.getPropertyValue("targetPortportal") + """/security/federation/saml/acs" method="get"> 
<input name="SAMLResponse" type="hidden" value="""+SAMLResponse+"""></input>
<input name="SigAlg" type="hidden" value="""+SigAlgo+"""></input>
<input name="Signature" type="hidden" value="""+SignatureVal+"""></input>
<input type="submit" value="send"/></form></body>
""";

//assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RSAML_GET" disabled="true" id="0f39c4ee-294b-4939-b0ff-8a8df098504f"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RSAML_GET" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>Samlresponse=${#TestCase#samlResponse}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="SAMLResponse" value="${#TestCase#NonURLsamlResponseBase64Str}"/>
  <con:entry key="SigAlg" value="${#TestCase#DSA_SHA1_SIGNATURE}"/>
  <con:entry key="Signature" value="${#TestCase#samlSignatureBase64Str}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_434a6df5-b6b5-4a19-9e6c-fe179b22dddb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>WxRuC6LlbPua85JN9Guniaihx+o=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
m8Zt8wLY/pArHxuVJie8RlZqVR6TJLc/4LCneY6brzlBDjX96WRVbr57J2mS0kCdr4AqxcA3pHJH
zqsw+Ru5HIsrnimt6YwiJ+WHmCpuHGofXOyN7krdQWXeH+MEVo88MNFIsvHqTEBP9TqEQLesCFl9
J9xN7ny20yWAwIKI11s=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2527E46B4F670525CC4CEF52F9FAC99C" NotOnOrAfter="2014-01-27T05:59:27.213Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-27T02:59:27.213Z" SessionIndex="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7002/security/federation/saml/acs" ID="d5c522eb-e24d-4bdf-871e-830cd74cff6c" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7002/ssp/views/ourDevicesPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-01-27T08:59:27.213Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_434a6df5-b6b5-4a19-9e6c-fe179b22dddb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>WxRuC6LlbPua85JN9Guniaihx+o=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
m8Zt8wLY/pArHxuVJie8RlZqVR6TJLc/4LCneY6brzlBDjX96WRVbr57J2mS0kCdr4AqxcA3pHJH
zqsw+Ru5HIsrnimt6YwiJ+WHmCpuHGofXOyN7krdQWXeH+MEVo88MNFIsvHqTEBP9TqEQLesCFl9
J9xN7ny20yWAwIKI11s=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2527E46B4F670525CC4CEF52F9FAC99C" NotOnOrAfter="2014-01-27T05:59:27.213Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-27T02:59:27.213Z" SessionIndex="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="528C749BA6D2FBC2D438FEE9141382A4FE1" SessionNotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_434a6df5-b6b5-4a19-9e6c-fe179b22dddb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs xsi" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>WxRuC6LlbPua85JN9Guniaihx+o=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
m8Zt8wLY/pArHxuVJie8RlZqVR6TJLc/4LCneY6brzlBDjX96WRVbr57J2mS0kCdr4AqxcA3pHJH
zqsw+Ru5HIsrnimt6YwiJ+WHmCpuHGofXOyN7krdQWXeH+MEVo88MNFIsvHqTEBP9TqEQLesCFl9
J9xN7ny20yWAwIKI11s=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2527E46B4F670525CC4CEF52F9FAC99C" NotOnOrAfter="2014-01-27T05:59:27.213Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-27T02:59:27.213Z" SessionIndex="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_434a6df5-b6b5-4a19-9e6c-fe179b22dddb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>WxRuC6LlbPua85JN9Guniaihx+o=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
m8Zt8wLY/pArHxuVJie8RlZqVR6TJLc/4LCneY6brzlBDjX96WRVbr57J2mS0kCdr4AqxcA3pHJH
zqsw+Ru5HIsrnimt6YwiJ+WHmCpuHGofXOyN7krdQWXeH+MEVo88MNFIsvHqTEBP9TqEQLesCFl9
J9xN7ny20yWAwIKI11s=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2527E46B4F670525CC4CEF52F9FAC99C" NotOnOrAfter="2014-01-27T05:59:27.213Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-27T02:59:27.213Z" SessionIndex="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7002/security/federation/saml/acs" ID="d5c522eb-e24d-4bdf-871e-830cd74cff6c" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7002/ssp/views/ourDevicesPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-01-27T08:59:27.213Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="528C749BA6D2FBC2D438FEE9141382A4FE1" SessionNotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>https://qa.uvvu.com:7002/ssp/views/ourDevicesPage.jsf</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value/></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value/></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7002/security/federation/saml/acs" ID="d5c522eb-e24d-4bdf-871e-830cd74cff6c" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://qa.uvvu.com:7002/ssp/views/ourDevicesPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2014-01-27T08:59:27.213Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb" IssueInstant="2014-01-27T02:59:27.213Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_434a6df5-b6b5-4a19-9e6c-fe179b22dddb">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>WxRuC6LlbPua85JN9Guniaihx+o=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
m8Zt8wLY/pArHxuVJie8RlZqVR6TJLc/4LCneY6brzlBDjX96WRVbr57J2mS0kCdr4AqxcA3pHJH
zqsw+Ru5HIsrnimt6YwiJ+WHmCpuHGofXOyN7krdQWXeH+MEVo88MNFIsvHqTEBP9TqEQLesCFl9
J9xN7ny20yWAwIKI11s=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_2527E46B4F670525CC4CEF52F9FAC99C" NotOnOrAfter="2014-01-27T05:59:27.213Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2014-01-27T02:59:17.213Z" NotOnOrAfter="2014-01-27T08:59:27.213Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2014-01-27T02:59:27.213Z" SessionIndex="_434a6df5-b6b5-4a19-9e6c-fe179b22dddb"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="528C749BA6D2FBC2D438FEE9141382A4FE1" SessionNotOnOrAfter="2014-01-27T08:59:27.213Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>528C749BA6D2FBC2D438FEE9141382A4FE1</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa.q.uvvu.com:7002/rest/1/11/SecurityToken/Assertion/_434a6df5-b6b5-4a19-9e6c-fe179b22dddb&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>username</con:name><con:value>shikha_user_create_accp_test_20140126_095924</con:value></con:property><con:property><con:name>samlResponseBase64Str</con:name><con:value>zVnpc6rKEv%2Bev8LyfrQMi6BgnXiLTUXFBXHBL69YBkVZlAFB%2F%2Fo3aGLUmJycc8999VKVUpue3qanu3%2FDj78z3yvsQQTdMHgpEs94sQACK7TdYPlSnGjNMlP8u%2FEDGr5HbusqgNswgKCAFgWwfqa%2BFJMoqIcGdGE9MHwA67FVH3NKr04%2B4%2FVtFMahFXrFgpCvDOKv2a0zE1rmhlGxIAIYu4ERn4xbxfEW1jFsZzzD52S%2FT56t0K%2FXcJzEILCSyI0PmANsEJ34sdw6zLBgsSCLL0WbtmiSBGYZkJRdpkzbKTM1ApSZCm7ZNcpynKqFOCFMgBzA2MgNJXGCKuNEmaxpOFmn2TpZeyaJyqJYmL4FDNlcbBQKhXOE6qf10XV4vnbXgBBEubXFRs5mAwvUw2h5%2Bj%2F9UCXtB3Yt%2B13Zti5lMQhyO2BOPf%2F9OC8DMZKnhRNVfjUmJ59DiCKYpulzTvA86xmpwqC1Ar6BIX8rGIFjVhhGdh52tAWNt6jna1K0AjpGtAzz0GM%2FsHtljSsbNMQH4ona%2B1MWoH2%2F23W4xfYuSCEWJpEI9q4F4NBYguc1dF5tuxhxihv2MHBv4RzHRpy8hvKWJoQ2KEwNLwFfbyc8cdfHiYUsgUXsRum7%2BNdk4d42%2F3fy5ZTUVdMgqjXHKhsGqJQpBqCkdqpE2TFp0jQqDuEQxj9I6ru0brzunXXZuXMS3KdnngAoCO4S7V8SvRULG95sflo57TuJ4ziGsxjisaG7%2FKvYuOTxWQSw5cAJr%2FMb1gUjCAPXMjz3eDrqCohXoV3gvGWIisDK%2F0QRkWcWUlQGmVW2CCr467xDhY82f1PijekRNMpwZRD3QlXggAjVVFBAB%2BSl%2BNe3Nu1dxFmIFhkBdMLIh9dP7p79mr0g2AMv3AK7DN%2Fcvjb916U%2FiO%2BtOCQQWHU5sLwEunvQz9N7a6Cj8poiwPq%2B5MIwAo6b9VyIctqGhVMSFjIkCrof3MCu%2FWh8%2BgTeR110l6gB%2FU4y3CfCtbxTIWmQGp3wFAXX8q4jLzryJAYzGqtVoI2%2FnMy6Zr41%2BJJRjWvqx9Nyk9JnQTKYL1pEWNHSfeCt2eF6Ruk932N3qczyvZq1IpNjSaSCoF%2FaL5O1PQRdebQYdL3E6if8nmW8Fh75cbOzCmsFKBwrqqPsjA48ktaoDfey1KzRoUr2YUoJXjYwYrIKiHVoagdF3TJWONn2MC%2FxlqvmFBqESwLX7S3G2rxVcLuMeGCUttQtwU2l6WPD9OXi15UHV751weFjcZjTOCsasXEf%2B5wu5MXTQZUjBg1FlkVcFATuuBG4pSgqHN4SxrvWWDYr4kji%2BdGEU1phJhy5Dr%2FsT3lO1zhvqimqlIqpLk5HI1lKVzNj3gmMGb3VNUlVOKbFEROJzxR5UlE9y8%2B2pm9lksgNzjJCjcdpz573cX0uX8mGSHaTV1Q9bXIn2aKUEsliPj3areahFzRXPb%2B%2FUnhqLmrSQRE3aX8tp33RIpRpmNOOd7TUWks9hduc7VkpwnSqXOlbIn0L%2FsqXNvJFs1vTg9nyksVRWiuCdFrLZYphzzvJwFc9nZxUzUonGPjsYXHcbhazvjdYj5BOLmuvOYtfbnarjdtiU5wXRtJMJBd7E%2Bff%2FfD7e1NDMXflVBzpnW64kFd7q8%2Bd4s2Jy6U85PI9WYYC%2Bs5zPUXKUFtZuTI6DZvpRpt0JpHGL7ujo8hmY8UsLZfapOYMw5VuLrpWFcyImcUfhq20pYqOO%2FJrjN6JDxM8WhwSkWiRzjAJRn1Fxx01W3ODUDu4h6ErW5tqTK%2B0uXP0solT22vM4QjxhUdMW21PEzSgiO6hr7LcGqM9YUYT5sLQhQnZms%2BANt0dIkNld9bUwpzWWKvyfOqvjeHMYkV2V1l0g2ZH91RZ7pc4llrbpSoMssqADfiSwakmxolelZrPNIGghu15b1xx07bCcqXNxpwnksLprXbUx5br9XZZ3c1Jvkp2EgcvjfvycahXx9t4n%2FUMPtBKYJZVjwvQdx1c6OkKDTw8xjF63osm%2FmJqzJZdkYvRkdZ0bb2lOrNaT0s0eVkbZTteJFwtMaTBEW%2FP%2B5Q%2FZgFlMSq3BgwnjrJVgu%2Bw9gTZxAmCM%2BBKW3e%2B7OLecjkFjLjfmrbal2rddJ%2BgHHGCJpq7VEafdtEi4rDQRba%2FMKXYEBfHBV9z9UB3piqT8dlusx%2B2NQ8cp06VVGZ7zYBNktd202TTikKOWSsk6M4rUU9a%2BlpJ4TjXiEoTqWI56oKDJD%2Fd%2BylbG8fkpJ8utlNXzxQ%2BrA332MBgsA3Nb%2FxhXGuCna73O9iUmRqkuobNihK01jwNDhXQDtcdkvC3%2FFHTLB2Xx2RJ3FTbRCvuaWAwlSt64HN%2BMrDa2kzvx9aqy%2FW3rWTvJOzI3NLqrhLSVWnOe9xS4TlOus%2Fr5imvdYnz5l15Fo6lVTwnLNMCsjrWRGNz3E17He04nB%2BCAPq76Zi1NhEWl3ij4lGmP6zs046WloTjqNSemZMWP1l3%2BcMA84iYa7s6keG99cQzxVJXdkbDQ7oiHT3Z7Exz3pJra5locQtK7jEzIsOGldlhh9HkuFPtdyaL9oyCC3yE69xaIdRMawl6O2KYbLw81937gnnbg%2B7L7Il4U5Bvi%2FfNPDlOzDWw4svaMzWfB2Sx0ESd2PgJTMwprl12Tqz1bT64QjTSx1cwKkGTsmu%2FI6kmLvESTfBcU2RpnhQknMKJJs7hNZYlRUl8m2PPVtyZ9mowgrCOm6vMh%2FbzWPATOOvXTWBEAEHZfhgPgkHEOTGIbqdw5noKvwrzp6rzuH%2BUR5RxpkwwGkHXK2SdYJ4Jgl28zyBv%2Fj2Q13jEcLNhiNt2c1aY6%2BUBCjx4ACWINyjxi86%2BAaLEdvOxRkVzT%2BRa76Y94PkELxMk9ebHhfMuAJ9qeWN4d%2FYmBpydA8zGHwNv%2F6EqlFG1HbpsVk26TBkEW2ZB1So7gKixJknatm3%2BLnr7deD2TzDb0x1ae%2FrTKO3pT6Kzp0eo7Hu7cV57BRie%2FjgAe%2FrnoOt%2FhrLugNXTPZx6%2BiMg6ukeOs0yNRGqPc8cJgZDd%2FpsKwlcw11lpfAjdHq6g0xP92Dp6QFMevKZRcykPR3bclE7S6YdFzCqt9hN1arW6VkY1RMCoFfN6Ojx4nrOVmfq1IzoWof0x%2FhGsCOK22UWV9m2O%2B2n4w6mJTWh2zKMAtePq3rqdkqzti9sk3YrdOaDQ7%2B2iezRbA7aJUWahgyj9Jsy3Ld3msQPWW0njXoACk2PfeqwWb8WHEj8MONSuSsTBHx5egSU7oiNu977%2F9h0%2F3m3hSCwQVTeh4m1ArDY%2BEkTlYO3K20tRBWZpMmaRFV5qlmt4TRJCwIlSE2abLJNTmBZ4avGRt9UYxVY7tY9XXe%2FXV%2FCGIVkZ%2ByT2COe98ZzABJU1KPTdSZJMTQGXX%2FrgdO1tR%2FaiQeet6vt%2BRobnj%2FJsmHBE1WVtNP5%2B7yn37fzf7mTf9HCv9e5r266L5xftewH3frrRo3qPKoC17fJu7v75AiJx1AVJLDx6%2FsELdyAALuIwL7VJS5W32m%2B0G%2FtS%2BJVkN8NAx%2BlS%2BH08xvtfgxg3u5llO7Zd2eJG5UobjHI4kc0wUOjSm7xl9OMVbdyPkQeoo80jOz37Xog60oP8jOHFG6wzH%2Fl%2FeDwSVJcvQe4Fv5IwCPlt8RLkC%2B2xCibzCQGnz8p5JXppWhYVpgEsSwWT4TranmyMz5sQf2d6YOYU0V%2B7b8Z%2FLT%2FzpXe%2BPQipHjhdX%2FOXHZP6WKBYt6WT7a8FDM0kiLlwfKqOr8a%2BKBAMxxDkDVSIK4LNCHw5CWAN540PpA%2FUq5ien8e7k%2FC7Xz%2F9XE4o5zaHcq5Ow40yQg1iuW5qkg2eYEUqQrTlCSWoIgKQ3JUUyIuS34Xqlxl2UeM8i%2BfpUcKf3qoXvvNr5ypD8jp3ulPztf1k8umv78Je%2Bu5jf8C</con:value></con:property><con:property><con:name>fileSamlResponseXML</con:name><con:value/></con:property><con:property><con:name>samlSignatureBase64Str</con:name><con:value>yWhsjsy42FxeWJonnqXAA%2Be51DnM4ZQml4I8MvTy1SxGJBzxJAWbbE9GoVP6zZkCpt7S25fej8p7%0A610vvD8Ly9x3jhHnVGclxNNjt9obCmxnDp0wPZQEBcAyY4QKWn9R3m%2FSqtygKxBxbCLj%2F8iaP%2BAl%0ASrKxjcqyrV5waLiNt2V9GeFT%2B%2FtTH%2BbVSFoiMiv3o14IOCz0oI8XCbZd%2Fm7O%2BcoFllhNgnFxCoJL%0ApniIlRxX300rrfYc4Xj13qtw33xw%2BPtxIzcrHg%2FZVHe%2Bq2ecmr8qraGDW9ta6mYiyi0ylWmHB91v%0AlmVVkEtCtV2u53ixjv1bkcW1YV7wZadvcs8xl1JlH8HDubdkhCfwcNIs%2BGuwBobKTEBrPIvLBonj%0AdSJGQVb%2FDXgwwdZv7BQYYvIkRFvpCxLTiCnkxMySlAvw8aQMA6SO%2BxRmwRi7H8%2BpcoOwogoMWc7%2F%0AevMir1DaoaKsDed2%2F2SIxy6oZlpW8l4LCd6YRJpQOEgkjNH1m8yGF7TjS4VhRGkmdIQnJvQENhum%0AdmrUQr19%2B0F%2FjmvPXi77XVKykwoZJ41jWEylUw8C0vIEABNaG9IlZhn21ajJV9FogbOyRLrj341s%0Ah57zrQrKPz3pnVB2c3MdUmIkEsVak5nPG2o4TCms0xArG4DOYJQGmcHwrTe4YvVm4mk4Z9fhs7A%3D</con:value></con:property><con:property><con:name>SigAlg</con:name><con:value>http%3A%2F%2Fwww.w3.org%2F2000%2F09%2Fxmldsig%23rsa-sha1</con:value></con:property><con:property><con:name>DSA_SHA1_SIGNATURE</con:name><con:value>http://www.w3.org/2000/09/xmldsig#rsa-sha1</con:value></con:property><con:property><con:name>NonURLsamlSignatureBase64Str</con:name><con:value>yWhsjsy42FxeWJonnqXAA+e51DnM4ZQml4I8MvTy1SxGJBzxJAWbbE9GoVP6zZkCpt7S25fej8p7
610vvD8Ly9x3jhHnVGclxNNjt9obCmxnDp0wPZQEBcAyY4QKWn9R3m/SqtygKxBxbCLj/8iaP+Al
SrKxjcqyrV5waLiNt2V9GeFT+/tTH+bVSFoiMiv3o14IOCz0oI8XCbZd/m7O+coFllhNgnFxCoJL
pniIlRxX300rrfYc4Xj13qtw33xw+PtxIzcrHg/ZVHe+q2ecmr8qraGDW9ta6mYiyi0ylWmHB91v
lmVVkEtCtV2u53ixjv1bkcW1YV7wZadvcs8xl1JlH8HDubdkhCfwcNIs+GuwBobKTEBrPIvLBonj
dSJGQVb/DXgwwdZv7BQYYvIkRFvpCxLTiCnkxMySlAvw8aQMA6SO+xRmwRi7H8+pcoOwogoMWc7/
evMir1DaoaKsDed2/2SIxy6oZlpW8l4LCd6YRJpQOEgkjNH1m8yGF7TjS4VhRGkmdIQnJvQENhum
dmrUQr19+0F/jmvPXi77XVKykwoZJ41jWEylUw8C0vIEABNaG9IlZhn21ajJV9FogbOyRLrj341s
h57zrQrKPz3pnVB2c3MdUmIkEsVak5nPG2o4TCms0xArG4DOYJQGmcHwrTe4YvVm4mk4Z9fhs7A=</con:value></con:property><con:property><con:name>NonURLsamlResponseBase64Str</con:name><con:value>zVnpc6rKEv+ev8LyfrQMi6BgnXiLTUXFBXHBL69YBkVZlAFB//o3aGLUmJycc8999VKVUpue3qanu3/Dj78z3yvsQQTdMHgpEs94sQACK7TdYPlSnGjNMlP8u/EDGr5HbusqgNswgKCAFgWwfqa+FJMoqIcGdGE9MHwA67FVH3NKr04+4/VtFMahFXrFgpCvDOKv2a0zE1rmhlGxIAIYu4ERn4xbxfEW1jFsZzzD52S/T56t0K/XcJzEILCSyI0PmANsEJ34sdw6zLBgsSCLL0WbtmiSBGYZkJRdpkzbKTM1ApSZCm7ZNcpynKqFOCFMgBzA2MgNJXGCKuNEmaxpOFmn2TpZeyaJyqJYmL4FDNlcbBQKhXOE6qf10XV4vnbXgBBEubXFRs5mAwvUw2h5+j/9UCXtB3Yt+13Zti5lMQhyO2BOPf/9OC8DMZKnhRNVfjUmJ59DiCKYpulzTvA86xmpwqC1Ar6BIX8rGIFjVhhGdh52tAWNt6jna1K0AjpGtAzz0GM/sHtljSsbNMQH4ona+1MWoH2/23W4xfYuSCEWJpEI9q4F4NBYguc1dF5tuxhxihv2MHBv4RzHRpy8hvKWJoQ2KEwNLwFfbyc8cdfHiYUsgUXsRum7+Ndk4d42/3fy5ZTUVdMgqjXHKhsGqJQpBqCkdqpE2TFp0jQqDuEQxj9I6ru0brzunXXZuXMS3KdnngAoCO4S7V8SvRULG95sflo57TuJ4ziGsxjisaG7/KvYuOTxWQSw5cAJr/Mb1gUjCAPXMjz3eDrqCohXoV3gvGWIisDK/0QRkWcWUlQGmVW2CCr467xDhY82f1PijekRNMpwZRD3QlXggAjVVFBAB+Sl+Ne3Nu1dxFmIFhkBdMLIh9dP7p79mr0g2AMv3AK7DN/cvjb916U/iO+tOCQQWHU5sLwEunvQz9N7a6Cj8poiwPq+5MIwAo6b9VyIctqGhVMSFjIkCrof3MCu/Wh8+gTeR110l6gB/U4y3CfCtbxTIWmQGp3wFAXX8q4jLzryJAYzGqtVoI2/nMy6Zr41+JJRjWvqx9Nyk9JnQTKYL1pEWNHSfeCt2eF6Ruk932N3qczyvZq1IpNjSaSCoF/aL5O1PQRdebQYdL3E6if8nmW8Fh75cbOzCmsFKBwrqqPsjA48ktaoDfey1KzRoUr2YUoJXjYwYrIKiHVoagdF3TJWONn2MC/xlqvmFBqESwLX7S3G2rxVcLuMeGCUttQtwU2l6WPD9OXi15UHV751weFjcZjTOCsasXEf+5wu5MXTQZUjBg1FlkVcFATuuBG4pSgqHN4SxrvWWDYr4kji+dGEU1phJhy5Dr/sT3lO1zhvqimqlIqpLk5HI1lKVzNj3gmMGb3VNUlVOKbFEROJzxR5UlE9y8+2pm9lksgNzjJCjcdpz573cX0uX8mGSHaTV1Q9bXIn2aKUEsliPj3areahFzRXPb+/UnhqLmrSQRE3aX8tp33RIpRpmNOOd7TUWks9hduc7VkpwnSqXOlbIn0L/sqXNvJFs1vTg9nyksVRWiuCdFrLZYphzzvJwFc9nZxUzUonGPjsYXHcbhazvjdYj5BOLmuvOYtfbnarjdtiU5wXRtJMJBd7E+ff/fD7e1NDMXflVBzpnW64kFd7q8+d4s2Jy6U85PI9WYYC+s5zPUXKUFtZuTI6DZvpRpt0JpHGL7ujo8hmY8UsLZfapOYMw5VuLrpWFcyImcUfhq20pYqOO/JrjN6JDxM8WhwSkWiRzjAJRn1Fxx01W3ODUDu4h6ErW5tqTK+0uXP0solT22vM4QjxhUdMW21PEzSgiO6hr7LcGqM9YUYT5sLQhQnZms+ANt0dIkNld9bUwpzWWKvyfOqvjeHMYkV2V1l0g2ZH91RZ7pc4llrbpSoMssqADfiSwakmxolelZrPNIGghu15b1xx07bCcqXNxpwnksLprXbUx5br9XZZ3c1Jvkp2EgcvjfvycahXx9t4n/UMPtBKYJZVjwvQdx1c6OkKDTw8xjF63osm/mJqzJZdkYvRkdZ0bb2lOrNaT0s0eVkbZTteJFwtMaTBEW/P+5Q/ZgFlMSq3BgwnjrJVgu+w9gTZxAmCM+BKW3e+7OLecjkFjLjfmrbal2rddJ+gHHGCJpq7VEafdtEi4rDQRba/MKXYEBfHBV9z9UB3piqT8dlusx+2NQ8cp06VVGZ7zYBNktd202TTikKOWSsk6M4rUU9a+lpJ4TjXiEoTqWI56oKDJD/d+ylbG8fkpJ8utlNXzxQ+rA332MBgsA3Nb/xhXGuCna73O9iUmRqkuobNihK01jwNDhXQDtcdkvC3/FHTLB2Xx2RJ3FTbRCvuaWAwlSt64HN+MrDa2kzvx9aqy/W3rWTvJOzI3NLqrhLSVWnOe9xS4TlOus/r5imvdYnz5l15Fo6lVTwnLNMCsjrWRGNz3E17He04nB+CAPq76Zi1NhEWl3ij4lGmP6zs046WloTjqNSemZMWP1l3+cMA84iYa7s6keG99cQzxVJXdkbDQ7oiHT3Z7Exz3pJra5locQtK7jEzIsOGldlhh9HkuFPtdyaL9oyCC3yE69xaIdRMawl6O2KYbLw81937gnnbg+7L7Il4U5Bvi/fNPDlOzDWw4svaMzWfB2Sx0ESd2PgJTMwprl12Tqz1bT64QjTSx1cwKkGTsmu/I6kmLvESTfBcU2RpnhQknMKJJs7hNZYlRUl8m2PPVtyZ9mowgrCOm6vMh/bzWPATOOvXTWBEAEHZfhgPgkHEOTGIbqdw5noKvwrzp6rzuH+UR5RxpkwwGkHXK2SdYJ4Jgl28zyBv/j2Q13jEcLNhiNt2c1aY6+UBCjx4ACWINyjxi86+AaLEdvOxRkVzT+Ra76Y94PkELxMk9ebHhfMuAJ9qeWN4d/YmBpydA8zGHwNv/6EqlFG1HbpsVk26TBkEW2ZB1So7gKixJknatm3+Lnr7deD2TzDb0x1ae/rTKO3pT6Kzp0eo7Hu7cV57BRie/jgAe/rnoOt/hrLugNXTPZx6+iMg6ukeOs0yNRGqPc8cJgZDd/psKwlcw11lpfAjdHq6g0xP92Dp6QFMevKZRcykPR3bclE7S6YdFzCqt9hN1arW6VkY1RMCoFfN6Ojx4nrOVmfq1IzoWof0x/hGsCOK22UWV9m2O+2n4w6mJTWh2zKMAtePq3rqdkqzti9sk3YrdOaDQ7+2iezRbA7aJUWahgyj9Jsy3Ld3msQPWW0njXoACk2PfeqwWb8WHEj8MONSuSsTBHx5egSU7oiNu977/9h0/3m3hSCwQVTeh4m1ArDY+EkTlYO3K20tRBWZpMmaRFV5qlmt4TRJCwIlSE2abLJNTmBZ4avGRt9UYxVY7tY9XXe/XV/CGIVkZ+yT2COe98ZzABJU1KPTdSZJMTQGXX/rgdO1tR/aiQeet6vt+Robnj/JsmHBE1WVtNP5+7yn37fzf7mTf9HCv9e5r266L5xftewH3frrRo3qPKoC17fJu7v75AiJx1AVJLDx6/sELdyAALuIwL7VJS5W32m+0G/tS+JVkN8NAx+lS+H08xvtfgxg3u5llO7Zd2eJG5UobjHI4kc0wUOjSm7xl9OMVbdyPkQeoo80jOz37Xog60oP8jOHFG6wzH/l/eDwSVJcvQe4Fv5IwCPlt8RLkC+2xCibzCQGnz8p5JXppWhYVpgEsSwWT4TranmyMz5sQf2d6YOYU0V+7b8Z/LT/zpXe+PQipHjhdX/OXHZP6WKBYt6WT7a8FDM0kiLlwfKqOr8a+KBAMxxDkDVSIK4LNCHw5CWAN540PpA/Uq5ien8e7k/C7Xz/9XE4o5zaHcq5Ow40yQg1iuW5qkg2eYEUqQrTlCSWoIgKQ3JUUyIuS34Xqlxl2UeM8i+fpUcKf3qoXvvNr5ypD8jp3ulPztf1k8umv78Je+u5jf8C</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7002/rest/1/11/Account/urn:dece:accountid:org:dece:F0EBE518A81272C1E0401F0A07991CB2/User/urn:dece:userid:org:dece:F0EBE51BAFD95B2CE0401F0A07992DED</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login - AlternatePortal" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="85a479b2-af78-4139-a273-593c78d2e0ad" disabled="true"><con:settings/><con:testStep type="groovy" name="Set_TLS" id="9d37411a-f429-434f-9497-5e6729d1bdd1"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName" id="d9d2f88d-136d-4b2c-9402-8d46d2a84a25"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>21ddf1dc-dc3b-4942-b6ac-34c838187b31</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create" id="5fa1a65c-c741-4f3e-87b9-45e6331b9b09"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>FR</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details" id="b62514aa-b7f7-4bfb-8764-d975814fa3be"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response" id="284b47bb-9928-486b-97d0-5b7cf9488a36"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() !=0 ;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     int lastSlash = urlStr.lastIndexOf('/');
    	accountid     = urlStr.substring(lastSlash + 1);
   
	tP.setPropertyValue("NODEACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName" id="fe29b06c-b24c-44e2-92c3-86e77b3bc49e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1508bdfb-ae39-4c07-8d58-884b5ae61d0b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="User_Create" id="b0c037a1-fd6c-4925-b965-c8a737ec4aba"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
        	<!--<GivenName>UVTC_AltEmail</GivenName>-->
		<SurName>Gupta</SurName>
	</Name>	
	       <DisplayImage>
	       <DisplayImageURL>https://qa.uvvu.com:7001/static/images/Image_IPT.jpg</DisplayImageURL>
        <!--DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData-->
    </DisplayImage>
	<ContactInfo>
        <!--PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#Project#Node_OID}" VerificationStatus="urn:dece:type:status:success"-->			
        <PrimaryEmail>
	 <Value>shikha82@gmail.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>sunitha.pemmasani@neustar.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
       <TelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </TelephoneNumber>
        <MobileTelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
        </MobileTelephoneNumber>
	</ContactInfo>
        <Languages>
		<Language primary="true">en-GB</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1930-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
                <!--Password IsRandom="false"></Password-->
               <!--Password>password&#x20ac;</Password-->
             	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1" id="ce592087-60e2-49d0-aefa-bceb83631a68"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1" id="c39304ae-ca28-4c40-87d7-13252549abb9"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() != 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	int lastSlash = urlStr.lastIndexOf('/');
    	userid = urlStr.substring(lastSlash + 1);
   
    tP.setPropertyValue("NODEUSERID",userid);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties" id="85118e46-f5ed-477a-b43e-3fd2892c1d05"><con:settings/><con:config><script>//Note if there is change in the namespace we need to change in the project property value of assertionXMLnote(Replace only the namespace)
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def targetPort = context.expand( '${#Project#targetPort}' )

//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:home");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:account");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library:urn:dece:rightstokenid:org:dece:C752EB964745B107E0401F0A07997A92");//C752EB964758B107E0401F0A07997A92");//{rightsTokenID}");
//urn:dece:rightstokenid:org:dece:D4C4ED3C220C8F0FE0401F0A07992649
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:device");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:tou");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user");
tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA");//urn:dece:userid:org:dece:D6BB14AF2AAFCA3BE0401F0A059911B6
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:D4C4087DA00D3419E0401F0A079907D0");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:EA6030364B7B5437E0401F0A07997962");//urn:dece:portal:user:D4C4087DA00D3419E0401F0A079907D0"); //Passes

//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/userProfilePage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/mediaPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/accountDashboardPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/touPage.jsf");
//tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");*/

def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tP.getPropertyValue("nodeid"));
//tC.setPropertyValue("username","pjgrevsamlstandard1");
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);

//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:500500");
//tC.setPropertyValue("stsaudience",null);
//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:4042");
/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);


/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" id="bca220c7-dcae-406a-b212-3466af671c4b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" id="a557c7c3-d044-42d0-8ce3-6182be9e962b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML" id="7cbc7d71-2035-41e9-be6e-3efc92766ee1"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();

log.info 'assertionIDPXML = ' +tP.getPropertyValue("assertionXMLnode").toString();
log.info 'assertionDECEXML = ' +tC.getPropertyValue("assertionXMLuser").toString();
log.info 'assertionURIXML ='+ tP.getPropertyValue("assertionURIXML").toString();
log.info 'outFile ='+ tP.getPropertyValue("fileSamlResponseXML").toString();
log.info 'rsamlTargetURL ='+  tC.getPropertyValue("rsamlTargetURL").toString();
log.info 'rsamlReturnToURL ='+ tC.getPropertyValue("rsamlReturnToURL").toString();

String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

log.info 'deceroot=='+deceroot

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	log.info 'HAS ATTRIBUTE ID'
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		log.info 'NOTNULL rsamlSPID'
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
				
//////Adding this R2/////////////////////
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);						
//Added This: If We need To give the Invalid NameId in the RSaml Response

						//subjectNameid.setTextContent("urn:dece:userid:org:dece:BBBBBBBBBBBBBBB");
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotBefore","2013-03-13T01:52:52.741Z");
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);	
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotOnOrAfter","2013-03-27T01:52:52.741Z");							
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}

log.info xml3.toString();








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="473eef28-1302-4782-90a7-73bdd1165abc"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;


def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String signedsamlResponseFile = tP.getPropertyValue("fileSamlResponseSigned").toString();

log.info "samlResponseFile[$samlResponseFile]";
log.info "signedsamlResponseFile[$signedsamlResponseFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

  
// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());

KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing

X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
log.info "DocumentBuilderFactory -- samlResponseFile[$samlResponseFile]";
Document doc = dbf.newDocumentBuilder().parse(samlResponseFile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlResponseFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml" id="f159d1fb-2e30-447c-935e-783f38162b9a"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseJustBase64", null);

String signedSamlResponse = tP.getPropertyValue("fileSamlResponseSigned");

file = new File(signedSamlResponse);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();



//String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));
String base64Str = Base64.encodeBytes(bytes);
String samlResponseurlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlResponse", samlResponseurlencoded);
tC.setPropertyValue("samlResponseJustBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="515ec3c2-6310-4648-a7d7-c0560dbd8fce"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
String token = tC.getPropertyValue("samlResponseJustBase64").toString();

//////Added this for the shost////////

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://""" + tP.getPropertyValue("targetHostportal") + ":" + tP.getPropertyValue("targetPortportal") + """/security/federation/saml/acs" method="post"> <input name="SAMLResponse" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RSAML_POST" disabled="true" id="04dc42df-5ec7-4647-a90a-09b1aecfefa7"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RSAML_POST" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>SAMLResponse=${#TestCase#samlResponseJustBase64}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Things to Verify for the Alternate Portal" disabled="true" id="01e32834-9558-4254-8690-9ae39929f1ca"><con:settings/><con:config><script>/* 1) When we send urn:dece:portal:user:{UserID} in the request as the TargetURL, We need to verify the 
TargetURL urn:dece:portal:user:{UserID} is replaced with the Alternate_portal's node_user_id value in the response
*/</script></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>shikha_user_create_accp_test_20131104_035214</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>1B3F34183F32A9754649A6F4A9E5CA8FD6A</con:value></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="dea47989-f19f-4bff-ac49-3d64df312c6d" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-05T03:07:59.188Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>S7+P4Qwwc7bYQmmzVSYbvXxmVlo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Oaaw3siFVBbb0+tiDCRrXVTETKF84IrhKVXrpoUk+kEOPUhHvDEDf5YNmuaX/L5XVWTtDwP4zY3l
13JedRBvxAOHW/Zi2rqs3rE61VLhOENOkUKpqRgJmc+LUukCUSEj3L6ZdNthWv3n9ookfvwolttT
GxkjCYo51FrB+tcNTHs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0392D08D257BDD7CA67B1A2F3C27EA89" NotOnOrAfter="2013-11-05T00:07:59.188Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-04T21:07:59.188Z" SessionIndex="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="1B3F34183F32A9754649A6F4A9E5CA8FD6A" SessionNotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht
bG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50
PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249
Imh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi
IElEPSJkZWE0Nzk4OS1mMTlmLTRiZmYtYWM0OS0zZDY0ZGYzMTJjNmQiIElzc3VlSW5zdGFudD0i
MjAxMy0xMS0wNFQyMTowNzo1OS4xODhaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg
eG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk
ZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM+
ICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj
Lm9yZy9zY2hlbWEvMjAxMi8xMi9jb29yZGluYXRvciI+aHR0cHM6Ly93d3cud2VsbHNmYXJnby5j
b20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0
dHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTIvMTIvY29vcmRpbmF0b3IiPnVybjpkZWNl
OnBvcnRhbDp1c2VyOnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpBQUFBQUFBQUFBQUFBQUFBQUFB
QUFBQTwvZGVjZTpUYXJnZXRVUkw+ICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0
YXR1cz4gICAgIDxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNB
TUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+ICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3Nl
cnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24i
IElEPSI2YmExNjdmYy1hYWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0i
MjAxMy0xMS0wNFQyMTowNzo1OS4xODhaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vl
cj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUg
eG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6
U2lnbmVkSW5mbz4gICAgICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09
Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpT
aWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRz
aWcjcnNhLXNoYTEiLz4gICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMt
NDhlZi04ZjYxLWZiNTJiYTNmMWYxYSI+ICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAg
ICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv
eG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+ICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0g
QWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAg
ICAgICAgICAgIDxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv
PiAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4g
ICAgICAgICAgIDxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8y
MDAwLzA5L3htbGRzaWcjc2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRz
aklxSklaSklVdGVXNS83M3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJl
bmNlPiAgICAgICA8L2RzOlNpZ25lZEluZm8+ICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVha
RzFvM1R3dm5sajlQalc0WUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051
QnY5OGxHMHJtdEZKaG83IHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFq
b2JUeU1ScDhjb1VwTC9sdWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08
L2RzOlNpZ25hdHVyZVZhbHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURh
dGE+ICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1Nx
R1NJYjNEUUVCQlFVQU1Hb3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVw
WVRFUk1BOEdBMVVFQnhNSVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpC
Z05WQkFzVEFsRkJNUll3RkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05q
SXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdO
VkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJs
WTJVNmIzSm5PbTl5Wnpwa1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVa
WFZ6ZEdGeUxtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFM
TUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBH
d0dSRGZpUW03OFlKdHlVMHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6
bHhVZjd2VDh5enMwWmwxVkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFS
OXFjVmMvZkdTVDZCQndtamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJi
L0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtT
Tkl6UFk2U3B0dnhMYUJuVCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVL
VFlUanA0Slc3TFR1VElnN1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hV
QStrQUNDZk9BK3BpWGdLMGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllE
OU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThq
TTJlS1gzckxFZ21UK01BQWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9P
YTgvazVCa21QdDdGZXFZWU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMy
K0RrNkgxR3RMVGVPVkkzWW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFn
TUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZM
SlR6UFh5bm5zbXFWUzlja3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFI
aVkxeDBMalVsYkQrS0lmUVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2
TkpVWkhXNHNaMFEwWUFqTTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAg
ICAgIDwvZHM6WDUwOURhdGE+ICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJl
PiAgICAgPHNhbWwyOlN1YmplY3Q+ICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz
aXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1
c2VyaWQ6b3JnOmRlY2U6RUE2MTE3M0UyOUJBNzlFMEUwNDAxRjBBMDc5OTU1QjA8L3NhbWwyOk5h
bWVJRD4gICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6
bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTMtMTEtMDVUMDM6
MDc6NTkuMTg4WiI+ICAgICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9u
T3JBZnRlcj0iMjAxMS0wOC0xOFQxNTozMjoxOC4xMTlaIi8+ICAgICAgIDwvc2FtbDI6U3ViamVj
dENvbmZpcm1hdGlvbj4gICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25z
IE5vdEJlZm9yZT0iMjAxMy0xMS0wNFQyMTowNzo0OS4xODhaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt
MTEtMDVUMDM6MDc6NTkuMTg4WiI+ICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAg
ICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpB
dWRpZW5jZT4gICAgICAgPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpD
b25kaXRpb25zPiAgICAgPHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfYTliYTli
NGYtMDhiMy00YzE1LThkZmUtZWE5ZjUxYjE4MjNjIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMDRU
MjE6MDc6NTkuMTg4WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2Vs
bGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6
YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMt
YzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn
LzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI19hOWJhOWI0
Zi0wOGIzLTRjMTUtOGRmZS1lYTlmNTFiMTgyM2MiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5z
Zm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w
ZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVj
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRz
IHNhbWwyIHhzIi8+PC9kczpUcmFuc2Zvcm0+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1l
dGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+
CjxkczpEaWdlc3RWYWx1ZT5TNytQNFF3d2M3YllRbW16VlNZYnZYeG1WbG89PC9kczpEaWdlc3RW
YWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVl
PgpPYWF3M3NpRlZCYmIwK3RpRENSclhWVEVUS0Y4NElyaEtWWHJwb1VrK2tFT1BVaEh2REVEZjVZ
Tm11YVgvTDVYVldUdER3UDR6WTNsCjEzSmVkUkJ2eEFPSFcvWmkycnFzM3JFNjFWTGhPRU5Pa1VL
cHFSZ0ptYytMVXVrQ1VTRWozTDZaZE50aFd2M245b29rZnZ3b2x0dFQKR3hrakNZbzUxRnJCK3Rj
TlRIcz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPC9kczpTaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+
PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQt
Zm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpFQTYxMTczRTI5QkE3
OUUwRTA0MDFGMEEwNzk5NTVCMDwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0
aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOnNlbmRlci12b3VjaGVz
Ij48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfMDM5MkQwOEQy
NTdCREQ3Q0E2N0IxQTJGM0MyN0VBODkiIE5vdE9uT3JBZnRlcj0iMjAxMy0xMS0wNVQwMDowNzo1
OS4xODhaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0
ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiLz48L3Nh
bWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25z
IE5vdEJlZm9yZT0iMjAxMy0xMS0wNFQyMTowNzo0OS4xODhaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt
MTEtMDVUMDM6MDc6NTkuMTg4WiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1
ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpEU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpB
dWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6TExBU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1s
MjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3Nh
bWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U+
PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEv
MDcvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vX2E5YmE5YjRmLTA4YjMtNGMxNS04ZGZlLWVhOWY1
MWIxODIzYzwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRo
blN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTMtMTEtMDRUMjE6MDc6NTkuMTg4WiIgU2Vzc2lv
bkluZGV4PSJfYTliYTliNGYtMDhiMy00YzE1LThkZmUtZWE5ZjUxYjE4MjNjIj48c2FtbDI6QXV0
aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6
U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+
PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29y
ZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRl
eHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1s
MjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFj
Y291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9y
ZzpkZWNlOkVBNjExNzJFREZFRjcxNjdFMDQwMUYwQTA3OTk1NUFBPC9zYW1sMjpBdHRyaWJ1dGVW
YWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwy
OkFzc2VydGlvbj48L3NhbWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo
bkluc3RhbnQ9IjIwMTEtMDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSIxQjNGMzQx
ODNGMzJBOTc1NDY0OUE2RjRBOUU1Q0E4RkQ2QSIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxMy0x
MS0wNVQwMzowNzo1OS4xODhaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8
c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFj
OmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxz
YW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGlu
YXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+ICAgICAgIDwvc2FtbDI6QXV0aG5D
b250ZXh0PiAgICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4g
PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNp
Z25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3Lncz
Lm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVm
ZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9y
bXM+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1s
ZHNpZyNzaGExIi8+PERpZ2VzdFZhbHVlPjJ3cGl1SUJqQTl6ci93ZjBSU0RMWnU0b2c3Yz08L0Rp
Z2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+WUFmNkk4
UlliL3hqMzFIR0h6RTE3NVpocEppVDBrbkpnNlNWZzBuRW1RWEJORWNIemJnZXRqRUZkVGJ1a2Y3
Zy90Y1RyV2xWenNybgpSWlAxREY5eUtBSUhzcnRIc0tBQmFHR01RZnNqYWpid2RLSnZQdCs1SGx1
aFRCN3lkNHJnYkVTdEZvMVNTVkZWa054Yk9DSVhnbTlFCkxRandVWHdxeFBuc0tqUTI5ZDJJWWdF
d3RVMFVneDBZcXphU1dpM3JHaEhGOUJnUGxsYnNNYnNCRnI4REE2MVNlRWx0bjVaTjhreXMKQktn
a24zZDIyd1owc3pieEpJaTJGL1N5SnEvV0h3akxIU2lnclpONWs3andjVXpwL0EwNkFOMVlBL2RS
T2l4a2EvVXVxcEo1NnVSTQozMFh2RCtSb2RqVVlWRUxIeXJ1ekx6RzFqZU9qWGlXLzFYQ3psUEVI
YnBqazROWVQrM0JUSm1zdTdBUUVyZlFPYm9lTEhQYlpLV0RSCmhlWkFXY3Rhdmkrc2JrRGUvd2Ny
ZkhKaGVSZk1sa2luUlZsTDlxejgvdDEza2VMRFhPbThyWnFhRjVkcktxcDAraDNJZlJva0hzV1gK
Qmx4Ny8xOUxJQS9wNEVHRC8wYTg0eFFiVXQ4cjViSnI2Z3hNY3dCUStGMFl5ZmNxMzlNd0xIZ043
cnZsUy9nL1JWMC8rOWJaV0p2aQpBMUUvY0NPRU5LTHIxUktzcURrR2t3ejg3Z213OWo3Q05hdDBu
UWxXdCtXUi9qZVJzSk9RSXBqQzRJcDFzUlp4NG1ybytMayszYWtuCjEwaEo2eHhsWkNITEVCWU9y
VzNLdHdMdWpYbDNvRDdiQWh5dXNBUTgzM0QvRUZMcnMxMmpaWEhzVk5BSDJYZUNRVWFlWXBNZTRt
cz08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEu
Mi44NDAuMTEzNTQ5LjEuOS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENO
PXVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3Vi
amVjdE5hbWU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFF
QkJRVUFNR294RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZ
RFZRUUhFd2hUZEdWeWJHbHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlU
QWxWVE1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5
TUZvWERURTRNRFV5T1RFME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdU
QWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2
YjNKbk9tOXlaenBrWldObE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZ
WEl1WTI5dE1JSUMKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYr
bE5UUVJZZGx2VFNCeEVaeFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2Vk
V25KZUFoQlZ5TXh1SWJnM1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJz
Nm4yQXBKc3BIRTc5b0FNSDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBj
eXNoczF2SERYWmE2T2wKSy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZD
SEtyeGNIb2JzMmx1aTlxb2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtE
bnB6ZHZMR1VLaisvbXJOc1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUy
eWMrLzFTYWpsZlpKRGpEa1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZP
WUZzTVhVeGJpUk5Zd0p5QncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdU
clBtN0kxY3MyR1BBOTZjUzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNF
bkZTcDZEQmp2cEVZbUt3cldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hO
CkxlT2t2ZlF3QTU0QWJ3bS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0
cWllTHgvVnZjMW9tdUxiTGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFS
WXEwQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCsw
NnpnTkpmUFhwRGQ1dFBXRmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhF
M2RhClViL2pYNjFOUkFHeE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtu
UlBkV2kyQ0FrOVRoaFZ2OCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRl
PjwvWDUwOURhdGE+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg==</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht%0AbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50%0APSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249%0AImh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi%0AIElEPSJkZWE0Nzk4OS1mMTlmLTRiZmYtYWM0OS0zZDY0ZGYzMTJjNmQiIElzc3VlSW5zdGFudD0i%0AMjAxMy0xMS0wNFQyMTowNzo1OS4xODhaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg%0AeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk%0AZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM%2B%0AICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj%0ALm9yZy9zY2hlbWEvMjAxMi8xMi9jb29yZGluYXRvciI%2BaHR0cHM6Ly93d3cud2VsbHNmYXJnby5j%0Ab20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0%0AdHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTIvMTIvY29vcmRpbmF0b3IiPnVybjpkZWNl%0AOnBvcnRhbDp1c2VyOnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpBQUFBQUFBQUFBQUFBQUFBQUFB%0AQUFBQTwvZGVjZTpUYXJnZXRVUkw%2BICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0%0AYXR1cz4gICAgIDxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNB%0ATUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3Nl%0AcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24i%0AIElEPSI2YmExNjdmYy1hYWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0i%0AMjAxMy0xMS0wNFQyMTowNzo1OS4xODhaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vl%0Acj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUg%0AeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6%0AU2lnbmVkSW5mbz4gICAgICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09%0AImh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpT%0AaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRz%0AaWcjcnNhLXNoYTEiLz4gICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMt%0ANDhlZi04ZjYxLWZiNTJiYTNmMWYxYSI%2BICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAg%0AICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv%0AeG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0g%0AQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAg%0AICAgICAgICAgIDxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz%0ALm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv%0APiAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4g%0AICAgICAgICAgIDxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8y%0AMDAwLzA5L3htbGRzaWcjc2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRz%0AaklxSklaSklVdGVXNS83M3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJl%0AbmNlPiAgICAgICA8L2RzOlNpZ25lZEluZm8%2BICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVha%0ARzFvM1R3dm5sajlQalc0WUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051%0AQnY5OGxHMHJtdEZKaG83IHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFq%0Ab2JUeU1ScDhjb1VwTC9sdWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08%0AL2RzOlNpZ25hdHVyZVZhbHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURh%0AdGE%2BICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1Nx%0AR1NJYjNEUUVCQlFVQU1Hb3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVw%0AWVRFUk1BOEdBMVVFQnhNSVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpC%0AZ05WQkFzVEFsRkJNUll3RkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05q%0ASXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdO%0AVkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJs%0AWTJVNmIzSm5PbTl5Wnpwa1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVa%0AWFZ6ZEdGeUxtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFM%0ATUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBH%0Ad0dSRGZpUW03OFlKdHlVMHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6%0AbHhVZjd2VDh5enMwWmwxVkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFS%0AOXFjVmMvZkdTVDZCQndtamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJi%0AL0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtT%0ATkl6UFk2U3B0dnhMYUJuVCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVL%0AVFlUanA0Slc3TFR1VElnN1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hV%0AQStrQUNDZk9BK3BpWGdLMGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllE%0AOU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThq%0ATTJlS1gzckxFZ21UK01BQWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9P%0AYTgvazVCa21QdDdGZXFZWU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMy%0AK0RrNkgxR3RMVGVPVkkzWW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFn%0ATUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZM%0ASlR6UFh5bm5zbXFWUzlja3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFI%0AaVkxeDBMalVsYkQrS0lmUVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2%0ATkpVWkhXNHNaMFEwWUFqTTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAg%0AICAgIDwvZHM6WDUwOURhdGE%2BICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJl%0APiAgICAgPHNhbWwyOlN1YmplY3Q%2BICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz%0AaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1%0Ac2VyaWQ6b3JnOmRlY2U6RUE2MTE3M0UyOUJBNzlFMEUwNDAxRjBBMDc5OTU1QjA8L3NhbWwyOk5h%0AbWVJRD4gICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6%0AbmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTMtMTEtMDVUMDM6%0AMDc6NTkuMTg4WiI%2BICAgICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9u%0AT3JBZnRlcj0iMjAxMS0wOC0xOFQxNTozMjoxOC4xMTlaIi8%2BICAgICAgIDwvc2FtbDI6U3ViamVj%0AdENvbmZpcm1hdGlvbj4gICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25z%0AIE5vdEJlZm9yZT0iMjAxMy0xMS0wNFQyMTowNzo0OS4xODhaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt%0AMTEtMDVUMDM6MDc6NTkuMTg4WiI%2BICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAg%0AICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpB%0AdWRpZW5jZT4gICAgICAgPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpD%0Ab25kaXRpb25zPiAgICAgPHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfYTliYTli%0ANGYtMDhiMy00YzE1LThkZmUtZWE5ZjUxYjE4MjNjIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMDRU%0AMjE6MDc6NTkuMTg4WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2Vs%0AbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cu%0AdzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6%0AYXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMt%0AYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn%0ALzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI19hOWJhOWI0%0AZi0wOGIzLTRjMTUtOGRmZS1lYTlmNTFiMTgyM2MiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5z%0AZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w%0AZWQtc2lnbmF0dXJlIi8%2BCjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y%0AZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVj%0APSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRz%0AIHNhbWwyIHhzIi8%2BPC9kczpUcmFuc2Zvcm0%2BCjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1l%0AdGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2B%0ACjxkczpEaWdlc3RWYWx1ZT5TNytQNFF3d2M3YllRbW16VlNZYnZYeG1WbG89PC9kczpEaWdlc3RW%0AYWx1ZT4KPC9kczpSZWZlcmVuY2U%2BCjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVl%0APgpPYWF3M3NpRlZCYmIwK3RpRENSclhWVEVUS0Y4NElyaEtWWHJwb1VrK2tFT1BVaEh2REVEZjVZ%0ATm11YVgvTDVYVldUdER3UDR6WTNsCjEzSmVkUkJ2eEFPSFcvWmkycnFzM3JFNjFWTGhPRU5Pa1VL%0AcHFSZ0ptYytMVXVrQ1VTRWozTDZaZE50aFd2M245b29rZnZ3b2x0dFQKR3hrakNZbzUxRnJCK3Rj%0ATlRIcz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPC9kczpTaWduYXR1cmU%2BPHNhbWwyOlN1YmplY3Q%2B%0APHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQt%0AZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpFQTYxMTczRTI5QkE3%0AOUUwRTA0MDFGMEEwNzk5NTVCMDwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0%0AaW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOnNlbmRlci12b3VjaGVz%0AIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfMDM5MkQwOEQy%0ANTdCREQ3Q0E2N0IxQTJGM0MyN0VBODkiIE5vdE9uT3JBZnRlcj0iMjAxMy0xMS0wNVQwMDowNzo1%0AOS4xODhaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0%0AODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiLz48L3Nh%0AbWwyOlN1YmplY3RDb25maXJtYXRpb24%2BPC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25z%0AIE5vdEJlZm9yZT0iMjAxMy0xMS0wNFQyMTowNzo0OS4xODhaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt%0AMTEtMDVUMDM6MDc6NTkuMTg4WiI%2BPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPHNhbWwyOkF1%0AZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpEU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpB%0AdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6TExBU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1s%0AMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3Nh%0AbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U%2B%0APHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEv%0AMDcvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vX2E5YmE5YjRmLTA4YjMtNGMxNS04ZGZlLWVhOWY1%0AMWIxODIzYzwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRo%0AblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTMtMTEtMDRUMjE6MDc6NTkuMTg4WiIgU2Vzc2lv%0AbkluZGV4PSJfYTliYTliNGYtMDhiMy00YzE1LThkZmUtZWE5ZjUxYjE4MjNjIj48c2FtbDI6QXV0%0AaG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6%0AU0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2B%0APHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29y%0AZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BPC9zYW1sMjpBdXRobkNvbnRl%0AeHQ%2BPC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1s%0AMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFj%0AY291bnRJRCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9y%0AZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj%0AaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdXJuOmRlY2U6YWNjb3VudGlkOm9y%0AZzpkZWNlOkVBNjExNzJFREZFRjcxNjdFMDQwMUYwQTA3OTk1NUFBPC9zYW1sMjpBdHRyaWJ1dGVW%0AYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwy%0AOkFzc2VydGlvbj48L3NhbWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo%0Abkluc3RhbnQ9IjIwMTEtMDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSIxQjNGMzQx%0AODNGMzJBOTc1NDY0OUE2RjRBOUU1Q0E4RkQ2QSIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxMy0x%0AMS0wNVQwMzowNzo1OS4xODhaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8%0Ac2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFj%0AOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxz%0AYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGlu%0AYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BICAgICAgIDwvc2FtbDI6QXV0aG5D%0Ab250ZXh0PiAgICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4g%0APFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPFNp%0AZ25lZEluZm8%2BPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3Lncz%0ALm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxn%0Ab3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVm%0AZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3%0Ady53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9y%0AbXM%2BPERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1s%0AZHNpZyNzaGExIi8%2BPERpZ2VzdFZhbHVlPjJ3cGl1SUJqQTl6ci93ZjBSU0RMWnU0b2c3Yz08L0Rp%0AZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU%2BWUFmNkk4%0AUlliL3hqMzFIR0h6RTE3NVpocEppVDBrbkpnNlNWZzBuRW1RWEJORWNIemJnZXRqRUZkVGJ1a2Y3%0AZy90Y1RyV2xWenNybgpSWlAxREY5eUtBSUhzcnRIc0tBQmFHR01RZnNqYWpid2RLSnZQdCs1SGx1%0AaFRCN3lkNHJnYkVTdEZvMVNTVkZWa054Yk9DSVhnbTlFCkxRandVWHdxeFBuc0tqUTI5ZDJJWWdF%0Ad3RVMFVneDBZcXphU1dpM3JHaEhGOUJnUGxsYnNNYnNCRnI4REE2MVNlRWx0bjVaTjhreXMKQktn%0Aa24zZDIyd1owc3pieEpJaTJGL1N5SnEvV0h3akxIU2lnclpONWs3andjVXpwL0EwNkFOMVlBL2RS%0AT2l4a2EvVXVxcEo1NnVSTQozMFh2RCtSb2RqVVlWRUxIeXJ1ekx6RzFqZU9qWGlXLzFYQ3psUEVI%0AYnBqazROWVQrM0JUSm1zdTdBUUVyZlFPYm9lTEhQYlpLV0RSCmhlWkFXY3Rhdmkrc2JrRGUvd2Ny%0AZkhKaGVSZk1sa2luUlZsTDlxejgvdDEza2VMRFhPbThyWnFhRjVkcktxcDAraDNJZlJva0hzV1gK%0AQmx4Ny8xOUxJQS9wNEVHRC8wYTg0eFFiVXQ4cjViSnI2Z3hNY3dCUStGMFl5ZmNxMzlNd0xIZ043%0AcnZsUy9nL1JWMC8rOWJaV0p2aQpBMUUvY0NPRU5LTHIxUktzcURrR2t3ejg3Z213OWo3Q05hdDBu%0AUWxXdCtXUi9qZVJzSk9RSXBqQzRJcDFzUlp4NG1ybytMayszYWtuCjEwaEo2eHhsWkNITEVCWU9y%0AVzNLdHdMdWpYbDNvRDdiQWh5dXNBUTgzM0QvRUZMcnMxMmpaWEhzVk5BSDJYZUNRVWFlWXBNZTRt%0Acz08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEu%0AMi44NDAuMTEzNTQ5LjEuOS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENO%0APXVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3Vi%0AamVjdE5hbWU%2BPFg1MDlDZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFF%0AQkJRVUFNR294RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZ%0ARFZRUUhFd2hUZEdWeWJHbHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlU%0AQWxWVE1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5%0ATUZvWERURTRNRFV5T1RFME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdU%0AQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2%0AYjNKbk9tOXlaenBrWldObE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZ%0AWEl1WTI5dE1JSUMKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYr%0AbE5UUVJZZGx2VFNCeEVaeFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2Vk%0AV25KZUFoQlZ5TXh1SWJnM1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJz%0ANm4yQXBKc3BIRTc5b0FNSDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBj%0AeXNoczF2SERYWmE2T2wKSy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZD%0ASEtyeGNIb2JzMmx1aTlxb2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtE%0AbnB6ZHZMR1VLaisvbXJOc1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUy%0AeWMrLzFTYWpsZlpKRGpEa1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZP%0AWUZzTVhVeGJpUk5Zd0p5QncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdU%0AclBtN0kxY3MyR1BBOTZjUzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNF%0AbkZTcDZEQmp2cEVZbUt3cldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hO%0ACkxlT2t2ZlF3QTU0QWJ3bS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0%0AcWllTHgvVnZjMW9tdUxiTGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFS%0AWXEwQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCsw%0ANnpnTkpmUFhwRGQ1dFBXRmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhF%0AM2RhClViL2pYNjFOUkFHeE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtu%0AUlBkV2kyQ0FrOVRoaFZ2OCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRl%0APjwvWDUwOURhdGE%2BPC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg%3D%3D</con:value></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="dea47989-f19f-4bff-ac49-3d64df312c6d" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-05T03:07:59.188Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="1B3F34183F32A9754649A6F4A9E5CA8FD6A" SessionNotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA/User/urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>20</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>S7+P4Qwwc7bYQmmzVSYbvXxmVlo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Oaaw3siFVBbb0+tiDCRrXVTETKF84IrhKVXrpoUk+kEOPUhHvDEDf5YNmuaX/L5XVWTtDwP4zY3l
13JedRBvxAOHW/Zi2rqs3rE61VLhOENOkUKpqRgJmc+LUukCUSEj3L6ZdNthWv3n9ookfvwolttT
GxkjCYo51FrB+tcNTHs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0392D08D257BDD7CA67B1A2F3C27EA89" NotOnOrAfter="2013-11-05T00:07:59.188Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-04T21:07:59.188Z" SessionIndex="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>S7+P4Qwwc7bYQmmzVSYbvXxmVlo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Oaaw3siFVBbb0+tiDCRrXVTETKF84IrhKVXrpoUk+kEOPUhHvDEDf5YNmuaX/L5XVWTtDwP4zY3l
13JedRBvxAOHW/Zi2rqs3rE61VLhOENOkUKpqRgJmc+LUukCUSEj3L6ZdNthWv3n9ookfvwolttT
GxkjCYo51FrB+tcNTHs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0392D08D257BDD7CA67B1A2F3C27EA89" NotOnOrAfter="2013-11-05T00:07:59.188Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-04T21:07:59.188Z" SessionIndex="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="dea47989-f19f-4bff-ac49-3d64df312c6d" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-05T03:07:59.188Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>S7+P4Qwwc7bYQmmzVSYbvXxmVlo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Oaaw3siFVBbb0+tiDCRrXVTETKF84IrhKVXrpoUk+kEOPUhHvDEDf5YNmuaX/L5XVWTtDwP4zY3l
13JedRBvxAOHW/Zi2rqs3rE61VLhOENOkUKpqRgJmc+LUukCUSEj3L6ZdNthWv3n9ookfvwolttT
GxkjCYo51FrB+tcNTHs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0392D08D257BDD7CA67B1A2F3C27EA89" NotOnOrAfter="2013-11-05T00:07:59.188Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-04T21:07:59.188Z" SessionIndex="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="1B3F34183F32A9754649A6F4A9E5CA8FD6A" SessionNotOnOrAfter="2013-11-05T03:07:59.188Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c" IssueInstant="2013-11-04T21:07:59.188Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>S7+P4Qwwc7bYQmmzVSYbvXxmVlo=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
Oaaw3siFVBbb0+tiDCRrXVTETKF84IrhKVXrpoUk+kEOPUhHvDEDf5YNmuaX/L5XVWTtDwP4zY3l
13JedRBvxAOHW/Zi2rqs3rE61VLhOENOkUKpqRgJmc+LUukCUSEj3L6ZdNthWv3n9ookfvwolttT
GxkjCYo51FrB+tcNTHs=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EA61173E29BA79E0E0401F0A079955B0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_0392D08D257BDD7CA67B1A2F3C27EA89" NotOnOrAfter="2013-11-05T00:07:59.188Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-04T21:07:49.188Z" NotOnOrAfter="2013-11-05T03:07:59.188Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-04T21:07:59.188Z" SessionIndex="_a9ba9b4f-08b3-4c15-8dfe-ea9f51b1823c"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EA61172EDFEF7167E0401F0A079955AA</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>89d6fbbc-d9ec-4088-8168-f6e89f1a2f87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e164b0b3-5b85-42a1-9128-95f6f38067e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfed714e-5455-441b-afaa-598623bf33fb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d36a6ef7-3c53-4e9e-94fe-21d306f923b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>377c947e-59f4-4d30-8da5-0e688ae57897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56ca4b95-83fa-47b0-8b9f-5af7de663ad0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79fd1309-17de-4708-b5ec-fd6f35921c3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff8a96c3-81a8-4032-8089-c9ea813f4484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP Logout" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="0aed7bed-f6a5-4511-bbe7-fefb29b8ebf7" disabled="true"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="a04d2cbc-cdee-4eb2-9293-a37144312b7e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodeid","4040");
tC.setPropertyValue("nameID","urn:dece:userid:org:dece:AB6BB47D25F83538E0401F0A05993E27");
tC.setPropertyValue("SessionIndex","D445CEE486BD1FE85EE3358DA998B15F565");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:7001/ssp/views/ourDevicesPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:7001/ssp/views/userProfilePage.jsf");
tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:7001/ssp/views/ourDevicesPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:7001/ssp/views/touPage.jsf");
tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tC.getPropertyValue("nodeid"));
tC.setPropertyValue("username","pjgrevsaml1");
//tC.setPropertyValue("username","pjgrevsamlstandard1");
//tC.setPropertyValue("username","pjgrevsamlbasic1");
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);
/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionSessionIndex",null);
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant","isAfter");


/*
*  Action Docs...
*
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionSessionIndex
*	toNULL == &lt;saml2p:SessionIndex />
*	toRandom == Just a random string
*
*  actionIssueInstant
*	toNULL == actionIssueInstant=""
*	isBefore == 2011-07-11T19:53:01.002Z
*	isAfter  == 2012-07-11T19:53:01.002Z
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*
*	
*
*
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Calling Test Case Attributes" disabled="true" id="6b10c970-47b9-4915-8c21-380228ee2c2a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbUtils;

tC.setPropertyValue("actionDestination",null);

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("actionDestination",callTC.getPropertyValue("actionDestination"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User" disabled="true" id="ea933d4b-0089-4591-9848-b2405dc8fb70"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion" disabled="true" id="615522fe-fd9c-4116-b265-e50a5be71c93"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS for the Request Node" disabled="true" id="d8abb2db-2123-4a97-8621-ba9436a37250"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Node Assertion" disabled="true" id="d4eadbaf-3615-412d-976f-cca6dae7dcc5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLnode", tC.getPropertyValue("assertionXML"));</script></con:config></con:testStep><con:testStep type="delay" name="Delay 5" disabled="true" id="1313e3ee-d48d-4ade-836a-29ea7acf05d2"><con:settings/><con:config><delay>5000</delay></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Base Body" disabled="true" id="5b980f63-d62d-420d-a991-fcdfbc70ba5b"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

BufferedReader  efile;

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = "http://www.decellc.org/schema/2010/06/coordinator";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";
String decePPrefix = "ns4";

/*
*  AuthnRequest static attributes/element values
*/
String AssertionConsumerServiceURL = "https://node.example.com/samlp/responseHandler";
String destinationStr = tP.getPropertyValue("targetAuthnDestinationIOT").toString();
String forceAuthnStr = tC.getPropertyValue("authnForceAuthn");
String protoIndex = tC.getPropertyValue("authnProtocolIndex").toString();
String idStr = "_" + genUtils.randomAlphaNumericString(13);
String isPassiveStr = tC.getPropertyValue("authnIsPassive");
String protocolBindingStr = tC.getPropertyValue("authnProtocolBinding").toString();
String versionStr = tC.getPropertyValue("authnVersion").toString();
String authNfile = tP.getPropertyValue("fileNameAuthnRequest").toString();
String nodeid = tC.getPropertyValue("nodeid").toString();
String affiliates = tC.getPropertyValue("affiliates").toString();
String policyFile = tC.getPropertyValue("authnPolicyFile").toString();
String versionMajor = tP.getPropertyValue("versionMajor").toString();
String versionMinor = tP.getPropertyValue("versionMinor").toString();
String urnNode = tP.getPropertyValue("urnNode").toString();
String xmlBody = "";
String Destination = "";

/*
*  Elements
*/
Element conditions;
Element audiencerestriction;
Element issuer;
Element audience;
Element extensions;
Element policylist;

/*
*  Create an nice clean dom
*/
try	{
	//Create instance of DocumentBuilderFactory
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	//Get the DocumentBuilder
	DocumentBuilder parser = factory.newDocumentBuilder();
	//Create blank DOM Document
	doc = parser.newDocument();
}
catch(Exception e) {
	log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
}
finally {
	Element root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");

	//root.setAttribute("AssertionConsumerServiceURL",AssertionConsumerServiceURL);
	root.setAttribute("Destination",destinationStr);
	root.setAttribute("ForceAuthn",forceAuthnStr);
	root.setAttribute("ID",idStr);
	root.setAttribute("IsPassive",isPassiveStr);
	root.setAttribute("IssueInstant","2010-12-07T14:54:09.353Z");
	//root.setAttribute("ProtocolBinding",protocolBindingStr);
	root.setAttribute("AssertionConsumerServiceIndex",protoIndex);
	root.setAttribute("Version",versionStr);

	/*
	*	Construct the issuer
	*/
	issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
	Text textIssuer = doc.createTextNode(nodeid);
	issuer.appendChild(textIssuer);

	/*
	*  Construct the Conditions
	*/
	
	if (affiliates != null && affiliates.length() > 0) {
		conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
		audiencerestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");
		
		affiliateArray = affiliates.split(",")
		for (audienceMember in affiliateArray) {
			audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
			Text textAudience = doc.createTextNode(urnNode + audienceMember);
			audience.appendChild(textAudience);
			audiencerestriction.appendChild(audience);	
		}
		
		conditions.appendChild(audiencerestriction);
	}

	/*
	* Add Issuer element to AuthnRequest.
	*/
	root.appendChild(issuer);
	
	/*
	* Add Conditions element to AuthnRequest.
	*/
	if (affiliates != null && affiliates.length() > 0) {
		root.appendChild(conditions);
	}

	/*
	*  Extensions (policy)
	*/
	log.info "policyFile is $policyFile";
	if (policyFile.length() > 0 && policyFile != "null") {
		try {
			efile = new BufferedReader(new FileReader(policyFile));
		}
		catch (FileNotFoundException e) {
			log.info "Policy File $policyFile was not found - $e";
		}
		catch (IOException e) {
			log.info "IO error on file $policyFile - $e";
		}
		finally {	
			Boolean firstline = true;
			String line=null;
			int index = 0;
			Element policy;
			Element policyEntity;
			Element current;
			Element statusvalue;
			Text textpolicy;
						
			while ((line=efile.readLine())!=null) {
				
				/*
				*  Check for comment.  I am lazy... if i see a #
				*  anywhere in the line I will say the whole line
				*  is a comment.  Can do better later...
				*/
				if (line.contains("#")) {
					continue;
				}

				if (firstline) {
					policylist = doc.createElementNS(deceNS, decePrefix + ":PolicyList");
					firstline = false;
				}
				policyElementArray = line.split(",")

				assert policyElementArray.size() == 6;  /* each line has elements for policy */
				
				policy = doc.createElementNS(deceNS, decePrefix + ":Policy");
				/*
				*  data must be in this order!
				*
				*  PolicyClass,PolicyResource,RequestingEntity,policyAuthority,createdby,policyStatus
				*
				*/
								
				policyEntity = doc.createElementNS(deceNS, decePrefix + ":PolicyClass");
				textpolicy = doc.createTextNode(policyElementArray[0]);
				policyEntity.appendChild(textpolicy);
				policy.appendChild(policyEntity);

				policyEntity = doc.createElementNS(deceNS, decePrefix + ":Resource");
				textpolicy = doc.createTextNode(policyElementArray[1]);
				policyEntity.appendChild(textpolicy);
				policy.appendChild(policyEntity);

				policyEntity = doc.createElementNS(deceNS, decePrefix + ":RequestingEntity");
				textpolicy = doc.createTextNode(policyElementArray[2]);
				policyEntity.appendChild(textpolicy);
				policy.appendChild(policyEntity);	
				
				policyEntity = doc.createElementNS(deceNS, decePrefix + ":policyAuthority");
				textpolicy = doc.createTextNode(policyElementArray[3]);
				policyEntity.appendChild(textpolicy);
				policy.appendChild(policyEntity);	

				policyEntity = doc.createElementNS(deceNS, decePrefix + ":ResourceStatus");
				current = doc.createElementNS(deceNS, decePrefix + ":Current");
				statusvalue = doc.createElementNS(deceNS, decePrefix + ":Value");
				current.setAttribute("CreatedBy",policyElementArray[4]);
				textpolicy = doc.createTextNode(policyElementArray[5]);
				statusvalue.appendChild(textpolicy);
				current.appendChild(statusvalue);
				policyEntity.appendChild(current);
				policy.appendChild(policyEntity);

				/*
				*  add the complete policy node to the policylist.
				*/
				log.info "adding to policylist...";
				policylist.appendChild(policy);
			}
			/*
			*  Add Policies to AuthnRequest
			*/
			if (policylist.hasChildNodes() ) {
				root.appendChild(policylist);
			}
		}
	} else {
		log.info "Skipping Policies - No policy file supplied";
	}


		
	/*
	* Add AuthnRequest element to tree.
	*/
	doc.appendChild(root);
}



/*
* Turn the DOM into a String to display here...
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String xml = writer.toString();
this.log.info xml;

/*
*  Save the new body
*/
tC.setPropertyValue("authNxmlbody",xml);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(authNfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(tC.getPropertyValue("authNxmlbody").toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}






]]></script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party base &lt;LogoutRequest> XML" id="fee16529-fa3d-47ef-9042-275d826f9f71"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("rsamlLogoutXML",null);

String assertionIDPLogoutXML = tP.getPropertyValue("assertionXMLRSAMLLogout").toString();
String outFile = tP.getPropertyValue("fileRSAMLLogoutXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();
String nameID = tC.getPropertyValue("nameID").toString();
String SessionIndex = tC.getPropertyValue("SessionIndex").toString();
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";

assert assertionIDPLogoutXML != null;

log.info "assertionIDPLogoutXML: $assertionIDPLogoutXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPLogoutXML));


//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);

/* 
*
* Process the IDP's Logout XML
*
*/

Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/slo";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant","2011-08-30T16:42:59.386Z");
			break;
		
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID  = genUtils.randomUUID();
	
	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";
}
/*
*  Reason attribute
*/
if (idproot.hasAttribute("Reason")) {
	idproot.setAttribute("Reason","Sugarplum Fairy");
}
/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
		default:
			idproot.setAttribute("Version","2.0");
			break;
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2:NameID
	*/
	if (an.getNodeName() == "saml2:NameID" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "SETTING NameID = $nameID";
		an.setTextContent(nameID);
	}
	
	/*
	*	saml2p:SessionIndex
	*/
	if (an.getNodeName() == "saml2p:SessionIndex" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
				
		switch(tC.getPropertyValue("actionSessionIndex").toString()) {
			case "toNULL":
				an.setTextContent();
				break;
			case "toRandom":
				an.setTextContent(genUtils.randomAlphaNumericString(30));
				break;
			default:
				an.setTextContent(SessionIndex);
				break;
		}
	}	
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}
}

/*
*  Output the resulting IPD Logout xml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();

tC.setPropertyValue("rsamlLogoutXML",xml);


/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature" id="fd966147-6db9-4c6e-908c-8042d94a3099"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlLogoutFile = tP.getPropertyValue("fileRSAMLLogoutXML").toString();
String signedsamlLogoutFile = tP.getPropertyValue("fileRSAMLLogoutSigned").toString();

log.info "samlLogoutFile[$samlLogoutFile]";
log.info "signedsamlLogoutFile[$signedsamlLogoutFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");
ks.load(new FileInputStream(myKeyStore), "importkey".toCharArray());
KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("importkey", new KeyStore.PasswordProtection("importkey".toCharArray()));
X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlLogoutFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlLogoutFile));
log.info "DocumentBuilderFactory -- samlLogoutFile[$samlLogoutFile]";
Document doc = dbf.newDocumentBuilder().parse(samlLogoutFile);



// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlLogoutFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the Logout request xml" id="a3dda7d4-d14d-475a-aaf1-b1f7f1431f86"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlLogoutBase64", null);
tC.setPropertyValue("samlLogout",null);

String signedSamlLogout = tP.getPropertyValue("fileRSAMLLogoutSigned").toString();

assert signedSamlLogout.length() > 0;

log.info "signedSamlLogout[$signedSamlLogout]";
file = new File(signedSamlLogout);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();

String base64Str = Base64.encodeBytes(bytes);
String samlLogouturlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlLogout", samlLogouturlencoded);
tC.setPropertyValue("samlLogoutBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem for acs Request" id="ea91ebf0-1b78-49ad-a90a-5efad5b52e7e"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("POST - acs");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	default:
		keyStorePath = "I:\\deceAPI\\certs\\" + nodeId + ".pem";
	break;
}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page" id="ee524fd7-cfb1-4d4a-a060-2097153c0af1"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlLogoutPage").toString();
String token = tC.getPropertyValue("samlLogoutBase64").toString();
String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://qa.s.uvvu.com:7001/security/federation/saml/slo" method="post"> <input name="SAMLRequest" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;


pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="POST - slo" disabled="true" id="aa897784-7787-41a6-acee-e8597dd34ff2"><con:settings/><con:config service="SAML slo" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/slo" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - slo" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa.uvvu.com:7002</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - acs" disabled="true" id="b13d7f0b-1858-443d-bad1-952f63ceb800"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - acs" mediaType="application/xml" postQueryString="false" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>SAMLResponse=${#TestCase#Samlresponse}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST - authNRequest" disabled="true" id="1580b6ea-63aa-4e43-b777-9b91ce9eb2eb"><con:settings/><con:config service="AuthNRequest" resourcePath="/rest/{MAJOR}/{MINOR}/loginservice/login" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - authNRequest" mediaType="application/xml" postQueryString="false" accept="text/html, application/xml" sslKeystore="3390.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>https://${#Project#targetHostiot}:${#Project#targetPortiot}</con:endpoint><con:request>SAMLRequest=${#TestCase#authnRequest}</con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Establish AuthnRequest Base Body WORKING" disabled="true" id="587e9245-75d0-4ee9-8183-0ba37861ead9"><con:settings/><con:config><script>import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

/*
*  XML namespaces
*/
String saml2pNS = "urn:oasis:names:tc:SAML:2.0:protocol";
String saml2NS = "urn:oasis:names:tc:SAML:2.0:assertion";
String mdNS = "urn:oasis:names:tc:SAML:2.0:metadata";
String deceNS = "http://www.decellc.org/schema/2010/06/coordinator";
String saml2pPrefix = "saml2p";
String saml2Prefix = "saml2";
String mdPrefix = "md";
String decePrefix = "dece";

/*
*  AuthnRequest static attributes/element values
*/
String AssertionConsumerServiceURL = "https://node.example.com/samlp/responseHandler";
String destinationStr = tP.getPropertyValue("targetAuthnDestination").toString();
String forceAuthnStr = tC.getPropertyValue("authnForceAuthn");
String idStr = "_" + genUtils.randomAlphaNumericString(13);
String isPassiveStr = tC.getPropertyValue("authnIsPassive");
String protocolBindingStr = tC.getPropertyValue("authnProtocolBinding").toString();
String versionStr = tC.getPropertyValue("authnVersion").toString();
String authNfile = tP.getPropertyValue("fileNameAuthnRequest").toString();
String nodeid = tC.getPropertyValue("nodeid").toString();
String affiliates = tC.getPropertyValue("affiliates").toString();
String versionMajor = tP.getPropertyValue("versionMajor").toString();
String versionMinor = tP.getPropertyValue("versionMinor").toString();
String urnNode = tP.getPropertyValue("urnNode").toString();
String xmlBody = "";
String Destination = "";

/*
*  Elements
*/
Element conditions;
Element audiencerestriction;
Element issuer;
Element audience;
/*
*  Create an nice clean dom
*/
try	{
	//Create instance of DocumentBuilderFactory
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	//Get the DocumentBuilder
	DocumentBuilder parser = factory.newDocumentBuilder();
	//Create blank DOM Document
	doc = parser.newDocument();
}
catch(Exception e) {
	log.info "Error during DocumentBuilderFactory create - " + e.getMessage();
}
finally {
	Element root = doc.createElementNS(saml2pNS, saml2pPrefix + ":AuthnRequest");

	root.setAttribute("AssertionConsumerServiceURL",AssertionConsumerServiceURL);
	root.setAttribute("Destination",destinationStr);
	root.setAttribute("ForceAuthn",forceAuthnStr);
	root.setAttribute("ID",idStr);
	root.setAttribute("IsPassive",isPassiveStr);
	root.setAttribute("IssueInstant","2010-12-07T14:54:09.353Z");
	root.setAttribute("ProtocolBinding",protocolBindingStr);
	root.setAttribute("Version",versionStr);

	/*
	*	Construct the issuer
	*/
	issuer = doc.createElementNS(saml2NS, saml2Prefix + ":Issuer");
	Text textIssuer = doc.createTextNode(urnNode + nodeid);
	issuer.appendChild(textIssuer);

	/*
	*  Construct the Conditions
	*/
	
	if (affiliates != null &amp;&amp; affiliates.length() > 0) {
		conditions = doc.createElementNS(saml2NS, saml2Prefix + ":Conditions");
		audiencerestriction = doc.createElementNS(saml2NS, saml2Prefix + ":AudienceRestriction");
		
		affiliateArray = affiliates.split(",")
		for (audienceMember in affiliateArray) {
			audience = doc.createElementNS(saml2NS, saml2Prefix + ":Audience");
			Text textAudience = doc.createTextNode(urnNode + audienceMember);
			audience.appendChild(textAudience);
			audiencerestriction.appendChild(audience);	
		}
		
		conditions.appendChild(audiencerestriction);
	}

	/*
	* Add Issuer element to AuthnRequest.
	*/
	root.appendChild(issuer);
	
	/*
	* Add Conditions element to AuthnRequest.
	*/
	if (affiliates != null &amp;&amp; affiliates.length() > 0) {
		log.info "patty here for this";
		root.appendChild(conditions);
	}
		
	/*
	* Add AuthnRequest element to tree.
	*/
	doc.appendChild(root);
}



/*
* Turn the DOM into a String to display here...
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(doc);
transformer.transform(source, result);
writer.close();
String xml = writer.toString();
this.log.info xml;

/*
*  Save the new body
*/
tC.setPropertyValue("authNxmlbody",xml);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(authNfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(tC.getPropertyValue("authNxmlbody").toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}






</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>4040</con:value></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>https://qa.uvvu.com:7001/ssp/views/ourDevicesPage.jsf</con:value></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>http://www.google.com</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:4040</con:value></con:property><con:property><con:name>username</con:name><con:value>pjgrevsaml1</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionXMLnode</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deceAssertionXML</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">isAfter</con:value></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlLogoutXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:LogoutRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/slo" ID="e6ac7684-efa5-4a34-bde5-bbccbb88d504" IssueInstant="2012-07-11T19:53:01.002Z" Reason="Sugarplum Fairy" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:4040</saml2:Issuer>      <saml2:NameID xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:AB6BB47D25F83538E0401F0A05993E27</saml2:NameID>   <saml2p:SessionIndex>D445CEE486BD1FE85EE3358DA998B15F565</saml2p:SessionIndex> </saml2p:LogoutRequest>]]></con:value></con:property><con:property><con:name>samlLogoutBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkxvZ291dFJlcXVl
c3QgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIERl
c3RpbmF0aW9uPSJodHRwczovL3FhLnMudXZ2dS5jb206NzAwMS9zZWN1cml0eS9mZWRlcmF0aW9u
L3NhbWwvc2xvIiBJRD0iZTZhYzc2ODQtZWZhNS00YTM0LWJkZTUtYmJjY2JiODhkNTA0IiBJc3N1
ZUluc3RhbnQ9IjIwMTItMDctMTFUMTk6NTM6MDEuMDAyWiIgUmVhc29uPSJTdWdhcnBsdW0gRmFp
cnkiIFZlcnNpb249IjIuMCI+ICAgPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lz
Om5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDA8
L3NhbWwyOklzc3Vlcj4gICAgICA8c2FtbDI6TmFtZUlEIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6
bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpT
QU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVj
ZTpBQjZCQjQ3RDI1RjgzNTM4RTA0MDFGMEEwNTk5M0UyNzwvc2FtbDI6TmFtZUlEPiAgIDxzYW1s
MnA6U2Vzc2lvbkluZGV4PkQ0NDVDRUU0ODZCRDFGRTg1RUUzMzU4REE5OThCMTVGNTY1PC9zYW1s
MnA6U2Vzc2lvbkluZGV4PiA8U2lnbmF0dXJlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAw
LzA5L3htbGRzaWcjIj48U2lnbmVkSW5mbz48Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0
aG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhtbC1jMTRuLTIwMDEwMzE1Ii8+PFNp
Z25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNp
ZyNyc2Etc2hhMSIvPjxSZWZlcmVuY2UgVVJJPSIiPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25h
dHVyZSIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53
My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48RGlnZXN0VmFsdWU+ZThwbzhJOHFRWWpidTZW
QmNQZGtDMnRRWmk4PTwvRGlnZXN0VmFsdWU+PC9SZWZlcmVuY2U+PC9TaWduZWRJbmZvPjxTaWdu
YXR1cmVWYWx1ZT5zWkZ1dGUxckhNYmRzcUJCWDNDRHhhUXlqa2hSMWs2MHNvakVqalNLM3VadEZl
T0NWYSsxVzlOMW9sZ3RRTCtJTnAzTWNHbmpPV1dLClJMeVp6ZVloNUhTRW92YU1SZjBRb3I3bUlK
RG1mYTdlY1VpWXdDTnhXNHRRT2Jqd1NMUkFaTmNuQ1NVOWZ2UHhYeHZ3eWZTRjVrdFcKMEVSbzZV
ZjhHVUtub2lCSFVwa0hYMlFVa0VNSlR5Tlo1bWxMSngzc1dzdWxtYjJQcUp5MjdTRU1JMlI1S1B6
TFU1ZXJxWjA4QW1hZApKMFlnRkFaMUZtbjVuT082b3VWanFPcFNjc3Q5djlWTk53aC9tRjZNSUFW
cTRvMVJJbFhFaWE1ZXVmdlRyV2tGZWNLWkhLR3VFNjM4Ck95N3NBZjVVTE0zUldVNFQ0Q3hQekNZ
QWhPaXliZk5NTjhyNHdhY2UxZSsxWCswbXQ2eGNjcW5TWGFWcG9oU1JFVnJHeWNzQlN2NlQKR2k1
Y1E3RlpVb2lxSGhldXg0Vkp0VmVhR2pPRVB5N0hHZzJnVkFKQ1NzSUo5YUdjTG5wVFJWandZWGdB
U29yQzVmK013M1U1dS9EVApVQUd6eXRlYXVmQXpacHJDbjl1ZFJQVXlQUFN5d3BOYmg3L3dYWitw
M0NkVU51c2lKR1k2cVdlQ2w4cUhxY21ueE9vT3E4blR3d0k0Cmg5ZU8yVlk5VEVNQ3VoQXNKSEV6
T2JjT1B4Y2JTVCtyQVpPWHJaWEhDcGlXV21DYm51ME5LdGg4c0hGQVJ3T3dRamYzZjkyamdTY08K
ajUxd2ZuTzk4cmhlUGNRckdEQVZQUktxRjdsMTJzaTdQb0Zqc2loTytYL0tjRWFzWThuNWVNVnpn
dXRHSHVMMDNuc3VDYVhaek9BPTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxY
NTA5U3ViamVjdE5hbWU+MS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTcz
NzQ2MTcyMmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAsTD1TdGVybGluZyxT
VD1WQSxDPVVTPC9YNTA5U3ViamVjdE5hbWU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlEMERDQ0F6a0NB
Z0RETUEwR0NTcUdTSWIzRFFFQkJRVUFNR294Q3pBSkJnTlZCQVlUQWxWVE1SRXdEd1lEVlFRSUV3
aFdhWEpuCmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNSbGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRY
TjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1C
NFhEVEV5TURrd05qSXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTApNQWtHQTFVRUJo
TUNWVk14Q3pBSkJnTlZCQWdUQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWpNQ0VHQTFV
RUF4TWFkWEp1Ck9tUmxZMlU2YjNKbk9tOXlaenBrWldObE9qUXdOREF4SGpBY0Jna3Foa2lHOXcw
QkNRRVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0MKQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJ
UEFEQ0NBZ29DZ2dJQkFMTUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZwpnVFU3ZlBv
aFliWktjNmVXMVdjQnlQR3dHUkRmaVFtNzhZSnR5VTByWnl1RDFHMmZQdW5RTk1ZMGZSeGpBT29U
eWl5UGlJY2s2dDVoClRYZnpseFVmN3ZUOHl6czBabDFWR0hsVENUZU1EaXlOUjlBai81bENXNTFi
WmFZQ1UyR1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd20KamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5
NGpkKzZzbngzTzluQithQVJiL0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWQpHSHJO
L2dqanBnNnFYMkI2Mkp1ZjArU05JelBZNlNwdHZ4TGFCblQrZVd4NnpaZU5pZjBDTFlNNWVsMHQw
LzVYTHJVbVpWYVdnS0RBCnRQZUtUWVRqcDRKVzdMVHVUSWc3UXhxQkQxaVR1YUVPejBIWE40bVM5
ZTRjOFJBamU4QURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0sKMGxnZ1ZlOER2cGJkUk5FN0t3dnVZ
MlVmbkZUYXJSOFlWS3EvSDF5WllEOU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6Vgpm
NjJNV3ZUYXNGMkJUcVZ1a0dyb0E4ak0yZUtYM3JMRWdtVCtNQUFpYXIrVUUzY2ZSWkFzMkJWdm13
OTdTdDJVTndacFZpWXhNQm83ClB2L09hOC9rNUJrbVB0N0ZlcVlZTkovVjhWYTJSanNGM01uR2pC
NWV5M2VIb2pKMjFtcEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTMKWW5tQW11T2NIVFdZTnRjaEtB
TnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFnTUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhL
SQpXb1NFaHRYMWNiY2VJUlNURGFrenFWTEpUelBYeW5uc21xVlM5Y2tyL3QrQmEzbDRibVAzdndK
VHcrQ3pRK0hXYlVHQlVqS0J5Ty9sCjF0QUhpWTF4MExqVWxiRCtLSWZRUHl3aDJmWXVrcWJiWEdJ
N2pJMUdBWjRJTDhXMXgvUDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWoKTTFSeFRHQ1lIcjg4eFNn
PTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2Ft
bDJwOkxvZ291dFJlcXVlc3Q+</con:value></con:property><con:property><con:name>samlLogout</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkxvZ291dFJlcXVl%0Ac3QgeG1sbnM6c2FtbDJwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIERl%0Ac3RpbmF0aW9uPSJodHRwczovL3FhLnMudXZ2dS5jb206NzAwMS9zZWN1cml0eS9mZWRlcmF0aW9u%0AL3NhbWwvc2xvIiBJRD0iZTZhYzc2ODQtZWZhNS00YTM0LWJkZTUtYmJjY2JiODhkNTA0IiBJc3N1%0AZUluc3RhbnQ9IjIwMTItMDctMTFUMTk6NTM6MDEuMDAyWiIgUmVhc29uPSJTdWdhcnBsdW0gRmFp%0AcnkiIFZlcnNpb249IjIuMCI%2BICAgPHNhbWwyOklzc3VlciB4bWxuczpzYW1sMj0idXJuOm9hc2lz%0AOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BdXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDA8%0AL3NhbWwyOklzc3Vlcj4gICAgICA8c2FtbDI6TmFtZUlEIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6%0AbmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpT%0AQU1MOjIuMDpuYW1laWQtZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVj%0AZTpBQjZCQjQ3RDI1RjgzNTM4RTA0MDFGMEEwNTk5M0UyNzwvc2FtbDI6TmFtZUlEPiAgIDxzYW1s%0AMnA6U2Vzc2lvbkluZGV4PkQ0NDVDRUU0ODZCRDFGRTg1RUUzMzU4REE5OThCMTVGNTY1PC9zYW1s%0AMnA6U2Vzc2lvbkluZGV4PiA8U2lnbmF0dXJlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAw%0ALzA5L3htbGRzaWcjIj48U2lnbmVkSW5mbz48Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0%0AaG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhtbC1jMTRuLTIwMDEwMzE1Ii8%2BPFNp%0AZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNp%0AZyNyc2Etc2hhMSIvPjxSZWZlcmVuY2UgVVJJPSIiPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxn%0Ab3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25h%0AdHVyZSIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53%0AMy5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48RGlnZXN0VmFsdWU%2BZThwbzhJOHFRWWpidTZW%0AQmNQZGtDMnRRWmk4PTwvRGlnZXN0VmFsdWU%2BPC9SZWZlcmVuY2U%2BPC9TaWduZWRJbmZvPjxTaWdu%0AYXR1cmVWYWx1ZT5zWkZ1dGUxckhNYmRzcUJCWDNDRHhhUXlqa2hSMWs2MHNvakVqalNLM3VadEZl%0AT0NWYSsxVzlOMW9sZ3RRTCtJTnAzTWNHbmpPV1dLClJMeVp6ZVloNUhTRW92YU1SZjBRb3I3bUlK%0ARG1mYTdlY1VpWXdDTnhXNHRRT2Jqd1NMUkFaTmNuQ1NVOWZ2UHhYeHZ3eWZTRjVrdFcKMEVSbzZV%0AZjhHVUtub2lCSFVwa0hYMlFVa0VNSlR5Tlo1bWxMSngzc1dzdWxtYjJQcUp5MjdTRU1JMlI1S1B6%0ATFU1ZXJxWjA4QW1hZApKMFlnRkFaMUZtbjVuT082b3VWanFPcFNjc3Q5djlWTk53aC9tRjZNSUFW%0AcTRvMVJJbFhFaWE1ZXVmdlRyV2tGZWNLWkhLR3VFNjM4Ck95N3NBZjVVTE0zUldVNFQ0Q3hQekNZ%0AQWhPaXliZk5NTjhyNHdhY2UxZSsxWCswbXQ2eGNjcW5TWGFWcG9oU1JFVnJHeWNzQlN2NlQKR2k1%0AY1E3RlpVb2lxSGhldXg0Vkp0VmVhR2pPRVB5N0hHZzJnVkFKQ1NzSUo5YUdjTG5wVFJWandZWGdB%0AU29yQzVmK013M1U1dS9EVApVQUd6eXRlYXVmQXpacHJDbjl1ZFJQVXlQUFN5d3BOYmg3L3dYWitw%0AM0NkVU51c2lKR1k2cVdlQ2w4cUhxY21ueE9vT3E4blR3d0k0Cmg5ZU8yVlk5VEVNQ3VoQXNKSEV6%0AT2JjT1B4Y2JTVCtyQVpPWHJaWEhDcGlXV21DYm51ME5LdGg4c0hGQVJ3T3dRamYzZjkyamdTY08K%0AajUxd2ZuTzk4cmhlUGNRckdEQVZQUktxRjdsMTJzaTdQb0Zqc2loTytYL0tjRWFzWThuNWVNVnpn%0AdXRHSHVMMDNuc3VDYVhaek9BPTwvU2lnbmF0dXJlVmFsdWU%2BPEtleUluZm8%2BPFg1MDlEYXRhPjxY%0ANTA5U3ViamVjdE5hbWU%2BMS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MGY2NjZmNmY0MDZlNjU3NTcz%0ANzQ2MTcyMmU2MzZmNmQsQ049dXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAsTD1TdGVybGluZyxT%0AVD1WQSxDPVVTPC9YNTA5U3ViamVjdE5hbWU%2BPFg1MDlDZXJ0aWZpY2F0ZT5NSUlEMERDQ0F6a0NB%0AZ0RETUEwR0NTcUdTSWIzRFFFQkJRVUFNR294Q3pBSkJnTlZCQVlUQWxWVE1SRXdEd1lEVlFRSUV3%0AaFdhWEpuCmFXNXBZVEVSTUE4R0ExVUVCeE1JVTNSbGNteHBibWN4RURBT0JnTlZCQW9UQjA1bGRY%0ATjBZWEl4Q3pBSkJnTlZCQXNUQWxGQk1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1C%0ANFhEVEV5TURrd05qSXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTApNQWtHQTFVRUJo%0ATUNWVk14Q3pBSkJnTlZCQWdUQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWpNQ0VHQTFV%0ARUF4TWFkWEp1Ck9tUmxZMlU2YjNKbk9tOXlaenBrWldObE9qUXdOREF4SGpBY0Jna3Foa2lHOXcw%0AQkNRRVdEMlp2YjBCdVpYVnpkR0Z5TG1OdmJUQ0MKQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJ%0AUEFEQ0NBZ29DZ2dJQkFMTUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZwpnVFU3ZlBv%0AaFliWktjNmVXMVdjQnlQR3dHUkRmaVFtNzhZSnR5VTByWnl1RDFHMmZQdW5RTk1ZMGZSeGpBT29U%0AeWl5UGlJY2s2dDVoClRYZnpseFVmN3ZUOHl6czBabDFWR0hsVENUZU1EaXlOUjlBai81bENXNTFi%0AWmFZQ1UyR1hXZVRWcXlyYVI5cWNWYy9mR1NUNkJCd20KamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5%0ANGpkKzZzbngzTzluQithQVJiL0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWQpHSHJO%0AL2dqanBnNnFYMkI2Mkp1ZjArU05JelBZNlNwdHZ4TGFCblQrZVd4NnpaZU5pZjBDTFlNNWVsMHQw%0ALzVYTHJVbVpWYVdnS0RBCnRQZUtUWVRqcDRKVzdMVHVUSWc3UXhxQkQxaVR1YUVPejBIWE40bVM5%0AZTRjOFJBamU4QURReGh1MHEvSFVBK2tBQ0NmT0ErcGlYZ0sKMGxnZ1ZlOER2cGJkUk5FN0t3dnVZ%0AMlVmbkZUYXJSOFlWS3EvSDF5WllEOU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6Vgpm%0ANjJNV3ZUYXNGMkJUcVZ1a0dyb0E4ak0yZUtYM3JMRWdtVCtNQUFpYXIrVUUzY2ZSWkFzMkJWdm13%0AOTdTdDJVTndacFZpWXhNQm83ClB2L09hOC9rNUJrbVB0N0ZlcVlZTkovVjhWYTJSanNGM01uR2pC%0ANWV5M2VIb2pKMjFtcEJ6VFRjWTBJUzIrRGs2SDFHdExUZU9WSTMKWW5tQW11T2NIVFdZTnRjaEtB%0ATnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFnTUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhL%0ASQpXb1NFaHRYMWNiY2VJUlNURGFrenFWTEpUelBYeW5uc21xVlM5Y2tyL3QrQmEzbDRibVAzdndK%0AVHcrQ3pRK0hXYlVHQlVqS0J5Ty9sCjF0QUhpWTF4MExqVWxiRCtLSWZRUHl3aDJmWXVrcWJiWEdJ%0AN2pJMUdBWjRJTDhXMXgvUDNXeXEvNTJTSjZOSlVaSFc0c1owUTBZQWoKTTFSeFRHQ1lIcjg4eFNn%0APTwvWDUwOUNlcnRpZmljYXRlPjwvWDUwOURhdGE%2BPC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2Ft%0AbDJwOkxvZ291dFJlcXVlc3Q%2B</con:value></con:property><con:property><con:name>nameID</con:name><con:value>urn:dece:userid:org:dece:AB6BB47D25F83538E0401F0A05993E27</con:value></con:property><con:property><con:name>SessionIndex</con:name><con:value>D445CEE486BD1FE85EE3358DA998B15F565</con:value></con:property><con:property><con:name>actionSessionIndex</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccName_Gen" searchProperties="true" id="21ddf1dc-dc3b-4942-b6ac-34c838187b31" disabled="true"><con:settings/><con:testStep type="datagen" name="AccName" id="21fcff29-ee10-4eb5-8ad9-adf26ec5562d"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "Shikha_Acc_Create_Accp_Test_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>AccName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer" id="4d331a14-4678-480b-acc1-825a192f49c4"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="false" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>AccName</con:sourceType><con:sourceStep>AccName</con:sourceStep><con:targetType>AccountDisplayName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserName_Gen" searchProperties="true" id="1508bdfb-ae39-4c07-8d58-884b5ae61d0b" disabled="true"><con:settings/><con:testStep type="datagen" name="UserName"><con:settings/><con:config xsi:type="con:DataGeneratorStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:property type="Script"><con:configuration><script>def today= "shikha_user_create_accp_test_" + new Date().format( 'yyyyMMdd_hhmms' );

return today; 
</script></con:configuration><con:name>UserName</con:name><con:mode>READ</con:mode><con:shared>true</con:shared></con:property></con:config></con:testStep><con:testStep type="transfer" name="Property Transfer"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>DisplayName</con:name><con:sourceType>UserName</con:sourceType><con:sourceStep>UserName</con:sourceStep><con:targetType>UserName</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:properties><con:property><con:name>synced</con:name><con:value>true</con:value></con:property><con:property><con:name>Node_Value</con:name><con:value>urn:dece:role:dece</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SoapUI-based IDP SAMLResponse Login_NewVersion" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c22ee7ab-a292-4d2e-ae82-e68bf341d060" disabled="true"><con:settings/><con:testStep type="groovy" name="Set_TLS"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath = testProject.getPropertyValue("fileNameKeystore").toString();
String nodeId = testProject.getPropertyValue("nodeid");

RestTestRequestStep  testStep1 = testCase.getTestStepByName("Account_Create");
RestTestRequestStep  testStep2 = testCase.getTestStepByName("User_Create");

assert nodeId.length() > 0;

boolean exists = (new File(keyStorePath)).exists();
if (exists) {
    this.log.info "File or directory exists";
} else {
     this.log.info "File or directory does not exist";
}

this.log.info "testStep1 [$testStep1]";
this.log.info "testStep2 [$testStep2]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);

</script></con:config></con:testStep><con:testStep type="groovy" name="Set Proj Property" id="439412d7-8946-4310-a210-75cfda13108d"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("assertionXMLnode",tP.getPropertyValue("assertionXMLnode_NewVersion"));

log.info tP.getPropertyValue("assertionXMLnode")

</script></con:config></con:testStep><con:testStep type="calltestcase" name="AccName"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>21ddf1dc-dc3b-4942-b6ac-34c838187b31</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account" methodName="AccountCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Account xmlns="${#Project#schemaCoordinator}"> 
<DisplayName>${#Project#AccountDisplayName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>
]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

def nodeacc = context.expand( '${#Project#NODEACCID}' )



//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() !=0 ;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

     int lastSlash = urlStr.lastIndexOf('/');
    	accountid     = urlStr.substring(lastSlash + 1);
   
	tP.setPropertyValue("NODEACCID",accountid);
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="calltestcase" name="Get_UserName"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>1508bdfb-ae39-4c07-8d58-884b5ae61d0b</con:targetTestCase><con:properties><con:property><con:name>synced</con:name></con:property><con:property><con:name>Node_Value</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="AccountCreate" resourcePath="/rest/{MAJOR}/{MINOR}/Account/{AccountID}/User" methodName="UserCreate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="RET_concat.jks"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#targetHost}:${#Project#targetPort}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#schemaCoordinator}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#Project#UserName}</GivenName>
        	<!--<GivenName>UVTC_AltEmail</GivenName>-->
		<SurName>Gupta</SurName>
	</Name>	
	       <DisplayImage>
	       <DisplayImageURL>https://qa.uvvu.com:7001/static/images/Image_IPT.jpg</DisplayImageURL>
        <!--DisplayImageData>/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAPAAA/+4ADkFk
b2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAM
DAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAY
GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f
Hx8fHx8fHx8f/8AAEQgANwBEAwERAAIRAQMRAf/EAKAAAAIDAQEAAAAAAAAA
AAAAAAMEAgUHAAYBAAIDAQEAAAAAAAAAAAAAAAABAgMEBgUQAAIBAwIEAwYE
BQUAAAAAAAECAxESBCETAEEiBTFCFFFhcTIjBoFichXBUjNDJOGCooMHEQAB
AgIGBggDBgcAAAAAAAABABEhAvAxQWESA1FxoeEEFIGRscHRMqITIrIj8UJS
coIFYpLC8jNjJP/aAAwDAQACEQMRAD8ApsDsnY/2/DaTt8e2qIFUxgzZE1tS
BdqEBqfHX3IOriOL4zPGdOBOfMbYSh6f3VVko57F2YGVWw8VZaXZU22m1joB
W1bhQvQ1qw/M2lqHPz+fD45msiXO77BFyh1Nex9kujZe2Q6gjExWQB3oKGWY
kFgoB5+HOrkKFz2fH6k15fYKbHJHRE+3uxMrIcWDbD0yckRqtzk27UIFbden
TUeAq9SA8fn14prg+009MCOqbtvdPtXun3Rl9lxezJHNAJI4MiRUMTNCTuM0
SqrL4dNWNaAdNTxvz8visrh5c2bNLFnDl41Rfrh1snFW57H9v2RsMGJ8dW+k
RGhlyZDr06KAnPkD7ox1Yee4h/PM+stKPGnmqTlDbsXZgZVbExVkAuypttNr
HQCtq3ChehrVh+ZtLU4Ofz4fHNdEud32CLlDrv2TsYaNh2yHUFcPFZAHegoZ
ZmILBQDz8OdXIUHPZ8fqTXl9gpsckdV37F2L9+s24q7Ft+19H1G7SlnyW+Sl
fHS6/Xj0ObzuUxOX9zTHDh0137WwpvBWeLIVhWko3UiUTZRoEx4rQ1ig1F5F
Ca/qbS1eMHGD608IY5oaS52fYIuUiiBwBEqxGyt2JiMSGdgamaYmpFCburUH
U1cgDM1cdZ7hT0uSkVHFJSZTbULl5a1DOwNBDCBUihNvTqDoKuSQNVDUO809
LBNQ7x33t3YMBO4dy6CPp9vwYwCQQvIDput+Zq0UdI/Nbw3CT8RPgk/VMabL
azcMsu7F94YWL93Znec3Cuxe4GUTwxmrIJnDsy/KHOlGBoCCeOr4r9umn4aX
Klm+KRmOlhs7lMiC1r1KToMuCZWWaJZfWeCQwOocBLvMVoTX4toFXjjjIZTh
IqLNpIhTZaVBLswAiURmypbExGJDOwNTNMTUihN3VqDqauQA2rjrPcKelyko
GUASs0ptqFzMtahnYGghhAqRQm3p1B0FXJYGGqGod5p6WCEGmR6+uxHt+ms9
HQf0bqbda2Xf8fL+bj0YcnWf8td+GvT323J2IMbkRwKYxprjYgIAdxqZpCKg
AMbvd46uVAr4sfWnj94uemoU2OUFTEoG6TKbahcvLWoZ2BoIYQKkUJppqDoK
uSRmaqGod5p6WCSZgZ9yNVRVmVf8fH/t48dLb3t0upoAP0rpc3CIhdadNN5s
Ca8n/wCiY69xm7fhQOSuPh5vcpZm8XCr83KoY49o5U8NKce3+zz+2JpzbNJJ
T+bxipBZ72nB9f3TEwrrPUzJFcBUi9gNB+PHR8Rm+3lzT/hBKkVsH2tnLl/a
naHA3Gji2YsbwrJAxW9zr0r0kez3taBxfH5WDiMwXu9xsp2OoFMyyAbpMptq
FyspahnINBDCBUihNNNQdBVySMwFUNQ7zT0sElAPJuRqqKs6r/j4/wDbx46W
3vboWI0AH6V0ubgYNdadNN5sCSWvxN/c+pZbd63S66tN+v8AL5a0tt5bfHpN
Nyjf7Kv01Ui/8SlYgxTR7JYSMIiFGRk+dqaCGK3XQm3p56DrJIq4sH3ptOKZ
h01mmxIoqyPuIqoqzKv0INNuBPlve3QtTQAfpXS5uMzBrrTppvNgQjQyxGPz
PjO3uMmU5H4Cyg+BHsQahBe/5d9PMhUX35n+iyPVSlDPl9omwEC6hXbJDMNd
dIpTrz49T9qyvclwiqXNE3p8QmFnHbctsLuOLmLo2NNHMp98bBv4cdNnZeOS
aX8QI61NbB2NIsbsjwx1hxY8vKXcAKu0e8TGiAa9SsKEe3p1NRxfFkzZrmMx
ll68MadagpySPuIqoomVfoQeSBPlva3S6mgp+ldLm4oYNdadNN5sCSX3YjF5
nxnb3GTKkI/AWUHwIHKMazYvf8u+nmqF2/P6z+unqbf6VRZX5tqtLvl6q+PO
lOnjbhHJ1Q9z+mumquKdiVjllO18rzhAYU1KRIRTcbwqzf6DS5uIcUB7k+jE
emNVNegIK4SxmPzPju3uL5LkfgLKD4EexBrSxe/5d9PMkmo533HZnUTAfWm8
kCfNat3m5mvxOlq8Rwhru2m4WlCX+6MfFy/tbOuhAlx4DJhVLiW3ejaVnFdQ
1K0YEg6nU0408BPNJxErGExjU1Rag7AmFluXgS42NhTsDZmxNMhIoOmV4iAf
+vjrcvNE00w/CW2A96mtkZ2SPGRApnMMcix06IjJGC8je0k1A93SKC48cOQ5
Ohz0sYCmvQq1XyyxNHzfHdvcXyXI/AWUHwI9iDWYlL3/AC76eZCiZn3HZnVZ
gv1p/JAnzWpdpdz1+LaWrwYQ12jTTcLShB3F3LfTnY2621bcturuU+a+7q8b
ufzacb2/5q4+50eWrVs6Ip2JWKRPTIGVhC1Kx+eeQjw18unPxA5INYcSD7s2
lz0R7aVoKLuve7M4EwH1pvJCnjatfNz1+J0tXijDC7tpuFpSRI5QBGAhtrXH
xzUFiDUyyk1Pia6/E1YgBEbz3CmxNMPXI7f3LHDBjLiZCy5B0BdYmZUQclVh
+HvNeCQ4Z5Domlh0im5kJHtUEj967ZlwuDD2nsuNssfBZ8mMgaChu62f/b48
a+InAyp5TXmZ03VKdwHShOzZKSISxaSGRqknV8lyPw6dPgR7EGuMStr+WlIo
S8kz3uxcCYD603khTxtWvm56/E6WrwxLC7tpuFpQh7gpGAhtrXHxjUFiDUyy
k1OhNdfiasQA23nuFNiSDvD1tPUNu203aGzcupbT5bfLSvjzv143N/y1Qx7M
PbSpOxKQ5LBIgBJvSJpJtN0RilQi0NTqKn2+PJeJZ+QTPMXlbEfvDbGnWUMp
erQJcInMUb2xRlXo0l1LnYg63/E111bQV8vNplf8w2RpqQyKmQTIY6S3sA08
ojcMQSQqqAKquh/hqSRE8OWd5bvil8aaoIZGizIXx33YpBjTwSRARqyiKB4m
DyA2lbhHU+ymnhVuDl5hMGMuIEHzCJeAr00dghkTDftWPFlNE+ZLi+nx0ngk
jEiyCKEjGkEg29kFK6G4MLuXDzsvNmZ8AmxTMRMzOfiDRxR1EQtQgyZcu4Kr
IJ5AasI3O2gpUICuupGtPeeS8IcPCuVvzDbGm1DJdstAlwik2o3tiisejSXU
udiDrf8AE111agEuXOmV/wAw8aakMuGQTI0dJb2AbIlEbhiCSFVQBVV8f4dR
JC5cs7y3fFL401QQyB676u5s/wCPsV2ttqbNfCtLfDX+Xl+bjX7B9nC4fHW4
ral9qbL/2Q==</DisplayImageData-->
    </DisplayImage>
	<ContactInfo>
        <!--PrimaryEmail ID="645645" verified="true" verificationDateTime="2009-10-26T21:32:52" verificationEntity="urn:dece:org:org:dece:${#Project#Node_OID}" VerificationStatus="urn:dece:type:status:success"-->			
        <PrimaryEmail>
	 <Value>shikha82@gmail.com</Value>
        <!--<Value>sunitha.pemmasani@neustar.biz</Value>-->
        <ConfirmationEndpoint>Node-Confirmed</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>sunitha.pemmasani@neustar.biz</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	<!--Address>
		<PostalAddress>45999 Center Oak Plaza</PostalAddress>
		<PostalCode>20166</PostalCode>
		<Locality>Sterling</Locality>
		<StateOrProvince>NJ</StateOrProvince>
                <Country>US</Country>
	</Address-->
       <TelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
      </TelephoneNumber>
        <MobileTelephoneNumber>
       <Value>+1.7033453434</Value>
      <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
        </MobileTelephoneNumber>
	</ContactInfo>
        <Languages>
		<Language primary="true">en-GB</Language>	
	</Languages>
       <DateOfBirth MeetsAgeOfMajority="true">1930-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#Project#UserName}</Username>	
                <Password>Password1</Password>
                <!--Password IsRandom="false"></Password-->
               <!--Password>password&#x20ac;</Password-->
             	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="MINOR" value="${#Project#versionMinor}"/>
  <con:entry key="MAJOR" value="${#Project#versionMajor}"/>
  <con:entry key="AccountID" value="${#Project#NODEACCID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

this.log.info "Total Headers: " + tStep.httpRequest.response.responseHeaders.size();
tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response 1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
//def urnacct   = tP.getPropertyValue("urnaccount");
//def acct      = tC.getPropertyValue("nodeaccountid");
//def urnnode   = tP.getPropertyValue("urnNode");

//def sh            = tC.getPropertyValue("streamhandleFULL");
//def nodeid        = tC.getPropertyValue("nodeid");
//def account       = tC.getPropertyValue("assertionAccountIdFULL");
def errorRespType = "SUCCESS";
def XMLbody       = context.expand( '${#TestCase#XMLbody}');
//def nodetype      = tC.getPropertyValue("nodetype");

boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#V1}' );
String minor = context.expand( '${#Project#V2}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#Query_HostName}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#Query_HostName}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
//this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() != 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	int lastSlash = urlStr.lastIndexOf('/');
    	userid = urlStr.substring(lastSlash + 1);
   
    tP.setPropertyValue("NODEUSERID",userid);
	
	//tC.setPropertyValue("streamhandleFULL",streamidFULL);
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>//Note if there is change in the namespace we need to change in the project property value of assertionXMLnote(Replace only the namespace)
def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def targetPort = context.expand( '${#Project#targetPort}' )

//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:home");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:account");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:library:urn:dece:rightstokenid:org:dece:C752EB964745B107E0401F0A07997A92");//C752EB964758B107E0401F0A07997A92");//{rightsTokenID}");
//urn:dece:rightstokenid:org:dece:D4C4ED3C220C8F0FE0401F0A07992649
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:device");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:tou");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user");
tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA");//urn:dece:userid:org:dece:D6BB14AF2AAFCA3BE0401F0A059911B6
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:D4C4087DA00D3419E0401F0A079907D0");
//tC.setPropertyValue("rsamlTargetURL","urn:dece:portal:user:EA6030364B7B5437E0401F0A07997962");//urn:dece:portal:user:D4C4087DA00D3419E0401F0A079907D0"); //Passes

//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/userProfilePage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/mediaPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/accountDashboardPage.jsf");
//tC.setPropertyValue("rsamlTargetURL","https://qa.uvvu.com:"+targetPort+"/ssp/views/touPage.jsf");
//tC.setPropertyValue("rsamlReturnToURL","http://www.google.com");*/

def userName = context.expand( '${#Project#UserName}' )

tC.setPropertyValue("rsamlReturnToURL","https://www.wellsfargo.com/");
tC.setPropertyValue("rsamlSPID",null);  // overrides the SP ID attribute value
tC.setPropertyValue("nodeidFULL","urn:dece:org:org:dece:" + tP.getPropertyValue("nodeid"));
//tC.setPropertyValue("username","pjgrevsamlstandard1");
tC.setPropertyValue("username",userName);
tC.setPropertyValue("password","Password1");
tC.setPropertyValue("expectErrType","SUCCESS");
tC.setPropertyValue("assertionXMLuser",null);
tC.setPropertyValue("assertionXMLnode",null);
tC.setPropertyValue("deceAssertionXML",null);

//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:500500");
//tC.setPropertyValue("stsaudience",null);
//tC.setPropertyValue("stsaudience","urn:dece:org:org:dece:4042");
/*
*  Actions.  Set all null for normal 
*  interactions.
*/
tC.setPropertyValue("actionDoURIRef","false");
tC.setPropertyValue("actionDestination",null);
tC.setPropertyValue("actionVersionIDP",null);
tC.setPropertyValue("actionIssueInstant",null);
tC.setPropertyValue("actionIssuerIDP",null);
tC.setPropertyValue("actionInResponseToIDP",null);
tC.setPropertyValue("actionNotBeforeIDP",null);
tC.setPropertyValue("actionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionSessionNotOnOrAfterIDP",null);
tC.setPropertyValue("actionAudienceRestrictionIDP",null);
tC.setPropertyValue("actionSubjectConfirmationIDP",null);
tC.setPropertyValue("actionTargetURLIDP",null);
tC.setPropertyValue("actionReturnToURIIDP",null);
tC.setPropertyValue("actionNameIDSP",null);
tC.setPropertyValue("actionNotBeforeSP",null);
tC.setPropertyValue("actionNotOnOrAfterSP",null);


/*
*  Action Docs...
*
*  actionDoURIRef
*	actionDoURIRef = true|false
*
*  actionDestination
*	toNULL  == Destination=""
*	mismatch == "http://www.poopiepants.com/oh/smelly/boy";
*
*  actionVersionIDP
*	1.0 == Version="1.0"
*
*  actionIssueInstant
*	toNULL == IssueInstant=""
*	isBefore == IssueInstant="july 1 2011"
*	isAfter == IssueInstant="july 1 2012"
*
*  actionInResponseToIDP
*	present == InResponseTo = "_1234567890";
*
*  actionIssuerIDP
*	notprovisioned = urn:dece:org:org:dece:111
*
*  actionNotBeforeIDP
*	toNULL == NotBefore=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="july 1 2012"
*
*  actionNotOnOrAfterIDP
*	toNULL == NotOnOrAfter=""
*    isBefore == NotBefore="july 1 2011"
*	isAfter == NotBefore="2014-07-11T19:53:01.002Z"
*
*  actionSessionNotOnOrAfterIDP 
*	toNULL == NotOnOrAfter=""
*	remove == removeAttribute();
*    isBefore == SessionNotOnOrAfter="july 1 2011"
*	isAfter == SessionNotOnOrAfter="2024-07-11T19:53:01.002Z"
*
*  actionAudienceRestrictionIDP
*	node == removal of &lt;AudienceRestriction> node
*	coordinator == &lt;AudienceRestriction> tP.getPropertyValue("urnCoordinator");
*    nonexistent == &lt;AudienceRestriction> == "urn:dece:org:mesume:notthere"
*	nullAudience == &lt;AudienceRestriction>&lt;/AudienceRestriction>
*	
*  actionSubjectConfirmationIDP
*	present = SubjectConfirmation=today
*
*  actionTargetURLIDP
*	toNULL = "";
*
*  actionReturnToURIIDP
*	toNULL = "";
*
*  SP ASSERTION ACTIONS
*
*  actionNameIDSP
*	randomize = "urn:dece:userid:org:dece:ABC123";
*
*  actionNotBeforeSP
*	isAfter = NotBefore="2024-07-11T19:53:01.002Z"
*
*  actionNotOnOrAfterSP
*	isBefore = NotOnOrAfter="2010-07-11T19:53:01.002Z"
*/
</script></con:config></con:testStep><con:testStep type="groovy" name="Call STS on behalf of the User"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("API Test Cases").getTestCaseByName("STS API - Invoked to Coordinator URL")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;


</script></con:config></con:testStep><con:testStep type="groovy" name="Store Assertion"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

assert tC.getPropertyValue("assertionXML").length() > 1;

tC.setPropertyValue("assertionXMLuser", tC.getPropertyValue("assertionXML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Set the Property" disabled="true"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();





</script></con:config></con:testStep><con:testStep type="groovy" name="Load Third-Party created &lt;Response> XML"><con:settings/><con:config><script><![CDATA[import org.w3c.dom.*;
import java.io.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils;

tC.setPropertyValue("deceAssertionXML",null);
tC.setPropertyValue("samlResponseXML",null);
tC.setPropertyValue("idpAssertionXML",null);

String assertionIDPXML = tP.getPropertyValue("assertionXMLnode").toString();
String assertionDECEXML = tC.getPropertyValue("assertionXMLuser").toString();
String assertionURIXML = tP.getPropertyValue("assertionURIXML").toString();
String outFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String rsamlTargetURL = tC.getPropertyValue("rsamlTargetURL").toString();
String rsamlReturnToURL = tC.getPropertyValue("rsamlReturnToURL").toString();

log.info 'assertionIDPXML = ' +tP.getPropertyValue("assertionXMLnode").toString();
log.info 'assertionDECEXML = ' +tC.getPropertyValue("assertionXMLuser").toString();
log.info 'assertionURIXML ='+ tP.getPropertyValue("assertionURIXML").toString();
log.info 'outFile ='+ tP.getPropertyValue("fileSamlResponseXML").toString();
log.info 'rsamlTargetURL ='+  tC.getPropertyValue("rsamlTargetURL").toString();
log.info 'rsamlReturnToURL ='+ tC.getPropertyValue("rsamlReturnToURL").toString();

String sessionIndex = "";
String assertionNotBefore = "";
String assertionNotAfter = "";
String assertionIssueInstant = "";
String assertionNameID = "";
String assertionID = "";
String assertionURIRefSP = "";
String xml2, xml3 = "";
String xmlAssertionURI = "";

assert assertionIDPXML != 'null';
assert assertionDECEXML != 'null';
assert assertionURIXML != 'null';

log.info "assertionDECEXML: $assertionDECEXML";
log.info "assertionIDPXML: $assertionIDPXML";
log.info "assertionURIXML: $assertionURIXML";

//Create instance of DocumentBuilderFactory
DocumentBuilderFactory idpassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory deceassertion = DocumentBuilderFactory.newInstance();
DocumentBuilderFactory uriassertion = DocumentBuilderFactory.newInstance();
idpassertion.setNamespaceAware(true);
deceassertion.setNamespaceAware(true);
uriassertion.setNamespaceAware(true);

/*
*  Create an inputsource from our assertion strings.
*/
InputSource idp = new InputSource(new StringReader(assertionIDPXML));
InputSource deceassert = new InputSource(new StringReader(assertionDECEXML));
InputSource urixml = new InputSource(new StringReader(assertionURIXML));

//Get the DocumentBuilder
Document idpdoc = idpassertion.newDocumentBuilder().parse(idp);
Document decedoc = idpassertion.newDocumentBuilder().parse(deceassert);
Document uridoc = idpassertion.newDocumentBuilder().parse(urixml);

/* -------------------------------------------
*  Get the DECE's <Assertion> Element
*
*/

Node dece = decedoc.getFirstChild();
Node deceroot = decedoc.getDocumentElement();
Node decelist = dece.getChildNodes();
Node deceindex, deceassertionxml;

/*
*  Do doc root processing first...
*/
deceassertionxml = deceroot;

log.info 'deceroot=='+deceroot

/*
*  Process the root attributes first.
*/
if (deceroot.hasAttribute("ID")) {
	log.info 'HAS ATTRIBUTE ID'
	if (tC.getPropertyValue("rsamlSPID").toString() != 'null') {
		log.info 'NOTNULL rsamlSPID'
		deceindex.setAttribute("ID",tC.getPropertyValue("rsamlSPID").toString());
	}
}

/*
*  assertionNotBefore
*/
if (deceroot.hasAttribute("IssueInstant")) {
	assertionIssueInstant = deceroot.getAttribute("IssueInstant")
	log.info "assertionIssueInstant[$assertionIssueInstant]";
}

assert decelist.getLength() > 0;

for (int i=0; i < decelist.getLength(); i++) {
	deceindex = decelist.item(i);

	log.info "deceindex - $deceindex";

	/*
	*  saml2:Conditions
	*/
	if (deceindex.getNodeName() == "saml2:Conditions" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		/*
		*  NotBefore
		*/
		if (deceindex.hasAttribute("NotBefore")) {
			switch (tC.getPropertyValue("actionNotBeforeSP").toString()) {
				case "isAfter":
					deceindex.setAttribute("NotBefore","2024-07-11T19:53:01.002Z")
					break;
			}
			assertionNotBefore = deceindex.getAttribute("NotBefore")
		}
		/*
		*  NotOnOrAfter
		*/
		if (deceindex.hasAttribute("NotOnOrAfter")) {
			switch (tC.getPropertyValue("actionNotOnOrAfterSP").toString()) {
				case "isBefore":
					deceindex.setAttribute("NotOnOrAfter","2010-07-11T19:53:01.002Z")
					break;
			}
			assertionNotAfter = deceindex.getAttribute("NotOnOrAfter")
		}	
	}

	/*
	*  saml2:Subject
	*/
	if (deceindex.getNodeName() == "saml2:Subject" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
			Node subjectNodelist = deceindex.getChildNodes();
			Node subjectCurrent;
			for (int c=0; c < subjectNodelist.getLength(); c++) {
				subjectCurrent = subjectNodelist.item(c);
				/*
				* saml2:NameID
				*/
				if (subjectCurrent.getNodeName() == "saml2:NameID" && 
					subjectCurrent.getNodeType() == Node.ELEMENT_NODE) {
					assertionNameID = subjectCurrent.getTextContent();
					switch (tC.getPropertyValue("actionNameIDSP").toString()) {
						case "randomize":
							subjectCurrent.setTextContent("urn:dece:userid:org:dece:ABC123");
							break;
					}
				}
			}
	}
	/*
	*  saml2:Advice
	*/
	if (deceindex.getNodeName() == "saml2:Advice" && 
		deceindex.getNodeType() == Node.ELEMENT_NODE) {
		for (Node child = deceindex.getFirstChild(); child != null; child = child.getNextSibling()) {
     		if (child.getNodeName() == "saml2:AssertionURIRef") {
				assertionURIRefSP = child.getTextContent();
    			}
   		}
	}
}
log.info "assertionNotBefore[$assertionNotBefore]";
log.info "assertionNotAfter[$assertionNotAfter]";
log.info "assertionNameID[$assertionNameID]";
log.info "assertionURIRefSP[$assertionURIRefSP]";


/* 
*  If any of the assertion attributes/text values are missing
*  there is no reason to continue..
*/
assert assertionNotBefore.length() > 0;
assert assertionNotAfter.length() > 0;
assert assertionNameID.length() > 0;
assert assertionURIRefSP.length() > 0;

log.info "DECE Assertion firstChild is " + dece.getNodeName();


/* -----------------------
*
* Process the IDP's Assertion XML
*
*/


Node an,aan,da;
Node idproot = idpdoc.getDocumentElement();
Node n = idpdoc.getFirstChild();
NodeList nl = n.getChildNodes();

/*
*  Process the root attributes first.
*/
if (idproot.hasAttribute("Destination")) {
	log.info "actionDestination[" + tC.getPropertyValue("actionDestination").toString() + "]";
	switch(tC.getPropertyValue("actionDestination").toString()) {
		case "toNULL":
				String dest = "";
				idproot.setAttribute("Destination",dest);
			break;
		case "mismatch":
				String dest = "http://www.poopiepants.com/oh/smelly/boy";
				idproot.setAttribute("Destination",dest);
			break;
		default:
			String dest = "https://" + tP.getPropertyValue("targetHostportal") + ":" + 
				//tP.getPropertyValue("targetPortportal") + "/rsaml/acs";
				
//////Adding this R2/////////////////////
				tP.getPropertyValue("targetPortportal") + "/security/federation/saml/acs";
				idproot.setAttribute("Destination",dest);
			break;
	}
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}
/*
*  IssueInstant attribute
*/
if (idproot.hasAttribute("IssueInstant")) {
	/*
	*  Set the attribute to the assertion IssueInstant in the dece
	*  assertion
	*/
	switch(tC.getPropertyValue("actionIssueInstant").toString()) {
		case "toNULL":
			idproot.setAttribute("IssueInstant","");
			break;
		case "isBefore":
			idproot.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
			break;
		case "isAfter":
			idproot.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
			break;
		default:
			idproot.setAttribute("IssueInstant",assertionIssueInstant);
			break;
		
	}
	
} else {
	log.info "FATAL ERROR!  Could not find Destination attribute on IDP root!";
	assert 1 == 2;
}

/*
*  ID attribute
*/
if (idproot.hasAttribute("ID")) {
	genUtils = new generalUtils.generalUtils(log);
	assertionID = genUtils.randomUUID();
	sessionIndex = genUtils.randomHexString(35);

	assert assertionID.length() > 0;

	idproot.setAttribute("ID",assertionID);

	log.info "ID [$assertionID]";

	tC.setPropertyValue("sessionIndex",sessionIndex);
}

/*
*  Version attribute
*/
if (idproot.hasAttribute("Version")) {
	switch (tC.getPropertyValue("actionVersionIDP").toString()) {
		case "1.0":
			idproot.setAttribute("Version","1.0");
			break;
	}
}

/*
* InResponseTo Element
*/
if (idproot.hasAttribute("InResponseTo")) {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
} else {
	if (tC.getPropertyValue("actionInResponseToIDP").toString() == "present") {
		idproot.setAttribute("InResponseTo","_1234567890");
	}
}

for (int i=0; i < nl.getLength(); i++) {
	an = nl.item(i);

	if (an == null) {
		continue;
	}

	log.info "IDP - Node [" + an.getNodeName() + "]";

	/*
	*  Fix the attributes...
	*/
	if (an.getNodeName() == "saml2p:Response") {
		
	}
	/*
	*  Process the Issuer
	*/
	if (an.getNodeName() == "saml2:Issuer" && an.getNodeType() == Node.ELEMENT_NODE) {
		switch (tC.getPropertyValue("actionIssuerIDP").toString()) {
			case "notprovisioned":
				an.setTextContent("urn:dece:org:org:dece:111");
				break;
			default:
				an.setTextContent(tC.getPropertyValue("nodeidFULL").toString());
				break;
		}
	}
	/*
	*  saml2p:Extensions
	*/
	if (an.getNodeName() == "saml2p:Extensions" && an.getNodeType() == Node.ELEMENT_NODE) {
		Node idpExtensions;
		NodeList idpExtensionslist = an.getChildNodes();
		for (int q=0; q < idpExtensionslist.getLength(); q++) {
			idpExtensions = idpExtensionslist.item(q);
			/*
			*  dece:TargetURL
			*/
			if (idpExtensions.getNodeName() == "dece:TargetURL" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionTargetURLIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlTargetURL);
						break;
				}
			}
			/*
			*  dece:ReturnToURI
			*/
			if (idpExtensions.getNodeName() == "dece:ReturnToURI" && 
				idpExtensions.getNodeType() == Node.ELEMENT_NODE) {
				switch(tC.getPropertyValue("actionReturnToURIIDP").toString()) {
					case "toNULL":
						idpExtensions.setTextContent("");
						break;
					default:
						idpExtensions.setTextContent(rsamlReturnToURL);
						break;
				}
			}
		}
	}
	
	/*
	*  If we hit a <ds:Signature> element we will
	*  delete it.
	*/
	if (an.getNodeName() == "ds:Signature" && 
		an.getNodeType() == Node.ELEMENT_NODE) {
		log.info "Located <ds:Signature> - Removing";
		nl.removeChild(an);
	}

	if (an.getNodeName() == "saml2:Assertion") {
		log.info "Located <saml2:Assertion>";
		NodeList al = an.getChildNodes();

		assert al.getLength() > 1;
		
		/*
		*  IssueInstant attribute
		*/
		if (an.hasAttribute("IssueInstant")) {	
			switch(tC.getPropertyValue("actionIssueInstant").toString()) {
				case "toNULL":
					an.setAttribute("IssueInstant","");
					break;
				case "isBefore":
					an.setAttribute("IssueInstant","2011-07-11T19:53:01.002Z");
					break;
				case "isAfter":
					an.setAttribute("IssueInstant","2012-07-11T19:53:01.002Z");
					break;
				default:
					an.setAttribute("IssueInstant",assertionIssueInstant);
					break;
			}
		}
		
		for (int x=0; x < al.getLength(); x++) {
			aan = al.item(x);

			if (aan == null) {
				continue;
			}

			/*
			*  If we find <saml2:Advice> set its
			*  value to null
			*/
			if (aan.getNodeName() == "saml2:Advice" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					
			}
			/*
			*  saml2:Subject
			*/
			if (aan.getNodeName() == "saml2:Subject" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node subjectNameid;
				NodeList ipdsubjectlist = aan.getChildNodes();
				
				for (int j=0; j < ipdsubjectlist.getLength(); j++) {
					subjectNameid = ipdsubjectlist.item(j);
					log.info "NODES are " + subjectNameid.getNodeName();
					/*
					*  saml2:NameID
					*/
					if (subjectNameid.getNodeName() == "saml2:NameID" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						subjectNameid.setTextContent(assertionNameID);						
//Added This: If We need To give the Invalid NameId in the RSaml Response

						//subjectNameid.setTextContent("urn:dece:userid:org:dece:BBBBBBBBBBBBBBB");
					}
					/*
					* saml2:SubjectConfirmation
					*/
					if (subjectNameid.getNodeName() == "saml2:SubjectConfirmation" && 
						subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
						Node subjectConfirmation;
						NodeList subjectConfirmationList = subjectNameid.getChildNodes();

						for (int b=0; b < subjectConfirmationList.getLength(); b++) {
							subjectConfirmation = subjectConfirmationList.item(b); 
							
							if (subjectConfirmation.getNodeName() == "saml2:SubjectConfirmationData" && 
								subjectNameid.getNodeType() == Node.ELEMENT_NODE) {
									if (subjectConfirmation.hasAttribute("NotOnOrAfter")) {
										/*
										*  Set the attribute to the save value as the dece
										*  assertion
										*/
										subjectNameid.setAttribute("NotOnOrAfter",assertionNotAfter);
									}
									/*
									* SubjectConfirmation attribute
									*/
									if (tC.getPropertyValue("actionSubjectConfirmationIDP").toString() == "present") {
										log.info "YEAH! - name is " + subjectConfirmation.getNodeName();
										subjectConfirmation.setAttribute("InResponseTo","_suzycupcake1000");
									}
							}
						}
					}
				}
			}
			/*
			* saml2:Conditions 
			*/
			if (aan.getNodeName() == "saml2:Conditions" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
				Node AudienceRestriction;
				NodeList ipdConditionsList = aan.getChildNodes();
				
				if (aan.hasAttribute("NotBefore")) {
					
					switch(tC.getPropertyValue("actionNotBeforeIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotBefore","");
							break;
						case "isBefore":
							aan.setAttribute("NotBefore","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotBefore","2012-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotBefore",assertionNotBefore);
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotBefore","2013-03-13T01:52:52.741Z");
							break;
					}	
				}
				if (aan.hasAttribute("NotOnOrAfter")) {	
					
					switch(tC.getPropertyValue("actionNotOnOrAfterIDP").toString()) {
						case "toNULL":
							aan.setAttribute("NotOnOrAfter","");
							break;
						case "isBefore":
							aan.setAttribute("NotOnOrAfter","2011-07-11T19:53:01.002Z");
							break;
						case "isAfter":
							aan.setAttribute("NotOnOrAfter","2014-07-11T19:53:01.002Z");
							break;
						default:
							aan.setAttribute("NotOnOrAfter",assertionNotAfter);	
//Added This: If We need to get the Failer to check the InResponseTo and the ID in the assertion Response Use the below one

							//aan.setAttribute("NotOnOrAfter","2013-03-27T01:52:52.741Z");							
							break;
					}
					
				}
				/*
				*  AudienceRestriction
				*/
				for (int rr=0; rr < ipdConditionsList.getLength(); rr++) {
					AudienceRestriction = ipdConditionsList.item(rr); 

					if (AudienceRestriction.getNodeName() == "saml2:AudienceRestriction") {
						Node AudienceIDP;
						NodeList ipdAudienceList = AudienceRestriction.getChildNodes();
						Boolean hitone = false;
						switch(tC.getPropertyValue("actionAudienceRestrictionIDP").toString()) {
							case "none":
								aan.removeChild(AudienceRestriction);
								break;
							case "coordinator":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent(tP.getPropertyValue("urnCoodinator").toString());
											hitone = true;
										}
									}
								}
								break;
							case "nonexistent":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										if (hitone) {
											AudienceIDP.removeChild("saml2:Audience");
										} else {
											AudienceIDP.setTextContent("urn:dece:org:mesume:notthere");
											hitone = true;
										}
									}
								}
								break;
							case "nullAudience":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								break;
							case "morethanone":
								for (int vv=0; vv < ipdAudienceList.getLength(); vv++) {
									AudienceIDP = ipdAudienceList.item(vv);
									if (AudienceIDP.getNodeName() == "saml2:Audience") {
										ipdAudienceList.removeChild(AudienceIDP);
									}
								}
								Element audienceNode1 = idpdoc.createElement("saml2:Audience");
								Text audienceText1 = idpdoc.createTextNode("poopy:pants:slappy:boyman");
								audienceNode1.appendChild(audienceText1);
								AudienceRestriction.appendChild(audienceNode1);
								
								Element audienceNode2 = idpdoc.createElement("saml2:Audience");
								Text audienceText2 = idpdoc.createTextNode(tP.getPropertyValue("urnCoodinator").toString());
								audienceNode2.appendChild(audienceText2);
								AudienceRestriction.appendChild(audienceNode2);
								break;
						}
					}
				}
			}
			/*
			* saml2:AuthnStatement 
			*/
			if (aan.getNodeName() == "saml2:AuthnStatement" && 
				aan.getNodeType() == Node.ELEMENT_NODE) {
					/*
					*	SessionIndex
					*/
					if (aan.hasAttribute("SessionIndex")) {	
						aan.setAttribute("SessionIndex",sessionIndex);
					}
					/*
					*	SessionNotOnOrAfter
					*/
					if (aan.hasAttribute("SessionNotOnOrAfter")) {	
						switch(tC.getPropertyValue("actionSessionNotOnOrAfterIDP").toString()) {
							case "toNULL":
								aan.setAttribute("SessionNotOnOrAfter","");
								break;
							case "remove":
								aan.removeAttribute("SessionNotOnOrAfter");
								break;
							case "isBefore":
								aan.setAttribute("SessionNotOnOrAfter","2011-07-11T19:53:01.002Z");
								break;
							case "isAfter":
								aan.setAttribute("SessionNotOnOrAfter","2024-07-11T19:53:01.002Z");
								break;
							default:
								aan.setAttribute("SessionNotOnOrAfter",assertionNotAfter);
								break;
						}
					}
				
			}
		}
	}
}

/*
*  Construct the URI xml
*/
Node uriNode = uridoc.getFirstChild();
Node idpAssertionXML = uriNode;
if (uriNode.getNodeName() == "saml2:AssertionURIRef") {
	uriNode.setTextContent(assertionURIRefSP);
}



/*
*  Output the resulting IPDxml to a string
*/
TransformerFactory factory = TransformerFactory.newInstance();
Transformer transformer = factory.newTransformer();
StringWriter writer = new StringWriter();
Result result = new StreamResult(writer);
Source source = new DOMSource(idpdoc);
transformer.transform(source, result);
String xml = writer.toString();
writer.close();
tC.setPropertyValue("idpAssertionXML",xml);





/*
*  Output the resulting DECEAssertion to a string
*/
StringWriter sw = new StringWriter();
Transformer t = TransformerFactory.newInstance().newTransformer();
t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
t.transform(new DOMSource(deceassertionxml), new StreamResult(sw));
xml2 = sw.toString();
sw.close();
tC.setPropertyValue("deceAssertionXML",xml2);

/*
*  Output the assertionURIFrefxml to a string
*/
StringWriter writeruri = new StringWriter();
t.transform(new DOMSource(idpAssertionXML), new StreamResult(writeruri));
xmlAssertionURI = writeruri.toString();
writeruri.close();
tC.setPropertyValue("uriAssertionXML",xmlAssertionURI);

if (tC.getPropertyValue("actionDoURIRef").toString() == "true") {
	xml3 = xml.replace("%%REPLACEME%%", xmlAssertionURI);
} else {
	xml3 = xml.replace("%%REPLACEME%%", xml2);
}

tC.setPropertyValue("samlResponseXML",xml3);
tC.setPropertyValue("assertionXMLnode",xml3);

/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
    bwriter = new BufferedWriter(new FileWriter(outFile));  
}
catch (IOException e) {
    e.printStackTrace();
} 

try {
    bwriter.write(xml3.toString());
}
catch(IOException e) {
    e.printStackTrace();
}

try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}

log.info xml3.toString();








]]></script></con:config></con:testStep><con:testStep type="groovy" name="Create XML Signature"><con:settings/><con:config><script>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.Collections;
import java.lang.Object;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import javax.xml.transform.*;
import java.security.cert.X509Certificate;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;


import javax.xml.crypto.Data;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.NoSuchMechanismException;
import javax.xml.crypto.URIDereferencer;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMStructure;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.spec.*;
import javax.xml.crypto.dsig.keyinfo.*;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.XMLDSigSecurity;
import javax.xml.crypto.dsig.XMLObject;
import javax.xml.crypto.dsig.XMLSignContext;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureException;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.XMLValidateContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;


def keyStoreAlias = context.expand( '${#Project#KeyStoreAlias}' );
def keyStorePassword = context.expand('${#Project#KeyStorePassword}');

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

//import org.apache.xml.security.signature.SignedInfo;
import javax.xml.crypto.dsig.*;

String myKeyStore  = tP.getPropertyValue("fileNameKeystore").toString();
String samlResponseFile = tP.getPropertyValue("fileSamlResponseXML").toString();
String signedsamlResponseFile = tP.getPropertyValue("fileSamlResponseSigned").toString();

log.info "samlResponseFile[$samlResponseFile]";
log.info "signedsamlResponseFile[$signedsamlResponseFile]";
log.info "myKeyStore[$myKeyStore]";

// Create a DOM XMLSignatureFactory that will be used to
// generate the enveloped signature.
XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM");

// Create a Reference to the enveloped document (in this case,
// you are signing the whole document, so a URI of "" signifies
// that, and also specify the SHA1 digest algorithm and
// the ENVELOPED Transform.
Reference ref = fac.newReference("", fac.newDigestMethod(DigestMethod.SHA1, null),  Collections.singletonList
   (fac.newTransform (Transform.ENVELOPED, (TransformParameterSpec) null)), null, null);

  
// Create the SignedInfo.
SignedInfo si = fac.newSignedInfo(fac.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,(C14NMethodParameterSpec) null),
    fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null), Collections.singletonList(ref));

// Load the KeyStore and get the signing key and certificate.
KeyStore ks = KeyStore.getInstance("JKS");

ks.load(new FileInputStream(myKeyStore), "$keyStorePassword".toCharArray());

KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("$keyStoreAlias", new KeyStore.PasswordProtection("$keyStorePassword".toCharArray()));
// Done Changing

X509Certificate cert = (X509Certificate) keyEntry.getCertificate();

// Create the KeyInfo containing the X509Data.
KeyInfoFactory kif = fac.getKeyInfoFactory();
List x509Content = new ArrayList();
x509Content.add(cert.getSubjectX500Principal().getName());
x509Content.add(cert);
X509Data xd = kif.newX509Data(x509Content);
KeyInfo  ki = kif.newKeyInfo(Collections.singletonList(xd));


// Instantiate the document to be signed.
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setNamespaceAware(true);
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
//Document doc = dbf.newDocumentBuilder().parse (new FileInputStream(samlResponseFile));
log.info "DocumentBuilderFactory -- samlResponseFile[$samlResponseFile]";
Document doc = dbf.newDocumentBuilder().parse(samlResponseFile);

// Create a DOMSignContext and specify the RSA PrivateKey and
// location of the resulting XMLSignature's parent element.
DOMSignContext dsc = new DOMSignContext(keyEntry.getPrivateKey(), doc.getDocumentElement());

// Create the XMLSignature, but don't sign it yet.
XMLSignature signature = fac.newXMLSignature(si, ki);

// Marshal, generate, and sign the enveloped signature.
signature.sign(dsc);

// Output the resulting document.
OutputStream os = new FileOutputStream(signedsamlResponseFile);
TransformerFactory tf = TransformerFactory.newInstance();
Transformer trans = tf.newTransformer();
trans.transform(new DOMSource(doc), new StreamResult(os));






</script></con:config></con:testStep><con:testStep type="groovy" name="Base64 Encoding the AuthN request xml"><con:settings/><con:config><script>import java.net.URLEncoder;
import org.opensaml.xml.util.*;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("samlResponseJustBase64", null);

String signedSamlResponse = tP.getPropertyValue("fileSamlResponseSigned");

file = new File(signedSamlResponse);
InputStream inputStream = new FileInputStream(file);

long length = file.length();

byte[] bytes = new byte[(int)length]; 
int offset  = 0; 
int numRead = 0; 
while (offset &lt; bytes.length &amp;&amp; (numRead=inputStream.read(bytes, offset, bytes.length-offset)) >= 0) 
{ 
	offset += numRead; 
}
if (offset &lt; bytes.length) { 
	throw new IOException("Could not completely read file "+file.getName()); 
}
inputStream.close();



//String base64Str = URLEncoder.encode(Base64.encodeBytes(bytes));
String base64Str = Base64.encodeBytes(bytes);
String samlResponseurlencoded = URLEncoder.encode(base64Str);

tC.setPropertyValue("samlResponse", samlResponseurlencoded);
tC.setPropertyValue("samlResponseJustBase64", base64Str);
</script></con:config></con:testStep><con:testStep type="groovy" name="Create the ReverseSAML.html Page"><con:settings/><con:config><script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String outfile = tP.getPropertyValue("fileReverseSamlPage").toString();
String token = tC.getPropertyValue("samlResponseJustBase64").toString();

//////Added this for the shost////////

String pagey = """<html><head><script type = "text/javascript">
function onLoad(){document.getElementById('form').submit();}</script></head><body><form name="form" 
action="https://""" + tP.getPropertyValue("targetHostportal") + ":" + tP.getPropertyValue("targetPortportal") + """/security/federation/saml/acs" method="post"> <input name="SAMLResponse" type="hidden" value="%%REPLACEME%%"/><input type="submit" value="send"></form></body>
""";

assert token.length() > 0;
assert outfile.length() > 0;
assert pagey.length() > 0;

pagey = pagey.replaceAll("%%REPLACEME%%",token);

/*
*  Write the page
*/
/*
*  Write authnrequest to a file
*/

BufferedWriter bwriter = null;

try {
	log.info "Opening file: $outfile";
    bwriter = new BufferedWriter(new FileWriter(outfile));  
}
catch (IOException e) {
    e.printStackTrace();
} 
try {
    bwriter.write(pagey);
}
catch(IOException e) {
    e.printStackTrace();
}
try {
    bwriter.close();
}
catch(IOException e) {
    e.printStackTrace();
}









]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RSAML_POST" disabled="true"><con:settings/><con:config service="RSAML ACS" resourcePath="/security/federation/saml/acs" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RSAML_POST" mediaType="application/xml" postQueryString="false" id="fdd12d35-4d7f-420a-9536-3de85166ed58" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://${#Project#targetHostportal}:${#Project#targetPortportal}</con:endpoint><con:request>SAMLResponse=${#TestCase#samlResponseJustBase64}</con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value>shikha_user_create_accp_test_20131119_11184</con:value></con:property><con:property><con:name>uriAssertionXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>stsaudience</con:name><con:value>urn:dece:org:org:dece:DSP;urn:dece:org:org:dece:LLASP</con:value></con:property><con:property><con:name>sessionIndex</con:name><con:value>D1B95A1243C3FFFC14E2BAFF1271A9E78E2</con:value></con:property><con:property><con:name>samlResponseXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="e52c7a5f-36d0-4417-888d-079cb2fa3d4d" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-19T22:18:05.225Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_0aa8a454-33ab-4704-9e50-4f6d5a939dac" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0aa8a454-33ab-4704-9e50-4f6d5a939dac">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tK3ocQ2SadsTFPl+/aADclL6v+8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
I6ItXYyF9UC8Lc1uPULlcxUOl8YiiCnft+IkDhzZS6LnVFJ6PLxSdaV/Zv9USrSXwKZ3u000+If0
WxhqDcYu+f4EPP4WHyEypVNl1g2uPFLNWbjWjQZ9ML7sVG52rhBG3HGojv3Ny4jDBfxaPS3Ogomo
30u0g9byh+YzWEewnJw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5BCAA6BFD666C97204058AF3E978BC1" NotOnOrAfter="2013-11-19T19:18:05.225Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-19T16:18:05.225Z" SessionIndex="_0aa8a454-33ab-4704-9e50-4f6d5a939dac"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="D1B95A1243C3FFFC14E2BAFF1271A9E78E2" SessionNotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>samlResponseJustBase64</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht
bG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50
PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249
Imh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi
IElEPSJlNTJjN2E1Zi0zNmQwLTQ0MTctODg4ZC0wNzljYjJmYTNkNGQiIElzc3VlSW5zdGFudD0i
MjAxMy0xMS0xOVQxNjoxODowNS4yMjVaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg
eG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk
ZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM+
ICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj
Lm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI+aHR0cHM6Ly93d3cud2VsbHNmYXJnby5j
b20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0
dHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPnVybjpkZWNl
OnBvcnRhbDp1c2VyOnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpBQUFBQUFBQUFBQUFBQUFBQUFB
QUFBQTwvZGVjZTpUYXJnZXRVUkw+ICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0
YXR1cz4gICAgIDxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNB
TUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+ICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3Nl
cnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24i
IElEPSI2YmExNjdmYy1hYWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0i
MjAxMy0xMS0xOVQxNjoxODowNS4yMjVaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vl
cj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUg
eG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6
U2lnbmVkSW5mbz4gICAgICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09
Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpT
aWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRz
aWcjcnNhLXNoYTEiLz4gICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMt
NDhlZi04ZjYxLWZiNTJiYTNmMWYxYSI+ICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAg
ICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv
eG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+ICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0g
QWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAg
ICAgICAgICAgIDxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv
PiAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4g
ICAgICAgICAgIDxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8y
MDAwLzA5L3htbGRzaWcjc2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRz
aklxSklaSklVdGVXNS83M3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJl
bmNlPiAgICAgICA8L2RzOlNpZ25lZEluZm8+ICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVha
RzFvM1R3dm5sajlQalc0WUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051
QnY5OGxHMHJtdEZKaG83IHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFq
b2JUeU1ScDhjb1VwTC9sdWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08
L2RzOlNpZ25hdHVyZVZhbHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURh
dGE+ICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1Nx
R1NJYjNEUUVCQlFVQU1Hb3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVw
WVRFUk1BOEdBMVVFQnhNSVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpC
Z05WQkFzVEFsRkJNUll3RkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05q
SXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdO
VkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJs
WTJVNmIzSm5PbTl5Wnpwa1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVa
WFZ6ZEdGeUxtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFM
TUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBH
d0dSRGZpUW03OFlKdHlVMHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6
bHhVZjd2VDh5enMwWmwxVkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFS
OXFjVmMvZkdTVDZCQndtamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJi
L0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtT
Tkl6UFk2U3B0dnhMYUJuVCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVL
VFlUanA0Slc3TFR1VElnN1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hV
QStrQUNDZk9BK3BpWGdLMGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllE
OU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThq
TTJlS1gzckxFZ21UK01BQWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9P
YTgvazVCa21QdDdGZXFZWU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMy
K0RrNkgxR3RMVGVPVkkzWW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFn
TUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZM
SlR6UFh5bm5zbXFWUzlja3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFI
aVkxeDBMalVsYkQrS0lmUVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2
TkpVWkhXNHNaMFEwWUFqTTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAg
ICAgIDwvZHM6WDUwOURhdGE+ICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJl
PiAgICAgPHNhbWwyOlN1YmplY3Q+ICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz
aXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1
c2VyaWQ6b3JnOmRlY2U6RUI4OUREQjgxNEQwNzU3MEUwNDAxRjBBMDU5OTFDMUQ8L3NhbWwyOk5h
bWVJRD4gICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6
bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTMtMTEtMTlUMjI6
MTg6MDUuMjI1WiI+ICAgICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9u
T3JBZnRlcj0iMjAxMS0wOC0xOFQxNTozMjoxOC4xMTlaIi8+ICAgICAgIDwvc2FtbDI6U3ViamVj
dENvbmZpcm1hdGlvbj4gICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25z
IE5vdEJlZm9yZT0iMjAxMy0xMS0xOVQxNjoxNzo1NS4yMjVaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt
MTEtMTlUMjI6MTg6MDUuMjI1WiI+ICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAg
ICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpB
dWRpZW5jZT4gICAgICAgPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpD
b25kaXRpb25zPiAgICAgPHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMGFhOGE0
NTQtMzNhYi00NzA0LTllNTAtNGY2ZDVhOTM5ZGFjIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMTlU
MTY6MTg6MDUuMjI1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2Vs
bGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6
YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMt
YzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn
LzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI18wYWE4YTQ1
NC0zM2FiLTQ3MDQtOWU1MC00ZjZkNWE5MzlkYWMiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5z
Zm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w
ZWQtc2lnbmF0dXJlIi8+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVj
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRz
IHNhbWwyIHhzIi8+PC9kczpUcmFuc2Zvcm0+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1l
dGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+
CjxkczpEaWdlc3RWYWx1ZT50SzNvY1EyU2Fkc1RGUGwrL2FBRGNsTDZ2Kzg9PC9kczpEaWdlc3RW
YWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVl
PgpJNkl0WFl5RjlVQzhMYzF1UFVMbGN4VU9sOFlpaUNuZnQrSWtEaHpaUzZMblZGSjZQTHhTZGFW
L1p2OVVTclNYd0taM3UwMDArSWYwCld4aHFEY1l1K2Y0RVBQNFdIeUV5cFZObDFnMnVQRkxOV2Jq
V2pRWjlNTDdzVkc1MnJoQkczSEdvanYzTnk0akRCZnhhUFMzT2dvbW8KMzB1MGc5YnloK1l6V0Vl
d25Kdz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPC9kczpTaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+
PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQt
Zm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpFQjg5RERCODE0RDA3
NTcwRTA0MDFGMEEwNTk5MUMxRDwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0
aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOnNlbmRlci12b3VjaGVz
Ij48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfQzVCQ0FBNkJG
RDY2NkM5NzIwNDA1OEFGM0U5NzhCQzEiIE5vdE9uT3JBZnRlcj0iMjAxMy0xMS0xOVQxOToxODow
NS4yMjVaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0
ODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiLz48L3Nh
bWwyOlN1YmplY3RDb25maXJtYXRpb24+PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25z
IE5vdEJlZm9yZT0iMjAxMy0xMS0xOVQxNjoxNzo1NS4yMjVaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt
MTEtMTlUMjI6MTg6MDUuMjI1WiI+PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PHNhbWwyOkF1
ZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpEU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpB
dWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6TExBU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1s
MjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3Nh
bWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24+PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U+
PHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEv
MDcvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vXzBhYThhNDU0LTMzYWItNDcwNC05ZTUwLTRmNmQ1
YTkzOWRhYzwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRo
blN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTMtMTEtMTlUMTY6MTg6MDUuMjI1WiIgU2Vzc2lv
bkluZGV4PSJfMGFhOGE0NTQtMzNhYi00NzA0LTllNTAtNGY2ZDVhOTM5ZGFjIj48c2FtbDI6QXV0
aG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6
U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+
PHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29y
ZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+PC9zYW1sMjpBdXRobkNvbnRl
eHQ+PC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1s
MjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFj
Y291bnRJRCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+dXJuOmRlY2U6YWNjb3VudGlkOm9y
ZzpkZWNlOkVCODlEREI4MTRDMjc1NzBFMDQwMUYwQTA1OTkxQzFEPC9zYW1sMjpBdHRyaWJ1dGVW
YWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwy
OkFzc2VydGlvbj48L3NhbWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo
bkluc3RhbnQ9IjIwMTEtMDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSJEMUI5NUEx
MjQzQzNGRkZDMTRFMkJBRkYxMjcxQTlFNzhFMiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxMy0x
MS0xOVQyMjoxODowNS4yMjVaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8
c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY+dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFj
OmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxz
YW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGlu
YXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk+ICAgICAgIDwvc2FtbDI6QXV0aG5D
b250ZXh0PiAgICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4g
PFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PFNp
Z25lZEluZm8+PENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3Lncz
Lm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVm
ZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9y
bXM+PERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1s
ZHNpZyNzaGExIi8+PERpZ2VzdFZhbHVlPlFGdTJTbTFlYUNoT1dYclNlYXhwaUwxWFZtND08L0Rp
Z2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+UnpzZDNL
UmxBOUtmOVkwZGN3UWI3UkhaU2dEMzdtNnR4aTZ3Ri9qSVFCcysyQjhmUzJOQ1psMytsN21abWxk
c0dMbkFrZ1RIV1VKQgo4dzNvNXp4aSttZW5KMG1JdUlKZmJxTDQ5a01VRGw5SkhoUlJ2TE9TRHE1
c05KOEhGc2dkWUxHa09ncmdia3BLbE52TS9xaEcxUHF5CmppeW0wZURQQ2RRTXRObUlYM0hOREtr
QlBpajliNG1YdmRISmlWZGZFZ0U0TGVXd3BlNC9iTVNtVnBDTjR5dlY1dlZkY0pWY0ZjY1UKRTZl
WkRLOHo3RFNQdmhGYy8wSzRMbktVVmFId1Q2ZnZPT1k2eEdBVTg2b3RjRTNsRDluNTY0eGRZTFNq
WUxuSGpndzZLVkxIc3E1dgp4cDJsVmlKenJQblFGUUhiQ3JtMVYvUzN1MTZQcEFOdzVkdHBWMjNY
UWlxR3dnUHBkN2hCMVlhYktOZHV0RC8zWjhJWGJ5MDV5S0tXCnE0Vis0K2tUQktMa2RseWNydUJa
Y2lVc1JWd2I4RXNzMTFLenhNREszNENISXBaSm1Rc3ZSNG0xclp0dEhYb0xYTUZjd0dmNkRTb1cK
OEhKbVpWMTJ1ZXRiUkJhTmhxdko0N1BYc3RUZ0VlVzR6Z2t2dHhiMlQvMFNWNUtpYlYyUXE3SDNY
Mkk0UWl6Z2Vhbk5kYTduZHNQTgpSRVJYQlJRRVVJRDltRTN5WFpTUVA5WjI1WEcwYXJDbzc4cWRW
T1dtVndvZExHK3ZHN1RpaWU2SkswRm9reVFCekc0djNhR1V1djBYCk9XcWRBZHdDTDFBbVFBQUI2
amthZFlrdThZSUpQdGd0S1RBSUZFKzIvRFNHVURDRk8vRlhLcXBmdWx0QzFneDJYOEw5MEIrMWhG
TT08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEu
Mi44NDAuMTEzNTQ5LjEuOS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENO
PXVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3Vi
amVjdE5hbWU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFF
QkJRVUFNR294RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZ
RFZRUUhFd2hUZEdWeWJHbHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlU
QWxWVE1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5
TUZvWERURTRNRFV5T1RFME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdU
QWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2
YjNKbk9tOXlaenBrWldObE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZ
WEl1WTI5dE1JSUMKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYr
bE5UUVJZZGx2VFNCeEVaeFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2Vk
V25KZUFoQlZ5TXh1SWJnM1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJz
Nm4yQXBKc3BIRTc5b0FNSDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBj
eXNoczF2SERYWmE2T2wKSy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZD
SEtyeGNIb2JzMmx1aTlxb2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtE
bnB6ZHZMR1VLaisvbXJOc1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUy
eWMrLzFTYWpsZlpKRGpEa1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZP
WUZzTVhVeGJpUk5Zd0p5QncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdU
clBtN0kxY3MyR1BBOTZjUzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNF
bkZTcDZEQmp2cEVZbUt3cldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hO
CkxlT2t2ZlF3QTU0QWJ3bS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0
cWllTHgvVnZjMW9tdUxiTGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFS
WXEwQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCsw
NnpnTkpmUFhwRGQ1dFBXRmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhF
M2RhClViL2pYNjFOUkFHeE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtu
UlBkV2kyQ0FrOVRoaFZ2OCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRl
PjwvWDUwOURhdGE+PC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg==</con:value></con:property><con:property><con:name>samlResponse</con:name><con:value>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOlJlc3BvbnNlIHht%0AbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIiBDb25zZW50%0APSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDpwcmlvciIgRGVzdGluYXRpb249%0AImh0dHBzOi8vcWEucy51dnZ1LmNvbTo3MDAxL3NlY3VyaXR5L2ZlZGVyYXRpb24vc2FtbC9hY3Mi%0AIElEPSJlNTJjN2E1Zi0zNmQwLTQ0MTctODg4ZC0wNzljYjJmYTNkNGQiIElzc3VlSW5zdGFudD0i%0AMjAxMy0xMS0xOVQxNjoxODowNS4yMjVaIiBWZXJzaW9uPSIyLjAiPiAgIDxzYW1sMjpJc3N1ZXIg%0AeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpk%0AZWNlOm9yZzpvcmc6ZGVjZTpSRVQ8L3NhbWwyOklzc3Vlcj4gICA8c2FtbDJwOkV4dGVuc2lvbnM%2B%0AICAgICAgICAgPGRlY2U6UmV0dXJuVG9VUkkgeG1sbnM6ZGVjZT0iaHR0cDovL3d3dy5kZWNlbGxj%0ALm9yZy9zY2hlbWEvMjAxMy8xMC9jb29yZGluYXRvciI%2BaHR0cHM6Ly93d3cud2VsbHNmYXJnby5j%0Ab20vPC9kZWNlOlJldHVyblRvVVJJPiAgICAgPGRlY2U6VGFyZ2V0VVJMIHhtbG5zOmRlY2U9Imh0%0AdHA6Ly93d3cuZGVjZWxsYy5vcmcvc2NoZW1hLzIwMTMvMTAvY29vcmRpbmF0b3IiPnVybjpkZWNl%0AOnBvcnRhbDp1c2VyOnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpBQUFBQUFBQUFBQUFBQUFBQUFB%0AQUFBQTwvZGVjZTpUYXJnZXRVUkw%2BICAgPC9zYW1sMnA6RXh0ZW5zaW9ucz4gICA8c2FtbDJwOlN0%0AYXR1cz4gICAgIDxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNB%0ATUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8%2BICAgPC9zYW1sMnA6U3RhdHVzPiAgIDxzYW1sMjpBc3Nl%0AcnRpb24geG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24i%0AIElEPSI2YmExNjdmYy1hYWUzLTQ4ZWYtOGY2MS1mYjUyYmEzZjFmMWEiIElzc3VlSW5zdGFudD0i%0AMjAxMy0xMS0xOVQxNjoxODowNS4yMjVaIiBWZXJzaW9uPSIyLjAiPiAgICAgPHNhbWwyOklzc3Vl%0Acj5odHRwOi8vYy5kZWNlbGxjLmNvbS88L3NhbWwyOklzc3Vlcj4gICAgIDxkczpTaWduYXR1cmUg%0AeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPiAgICAgICA8ZHM6%0AU2lnbmVkSW5mbz4gICAgICAgICA8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09%0AImh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPiAgICAgICAgIDxkczpT%0AaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRz%0AaWcjcnNhLXNoYTEiLz4gICAgICAgICA8ZHM6UmVmZXJlbmNlIFVSST0iIzZiYTE2N2ZjLWFhZTMt%0ANDhlZi04ZjYxLWZiNTJiYTNmMWYxYSI%2BICAgICAgICAgICA8ZHM6VHJhbnNmb3Jtcz4gICAgICAg%0AICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkv%0AeG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm0g%0AQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPiAgICAg%0AICAgICAgICAgIDxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVjPSJodHRwOi8vd3d3Lncz%0ALm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRzIHNhbWwyIHhzIHhzaSIv%0APiAgICAgICAgICAgICA8L2RzOlRyYW5zZm9ybT4gICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4g%0AICAgICAgICAgIDxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8y%0AMDAwLzA5L3htbGRzaWcjc2hhMSIvPiAgICAgICAgICAgPGRzOkRpZ2VzdFZhbHVlPjJUNXVCNDRz%0AaklxSklaSklVdGVXNS83M3NkMD08L2RzOkRpZ2VzdFZhbHVlPiAgICAgICAgIDwvZHM6UmVmZXJl%0AbmNlPiAgICAgICA8L2RzOlNpZ25lZEluZm8%2BICAgICAgIDxkczpTaWduYXR1cmVWYWx1ZT5JZVha%0ARzFvM1R3dm5sajlQalc0WUxtbDlxd0k5Qkw3Y2gydXorRDRubk4rdmd1amRQZUtJUVpPS2x1Y051%0AQnY5OGxHMHJtdEZKaG83IHNDejNSZk1xYUpzejJjUUhzdklFRjc1b1IyTnN3NENseE9hdDI2ZTFq%0Ab2JUeU1ScDhjb1VwTC9sdWxnaEZWc2ExaTJlaWlMWlNUWEcgaUs4RHk4TUhFSytzazNGbS9Qdz08%0AL2RzOlNpZ25hdHVyZVZhbHVlPiAgICAgICA8ZHM6S2V5SW5mbz4gICAgICAgICA8ZHM6WDUwOURh%0AdGE%2BICAgICAgICAgICA8ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUQwRENDQXprQ0FnRERNQTBHQ1Nx%0AR1NJYjNEUUVCQlFVQU1Hb3hDekFKQmdOVkJBWVRBbFZUTVJFd0R3WURWUVFJRXdoV2FYSm5hVzVw%0AWVRFUk1BOEdBMVVFQnhNSVUzUmxjbXhwYm1jeEVEQU9CZ05WQkFvVEIwNWxkWE4wWVhJeEN6QUpC%0AZ05WQkFzVEFsRkJNUll3RkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV5TURrd05q%0ASXdORGMxTVZvWERURXpNRGt3TmpJd05EYzFNVm93Y2pFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdO%0AVkJBZ1RBbFpCTVJFd0R3WURWUVFIRXdoVGRHVnliR2x1WnpFak1DRUdBMVVFQXhNYWRYSnVPbVJs%0AWTJVNmIzSm5PbTl5Wnpwa1pXTmxPalF3TkRBeEhqQWNCZ2txaGtpRzl3MEJDUUVXRDJadmIwQnVa%0AWFZ6ZEdGeUxtTnZiVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFM%0ATUV4c3VlaGlJRGlna1ZrVFVKVXJUQmdLUXpEOXhTTWIrZ2dUVTdmUG9oWWJaS2M2ZVcxV2NCeVBH%0Ad0dSRGZpUW03OFlKdHlVMHJaeXVEMUcyZlB1blFOTVkwZlJ4akFPb1R5aXlQaUljazZ0NWhUWGZ6%0AbHhVZjd2VDh5enMwWmwxVkdIbFRDVGVNRGl5TlI5QWovNWxDVzUxYlphWUNVMkdYV2VUVnF5cmFS%0AOXFjVmMvZkdTVDZCQndtamFQV2M5RDlxM1pLbkZKWWxSSUlOK0E5NGpkKzZzbngzTzluQithQVJi%0AL0FEbDY0WFdUQzE0UEhYTFMzaXdITTlBK2trYlh1RU1BWUdIck4vZ2pqcGc2cVgyQjYySnVmMCtT%0ATkl6UFk2U3B0dnhMYUJuVCtlV3g2elplTmlmMENMWU01ZWwwdDAvNVhMclVtWlZhV2dLREF0UGVL%0AVFlUanA0Slc3TFR1VElnN1F4cUJEMWlUdWFFT3owSFhONG1TOWU0YzhSQWplOEFEUXhodTBxL0hV%0AQStrQUNDZk9BK3BpWGdLMGxnZ1ZlOER2cGJkUk5FN0t3dnVZMlVmbkZUYXJSOFlWS3EvSDF5WllE%0AOU5aYkV0YURaelpCN2lZbllmVlI4eEJ4cWt2UEhUbGV6VmY2Mk1XdlRhc0YyQlRxVnVrR3JvQThq%0ATTJlS1gzckxFZ21UK01BQWlhcitVRTNjZlJaQXMyQlZ2bXc5N1N0MlVOd1pwVmlZeE1CbzdQdi9P%0AYTgvazVCa21QdDdGZXFZWU5KL1Y4VmEyUmpzRjNNbkdqQjVleTNlSG9qSjIxbXBCelRUY1kwSVMy%0AK0RrNkgxR3RMVGVPVkkzWW5tQW11T2NIVFdZTnRjaEtBTnBHdXZmdTlRYnA1UnEzbzU2RVhCbEFn%0ATUJBQUV3RFFZSktvWklodmNOQVFFRkJRQURnWUVBbFhLSVdvU0VodFgxY2JjZUlSU1REYWt6cVZM%0ASlR6UFh5bm5zbXFWUzlja3IvdCtCYTNsNGJtUDN2d0pUdytDelErSFdiVUdCVWpLQnlPL2wxdEFI%0AaVkxeDBMalVsYkQrS0lmUVB5d2gyZll1a3FiYlhHSTdqSTFHQVo0SUw4VzF4L1AzV3lxLzUyU0o2%0ATkpVWkhXNHNaMFEwWUFqTTFSeFRHQ1lIcjg4eFNnPTwvZHM6WDUwOUNlcnRpZmljYXRlPiAgICAg%0AICAgIDwvZHM6WDUwOURhdGE%2BICAgICAgIDwvZHM6S2V5SW5mbz4gICAgIDwvZHM6U2lnbmF0dXJl%0APiAgICAgPHNhbWwyOlN1YmplY3Q%2BICAgICAgIDxzYW1sMjpOYW1lSUQgRm9ybWF0PSJ1cm46b2Fz%0AaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDpwZXJzaXN0ZW50Ij51cm46ZGVjZTp1%0Ac2VyaWQ6b3JnOmRlY2U6RUI4OUREQjgxNEQwNzU3MEUwNDAxRjBBMDU5OTFDMUQ8L3NhbWwyOk5h%0AbWVJRD4gICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6%0AbmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIiBOb3RPbk9yQWZ0ZXI9IjIwMTMtMTEtMTlUMjI6%0AMTg6MDUuMjI1WiI%2BICAgICAgICAgPHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9u%0AT3JBZnRlcj0iMjAxMS0wOC0xOFQxNTozMjoxOC4xMTlaIi8%2BICAgICAgIDwvc2FtbDI6U3ViamVj%0AdENvbmZpcm1hdGlvbj4gICAgIDwvc2FtbDI6U3ViamVjdD4gICAgIDxzYW1sMjpDb25kaXRpb25z%0AIE5vdEJlZm9yZT0iMjAxMy0xMS0xOVQxNjoxNzo1NS4yMjVaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt%0AMTEtMTlUMjI6MTg6MDUuMjI1WiI%2BICAgICAgIDxzYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAg%0AICAgICAgIDxzYW1sMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6MTI0PC9zYW1sMjpB%0AdWRpZW5jZT4gICAgICAgPC9zYW1sMjpBdWRpZW5jZVJlc3RyaWN0aW9uPiAgICAgPC9zYW1sMjpD%0Ab25kaXRpb25zPiAgICAgPHNhbWwyOkFkdmljZT48c2FtbDI6QXNzZXJ0aW9uIElEPSJfMGFhOGE0%0ANTQtMzNhYi00NzA0LTllNTAtNGY2ZDVhOTM5ZGFjIiBJc3N1ZUluc3RhbnQ9IjIwMTMtMTEtMTlU%0AMTY6MTg6MDUuMjI1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyPmh0dHA6Ly9jLmRlY2Vs%0AbGMuY29tLzwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cu%0AdzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6%0AYXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMt%0AYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3Jn%0ALzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI18wYWE4YTQ1%0ANC0zM2FiLTQ3MDQtOWU1MC00ZjZkNWE5MzlkYWMiPgo8ZHM6VHJhbnNmb3Jtcz4KPGRzOlRyYW5z%0AZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9w%0AZWQtc2lnbmF0dXJlIi8%2BCjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9y%0AZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIHhtbG5zOmVj%0APSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIFByZWZpeExpc3Q9ImRz%0AIHNhbWwyIHhzIi8%2BPC9kczpUcmFuc2Zvcm0%2BCjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1l%0AdGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2B%0ACjxkczpEaWdlc3RWYWx1ZT50SzNvY1EyU2Fkc1RGUGwrL2FBRGNsTDZ2Kzg9PC9kczpEaWdlc3RW%0AYWx1ZT4KPC9kczpSZWZlcmVuY2U%2BCjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVl%0APgpJNkl0WFl5RjlVQzhMYzF1UFVMbGN4VU9sOFlpaUNuZnQrSWtEaHpaUzZMblZGSjZQTHhTZGFW%0AL1p2OVVTclNYd0taM3UwMDArSWYwCld4aHFEY1l1K2Y0RVBQNFdIeUV5cFZObDFnMnVQRkxOV2Jq%0AV2pRWjlNTDdzVkc1MnJoQkczSEdvanYzTnk0akRCZnhhUFMzT2dvbW8KMzB1MGc5YnloK1l6V0Vl%0Ad25Kdz0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPC9kczpTaWduYXR1cmU%2BPHNhbWwyOlN1YmplY3Q%2B%0APHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQt%0AZm9ybWF0OnBlcnNpc3RlbnQiPnVybjpkZWNlOnVzZXJpZDpvcmc6ZGVjZTpFQjg5RERCODE0RDA3%0ANTcwRTA0MDFGMEEwNTk5MUMxRDwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0%0AaW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOnNlbmRlci12b3VjaGVz%0AIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJfQzVCQ0FBNkJG%0ARDY2NkM5NzIwNDA1OEFGM0U5NzhCQzEiIE5vdE9uT3JBZnRlcj0iMjAxMy0xMS0xOVQxOToxODow%0ANS4yMjVaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc3RkZWNxYXZ1dGwxLnZhLm5ldXN0YXIuY29tOjI0%0AODUvc2ltcGxlc2FtbC9tb2R1bGUucGhwL3NhbWwvc3Avc2FtbDItYWNzLnBocC9SRVQiLz48L3Nh%0AbWwyOlN1YmplY3RDb25maXJtYXRpb24%2BPC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25z%0AIE5vdEJlZm9yZT0iMjAxMy0xMS0xOVQxNjoxNzo1NS4yMjVaIiBOb3RPbk9yQWZ0ZXI9IjIwMTMt%0AMTEtMTlUMjI6MTg6MDUuMjI1WiI%2BPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPHNhbWwyOkF1%0AZGllbmNlPnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpEU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1sMjpB%0AdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6TExBU1A8L3NhbWwyOkF1ZGllbmNlPjxzYW1s%0AMjpBdWRpZW5jZT51cm46ZGVjZTpvcmc6b3JnOmRlY2U6UkVUPC9zYW1sMjpBdWRpZW5jZT48L3Nh%0AbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBZHZpY2U%2B%0APHNhbWwyOkFzc2VydGlvblVSSVJlZj5odHRwczovL3FhLnEudXZ2dS5jb206NzAwMS9yZXN0LzEv%0AMDcvU2VjdXJpdHlUb2tlbi9Bc3NlcnRpb24vXzBhYThhNDU0LTMzYWItNDcwNC05ZTUwLTRmNmQ1%0AYTkzOWRhYzwvc2FtbDI6QXNzZXJ0aW9uVVJJUmVmPjwvc2FtbDI6QWR2aWNlPjxzYW1sMjpBdXRo%0AblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTMtMTEtMTlUMTY6MTg6MDUuMjI1WiIgU2Vzc2lv%0AbkluZGV4PSJfMGFhOGE0NTQtMzNhYi00NzA0LTllNTAtNGY2ZDVhOTM5ZGFjIj48c2FtbDI6QXV0%0AaG5Db250ZXh0PjxzYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6%0AU0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZDwvc2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2B%0APHNhbWwyOkF1dGhlbnRpY2F0aW5nQXV0aG9yaXR5PnVybjpkZWNlOm9yZzpvcmc6ZGVjZTpjb29y%0AZGluYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BPC9zYW1sMjpBdXRobkNvbnRl%0AeHQ%2BPC9zYW1sMjpBdXRoblN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1s%0AMjpBdHRyaWJ1dGUgTmFtZT0iYWNjb3VudElEIiBOYW1lRm9ybWF0PSJ1cm46ZGVjZTp0eXBlOmFj%0AY291bnRJRCI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9y%0AZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj%0AaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BdXJuOmRlY2U6YWNjb3VudGlkOm9y%0AZzpkZWNlOkVCODlEREI4MTRDMjc1NzBFMDQwMUYwQTA1OTkxQzFEPC9zYW1sMjpBdHRyaWJ1dGVW%0AYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwy%0AOkFzc2VydGlvbj48L3NhbWwyOkFkdmljZT4gICAgIDxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRo%0Abkluc3RhbnQ9IjIwMTEtMDgtMTdUMTU6MzI6MTguMTE5WiIgU2Vzc2lvbkluZGV4PSJEMUI5NUEx%0AMjQzQzNGRkZDMTRFMkJBRkYxMjcxQTlFNzhFMiIgU2Vzc2lvbk5vdE9uT3JBZnRlcj0iMjAxMy0x%0AMS0xOVQyMjoxODowNS4yMjVaIj4gICAgICAgPHNhbWwyOkF1dGhuQ29udGV4dD4gICAgICAgICA8%0Ac2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFj%0AOmNsYXNzZXM6UGFzc3dvcmQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPiAgICAgICAgIDxz%0AYW1sMjpBdXRoZW50aWNhdGluZ0F1dGhvcml0eT51cm46ZGVjZTpvcmc6bmV1c3Rhcjpjb29yZGlu%0AYXRvcjwvc2FtbDI6QXV0aGVudGljYXRpbmdBdXRob3JpdHk%2BICAgICAgIDwvc2FtbDI6QXV0aG5D%0Ab250ZXh0PiAgICAgPC9zYW1sMjpBdXRoblN0YXRlbWVudD4gICA8L3NhbWwyOkFzc2VydGlvbj4g%0APFNpZ25hdHVyZSB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPFNp%0AZ25lZEluZm8%2BPENhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3Lncz%0ALm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIvPjxTaWduYXR1cmVNZXRob2QgQWxn%0Ab3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48UmVm%0AZXJlbmNlIFVSST0iIj48VHJhbnNmb3Jtcz48VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3%0Ady53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L1RyYW5zZm9y%0AbXM%2BPERpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1s%0AZHNpZyNzaGExIi8%2BPERpZ2VzdFZhbHVlPlFGdTJTbTFlYUNoT1dYclNlYXhwaUwxWFZtND08L0Rp%0AZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU%2BUnpzZDNL%0AUmxBOUtmOVkwZGN3UWI3UkhaU2dEMzdtNnR4aTZ3Ri9qSVFCcysyQjhmUzJOQ1psMytsN21abWxk%0Ac0dMbkFrZ1RIV1VKQgo4dzNvNXp4aSttZW5KMG1JdUlKZmJxTDQ5a01VRGw5SkhoUlJ2TE9TRHE1%0Ac05KOEhGc2dkWUxHa09ncmdia3BLbE52TS9xaEcxUHF5CmppeW0wZURQQ2RRTXRObUlYM0hOREtr%0AQlBpajliNG1YdmRISmlWZGZFZ0U0TGVXd3BlNC9iTVNtVnBDTjR5dlY1dlZkY0pWY0ZjY1UKRTZl%0AWkRLOHo3RFNQdmhGYy8wSzRMbktVVmFId1Q2ZnZPT1k2eEdBVTg2b3RjRTNsRDluNTY0eGRZTFNq%0AWUxuSGpndzZLVkxIc3E1dgp4cDJsVmlKenJQblFGUUhiQ3JtMVYvUzN1MTZQcEFOdzVkdHBWMjNY%0AUWlxR3dnUHBkN2hCMVlhYktOZHV0RC8zWjhJWGJ5MDV5S0tXCnE0Vis0K2tUQktMa2RseWNydUJa%0AY2lVc1JWd2I4RXNzMTFLenhNREszNENISXBaSm1Rc3ZSNG0xclp0dEhYb0xYTUZjd0dmNkRTb1cK%0AOEhKbVpWMTJ1ZXRiUkJhTmhxdko0N1BYc3RUZ0VlVzR6Z2t2dHhiMlQvMFNWNUtpYlYyUXE3SDNY%0AMkk0UWl6Z2Vhbk5kYTduZHNQTgpSRVJYQlJRRVVJRDltRTN5WFpTUVA5WjI1WEcwYXJDbzc4cWRW%0AT1dtVndvZExHK3ZHN1RpaWU2SkswRm9reVFCekc0djNhR1V1djBYCk9XcWRBZHdDTDFBbVFBQUI2%0AamthZFlrdThZSUpQdGd0S1RBSUZFKzIvRFNHVURDRk8vRlhLcXBmdWx0QzFneDJYOEw5MEIrMWhG%0ATT08L1NpZ25hdHVyZVZhbHVlPjxLZXlJbmZvPjxYNTA5RGF0YT48WDUwOVN1YmplY3ROYW1lPjEu%0AMi44NDAuMTEzNTQ5LjEuOS4xPSMxNjBmNjY2ZjZmNDA2ZTY1NzU3Mzc0NjE3MjJlNjM2ZjZkLENO%0APXVybjpkZWNlOm9yZzpvcmc6ZGVjZTpSRVQsTD1TdGVybGluZyxTVD1WQSxDPVVTPC9YNTA5U3Vi%0AamVjdE5hbWU%2BPFg1MDlDZXJ0aWZpY2F0ZT5NSUlEenpDQ0F6Z0NBZ1ZpTUEwR0NTcUdTSWIzRFFF%0AQkJRVUFNR294RURBT0JnTlZCQW9UQjA1bGRYTjBZWEl4Q3pBSkJnTlZCQXNUCkFsRkJNUkV3RHdZ%0ARFZRUUhFd2hUZEdWeWJHbHVaekVSTUE4R0ExVUVDQk1JVm1seVoybHVhV0V4Q3pBSkJnTlZCQVlU%0AQWxWVE1SWXcKRkFZRFZRUURFdzF1WlhWemRHRnlMbkZoTG1OaE1CNFhEVEV6TURVek1ERTBNemN5%0ATUZvWERURTRNRFV5T1RFME16Y3lNRm93Y1RFTApNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdU%0AQWxaQk1SRXdEd1lEVlFRSEV3aFRkR1Z5YkdsdVp6RWlNQ0FHQTFVRUF4TVpkWEp1Ck9tUmxZMlU2%0AYjNKbk9tOXlaenBrWldObE9sSkZWREVlTUJ3R0NTcUdTSWIzRFFFSkFSWVBabTl2UUc1bGRYTjBZ%0AWEl1WTI5dE1JSUMKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXp2NVYr%0AbE5UUVJZZGx2VFNCeEVaeFd2anpuaWdrVSs2c2tZRApHNzg5MlAwbGxvdHRpREoyallKUUNCV2Vk%0AV25KZUFoQlZ5TXh1SWJnM1d4YktXWGhNUFgrbGJPUmFMYmJmdGUyRzBJdkNJelR1TmJXCklEalJz%0ANm4yQXBKc3BIRTc5b0FNSDEyeCtad1hHOFlvUi9UVmNVMi9hYjRPd0NOa3MwL2hmMzlTb3MzejBj%0AeXNoczF2SERYWmE2T2wKSy9NNnloV0dydmRZclF2VUVpSzNuMHlpS0VIZ3FnRFoyRlFZM3FQNWZD%0ASEtyeGNIb2JzMmx1aTlxb2pTLzNvU1dBeWl3VTh4NUtWMQprVGh2VE9uZ0ZSMnFOejJwTElhaUtE%0AbnB6ZHZMR1VLaisvbXJOc1RpVU1jMFNWcVRaT3lYdWU4VTI0TDlmVFBuQ0RVLzVSSE9nMDlFCnUy%0AeWMrLzFTYWpsZlpKRGpEa1JnaXJTbEF0dkVLbkdkVzlVYkNDU1o5VUxMRWpydHhzK3gvUVNETnZP%0AWUZzTVhVeGJpUk5Zd0p5QncKdDZEM0FPS0NHUGVlSFRZREtwRER4NmhBMUQyRm91N3pjVGJnRGdU%0AclBtN0kxY3MyR1BBOTZjUzZIR0RuWlFNN2h5QmFlazZiWHpvawo2SW1OQklVdnRYSVdBS3IxSDNF%0AbkZTcDZEQmp2cEVZbUt3cldhU2dVbFM2UXR5MFRyUTI4QS94T2ExbUs2azRqMXRJOFVEckg3N2hO%0ACkxlT2t2ZlF3QTU0QWJ3bS9TaTBWdmxhYjJlR1hTbkxJSGMrOEdyQ1NRQk1OVFNwUFYxYnNONVY0%0AcWllTHgvVnZjMW9tdUxiTGk4WTMKeHBpYzk4OWpnRFJMNXplSXZtWTZPek1kSGJLYWxiNU5PcGFS%0AWXEwQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0JnUUMwVURqVQo4OHlNeUE2WG95alhIRCsw%0ANnpnTkpmUFhwRGQ1dFBXRmpvZnRYcTZ1QWRLMWh6cERiWFNMaDVoMU0vZWdKQkY0aEdjT0RmVlhF%0AM2RhClViL2pYNjFOUkFHeE5TQ1hSQkJtaEE4K29wTHR5WVZWY050TWJQTlJyMm9vaHhnd3NsdEtu%0AUlBkV2kyQ0FrOVRoaFZ2OCtrK3l2YzQKekFVbGZyQmo2MzJDVXc9PTwvWDUwOUNlcnRpZmljYXRl%0APjwvWDUwOURhdGE%2BPC9LZXlJbmZvPjwvU2lnbmF0dXJlPjwvc2FtbDJwOlJlc3BvbnNlPg%3D%3D</con:value></con:property><con:property><con:name>rsamlTargetURL</con:name><con:value>urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</con:value></con:property><con:property><con:name>rsamlSPID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rsamlReturnToURL</con:name><con:value>https://www.wellsfargo.com/</con:value></con:property><con:property><con:name>password</con:name><con:value>Password1</con:value></con:property><con:property><con:name>nodeidFULL</con:name><con:value>urn:dece:org:org:dece:RET</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET</con:value></con:property><con:property><con:name>idpAssertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="e52c7a5f-36d0-4417-888d-079cb2fa3d4d" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-19T22:18:05.225Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="D1B95A1243C3FFFC14E2BAFF1271A9E78E2" SessionNotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D/User/urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>20</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>deceAssertionXML</con:name><con:value><![CDATA[<saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_0aa8a454-33ab-4704-9e50-4f6d5a939dac" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0aa8a454-33ab-4704-9e50-4f6d5a939dac">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tK3ocQ2SadsTFPl+/aADclL6v+8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
I6ItXYyF9UC8Lc1uPULlcxUOl8YiiCnft+IkDhzZS6LnVFJ6PLxSdaV/Zv9USrSXwKZ3u000+If0
WxhqDcYu+f4EPP4WHyEypVNl1g2uPFLNWbjWjQZ9ML7sVG52rhBG3HGojv3Ny4jDBfxaPS3Ogomo
30u0g9byh+YzWEewnJw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5BCAA6BFD666C97204058AF3E978BC1" NotOnOrAfter="2013-11-19T19:18:05.225Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-19T16:18:05.225Z" SessionIndex="_0aa8a454-33ab-4704-9e50-4f6d5a939dac"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audiencelist</con:name><con:value>urn:dece:org:org:dece:4041;urn:dece:org:org:dece:4042</con:value></con:property><con:property><con:name>assertionXMLuser</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_0aa8a454-33ab-4704-9e50-4f6d5a939dac" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0aa8a454-33ab-4704-9e50-4f6d5a939dac">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tK3ocQ2SadsTFPl+/aADclL6v+8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
I6ItXYyF9UC8Lc1uPULlcxUOl8YiiCnft+IkDhzZS6LnVFJ6PLxSdaV/Zv9USrSXwKZ3u000+If0
WxhqDcYu+f4EPP4WHyEypVNl1g2uPFLNWbjWjQZ9ML7sVG52rhBG3HGojv3Ny4jDBfxaPS3Ogomo
30u0g9byh+YzWEewnJw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5BCAA6BFD666C97204058AF3E978BC1" NotOnOrAfter="2013-11-19T19:18:05.225Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-19T16:18:05.225Z" SessionIndex="_0aa8a454-33ab-4704-9e50-4f6d5a939dac"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://qa.s.uvvu.com:7001/security/federation/saml/acs" ID="e52c7a5f-36d0-4417-888d-079cb2fa3d4d" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:RET</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">https://www.wellsfargo.com/</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/10/coordinator">urn:dece:portal:user:urn:dece:userid:org:dece:AAAAAAAAAAAAAAAAAAAAAAA</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi"/>             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer" NotOnOrAfter="2013-11-19T22:18:05.225Z">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z"/>       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_0aa8a454-33ab-4704-9e50-4f6d5a939dac" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0aa8a454-33ab-4704-9e50-4f6d5a939dac">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tK3ocQ2SadsTFPl+/aADclL6v+8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
I6ItXYyF9UC8Lc1uPULlcxUOl8YiiCnft+IkDhzZS6LnVFJ6PLxSdaV/Zv9USrSXwKZ3u000+If0
WxhqDcYu+f4EPP4WHyEypVNl1g2uPFLNWbjWjQZ9ML7sVG52rhBG3HGojv3Ny4jDBfxaPS3Ogomo
30u0g9byh+YzWEewnJw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5BCAA6BFD666C97204058AF3E978BC1" NotOnOrAfter="2013-11-19T19:18:05.225Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-19T16:18:05.225Z" SessionIndex="_0aa8a454-33ab-4704-9e50-4f6d5a939dac"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion></saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="D1B95A1243C3FFFC14E2BAFF1271A9E78E2" SessionNotOnOrAfter="2013-11-19T22:18:05.225Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXML</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_0aa8a454-33ab-4704-9e50-4f6d5a939dac" IssueInstant="2013-11-19T16:18:05.225Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_0aa8a454-33ab-4704-9e50-4f6d5a939dac">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>tK3ocQ2SadsTFPl+/aADclL6v+8=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
I6ItXYyF9UC8Lc1uPULlcxUOl8YiiCnft+IkDhzZS6LnVFJ6PLxSdaV/Zv9USrSXwKZ3u000+If0
WxhqDcYu+f4EPP4WHyEypVNl1g2uPFLNWbjWjQZ9ML7sVG52rhBG3HGojv3Ny4jDBfxaPS3Ogomo
30u0g9byh+YzWEewnJw=
</ds:SignatureValue>
</ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:EB89DDB814D07570E0401F0A05991C1D</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_C5BCAA6BFD666C97204058AF3E978BC1" NotOnOrAfter="2013-11-19T19:18:05.225Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2013-11-19T16:17:55.225Z" NotOnOrAfter="2013-11-19T22:18:05.225Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:DSP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:LLASP</saml2:Audience><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_0aa8a454-33ab-4704-9e50-4f6d5a939dac</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2013-11-19T16:18:05.225Z" SessionIndex="_0aa8a454-33ab-4704-9e50-4f6d5a939dac"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:EB89DDB814C27570E0401F0A05991C1D</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionVersionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionTargetURLIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSubjectConfirmationIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionSessionNotOnOrAfter </con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionReturnToURIIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotOnOrAfterIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNotBeforeIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionNameIDSP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssuerIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionIssueInstant</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionInResponseToIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionDoURIRef</con:name><con:value>false</con:value></con:property><con:property><con:name>actionDestination</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>actionAudienceRestrictionIDP</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>89d6fbbc-d9ec-4088-8168-f6e89f1a2f87</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e164b0b3-5b85-42a1-9128-95f6f38067e8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>cfed714e-5455-441b-afaa-598623bf33fb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d36a6ef7-3c53-4e9e-94fe-21d306f923b1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>30dd8ddf-23af-4297-9ce2-7d0dc3ac63fe</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>377c947e-59f4-4d30-8da5-0e688ae57897</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56ca4b95-83fa-47b0-8b9f-5af7de663ad0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>79fd1309-17de-4708-b5ec-fd6f35921c3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ff8a96c3-81a8-4032-8089-c9ea813f4484</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>439412d7-8946-4310-a210-75cfda13108d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties><con:property><con:name>QC_TestPlanDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value/></con:property><con:property><con:name>QC_TestSet</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testSuite><con:requirements/><con:properties><con:property><con:name>AccountCountry</con:name><con:value>US</con:value></con:property><con:property><con:name>AccountDisplayName</con:name><con:value>RSAML_AccountName20150612_1434107726596</con:value></con:property><con:property><con:name>assertionURIXML</con:name><con:value>&lt;saml2:AssertionURIRef xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">&lt;/saml2:AssertionURIRef></con:value></con:property><con:property><con:name>assertionXMLnode</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z" NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="absc34234234" SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLnode1</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2012/12/coordinator">https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z" NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="absc34234234" SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLnode2</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">   urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>     <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2012/03/coordinator">     https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2012/03/coordinator">     https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"   ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a"   IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"               PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>           2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>       IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7       sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG       iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>           MIICfDCCAeUCAQEwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJn           aW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxGjAYBgNVBAoTEVVsdHJhRE5TLCBOZXVzdGFyMREwDwYD           VQQLEwhVbHRyYUROUzElMCMGA1UEAxMcc3R1bGhkZXVhMS51bHRyYS5uZXVzdGFyLmNvbTEkMCIG           CSqGSIb3DQEJARYVZGV2QHVsdHJhLm5ldXN0YXIuY29tMB4XDTA5MDEyNzE3MjA1M1oXDTE0MDEy           NjE3MjA1M1owXTEZMBcGA1UEAxMQMDcwNDM3QkIwMEY0MEY5OTELMAkGA1UEBhMCVVMxEDAOBgNV           BAgTB0FyaXpvbmExDjAMBgNVBAcTBVRlbXBlMREwDwYDVQQKEwhVbHRyYUROUzCBnzANBgkqhkiG           9w0BAQEFAAOBjQAwgYkCgYEAxsIlsdxAq0VtLlet+csU5ihujDvbiny3BEilT/3xkGsgwWjn7fsl           fZUnPjluJEERUqLwmHFLo2ss0Z2+U8PNXFI2NJ90S99iUU/ZuhiTmRsF24xhXUvHYELsUl+LCpKo           ZAZnL6REgYDeRe5r5HFTv6+U88f01S8bF+fOIuL2MzECAwEAATANBgkqhkiG9w0BAQQFAAOBgQAw           TnifPUz5G5yB/kCmBT3A0NaKzzJCZJUV0AtBGmEi0a6pSqG9CxjY3tnMaxpMbUqyFlPJmmjvzRIv           iTg3ILNhBuupRR5EWxuBWJ9xsQBl5EXDmAWA0nUoBHP4KGmw9E8cHb33rxxK/nd2VjVYnnlUFL9M           BMIgacM0iTaqpz3I8g==</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">       urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">          <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z"     NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z"     SessionIndex="absc34234234"     SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>         urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>         urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLnodeBACKUP</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">   urn:dece:org:org:dece:124</saml2:Issuer>   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">     <ds:SignedInfo>       <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />       <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />       <ds:Reference URI="#e7b6b7ac-764b-421f-b33f-b344b288face">         <ds:Transforms>           <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />           <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">              <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"             PrefixList="dece ds saml2 saml2p xs xsi" />           </ds:Transform>         </ds:Transforms>         <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />         <ds:DigestValue>         sMwf5LCnbVo26JfMALCVs9hdbbU=</ds:DigestValue>       </ds:Reference>     </ds:SignedInfo>     <ds:SignatureValue>     OC8EW2/CgyBUpMTOdlwgj3SZTb6H49LA/4xnlnQw63+HwlN4J20dtM+E1Erv2T2ALHzWIQQBxk9/     QPpIwLCXGI2fmt3BC5vMGI8mzN+pdhfkQZkg688W0ZfDlrJ9eQMS0h1Q66RW5kYscI81rDieCCCn     d4oYlHjGHNkcFTPhBJk=</ds:SignatureValue>   </ds:Signature>   <saml2p:Extensions>     <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">     https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">     https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"   ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a"   IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"               PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>           2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>       IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7       sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG       iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>           MIICfDCCAeUCAQEwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJn           aW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxGjAYBgNVBAoTEVVsdHJhRE5TLCBOZXVzdGFyMREwDwYD           VQQLEwhVbHRyYUROUzElMCMGA1UEAxMcc3R1bGhkZXVhMS51bHRyYS5uZXVzdGFyLmNvbTEkMCIG           CSqGSIb3DQEJARYVZGV2QHVsdHJhLm5ldXN0YXIuY29tMB4XDTA5MDEyNzE3MjA1M1oXDTE0MDEy           NjE3MjA1M1owXTEZMBcGA1UEAxMQMDcwNDM3QkIwMEY0MEY5OTELMAkGA1UEBhMCVVMxEDAOBgNV           BAgTB0FyaXpvbmExDjAMBgNVBAcTBVRlbXBlMREwDwYDVQQKEwhVbHRyYUROUzCBnzANBgkqhkiG           9w0BAQEFAAOBjQAwgYkCgYEAxsIlsdxAq0VtLlet+csU5ihujDvbiny3BEilT/3xkGsgwWjn7fsl           fZUnPjluJEERUqLwmHFLo2ss0Z2+U8PNXFI2NJ90S99iUU/ZuhiTmRsF24xhXUvHYELsUl+LCpKo           ZAZnL6REgYDeRe5r5HFTv6+U88f01S8bF+fOIuL2MzECAwEAATANBgkqhkiG9w0BAQQFAAOBgQAw           TnifPUz5G5yB/kCmBT3A0NaKzzJCZJUV0AtBGmEi0a6pSqG9CxjY3tnMaxpMbUqyFlPJmmjvzRIv           iTg3ILNhBuupRR5EWxuBWJ9xsQBl5EXDmAWA0nUoBHP4KGmw9E8cHb33rxxK/nd2VjVYnnlUFL9M           BMIgacM0iTaqpz3I8g==</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">       urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">          <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z"     NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z"     SessionIndex="absc34234234"     SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>         urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>         urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response> ]]></con:value></con:property><con:property><con:name>assertionXMLnodePROD</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">   urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>     <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">     https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">     https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"   ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a"   IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">                <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"               PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>           2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>       IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7       sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG       iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>           MIICfDCCAeUCAQEwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJn           aW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxGjAYBgNVBAoTEVVsdHJhRE5TLCBOZXVzdGFyMREwDwYD           VQQLEwhVbHRyYUROUzElMCMGA1UEAxMcc3R1bGhkZXVhMS51bHRyYS5uZXVzdGFyLmNvbTEkMCIG           CSqGSIb3DQEJARYVZGV2QHVsdHJhLm5ldXN0YXIuY29tMB4XDTA5MDEyNzE3MjA1M1oXDTE0MDEy           NjE3MjA1M1owXTEZMBcGA1UEAxMQMDcwNDM3QkIwMEY0MEY5OTELMAkGA1UEBhMCVVMxEDAOBgNV           BAgTB0FyaXpvbmExDjAMBgNVBAcTBVRlbXBlMREwDwYDVQQKEwhVbHRyYUROUzCBnzANBgkqhkiG           9w0BAQEFAAOBjQAwgYkCgYEAxsIlsdxAq0VtLlet+csU5ihujDvbiny3BEilT/3xkGsgwWjn7fsl           fZUnPjluJEERUqLwmHFLo2ss0Z2+U8PNXFI2NJ90S99iUU/ZuhiTmRsF24xhXUvHYELsUl+LCpKo           ZAZnL6REgYDeRe5r5HFTv6+U88f01S8bF+fOIuL2MzECAwEAATANBgkqhkiG9w0BAQQFAAOBgQAw           TnifPUz5G5yB/kCmBT3A0NaKzzJCZJUV0AtBGmEi0a6pSqG9CxjY3tnMaxpMbUqyFlPJmmjvzRIv           iTg3ILNhBuupRR5EWxuBWJ9xsQBl5EXDmAWA0nUoBHP4KGmw9E8cHb33rxxK/nd2VjVYnnlUFL9M           BMIgacM0iTaqpz3I8g==</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">       urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">          <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z"     NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z"     SessionIndex="absc34234234"     SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>         urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>         urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response> ]]></con:value></con:property><con:property><con:name>assertionXMLnode_NewVersion</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2015/03/coordinator">https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z" NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="absc34234234" SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLnode_OldVersion</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>         <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2013/06/coordinator">https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2013/06/coordinator">https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z" NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="absc34234234" SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLnode_R2</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:Response xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Consent="urn:oasis:names:tc:SAML:2.0:consent:prior" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443" ID="e7b6b7ac-764b-421f-b33f-b344b288face" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">urn:dece:org:org:dece:124</saml2:Issuer>   <saml2p:Extensions>     <dece:ReturnToURI xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">https://www.neustar.biz</dece:ReturnToURI>     <dece:TargetURL xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator">https://lp3.dev.uvvu.com:8443/ssp/views/mediaPage.jsf</dece:TargetURL>   </saml2p:Extensions>   <saml2p:Status>     <saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success" />   </saml2p:Status>   <saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a" IssueInstant="2011-08-17T15:32:18.119Z" Version="2.0">     <saml2:Issuer>http://c.decellc.com/</saml2:Issuer>     <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">       <ds:SignedInfo>         <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />         <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />         <ds:Reference URI="#6ba167fc-aae3-48ef-8f61-fb52ba3f1f1a">           <ds:Transforms>             <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />             <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">               <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="ds saml2 xs xsi" />             </ds:Transform>           </ds:Transforms>           <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />           <ds:DigestValue>2T5uB44sjIqJIZJIUteW5/73sd0=</ds:DigestValue>         </ds:Reference>       </ds:SignedInfo>       <ds:SignatureValue>IeXZG1o3Twvnlj9PjW4YLml9qwI9BL7ch2uz+D4nnN+vgujdPeKIQZOKlucNuBv98lG0rmtFJho7 sCz3RfMqaJsz2cQHsvIEF75oR2Nsw4ClxOat26e1jobTyMRp8coUpL/lulghFVsa1i2eiiLZSTXG iK8Dy8MHEK+sk3Fm/Pw=</ds:SignatureValue>       <ds:KeyInfo>         <ds:X509Data>           <ds:X509Certificate>MIID0DCCAzkCAgDDMA0GCSqGSIb3DQEBBQUAMGoxCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxEDAOBgNVBAoTB05ldXN0YXIxCzAJBgNVBAsTAlFBMRYwFAYDVQQDEw1uZXVzdGFyLnFhLmNhMB4XDTEyMDkwNjIwNDc1MVoXDTEzMDkwNjIwNDc1MVowcjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlZBMREwDwYDVQQHEwhTdGVybGluZzEjMCEGA1UEAxMadXJuOmRlY2U6b3JnOm9yZzpkZWNlOjQwNDAxHjAcBgkqhkiG9w0BCQEWD2Zvb0BuZXVzdGFyLmNvbTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALMExsuehiIDigkVkTUJUrTBgKQzD9xSMb+ggTU7fPohYbZKc6eW1WcByPGwGRDfiQm78YJtyU0rZyuD1G2fPunQNMY0fRxjAOoTyiyPiIck6t5hTXfzlxUf7vT8yzs0Zl1VGHlTCTeMDiyNR9Aj/5lCW51bZaYCU2GXWeTVqyraR9qcVc/fGST6BBwmjaPWc9D9q3ZKnFJYlRIIN+A94jd+6snx3O9nB+aARb/ADl64XWTC14PHXLS3iwHM9A+kkbXuEMAYGHrN/gjjpg6qX2B62Juf0+SNIzPY6SptvxLaBnT+eWx6zZeNif0CLYM5el0t0/5XLrUmZVaWgKDAtPeKTYTjp4JW7LTuTIg7QxqBD1iTuaEOz0HXN4mS9e4c8RAje8ADQxhu0q/HUA+kACCfOA+piXgK0lggVe8DvpbdRNE7KwvuY2UfnFTarR8YVKq/H1yZYD9NZbEtaDZzZB7iYnYfVR8xBxqkvPHTlezVf62MWvTasF2BTqVukGroA8jM2eKX3rLEgmT+MAAiar+UE3cfRZAs2BVvmw97St2UNwZpViYxMBo7Pv/Oa8/k5BkmPt7FeqYYNJ/V8Va2RjsF3MnGjB5ey3eHojJ21mpBzTTcY0IS2+Dk6H1GtLTeOVI3YnmAmuOcHTWYNtchKANpGuvfu9Qbp5Rq3o56EXBlAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAlXKIWoSEhtX1cbceIRSTDakzqVLJTzPXynnsmqVS9ckr/t+Ba3l4bmP3vwJTw+CzQ+HWbUGBUjKByO/l1tAHiY1x0LjUlbD+KIfQPywh2fYukqbbXGI7jI1GAZ4IL8W1x/P3Wyq/52SJ6NJUZHW4sZ0Q0YAjM1RxTGCYHr88xSg=</ds:X509Certificate>         </ds:X509Data>       </ds:KeyInfo>     </ds:Signature>     <saml2:Subject>       <saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:9934581B501E0F08E0401F0A0F994829</saml2:NameID>       <saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">         <saml2:SubjectConfirmationData NotOnOrAfter="2011-08-18T15:32:18.119Z" />       </saml2:SubjectConfirmation>     </saml2:Subject>     <saml2:Conditions NotBefore="2011-08-17T15:32:08.119Z" NotOnOrAfter="2021-08-17T15:32:18.119Z">       <saml2:AudienceRestriction>         <saml2:Audience>urn:dece:org:org:dece:124</saml2:Audience>       </saml2:AudienceRestriction>     </saml2:Conditions>     <saml2:Advice>%%REPLACEME%%</saml2:Advice>     <saml2:AuthnStatement AuthnInstant="2011-08-17T15:32:18.119Z" SessionIndex="absc34234234" SessionNotOnOrAfter="2011-08-17T15:32:18.119Z">       <saml2:AuthnContext>         <saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef>         <saml2:AuthenticatingAuthority>urn:dece:org:neustar:coordinator</saml2:AuthenticatingAuthority>       </saml2:AuthnContext>     </saml2:AuthnStatement>   </saml2:Assertion> </saml2p:Response>]]></con:value></con:property><con:property><con:name>assertionXMLRSAMLLogout</con:name><con:value><![CDATA[<?xml version="1.0" encoding="utf-8"?> <saml2p:LogoutRequest xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol" Destination="https://lp3.dev-web-rs01-s01.uvvu.com:8443/rest/1/0/slo" ID="711d1da3-5270-42a9-a0a1-6af139d72f23" IssueInstant="2011-08-30T16:42:59.386Z" Reason="Head hurts" Version="2.0">   <saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">   urn:dece:org:org:dece:124</saml2:Issuer>   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">     <ds:SignedInfo>       <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />       <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />       <ds:Reference URI="#711d1da3-5270-42a9-a0a1-6af139d72f23">         <ds:Transforms>           <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" />           <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">              <ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"             PrefixList="ds saml2 saml2p" />           </ds:Transform>         </ds:Transforms>         <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" />         <ds:DigestValue>         wUM/+AhmEv8Z+JcIVrgin8gerwM=</ds:DigestValue>       </ds:Reference>     </ds:SignedInfo>     <ds:SignatureValue>     rgmnOowTnYozTYlkOlW2ThF53ivmmyUWakjxhvV2lkY307dob+5wK0Yf4UjLxmpGrLoqyTk+4NwQ     zaOpaZ3s0h2sDYyinZT9evBhfjFDFgz+tSENVai8TSrNvTCWsiIKuTiZJ0xHjwWlZE6S6U2kbab9     745wAVm3/KrH4Ns0jl8=</ds:SignatureValue>   </ds:Signature>   <saml2:NameID xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"   Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">   9934581B501E0F08E0401F0A0F994829</saml2:NameID>   <saml2p:SessionIndex xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol">   absc34234234</saml2p:SessionIndex> </saml2p:LogoutRequest> ]]></con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>dec2010</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>deqa1</con:value></con:property><con:property><con:name>fileAuthnRequestPage</con:name><con:value>C:\\Shikha\\RSAML\\authnrequest.html</con:value></con:property><con:property><con:name>fileDECEAssertionXML</con:name><con:value>C:\\Temp\\deceassertion.xml</con:value></con:property><con:property><con:name>fileIDPAssertionXML</con:name><con:value>C:\\Temp\\baseassertion.xml</con:value></con:property><con:property><con:name>fileKeyStorePath</con:name><con:value>C:\Certs\QALP2</con:value></con:property><con:property><con:name>fileNameAuthnRequest</con:name><con:value>C:\\Shikha\\RSAML\\authnrequest.xml</con:value></con:property><con:property><con:name>fileNameAuthnRequestURL</con:name><con:value>C:\\Shikha\\RSAML\\authnrequestURL.xml</con:value></con:property><con:property><con:name>fileNameKeystore</con:name><con:value>C:\Certs\RET_2.jks</con:value></con:property><con:property><con:name>fileNameSignedAuthnRequest</con:name><con:value>C:\\Shikha\\RSAML\\signedauthnrequest.xml</con:value></con:property><con:property><con:name>fileNameSignedSubjectQuery</con:name><con:value>C:\\Shikha\\RSAML\\signedsubjectquery.xml</con:value></con:property><con:property><con:name>fileNameSubjectQuery</con:name><con:value>C:\\Shikha\\RSAML\\subjectquery.xml</con:value></con:property><con:property><con:name>fileReverseSamlLogoutPage</con:name><con:value>C:\\Shikha\\RSAML\\reverseSAMLLogout.html</con:value></con:property><con:property><con:name>fileReverseSamlPage</con:name><con:value>C:\RSAML\reverseSAML.html</con:value></con:property><con:property><con:name>fileRSAMLLogoutSigned</con:name><con:value>C:\\Shikha\\RSAML\\rsamllogoutsigned.xml</con:value></con:property><con:property><con:name>fileRSAMLLogoutXML</con:name><con:value>C:\\Shikha\\RSAML\\rsamllogout.xml</con:value></con:property><con:property><con:name>fileSamlResponseSigned</con:name><con:value>C:\RSAML\samlresponsesigned.xml</con:value></con:property><con:property><con:name>fileSamlResponseXML</con:name><con:value>C:\RSAML\samlresponse.xml</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:deqa2/dece2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>KeyStoreAlias</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>KeyStorePassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>NODEACCID</con:name><con:value>urn:dece:accountid:org:dece:1850EEEF37A83DE6E05307991F0A46FD</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>NODEUSERID</con:name><con:value>urn:dece:userid:org:dece:1850EEEF37A93DE6E05307991F0A46FD</con:value></con:property><con:property><con:name>QC_BulkUpdate</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>_DOMAIN</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>******</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>_Project</con:value></con:property><con:property><con:name>QC_ProjectPath</con:name><con:value/></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>disabled</con:value></con:property><con:property><con:name>QC_RunName</con:name><con:value/></con:property><con:property><con:name>QC_soapUI_ARGS</con:name><con:value/></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\sample_testlab</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\sample_testplan</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>sample_testset</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://yourserver:8080/qcbin</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>_qcuser</con:value></con:property><con:property><con:name>rsamlTargetURNMediaProfile</con:name><con:value>urn:dece:portal:library</con:value></con:property><con:property><con:name>SAMLSigAlgsha1</con:name><con:value>http://www.w3.org/2000/09/xmldsig#rsa-sha1</con:value></con:property><con:property><con:name>schemaCoordinator</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>stsaudience</con:name><con:value/></con:property><con:property><con:name>targetAuthnDestination</con:name><con:value>https://qa.p.uvvu.com:7001/rest/1/02/loginservice/login</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa2.p.uvvu.com</con:value></con:property><con:property><con:name>targetHostportal</con:name><con:value>qa2.s.uvvu.com</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetjdbc</con:name><con:value>jdbc:oracle:thin:deqa2/dece2010@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>443</con:value></con:property><con:property><con:name>targetPortportal</con:name><con:value>443</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP2</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa2.p.uvvu.com</con:value></con:property><con:property><con:name>tokentypeUsernamepassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>urnCoodinator</con:name><con:value>urn:dece:org:neustar:coordinator</con:value></con:property><con:property><con:name>urntokenType_userpassword</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>urnUser</con:name><con:value>urn:dece:userid:org:dece:</con:value></con:property><con:property><con:name>UserName</con:name><con:value>RSAML_UserName20150612_1434107726596</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>02</con:value></con:property><con:property><con:name>targetPHost</con:name><con:value>qa2.p.uvvu.com</con:value></con:property><con:property><con:name>targetQHost</con:name><con:value>qa2.q.uvvu.com</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>